directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | INTERFACE | OBJECT

input AccountListInput {
  accountType: AccountType
  customerName: String
  limit: Int!
  page: Int!
  self: Boolean!
}

type AccountListOutput {
  accountName: String
  accountType: AccountType
  balance: Float
  chamber: ChamberByIdRef
  chamberId: String
  createdAt: String
  customerName: String
  id: String!
  isBulkPayment: Boolean
  isCampaignAccount: Boolean
  maskAccountNumber: String
  masterWalletId: String
  meta: BankMeta
  microDeposits: [VerifyMicroDeposit]
  paymentChannel: paymentChannelsEnum
  primary: Boolean!
  status: String
  tokenStatus: BankTokenStatus
  updatedAt: String
  userId: UserOutput
  walletName: String
}

type AccountListOutputV2 {
  count: Int!
  data: [AccountListOutput]!
}

type AccountLogsOutput {
  _id: String
  accountId: String
  operationType: String
  target: String
  updatedAt: Date
  updatedBy: UserOutput
  updates: JSON
}

input AccountRoutingInput {
  accountNumber: String!
  accountType: DwollaAccountType!
  name: String!
  routingNumber: String!
}

enum AccountType {
  BANK
  CARD
  SUB_WALLET
  WALLET
}

type ActiveNoumInvitation {
  _id: ID!
  invitedAt: ISODate!
}

input AdCampaignAudienceInput {
  category: [String!]
  moreText: String
  targetLanguage: [String]!
  targetLocation: [String]!
}

type AdCampaignAudienceOutput {
  category: [String]
  moreText: String
  targetLanguage: [String]
  targetLocation: [String]
}

enum AdCampaignBudgetType {
  TOTAL_BUDGET
  TOTAL_DAILY_BUDGET
}

input AdCampaignCsvReportCreateInput {
  fileHeaders: String!
  filters: [CommonFilter]!
  search: String
}

type AdCampaignCsvReportListOutput {
  count: Int
  data: [RiseReportOutput]
}

type AdCampaignCsvReportOutput {
  _id: ID
  createdAt: ISODate
  filters: JSONObject
  stage: CsvReportStage
  status: CsvReportStatus
  type: RiseReportTypes
  updatedAt: ISODate
}

input AdCampaignFilter {
  campaignTitle: String!
  noumIds: [ID!]
  status: [String!]
}

enum AdCampaignGoalEnum {
  GAIN_CONNECTED_USERS_AND_FOLLOWERS
  GET_QUICK_QUESTIONS_ANSWERS
  INCREASE_NOUM_VISIBILITY
  OTHER
}

input AdCampaignInput {
  audience: AdCampaignAudienceInput!
  budgetAmount: Float!
  budgetType: AdCampaignBudgetType!
  goals: [AdCampaignGoalEnum!]
  noumId: ID!
  otherGoals: String
  startDate: ISODate!
  title: String!
}

enum AdCampaignInputStatus {
  COMPLETED
  IN_ACCEPTANCE
  IN_REVIEW
  LIVE
  PAID
  PAYMENT_FAILED
  PENDING
  REJECTED
}

type AdCampaignOffer {
  _id: ID!
  campaignId: ID!
  clicksWeekly: Int
  costTotal: Float
  costWeekly: Float
  cpc: Float
  createdAt: ISODate!
  createdBy: UserOutput
  endAt: ISODate
  goalConnectedUsers: AdCampaignOfferGoalsConnectedUsers
  goalNoumVisibility: AdCampaignOfferGoalsNoumVisibility
  message: String
  oid: Int!
  reachTotal: Int
  rejectReason: String
  sentAt: ISODate
  startAt: ISODate
  status: EnumAdCampaignOfferStatus!
  updatedAt: ISODate!
  updatedBy: UserOutput
}

type AdCampaignOfferGoalsConnectedUsers {
  currentFollowers: Int
  currentUsers: Int
  predictedFollowers: Int
  predictedUsers: Int
}

input AdCampaignOfferGoalsConnectedUsersInput {
  currentFollowers: Int!
  currentUsers: Int!
  predictedFollowers: Int!
  predictedUsers: Int!
}

type AdCampaignOfferGoalsNoumVisibility {
  currentViews: Int
  predictedViews: Int
}

input AdCampaignOfferGoalsNoumVisibilityInput {
  currentViews: Int!
  predictedViews: Int!
}

input AdCampaignOfferInput {
  campaignId: ID!
  clicksWeekly: Int!
  costTotal: Float!
  costWeekly: Float!
  cpc: Float!
  endAt: ISODate!
  goalConnectedUsers: AdCampaignOfferGoalsConnectedUsersInput!
  goalNoumVisibility: AdCampaignOfferGoalsNoumVisibilityInput!
  message: String
  offerId: ID
  reachTotal: Int!
  send: Boolean
  startAt: ISODate!
}

type AdCampaignOfferPaginated {
  count: Int!
  data: [AdCampaignOffer!]!
}

type AdCampaignOutput {
  _id: String
  adId: String
  audience: AdCampaignAudienceOutput
  budgetAmount: Float
  budgetType: String
  createdAt: ISODate!
  createdBy: UserOutput
  endDate: ISODate
  goals: [String]
  isDeleted: Boolean
  noumId: SpaceOutput
  otherGoals: String
  paymentRef: PaymentOutput
  paymentRefHistory: [String]
  paymentRefStatus: String
  startDate: ISODate
  status: String
  title: String
  updatedAt: ISODate!
  updatedBy: UserOutput
}

type AdCampaignOutputPaginated {
  count: Int
  data: [AdCampaignOutput]
}

input AdCampaignReportInput {
  _id: ID
  campaignId: ID!
  clientMessage: String
  metrics: AdCampaignReportMetricsInput!
  reportDate: ISODate!
  status: AdCampaignReportStatus!
}

input AdCampaignReportMetricsInput {
  avgCPC: Float!
  clicks: Float!
  cost: Float!
  ctr: Float!
  impressions: Float!
}

type AdCampaignReportMetricsOutput {
  avgCPC: Float
  clicks: Float
  cost: Float
  ctr: Float
  impressions: Float
}

type AdCampaignReportOutput {
  _id: ID
  campaignId: String
  clientMessage: String
  createdAt: ISODate
  createdBy: UserOutput
  isDeleted: Boolean
  metrics: AdCampaignReportMetricsOutput
  reportDate: ISODate
  reportId: ID
  status: String
  updatedAt: ISODate
  updatedBy: UserOutput
}

enum AdCampaignReportStatus {
  DRAFT
  SENT
}

type AdCampaignReportsOutputPaginated {
  count: Int
  data: [AdCampaignReportOutput]
}

input AdCampaignSettingsInput {
  settingsType: AdCampaignSettingsType!
}

type AdCampaignSettingsOutput {
  settingsType: String
  settingsValue: JSONObject
}

enum AdCampaignSettingsType {
  AD_CAMPAIGN_STATUS
}

input AdEnabledNoumFilter {
  slug: String
}

input AddNewNoumContactInput {
  apartmentNo: String
  city: String
  companyName: String
  country: String
  displayName: String!
  email: String
  fullName: String
  state: String
  street: String
  title: String
  userId: ID
  zipCode: String
}

input AddNoumFileInput {
  description: String
  fileSize: Int!
  fileUrl: String!
  filesManagerElementId: ID!
  name: String!
  visibilityRoles: [ID!]!
}

input AddNoumLayoutToolInput {
  bodyContent: String
  bodyContentJson: JSONObject
  bodyContentType: BodyContentEnum!
  columnId: ID!
  elementType: ElementTypeEnum!
  headerContent: String
  meta: JSONObject
  position: Int
}

input AddPaymentProviderInput {
  available: Boolean!
  chargePercentage: Float!
  chargeValue: Float!
  feeAppliedTo: FeeApplied
  flowOfFunds: FlowofFundsEnum!
  invoiceFeeAppliedTo: FeeApplied
  payeeCurrency: CurrencyEnum!
  payerCurrency: CurrencyEnum!
  paymentMethod: PaymentProviderMethodEnum!
  preference: Int!
  provider: paymentChannelsEnum!
  settlementPeriod: SettlementPeriodEnum!
  source: PaymentProviderSourceEnum!
  target: PaymentProviderSourceEnum!
}

input AddressInput {
  apartment: String
  city: String
  state: String
  street: String
  zipcode: String
}

input AddressInputRise {
  apartment: String
  city: String
  state: String
  street: String
  zipcode: String
}

type AddressOutput {
  apartment: String
  city: String
  state: String
  street: String
  zipcode: String
}

type AdminGroupOutput {
  ADMIN: GroupOutput
  MEMBER: GroupOutput
}

enum AdminInviteListInviteStatus {
  received
  requested
}

enum AdminReportType {
  AD_CAMPAIGN
  CONTRACT
  CQ_FORM_FIELD_RESPONSE
  CQ_FORM_FIELD_SCORE
  CQ_HISTORICAL
  CQ_USER_DATA
  INVOICE
  RISE_CLASS_APPLICATION
  SOW
}

type AdminReportsOutputCollection {
  count: Int
  data: [AdminReportsOutputType]
}

type AdminReportsOutputType {
  _id: ID
  files: [String]
  filters: Json
  generatedBy: String
  reportType: AdminReportType
  stage: String
  status: String
}

enum AllCurrencyEnum {
  AED
  AFN
  ALL
  AMD
  ANG
  AOA
  ARS
  AUD
  AWG
  AZN
  BAM
  BBD
  BDT
  BGN
  BHD
  BIF
  BMD
  BND
  BOB
  BRL
  BSD
  BTN
  BWP
  BYN
  BZD
  CAD
  CDF
  CHF
  CLP
  CNY
  COP
  CRC
  CUP
  CVE
  CZK
  DJF
  DKK
  DOP
  DZD
  EGP
  ERN
  ETB
  EUR
  FJD
  FKP
  GBP
  GEL
  GHS
  GIP
  GMD
  GNF
  GTQ
  GYD
  HKD
  HNL
  HRK
  HTG
  HUF
  IDR
  ILS
  INR
  IQD
  IRR
  ISK
  JMD
  JOD
  JPY
  KES
  KGS
  KHR
  KMF
  KPW
  KRW
  KWD
  KYD
  KZT
  LAK
  LBP
  LKR
  LRD
  LSL
  LYD
  MAD
  MDL
  MGA
  MKD
  MMK
  MNT
  MOP
  MRO
  MUR
  MVR
  MWK
  MXN
  MYR
  MZN
  NAD
  NGN
  NIO
  NOK
  NPR
  NZD
  OMR
  PAB
  PEN
  PGK
  PHP
  PKR
  PLN
  PYG
  QAR
  RON
  RSD
  RUB
  RWF
  SAR
  SBD
  SCR
  SDG
  SEK
  SGD
  SHP
  SLL
  SOS
  SRD
  STD
  SVC
  SYP
  SZL
  THB
  TJS
  TMT
  TND
  TOP
  TRY
  TTD
  TWD
  TZS
  UAH
  UGX
  USD
  UYU
  UZS
  VEF
  VND
  VUV
  WST
  XAF
  XCD
  XOF
  XPF
  YER
  ZAR
  ZMW
  ZWL
}

type AllNotesOutput {
  data: [Note]
  total: Int
}

input AllNoumsContactsInput {
  limit: Int
  offset: Int
  query: String
  status: NoumContactStatus
}

type AllReferralInvitee {
  count: Int
  data: [ReferralInvite]
}

type AllTransactionLinksOutput {
  self: String
}

type AllTransactionParentResponseOutput {
  environment: String
  response_desc: String
}

type AllTransactionResponseOutput {
  authorization_code: Int
  response_code: String
}

type AllTransactionsResultOutput {
  action: String
  authorization_amount: Int
  authorization_code: Int
  billing_address: TransactionAddressOutput
  echeck: TransactionEcheckOutput
  entered_by: String
  links: TransactionLinksOutput
  location_id: String
  organization_id: String
  received_date: String
  response: AllTransactionResponseOutput
  status: String
  transaction_id: String
}

type AmountDueOutput {
  amountDue: String
  dueDate: String
  indicatorType: IndicatorEnum
  statementUrl: String
}

type AnswerOptions {
  answer: String
  description: String
}

type AnswerOutput {
  _id: ID
  body: String
  createdAt: ISODate
  spaceId: ID
  tipDetails: [TipOutput!]
  updatedAt: ISODate
  user: UserOutput
}

type AnswersOutputResponse {
  data: [AnswerOutput]
  totalCount: Int
}

type AppActivitiesOutput {
  count: Int
  data: [AppActivity]
}

type AppActivity {
  _id: ID
  createdAt: Date
  payload: AppActivityPayload
  sourceNoum: SpaceOutput
  sourceUser: UserOutput
  targetNoum: SpaceOutput
  targetUser: UserOutput @deprecated(reason: "Use targetUsers instead")
  targetUsers: [UserOutput]
  type: AppActivityTypes
  updatedAt: Date
}

input AppActivityFilter {
  sourceNoum: ID
  sourceUser: ID
  targetNoum: ID
  targetUser: ID
  targetUsers: [ID]
  type: AppActivityTypes
  types: [AppActivityTypes]
}

input AppActivityInput {
  payload: AppActivityPayloadInput
  sourceNoum: ID
  sourceUser: ID
  targetNoum: ID
  targetUser: ID
  type: AppActivityTypes
}

type AppActivityPayload {
  conversation: ConversationActivity
  event: EventActivity
  noumMember: NoumMember
  payment: PaymentActivity
  post: PostActivity
}

input AppActivityPayloadInput {
  conversation: ID
  event: EventActivityInput
  noumMember: ID
  payment: PaymentActivityInput
  post: ID
}

enum AppActivityTypes {
  EVENT_HOSTED
  MEMBERS_INVITED
  MESSAGE_SENT
  OTHER
  POST_CREATION
  TRANSACTION
}

input ApplicationFilter {
  status: ApplicationResultStatusAdmin
}

type ApplicationResult {
  _id: ID!
  noumId: SpaceOutput
  parentNoumId: SpaceOutput
  questions: [JSONObject]
  resultJSON: JSONObject
  score: Int
  status: ApplicationResultStatusAdmin
  uid: UserOutput
}

input ApplicationResultInput {
  notifyReviewer: NotifyReviewerInput
  resultJSON: JSONObject
  score: Int
  status: ApplicationResultStatus
}

input ApplicationResultInputAdmin {
  resultJSON: JSONObject
  score: Int
  status: ApplicationResultStatusAdmin
}

type ApplicationResultResponse {
  count: Int
  data: [ApplicationResult]
}

enum ApplicationResultStatus {
  INPROGRESS
  SUBMITTED
}

enum ApplicationResultStatusAdmin {
  APPROVED
  INPROGRESS
  INREVIEW
  REJECTED
  SUBMITTED
}

input AskForReferencePayload {
  capacity: NoumReferenceCapacity!
  providerEmail: String!
  providerName: String!
}

type AssessmentPDFOutput {
  assessmentPDFUrl: String
  message: String
  success: Boolean
}

type Attendees {
  chamberId: ChamberByIdRef
  invitationId: ID
  invitationStatus: InvitationStatus
  userId: UserOutput
  userRole: UserRole
}

type AttendeesMeta {
  attendeesCount: Int
  blockedCount: Int
  pendingCount: Int
}

enum AttendeesType {
  ALL
  CONNECTED
  OTHERS
}

type AvailableDerivatives {
  category: String
  derivatives: [UnderwritingDervDatapoint]
}

type AvailableNoumRole {
  _id: ID!
  description: String!
  name: String!
}

input AvailablePlansFilterInput {
  familyName: String
  planStatus: PLAN_STATUS
  planVisibility: Boolean
}

type BankAccountBalance {
  balance: CurrencyData
  clientAccountId: String
  id: String
  maskAccountNumber: String
}

type BankAccountOutput {
  accountNumber: String
  accountSubType: String
  accountType: String
}

type BankDetailsOutput {
  accountNumber: String
  accountSubType: String
  accountType: String
}

type BankListOutput {
  accountDetails: [BankDetailsOutput]
  accountNumber: String
  accountSubType: String
  accountType: String
  id: String
  isExpired: Boolean
  logo: String
  name: String
}

type BankMeta {
  name: String
  orgLogo: String
  orgName: String
}

enum BankTokenStatus {
  ACTIVE
  EXPIRED
  PENDING
}

type BasicConversationItem implements ConversationItem {
  conversation: ConversationOutput
  last_updatedAt: Date
  unread: Int
}

type BelvoAccessToken {
  access: String
  refresh: String
}

input BillingAddressInpuType {
  city: String
  company_name: String
  country: String
  country_code: String
  email: String
  first_name: String
  last_name: String
  line1: String
  line2: String
  phone: String
  postal_code: String
  state: String
  state_code: String
  user_id: String!
}

type BlockedCountry {
  code: String
  name: String
}

type BlockedCountryOutput {
  count: Int
  data: [BlockedCountry]
}

enum BodyContentEnum {
  DOC
  HTML
  IMAGE
  JSON
  TEXT
  URL
  VIDEO
}

type BusinessSearch {
  createdAt: String
  customer: CustomerOutput
  customerId: String
  datasources: Json
  id: ID
  input: BusinessSearchOutput
  modules: Json
  user: UserOutput
  userId: ID
}

input BusinessSearchInput {
  city: String
  customerId: String
  geo: Boolean
  name: String
  phone: String
  state: String
  street: String
  subcode: String
  taxId: String
  uid: ID
  zip: String
}

type BusinessSearchOutput {
  city: String
  customerId: String
  geo: Boolean
  name: String
  phone: String
  state: String
  street: String
  subcode: String
  taxId: String
  uid: String
  zip: String
}

enum CONVERSATIONTYPEENUMFORADMIN {
  ALL
  OTHERS
  SELF
}

type CQForm {
  completeness: Int
  createdAt: String
  description: String
  details: Json
  formId: String
  formType: String
  investability: Int
  notes: String
  score: String
  status: String
  updatedAt: String
}

input CQFormAdminInput {
  form: Json
  noumId: ID!
  qualityIndex: CQ_QUALITY
  status: String
  uid: ID!
}

input CQFormInput {
  form: Json
  noumId: ID!
  status: String
}

type CQFormOutput {
  createdAt: String
  forms: [CQForm]
  noumId: ID
  qualityIndex: String
  status: String
  uid: ID
  updatedAt: String
}

type CQGenerateSummary {
  message: String
  success: Boolean
}

type CQLogsOutput {
  count: Int
  data: [CQScoreLogs]
  error: String
}

type CQNote {
  createdAt: String
  noteId: ID
  notes: String
  uid: ID
  underwriter: UserOutput
  updatedAt: String
  updatedBy: UserOutput
}

input CQNoteInput {
  noteId: String
  notes: String!
  uid: ID!
}

type CQNotesList {
  count: Int
  data: [CQNote]
}

type CQQualityAll {
  current: CQ_QUALITY
  previous: CQ_QUALITY
}

type CQQualityLabel {
  label: String
  value: String
}

type CQQualityLogs {
  createdAt: String
  noumId: ID
  quality: CQQualityAll
  uid: ID
  underwriter: UserOutput
}

type CQQualityLogsOutput {
  count: Int
  data: [CQQualityLogs]
  error: String
}

type CQScoreLogs {
  createdAt: String
  reason: String
  score: Int
  uid: ID
  underwriter: UserOutput
}

type CQSettings {
  _id: ID
  settings: Json
  settingsType: CQ_SETTINGS
}

type CQSummaryReport {
  data: CQSummaryReportData
  error: String
}

type CQSummaryReportData {
  graph: Json
  report: Json
}

type CQUserList {
  createdAt: String
  firstName: String
  forms: [CQForm]
  lastName: String
  noumId: String
  qualityIndex: String
  status: String
  uid: UserOutput
  updatedAt: String
  userStatus: String
}

type CQUserOutput {
  count: Int
  data: [CQUserList]
  error: String
}

input CQUserQualityUpdateInput {
  noumId: String
  qualityIndex: CQ_QUALITY
  source: CQ_QUALITY_UPDATION_SOURCE
  uid: String
}

type CQUserQualityUpdateOutput {
  message: String
  success: Boolean
  uid: String
}

enum CQ_QUALITY {
  COULD_BE_FINANCEABLE
  FINANCEABLE
  INTERNAL_USER
  INVESTABLE
  NOT_FINANCEABLE
  NOT_SET
}

enum CQ_QUALITY_UPDATION_SOURCE {
  EXTERNAL
  INTERNAL
}

enum CQ_SETTINGS {
  BUSINESS_PLAN_UPLOAD
  BUSINESS_QUESTIONNARE
  FINANCE_CAPITAL
  FINANCIAL_CASHFLOW_QUESTIONNARE
  FINANCIAL_CREDIT_QUESTIONNARE
  IDENTITY
  NATIVE_CAPITAL
  RISE_BUSINESS_QUESTIONNARE
  RISE_FINANCE_CAPITAL_QUESTIONNARE
}

enum CQ_STATUS {
  IN_COMPLETE
  PROCESSED
  SUBMITTED
}

enum CacheControlScope {
  PRIVATE
  PUBLIC
}

type CampaignAccountOutput {
  accountName: String
  accountType: AccountType
  customerName: String
  id: ID!
  maskAccountNumber: String
  primary: Boolean
  walletName: String
}

enum CampaignAudienceTarget {
  ENTIRE_COMMUNITY
  FOLLOWERS_OF_MY_NOUMS
  MY_CIRCLE
  MY_NOUMS
}

type CapitalquotientMutations {
  addCQModelCoefficients(input: String): Boolean
  addModifyCQNote(input: CQNoteInput): CQNote
  cqHistoricalReportCreate(date: String!): Boolean
  generateCQSummaryReport(secret: String): CQGenerateSummary
  generateScoreline(input: ScoreLineInput): ScoreLineOutput
  generateUserCQ(input: CQFormAdminInput): CQFormOutput
  submitCQForm(input: CQFormInput): CQFormOutput
  updateNoumenaScore(input: NoumenaScoreInput): NoumenaScoreOutput
  updateNoumenaScoreVisibility(input: NoumenaScoreVisibilityInput): NoumenaScoreOutput
  updateUserQualityIndex(input: CQUserQualityUpdateInput): CQUserQualityUpdateOutput
}

type CapitalquotientQueries {
  cqHistoricalReportFetchAll(limit: Int, offset: Int): UnderwritingCsvReportOutput
  cqHistoricalReportSignedUrl(id: ID!): String
  getAllCQLogsByUser(userId: String): CQLogsOutput
  getCQDetails: CQFormOutput
  getCQDetailsByUser(userId: ID!): CQFormOutput
  getCQLogsByUser(limit: Int, offset: Int, userId: String): CQLogsOutput
  getCQModelCoefficients: Json
  getCQNotesByUser(limit: Int, offset: Int, sortBy: SortUnderwritingReportEnum, userId: ID!): CQNotesList
  getCQQualityLabels: [CQQualityLabel]
  getCQQualityLogsByUser(limit: Int, offset: Int, userId: String): CQQualityLogsOutput
  getCQSettings(settingsType: CQ_SETTINGS): CQSettings
  getCQSummaryReports(limit: Int, offset: Int): CQSummaryReport
  getCQUsers(status: String): [CQUserList]
  getCQUsersPaginated(limit: Int, offset: Int, search: String, status: CQ_STATUS): CQUserOutput
  getNoumenaScore: NoumenaScoreOutput
  getNoumenaScoreByNoumId(noumId: ID!): NoumenaScoreOutputByNoumId
  getNoumenaScoreByUser(userId: ID!): NoumenaScoreOutput
  getScoreLines(scoreId: ID!): [ScoreLineOutput]
  pingCQ: String
}

type CategoryWithSkills {
  _id: ID!
  name: String!
  skills: [Skill]
}

type ChamberAuthors {
  count: Int
  data: [UserOutput]
}

type ChamberByIdRef {
  _id: ID!
  fonts: JSONObject
  name: String
  profileImage: String
  profileImageThumbnail: String
  theme: ThemeOutput
  type: String
  uid: UserOutput
}

type ChamberByUserIdRef {
  _id: ID
  name: String
  type: String
  uid: UserOutput
  userId: ID
}

input ChamberFiltersAdmin {
  categoryIds: [ID]
  ownerIds: [ID]
  search: String
  spotLight: Boolean
  spotLightForAll: Boolean
  userIds: [ID]
}

input ChamberPaginationInput {
  limit: Int
  offset: Int
}

type ChamberPost {
  category: PostCategory
  content: TypeAny
  resolutions: [ResolutionOutput]
  thumbnail: TypeAny
}

input ChamberPostContentInput {
  category: PostCategory
  content: InputAny
  thumbnail: InputAny
}

input ChamberPostInput {
  chamberId: ID!
  groupId: ID
  post: ChamberPostContentInput
  tags: [TagsInput]
  text: String
  visibility: PostVisibility
}

type ChamberPostOutput {
  _id: ID!
  chamberId: ID
  comments: [Comments]
  commentsCount: Int
  createdAt: Date
  groupId: ID
  isPinned: Boolean
  pinnedTimestamp: Date
  post: ChamberPost
  postStatus: PostStatus
  reactions: [Reaction]
  reactionsCount: Int
  reports: [ReportOutput]
  tags: [TagsOutput]
  text: String
  uid: UserOutput
  updatedAt: Date
  userReaction: ReactionCategory
  visibility: PostVisibility
}

type ChamberPostOutputData {
  count: Int
  data: [ChamberPostOutput]
}

input ChambersMicroservicePaginationPayload {
  limit: Int
  offset: Int
}

type ChameleonBankListOutput {
  accountDetails: [BankAccountOutput]
  accountNumber: String
  accountSubType: String
  accountType: String
  id: String
  isExpired: Boolean
  logo: String
  name: String
  status: String
}

input ChangeNoumMemberRoleInput {
  memberIDs: [ID!]!
  roleId: ID!
  walletLimitAmount: Int
  walletLimitType: WalletLimitType
}

type CoManagerStatistics {
  eventsHosted: Int!
  membersInvited: Int!
  messagesSent: Int!
  postsPosted: Int!
  transactions: Int!
}

input CoManagerStatisticsInput {
  endDate: ISODate
  startDate: ISODate
}

type Cohost {
  _id: ID
  chamberId: ChamberByIdRef
  cohostChamberId: ID
  status: InvitationStatus
  userId: UserOutput
}

input CohostInput {
  chamberId: ID
  userId: ID!
}

type CommentOutput {
  _id: ID!
  content: String
  createdAt: Date
  replies: ReplyOutput
  tags: [TagsOutput]
  uid: UserOutput
  updatedAt: Date
}

type CommentReplyReactionOutput {
  commentId: ID!
  postId: ID!
  reactions: [Reaction]
  threadId: ID
}

type Comments {
  _id: ID!
  content: String
  createdAt: Date
  reactions: [Reaction]
  replies: ReplyOutput
  tags: [TagsOutput]
  uid: UserOutput
  updatedAt: Date
}

type CommissionAndReimbursement {
  amount: Float
  description: String
}

input CommissionAndReimbursementInput {
  amount: Float
  description: String
}

input CommonFilter {
  column: String!
  operator: FilterOperator!
  values: [String!]!
}

type ConfigOutput {
  plaid: PublishableKey
  stripe: PublishableKey
}

input ConnectedNoumsInput {
  filter: ProjectChamberFilter
  limit: Int
  offset: Int
  sort: SortType
}

type ConnectedNoumsWithMember {
  count: Int!
  data: [SpaceOutput!]!
}

input ConnectedNoumsWithMemberInput {
  limit: Int
  offset: Int
}

type ConnectionByIdRef {
  _id: ID!
  approvedAt: String
  message: String
  permission: ConnectionPermissionTypeEnum
  requestFrom: SpaceOutput
  requestTo: SpaceOutput
  requestedAt: String
  status: ConnectionRequestTypeEnum
  type: connectionTypeEnum
}

type ConnectionCheck {
  _id: ID
  connection: ConnectionType
}

type ConnectionOutputResponse {
  count: Int
  data: [SpaceConnection]
}

input ConnectionPermissionInput {
  connectionsPermissions: [PermissionInput]!
}

enum ConnectionPermissionType {
  DISCONNECT
  FAVORITE
  GUEST
}

enum ConnectionPermissionTypeEnum {
  DISCONNECT
  FAVORITE
  GUEST
}

enum ConnectionRequestStatus {
  INVITED
  REQUESTED
}

enum ConnectionRequestTypeEnum {
  APPROVED
  ARCHIVED
  CANCELLED
  DECLINED
  INVITED
  REMOVED
  REQUESTED
}

enum ConnectionType {
  connected
  none
  received
  requested
  sent
}

enum ConnectionTypeEnum {
  FACEBOOK
  INSTAGRAM
  LINKEDIN
}

type Connections {
  userid: UserOutput
}

type Contact {
  _id: ID!
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
}

input ContactInput {
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
}

type ContactOutput {
  additionalEmail: String
  email: String
  phone: String
  preferredCommunicationMode: ModeEnum
}

input Contactfilter {
  userIds: [String!]
}

type Contract {
  _id: ID!
  arbitrationJurisdiction: Jurisdiction
  buyer: NoumContactOutput
  contractNumber: Int!
  contractPDF: PdfPreview!
  createdAt: ISODate!
  createdBy: UserOutput
  effectiveDate: ISODate
  isCompleted: Boolean!
  legalJurisdiction: Jurisdiction
  linkedNoum: SpaceOutput!
  linkedSOWs: [SOW!]!
  logo: String
  seller: NoumContactOutput
  status: ContractStatus!
  templateName: String
  terminationDate: ISODate
  terminationNoticeInDays: Int
  timeline: [ContractSowTimeLine!]
  timezone: String
  title: String
}

input ContractFilter {
  consignors: [ID!]
  noumId: String
  noumIds: [ID!]
  search: String
  status: [ContractStatus!]
}

input ContractFilterForAdmin {
  noums: [ID!]
  rangeFilter: [CommonFilter!]
  search: String
  status: [ContractStatus!]
}

input ContractInput {
  arbitrationJurisdiction: JurisdictionInput
  buyer: ID
  effectiveDate: ISODate
  legalJurisdiction: JurisdictionInput
  linkedNoum: ID
  logo: String
  seller: ID
  templateName: String
  terminationDate: ISODate
  terminationNoticeInDays: Int
  timezone: String
  title: String
}

enum ContractListingPOV {
  COUNTER_PARTY
  OWNER
}

enum ContractOrSow {
  CONTRACT
  SOW
}

type ContractOutput {
  docuSignId: String
  documentType: String
  effectiveDate: String
  link: String
  name: String
}

input ContractReportFiltersInput {
  fileHeaders: String!
  rangeFilters: [CommonFilter]!
  search: String
  status: [ContractStatus]!
}

enum ContractSOW {
  Contract
  SOW
}

type ContractSowTimeLine {
  fromStatus: String
  timestamp: ISODate!
  toStatus: String!
  userId: ID
}

enum ContractStatus {
  AMENDED
  DRAFT
  ISSUED
  SIGNED
}

type ConversationActivity {
  _id: ID
}

type ConversationIdOutput {
  cid: String!
}

input ConversationInput {
  accountSid: String
  attributes: String
  chatServiceSid: String
  dateCreated: String
  dateUpdated: String
  friendlyName: String
  links: ConversationLinksInput
  messagingServiceSid: String
  sid: String!
  state: String
  uniqueName: String
  url: String
}

interface ConversationItem {
  unread: Int
}

type ConversationLink {
  messages: String
  participants: String
  webhooks: String
}

input ConversationLinksInput {
  messages: String
  participants: String
  webhooks: String
}

type ConversationMeta {
  accountSid: String
  attributes: String
  chatServiceSid: String
  dateCreated: String
  dateUpdated: String
  friendlyName: String
  links: ConversationLink
  messagingServiceSid: String
  sid: String!
  state: String
  totalUnreadConversationCount: Int
  uniqueName: String
  url: String
}

type ConversationOutput {
  _id: ID
  adminUserId: UserOutput
  cid: String
  createdAt: Date
  isReadOnly: Boolean
  metaData: ConversationMeta
  participants: [UserOutput]
  sender: UserOutput
  spaceId: ID
  type: String
  updatedAt: Date
}

type ConversationOutputAll {
  count: Int
  data: [ConversationItem]
  unreadCount: Int
}

enum ConversationTypeEnumForAdmin {
  ALL
  OTHERS
  SELF
}

type ConversationsOutput {
  count: Int
  data: [ConversationOutput]
  unreadMessageCount: Int
}

input CookieConsentInput {
  cookieConsent: Boolean!
  cookieConsentId: String!
}

type CookieConsentOutput {
  cookieConsent: Boolean
  cookieConsentId: String
  createdAt: Date
}

type CreateAccountOutput {
  accountIds: [String]!
}

input CreateAdminReportInput {
  filters: String
  reportType: AdminReportType!
}

input CreateCustomerInput {
  address1: String!
  businessClassification: String
  businessName: String
  businessType: String
  city: String!
  country: String!
  dateOfBirth: String!
  ein: String
  email: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  ssn: String!
  state: String!
}

type CreateCustomerOutput {
  dwollaCustomer: String
  stripeCustomer: String
}

input CreateCustomerPayee {
  accountId: String
  accountNumber: String
  masterWalletId: String
  name: String
  routingNumber: String
}

input CreateElementInput {
  bodyContent: String
  bodyContentJson: JSONObject
  bodyContentType: BodyContentEnum!
  elementId: ID
  elementType: ElementTypeEnum!
  headerContent: String
  percentCompleted: Int
  position: Int
  status: ElementStatusEnum!
}

input CreateEventInput {
  chamberId: ID!
  cohosts: [CohostInput]!
  description: String!
  duration: Int
  eventDate: Date!
  eventEndDate: Date
  invitations: [InvitationInput]!
  isInstantEvent: Boolean
  privacy: Privacy!
  recurring: Boolean
  recurringDetails: RecurringDetailsInput
  timezone: String!
  title: String!
}

input CreateInstantEventInput {
  chamberId: ID!
  description: String
  invitations: [InvitationInput]!
  title: String!
}

input CreateNewContractInput {
  linkedNoum: ID!
  templateName: String
  timezone: String
  title: String!
}

input CreateNewSOWInput {
  commission: [CommissionAndReimbursementInput!]
  deliverables: [DeliverablesAndMilestonesInput!]
  effectiveDate: ISODate
  expenseReimbursement: [CommissionAndReimbursementInput!]
  fees: FeesCategoryInput
  linkedContract: ID
  linkedNoum: ID!
  milestones: [DeliverablesAndMilestonesInput!]
  scopeOfWork: String
  templateName: String
  timezone: String
  title: String
}

input CreateNoumLayoutSectionInput {
  noumId: ID!
  position: Int!
  type: NoumLayoutSectionType!
}

input CreateNoumRoleInput {
  description: String!
  name: String!
  permissionIDs: [ID!]!
}

input CreatePassCodeInput {
  passCode: String!
  securityQuestions: [SecurityQuestion!]!
}

type CreatePlaidLinkOutput {
  link_token: String!
}

input CreateProductInput {
  code: String
  countryCode: String
  currencyCode: String
  description: String
  effectiveDateFrom: String
  effectiveDateTo: String
  name: String
  productOwner: String
  typeCode: String!
}

enum CsvReportStage {
  CONVERTED
  FETCHED
  FINISHED
  INITIALIZED
  MAPPED
  STARTED
  UPLOADED
}

enum CsvReportStatus {
  COMPLETED
  FAILED
  PROGRESS
}

type CurrencyData {
  currency: CurrencyEnum
  value: Float
}

enum CurrencyEnum {
  USD
}

input CurrencyInput {
  currency: CurrencyEnum!
  value: Float!
}

type CurrencyOutput {
  currency: CurrencyEnum!
  value: Float!
}

type CurrentUser {
  eventId: ID!
  invitation: Invitees
  isBlocked: Boolean
  userId: ID!
  userRole: UserRole
}

type CurrentUserPaymentLimitOutput {
  achConsumedLimit: Float
  achTransactionLimit: Float
  achWeeklyLimit: Float
  availableACHLimit: Float
  availableWalletLimit: Float
  enableInvoiceLimit: Float
  unverifiedCustomerAvailableLimit: Float
  unverifiedCustomerWeeklyLimit: Float
  walletConsumedLimit: Float
  walletTransactionLimit: Float
  walletWeeklyLimit: Float
}

type Customer {
  created_at: String
  email: String
  external_customer_id: String!
  first_name: String
  last_name: String
  status: String
  uid: String!
  updated_at: String
}

type CustomerAccountsOutput {
  count: Int
  data: [CustomerWithAccountOutput!]
}

input CustomerAddressInput {
  apartment: String
  city: String
  customerId: String
  state: String
  street: String
  zipcode: String
}

type CustomerDocumentOutput {
  allFailureReasons: [DocumentFailureReason]
  createdAt: String
  customerId: String
  documentVerificationStatus: KYCProviderDocVerifyStatusEnum
  failureReason: DocumentFailureReason
  id: String
  meta: [DocumentMeta]
  providerDocUrl: String
  providerId: String
  reUpload: Boolean
  s3DocRef: String
  status: KYCProviderDocStatusEnum
  type: String
  updatedAt: String
}

input CustomerInputType {
  email: String
  first_name: String
  last_name: String

  """User ID"""
  uid: String
}

type CustomerKYCAccountsOutput {
  count: Int
  data: [CustomerKYCWithAccountOutput!]
}

type CustomerKYCAuditLog {
  actionTakenBy: KYCActionTakenEnum
  createdAt: String
  createdBy: UserOutput
  id: String
  newStatus: String
  oldStatus: String
  provider: String
  sequence: Int
  statusType: StatusUpdateTypeEnum
  updatedAt: String
}

type CustomerKYCAuditLogCount {
  count: Int
  data: [CustomerKYCAuditLog!]
}

input CustomerKYCFilter {
  rangeFilters: [PaymentCustomerCommonFilter]
  tab: CustomerTab
}

type CustomerKYCWithAccountOutput {
  accounts: [AccountListOutput]
  createdAt: String
  customerType: String
  docStatus: KYCDocumentStatusEnum
  enableTransactionLimit: Boolean
  id: String
  msg: String
  name: String
  noumenaStatus: KYCNoumenaStatusEnum
  providerStatus: KYCProviderStatusEnum
  status: String
  transactionFlagHistory: [TransactionFlagHistoryForAdmin]
  updateStatus: KYCUpdateStatusEnum
  userId: UserOutput
}

type CustomerLimitOutput {
  availableWeeklyLimit: Float!
  consumedWeeklyLimit: Float!
  transactionLimit: Float!
  weeklyLimit: Float!
}

type CustomerLogsOutput {
  _id: String
  customerId: String
  operationType: String
  target: String
  updatedAt: Date
  updatedBy: UserOutput
  updates: JSON
}

type CustomerOutput {
  accountNumber: String
  additionalEmail: String
  address: AddressOutput
  applicationDate: String
  applicationIds: [String]
  approvedInvestmentAmount: String
  bankName: String
  chameleonAccountNumber: [String]
  contracts: [UserContractOutput]
  customerId: String
  debitAccountNumber: String
  debitBankName: String
  debitRoutingNumber: String
  dob: Date
  docusignEffectiveDate: String
  email: String
  firstName: String
  industry: String
  initialMonthlyIncome: String
  lastName: String
  maximumIncomePaymentRate: String
  maximumInvestmentReturn: String
  middleName: String
  phone: String
  preferredCommunicationMode: String
  productCode: String
  routingNumber: String
  uid: CustomerUserOutput
}

type CustomerPayeeList {
  accountId: String!
  accountType: AccountType
  chamberId: String
  createdAt: String
  customerName: String!
  id: String!
  maskAccountNumber: String
  masterWalletId: String
  subAccountType: SubAccountType
  updatedAt: String
  userId: UserOutput
  walletName: String
}

type CustomerPayeeListV2 {
  count: Int!
  data: [CustomerPayeeList]!
}

input CustomerPersonalInput {
  customerId: String
  dob: Date
  firstName: String
  industry: String
  lastName: String
  middleName: String
}

input CustomerSearch {
  accountNumber: String
  applicationId: String
  city: String
  contractSignedFrom: String
  contractSignedTo: String
  customerId: String
  email: String
  firstName: String
  lastName: String
  middleName: String
  phone: String
  state: String
  userId: ID
}

enum CustomerTab {
  APPROVED_REJECTED
  PENDING_ACTION
  PENDING_VERIFICATION
}

type CustomerUserOutput {
  SocialHallTCAccepted: Boolean
  _id: ID!
  bio: String
  citizenship: String
  createdAt: Date
  creditCheckResult: String
  email: String
  firstName: String
  kycResult: String
  lastName: String
  location: String
  middleName: String
  phone: String
  profileUrl: String
  referralCode: String
  roles: [CustomerUserRoleOutput]
  status: String
  title: String
  unreadConnectionCount: Int
  updatedAt: Date
  userOwnReferralCode: String
  userStatus: String
  username: String
}

type CustomerUserRoleOutput {
  roleType: String
}

type CustomerWithAccountOutput {
  accounts: [AccountListOutput]
  createdAt: String
  enableTransactionLimit: Boolean
  id: String
  name: String
  status: String
  transactionFlagHistory: [TransactionFlagHistoryForAdmin]
  userId: UserOutput
}

type CustomerWithTotalOutput {
  customers: [CustomerOutput]
  total: String
}

input CustomersFilter {
  endDate: String
  search: String
  startDate: String
}

type CustomersOutput {
  data: [CustomerOutput]
  total: Int
}

scalar Date

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DebitAccountOutput {
  accountNumber: String
  accountSubType: String
  accountType: String
  institutionId: String
  institutionName: String
  logo: String
  routingNumber: String
}

input DefaultNoumTransactionFeeDetailInput {
  """Noum ID"""
  chamber_id: String

  """User ID"""
  uid: String
}

input DeleteAccountInput {
  deletePII: Boolean!
  reason: String
}

type DeliverablesAndMilestones {
  description: String
  dueDate: ISODate
  title: String
}

input DeliverablesAndMilestonesInput {
  description: String
  dueDate: ISODate
  title: String
}

input DeviceToken {
  isActive: Boolean
  token: String
}

type DeviceTokenOutput {
  isActive: Boolean
  token: String
}

input DialsInput {
  interestRate: String
  investingAmnt: String
  maxInvestingAmnt: String
}

type Discovery {
  location: String
  profileCompletion: [ProfileCompletion]
  skillOwn: [ID!]
  skillSought: [ID!]
  uid: User
}

type DiscoveryResponse {
  count: Int
  userIds: [ID]
}

type DocuSignOutput {
  redirectURL: String
}

type DocumentFailureReason {
  description: String
  reason: String
}

input DocumentInput {
  name: String!
  uploadFor: UploadFor!
}

type DocumentMeta {
  name: String
  uploadFor: UploadFor
}

type DocumentOutput {
  contracts: [UserContractOutput]
  docuSignId: String
  documentType: String
  link: String
  name: String
  productCode: String
}

enum DocumentType {
  ID_CARD
  LICENSE
  PASSPORT
}

type DunningAttemptOutput {
  attempt: Float
  created_at: String
  dunning_attempt_id: Float!
  dunning_type: String
  transaction_id: String
  txn_amount: Float
  txn_status: String
}

enum DwollaAccountType {
  checking
  savings
}

input DwollaCardCreate {
  href: String!
}

enum DwollaPaymentStatus {
  cancelled
  failed
  pending
  processed
}

type DwollaTransaction {
  amount: Float
  createdAt: String
  currency: CurrencyEnum
  destinationAccount: FundingSourceOutput
  destinationAccountId: String
  destinationClearing: String
  destinationCustomer: PaymentCustomerOutput
  destinationCustomerId: String
  id: String
  sourceAccount: FundingSourceOutput
  sourceAccountId: String
  sourceClearing: String
  sourceCustomer: PaymentCustomerOutput
  sourceCustomerId: String
  status: String
  transactionDate: String
  updatedAt: String
}

type DwollaTransactionOutput {
  count: Int!
  data: [DwollaTransaction]
}

enum ENUM_PAGE_RULE_OPERATOR {
  AND
  OR
}

enum ENUM_QUESTION_INPUT_SUBTYPE {
  DATE
  DATE_RANGE
  EMAIL
  NUMBER
  TEXT
}

enum ENUM_QUESTION_MULTI_SELECT_SUBTYPE {
  CHECKBOX
  DROPDOWN
}

enum ENUM_QUESTION_SELECT_PRESENTATION {
  TITLE_AND_DESCRIPTION
  TITLE_ONLY
}

enum ENUM_QUESTION_SELECT_SUBTYPE {
  DROPDOWN
  RADIO
}

enum ENUM_SURVEY_STATUS_INPUT {
  ACTIVE
  ALL
  INACTIVE
}

enum ENUM_TRANSACTIONS_ACCOUNTS {
  BANK
  CARD
  EXTERNAL_BANK
  OTHERS_BANK
  OTHERS_WALLET
  WALLET
}

enum ENUM_TRANSACTION_CATEGORY {
  ACH
  CREDIT_CARD
  WALLETS
}

enum ENUM_TRANSACTION_PROVIDER {
  DWOLLA
  STRIPE
}

enum ENUM_TRANSACTION_SETTLEMENT {
  NEXT_DAY
  STANDARD
}

type EditAccountPasswordOutput {
  message: String
  success: Boolean
}

type ElementInnerOutput {
  bodyContent: String
  bodyContentJson: JSONObject
  customPreviewPosition: Int
  headerContent: String
  isCustomPreviewVisible: Boolean
  isDeleted: Boolean
  meta: JSONObject
  percentCompleted: Int
  position: Int
}

input ElementInput {
  bodyContent: String
  bodyContentJson: JSONObject
  bodyContentType: BodyContentEnum
  elementId: ID
  elementType: ElementTypeEnum
  headerContent: String
  meta: JSONObject
  percentCompleted: Int
  position: Int
  status: ElementStatusEnum
}

type ElementOutput {
  _id: ID
  bodyContent: String
  bodyContentJson: JSONObject
  bodyContentType: BodyContentEnum
  customPreviewPosition: Int
  draft: ElementInnerOutput
  elementType: String
  headerContent: String
  isCustomPreviewAdditionalInfo: Boolean
  isCustomPreviewVisible: Boolean
  meta: JSONObject
  originalBodyContent: String
  originalBodyContentJson: JSONObject
  originalHeaderContent: String
  percentCompleted: Int
  position: Int
  profanityStatus: NoumElementProfanityStatus
  status: String
  tempStatus: ElementStatusEnum
  unSaved: ElementInnerOutput
  viewOnly: Boolean
}

input ElementPositionInput {
  _id: ID!
  position: Int!
}

enum ElementStatusEnum {
  DRAFT
  PUBLISHED
  UNSAVED
}

enum ElementStatusEnumForStateChange {
  DRAFT
  UNSAVED
}

enum ElementTypeEnum {
  ACHIEVEMENT_AWARD
  BUSINESS_BRIEF
  CALENDAR
  CONNECTION
  CONTRACT_MANAGER
  EDUCATION_TRAINING
  EVENTS
  FILES_MANAGER
  HOME
  IMAGE
  INSTAGRAM
  INVITATION
  MESSAGE
  PERSONAL_INTEREST
  PROFILE
  PROJECT_WORK_EXPERIENCE
  PUBLICATION_DESIGN_PATTERNS
  QUICK_QUESTIONS
  SKILLS
  SOCIAL_INTEREST
  TEXT
  USERNETWORK
  USERPOSTS
  VIDEO
  WALLET
}

input EmailParams {
  emailParams: JSON
  from: String
  message: String
  subject: String
  template: Template
  text: String
  to: [String]
}

enum EntityType {
  Event
  HomeNoum
  NoumContact
  Post
  ProjectNoum
}

enum EnumAdCampaignOfferStatus {
  ACCEPTED
  DELETED
  DRAFT
  REJECTED
  SENT
}

type ErrorObject {
  lockDate: String
  lockInterval: Int
  message: String!
  retryCount: Int
  success: Boolean!
  userLocked: Boolean!
}

type Event {
  _id: ID!
  chamberId: ChamberByIdRef
  cohosts: [Cohost!]!
  currentUser: CurrentUser
  description: String
  duration: Int
  eventDate: Date
  eventStatusUpdatedAt: Date
  hostChamberId: ID
  icsFile: String
  invitations: [Invitees!]!
  isInstantEvent: Boolean
  privacy: Privacy
  recurring: Boolean
  recurringDetails: RecurringDetails
  socialHall: SocialHall
  socialHallId: ID
  status: EventsStatus
  timezone: Timezone
  title: String!
  totalAttendees: Int
  userId: UserOutput
}

type EventActivity {
  description: String
  endDate: Date
  eventId: ID
  startDate: Date
  title: String
}

input EventActivityInput {
  description: String
  endDate: Date
  eventId: ID
  startDate: Date
  title: String
}

input EventAttendeesFilter {
  attendeesType: AttendeesType
  cohosts: Boolean
  invitationStatus: [InvitationStatus]
  invitees: Boolean
}

type EventMeta {
  acceptedEventsCount: Int
  allEventsCount: Int
  hostedEventsCount: Int
  pastEventsCount: Int
  pendingEventsCount: Int
}

type EventNotificationDetails {
  id: Event
  invitedBy: User
  invitee: User
  time: Int
}

type EventNotificationDetailsV2 {
  id: Event
  invitedBy: User
  invitee: User
  time: Int
}

type EventOutput {
  count: Int
  data: [Event]
}

input EventSocialHallInput {
  chamberId: ID!
  endTime: Date
  eventId: ID!
  hosts: [ID]
  isActive: Boolean!
  name: String
  startTime: Date
  userId: ID
}

enum EventStatus {
  Attending
  Finished
  Hosting
  Invited
  NotAttending
}

type EventSubscriptionData {
  eventId: ID!
  type: EventSubscriptionType!
  userId: ID
}

enum EventSubscriptionType {
  CANCELLED
  CANCEL_INVITE
  EVENT_EXPIRED
  EVENT_UPDATED
  GO_LIVE
  LIVE
  NEW_EVENT
  POST_EVENT
  POST_EVENT_ENDED
  PRE_EVENT
  PRE_LIVE
  USER_BLOCKED_FROM_EVENT
}

enum EventsFilter {
  ATTENDING
  EXPIRED
  HOSTING
  INVITATION
  UPCOMING
}

enum EventsStatus {
  CANCELLED
  EXPIRED
  GO_LIVE
  LIVE
  POST_EVENT
  POST_EVENT_ENDED
  PRE_EVENT
  PRE_LIVE
  UPCOMING
}

"""ExampleType is only for demonstration purposes"""
type ExampleType {
  message: String
}

input ExportCsvFilter {
  endDate: String
  maxAmount: Float
  minAmount: Float
  paymentStatus: DwollaPaymentStatus
  rangeFilters: [PaymentCustomerCommonFilter]
  search: String
  startDate: String
  tab: CustomerTab
}

enum ExportFileType {
  REQ_FILE
  RES_FILE
}

enum FILE_ACCESS_CATEGORY {
  GLOBAL_SETTINGS
}

enum FeeApplied {
  RECEIVER
  SENDER
}

type FeesCategory {
  feesData: [FeesInfo]
  type: FeesCategoryTypes
}

input FeesCategoryInput {
  feesData: [FeesInfoInput]
  type: FeesCategoryTypes
}

enum FeesCategoryTypes {
  INADVANCE
  INSTALLMENTS
  LUMPSUM
  MILESTONES
  RECURRING
}

type FeesInfo {
  amount: Float
  description: String
  dueDate: ISODate
  fromDate: String
  recurringType: FeesRecurringType
}

input FeesInfoInput {
  amount: Float
  description: String
  dueDate: ISODate
  fromDate: String
  recurringType: FeesRecurringType
}

enum FeesRecurringType {
  HALFYEARLY
  MONTHLY
  QUARTERLY
  YEARLY
}

input FileAccessInput {
  category: FILE_ACCESS_CATEGORY!
  fileName: String!
}

type FileData {
  amount: Float
  currency: String
  email: String
  fileHeaders: String
  filter: String
  transaction_reason: String
}

input FileInput {
  fileName: String!
  mime: String!
}

input FileUploadInput {
  fileName: String!
  fileType: String!
}

input FilterEvents {
  eventFilter: EventsFilter
}

enum FilterNoumRoleByValue {
  Active
  All
  Archived
  Custom
  Default
}

enum FilterOperator {
  btw
  btwe
  eq
  gt
  gte
  in
  lt
  lte
  neq
}

input FilterType {
  column: String
  operator: FilterOperator
  values: [String]
}

enum FlowofFundsEnum {
  Inbound
  Outbound
  Transfer
}

enum FollowActionEnum {
  FOLLOW
  UNFOLLOW
}

enum FollowSource {
  FEATURED_PAGE
}

enum Frequency {
  DAILY
  MONTHLY
  WEEKLY
  YEARLY
}

type FundingSourceBalanceOutput {
  balance: CurrencyData
  customerType: String
  docStatus: String
  lastUpdated: String
  noumenaStatus: String
  providerStatus: String
  status: String!
  total: CurrencyData
  updateStatus: String
}

input FundingSourceIdInput {
  fundingSourceId: String!
}

input FundingSourceListInput {
  destCustomerId: String
  paymentProviderId: String!
}

type FundingSourceOutput {
  accountName: String
  accountNumber: String
  accountType: String
  balance: Float
  createdAt: String
  customerId: String
  id: String
  maskAccountNumber: String
  paymentChannel: paymentChannelsEnum
  routingNumber: String
}

type GenericResponseOutput {
  message: String
  success: Boolean!
}

input GetAllNoumFilter {
  category: ID
  categoryIn: [ID]
  categoryNotIn: [ID]
  projectType: ProjectChamberType
  search: String
  spaceIds: [ID]
  status: SpaceStatusEnum
  statuses: [SpaceStatusEnum]
  type: [SpaceTypeEnum]
}

input GetAllSOWFilter {
  consignors: [ID!]
  linkedContract: ID
  noumId: String
  noumIds: [ID!]
  search: String
  status: [SOWStatus!]
  unlinked: Boolean
}

enum GetConversationsFilterType {
  ALL
  HOME_NOUM
  PROJECT_NOUM
}

input GetLinkedSOWsFilter {
  search: String
  status: [SOWStatus!]
}

input GetNoumConnectionRequestsInput {
  limit: Int
  offset: Int
}

input GetNoumFilesInput {
  filesManagerElementId: ID!
  filterType: NoumFilesFilterType
  limit: Int
  offset: Int
  query: String
}

type GlobalConfigOutput {
  Currency: [GlobalDataInput]
  LateFee: [GlobalDataInput]
  PaymentDetails: [GlobalDataInput]
  PaymentTerm: [GlobalDataInput]
}

type GlobalDataInput {
  label: String
  value: String
}

type GlobalSearchEntity {
  entityType: EntityType!
  event: GlobalSearchEventEntity
  id: ID!
  noum: GlobalSearchNoumEntity
  post: GlobalSearchPostEntity
  user: GlobalSearchEntityUser!
}

type GlobalSearchEntityUser {
  firstName: String
  id: ID
  isNoumenaEmployee: Boolean!
  lastName: String
  middleName: String
  name: String
  status: GlobalSearchUserEntityStatus
  thumbnailUrl: String
  title: String
}

type GlobalSearchEventEntity {
  createdAt: ISODate!
  description: String
  name: String!
  noumId: ID
  status: EventStatus
}

type GlobalSearchNoumEntity {
  isConnected: Boolean!
  isFollowing: Boolean!
  name: String!
  status: NoumStatus
  thumbnailUrl: String
  type: String!
}

type GlobalSearchPostEntity {
  content: String
  createdAt: ISODate!
  noumId: ID
  noumName: String
  noumThumbnailUrl: String
  status: NoumStatus
  tags: [Tag]
  type: PostType
}

type GlobalSearchResult {
  count: Int!
  data: [GlobalSearchEntity!]!
}

enum GlobalSearchUserEntityStatus {
  NonNoumenaMember
  NoumenaMember
  UnauthenticatedUser
}

type Group {
  _id: ID
  associatedSkills: [ID!]
  canInvite: Boolean
  connection: ConnectionType
  description: String
  groupInvitePermission: String
  groupPrivacy: String
  invitation: GroupInvitation
  members: [Member]
  membersCount: Int
  name: String
  profileImage: String
  role: [MemberRoles]
}

type GroupConnection {
  connection: ConnectionType
}

type GroupEvent {
  data: Object
  event: String!
}

input GroupInput {
  associatedSkills: [ID!]
  description: String
  groupInvitePermission: GroupInvitePermission
  groupPrivacy: GroupPrivacy
  name: String
  profileImage: String
}

type GroupInvitation {
  _id: ID
  connection: ConnectionType
  groupId: Group
  inviteFrom: UserOutput
  inviteTo: UserOutput
}

enum GroupInvitePermission {
  CLOSED_ADMIN_ONLY
  CLOSED_ANYONE
  OPEN
}

type GroupOutput {
  count: Int
  data: [Group]
}

enum GroupPrivacy {
  PRIVATE_HIDDEN
  PRIVATE_VISIBLE
  PUBLIC
}

type GroupRef {
  _id: ID!
  associatedSkills: [ID!]
  connection: ConnectionType
  description: String
  members: [Member]
  membersCount: Int
  name: String
  profileImage: String
  role: [MemberRoles]
}

enum GroupReportTitle {
  BULK_PAYMENT
  CUSTOMERS
  DWOLLA_MASS_PAYMENT
  DWOLLA_TRANSACTION_EXPORT
  PAYMENTS
  PAYMENT_KYC_CUSTOMERS
}

type GroupShJoiningStatus {
  status: SocialHallAttendeeStatus
  userId: ID
}

type GroupedNoumRolePermissionChange {
  changes: [NoumRoleElementHistoryLog!]!
  elementType: PermissibleElementType
}

input HideNotificationInput {
  connectionId: ID
  noumMemberId: ID
  type: [NotificationType]
}

input HideNotificationInputV2 {
  connectionId: ID
  type: [NotificationTypeV2]
}

type HomeSpaceConversationOutput {
  groupConversations: [ConversationOutput]
  groupConversationsCount: Int
  groupConversationsUnreadMessageCount: Int
  groupUnreadConversationCount: Int
  privateConversation: [ConversationOutput]
  privateConversationCount: Int
  privateUnreadCoversationCount: Int
  privateUnreadMessageCount: Int
  userAllConversationUnreadConversationCount: Int
  userAllConversationUnreadMessageCount: Int
  userConversations: [ConversationOutput]
  userConversationsCount: Int
}

type HostedPageOutput {
  hosted_id: String
}

type ILIOutput {
  approvedInvestmentAmount: String
  maximumIncomePaymentRate: String
  maximumInvestmentReturn: String
}

enum INTERNAL_PLAN_TYPE {
  FREE_PLAN
  NOUMENA_INTERNAL
}

scalar ISODate

enum ITEM_PRICE_PERIOD_UNIT {
  MONTH
  YEAR
}

type IdentityOutput {
  name: String
  reasons: [String]
  result: String
  value: String
}

type IncomeDataOutput {
  transactions: [TransactionModel]
}

enum IndicatorEnum {
  DUE_ALREADY
  DUE_LONG
  DUE_SHORT
}

type IndustryList {
  name: String
  type: String
}

type IndustryListOutput {
  count: Int
  data: [IndustryList]
}

scalar InputAny

input InputNoumClass {
  description: String
  isDeleted: Boolean
  name: String!
  noumId: ID!
  programId: ID!
  questions: [JSONObject]
  reviewers: [ID!]
  type: String
}

input InputNoumProgram {
  description: String!
  isDeleted: Boolean
  title: String!
}

enum InstitutionsEnum {
  MA
  NOUMENA
}

type Invitation {
  _id: ID!
  connection: String
  inviteFrom: UserOutput
  inviteTo: UserOutput
}

input InvitationInput {
  chamberId: ID
  userId: ID!
}

type InvitationOutput {
  count: Int
  data: [GroupInvitation]
}

enum InvitationStatus {
  ACCEPTED
  BLOCKED
  CANCELLED
  EXPIRED
  NONE
  PENDING
  REJECTED
}

input InviteNonNoumenaMemberInput {
  email: String!
  firstName: String!
  invitationMessage: String
  lastName: String!
  noumId: ID!
}

input InviteNoumMembers {
  invitationMessage: String
  members: [InvitedNouMember!]!
  noumId: ID!
  walletLimitAmount: Int
  walletLimitType: WalletLimitType
}

input InvitedNouMember {
  roleId: ID!
  userId: ID!
}

type Invitees {
  _id: ID!
  chamberId: ChamberByIdRef
  invitedBy: UserOutput
  inviteeChamberId: ID
  status: InvitationStatus
  userId: UserOutput
}

enum InvoiceActivityType {
  DueDateChanged
  InvoiceCreated
  InvoiceEdited
  InvoiceSent
  Paid
  PaymentFailed
  PaymentUpdated
  Reminder
  StatusChanged
}

type InvoiceAmountOutput {
  amount: Float
  paidAmount: Float
  remainingAmount: Float
}

type InvoiceDetail {
  amount_paid: Float
  channel: String
  currency_code: String
  customer_id: String
  due_date: String
  dunning_attempts: [DunningAttemptOutput!]
  exchange_rate: Float
  external_customer_id: String
  external_invoice_id: String
  external_subscription_id: String
  first_invoice: Boolean
  generated_at: String
  invoice_id: Float
  issue_date: String
  item_price_id: String
  line_items: [LineItemOutput!]
  linked_payments: [LinkedPaymentOutput!]
  paid_at: String
  payment_method: String
  payment_method_details: String
  plan_name: String
  plan_type: String
  price_type: String
  status: String
  sub_total: Float
  subscription_id: SubscriptionOutput
  tags: [String!]
  tax: Float
  total: Float
  uid: UserOutput
  updated_at: String
}

input InvoiceDraftInput {
  currency: AllCurrencyEnum
  dueDate: ISODate
  invoiceFrom: String
  invoiceLabel: String
  invoiceNumber: String
  invoiceTo: String
  issueDate: ISODate
  lateFeeType: LateFeeType
  lateFeeValue: Float
  lineItems: [InvoiceLineItemInput]
  logoUrl: String
  notes: String
  noumId: ID!
  paymentDetails: PaymentDetails
  paymentTerms: PaymentTerms
  summary: String
}

input InvoiceFetchInput {
  subscription_id: Float
  uid: String
}

input InvoiceGetAllFilters {
  date_from: String
  date_to: String
  plans: [String!]
  status: [STATUS_INVOICE!]
  subscription_id: Float
  uid: String
}

input InvoiceGetAllInput {
  filters: InvoiceGetAllFilters
  limit: Float = 15
  offset: Float = 0
  sort_key: String = "updated_at"
  sort_value: SORT = DESC
}

type InvoiceHistory {
  created_at: String!
  current_status: String!
  invoice_history_id: Float!
  previous_status: String
  updated_at: String!
}

type InvoiceLineItem {
  amount: Float!
  currency: AllCurrencyEnum!
  description: String!
  id: ID!
  quantity: Int!
  taxLabel: String
  taxRate: Float
  unitPrice: Float!
}

input InvoiceLineItemInput {
  currency: AllCurrencyEnum!
  description: String!
  quantity: Int!
  taxLabel: String
  taxRate: Float
  unitPrice: Float!
}

type InvoiceList {
  count: Int!
  data: [InvoiceOutput]
}

type InvoiceOutput {
  amount: Float
  createdBy: UserOutput
  currency: AllCurrencyEnum
  dueDate: ISODate
  duplicatedFromInvoiceId: String
  duplicatedFromInvoiceNumber: String
  id: String!
  invoiceFrom: NoumContactOutput
  invoiceNumber: String
  invoiceTo: NoumContactOutput
  invoiceURL: String
  issueDate: ISODate
  lateFeeType: LateFeeType
  lateFeeValue: Float
  lineItemAmount: Float
  lineItems: [InvoiceLineItem]
  logoUrl: String
  notes: String
  noumId: SpaceOutput
  paymentDetails: PaymentDetails
  paymentTerms: PaymentTerms
  status: InvoiceStatusEnum
  summary: String
  taxLine: [InvoiceTaxLine]
  type: String
}

type InvoicePDF {
  base64: String
}

input InvoicePDFInput {
  footer: PDFFooter
  invoiceDetails: PDFInvoiceDetail
  items: [PDFLineItem]
  logo: PDFLogo
  receiver: PDFContactDetail
  sender: PDFContactDetail
  subject: String
  summary: PDFSummary
  title: String
}

type InvoicePDFUrl {
  url: String
}

input InvoicePaymentInput {
  amount: Float!
  invoiceId: ID!
  paidBy: String!
  paymentDate: ISODate!
  paymentId: String
}

type InvoicePaymentOutput {
  _id: ID
  amount: Float
  createdAt: ISODate
  createdBy: String
  currency: String
  entryType: String
  invoiceId: ID
  paidBy: String
  paymentDate: ISODate
  paymentId: String
  paymentStatus: String
  updatedAt: ISODate
}

input InvoiceQueryInput {
  customers: [ID]
  invoiceType: [InvoiceType]
  limit: Int
  noums: [ID]
  offset: Int
  rangeFilter: [CommonFilter]
  search: String
  sort: InvoiceSort
  status: [InvoiceStatusEnum]
}

input InvoiceQueryInputForAdmin {
  limit: Int
  noums: [ID]
  offset: Int
  rangeFilter: [CommonFilter]
  search: String
  status: [InvoiceStatusEnum]
}

input InvoiceSearchInput {
  limit: Int!
  offset: Int!
  search: String
}

type InvoiceSequenceOutput {
  _id: String
  noumId: String
  sequence: String!
}

input InvoiceSort {
  column: InvoiceSortColumn
  type: InvoiceSortType
}

enum InvoiceSortColumn {
  ISSUE_DATE
}

enum InvoiceSortType {
  ASC
  DESC
}

enum InvoiceStatusEnum {
  CANCELLED
  DRAFT
  ISSUED
  OVERDUE
  PAID
  PARTIALLY_PAID
  WRITE_OFF
}

enum InvoiceStatusEnumInput {
  CANCELLED
  OVERDUE
  PAID
  PARTIALLY_PAID
  WRITE_OFF
}

type InvoiceTaxLine {
  amount: Float!
  currency: AllCurrencyEnum!
  description: String!
  id: ID!
  taxCode: Float!
}

type InvoiceTimelineOutput {
  _id: ID!
  activityType: InvoiceActivityType!
  amount: Float
  createdAt: ISODate!
  dueDateFrom: ISODate
  dueDateTo: ISODate
  duplicatedFrom: String
  fromStatus: InvoiceStatusEnum
  invoiceId: ID!
  paidAmount: Float
  previousPaidAmount: Float
  remainingAmount: Float
  toStatus: InvoiceStatusEnum
  updatedAt: ISODate!
  userId: UserOutput
}

type InvoiceTimelinePaginationOutput {
  count: Int!
  data: [InvoiceTimelineOutput]
}

input InvoiceToolReportFiltersInput {
  fileHeaders: String!
  rangeFilters: [CommonFilter]!
  status: [InvoiceStatusEnum]!
}

type InvoiceToolReportOutput {
  _id: ID
  createdAt: ISODate!
  filters: JSONObject!
  stage: InvoiceToolReportStage!
  status: InvoiceToolReportStatus!
  updatedAt: ISODate!
}

type InvoiceToolReportOutputPaginated {
  count: Int
  data: [InvoiceToolReportOutput]
}

enum InvoiceToolReportStage {
  CONVERTED
  FETCHED
  FINISHED
  INITIALIZED
  MAPPED
  STARTED
  UPLOADED
}

enum InvoiceToolReportStatus {
  COMPLETED
  FAILED
  PROGRESS
}

input InvoiceTransactionInput {
  amount: Float!
  currency: CurrencyEnum!
  destinationAccountId: ID!
  destinationUserId: ID!
  enableTransactionLimit: Boolean
  invoiceId: ID!
  noumId: ID!
  passCode: String!
  requestOriginator: RequestOriginatorsEnum!
  sourceAccountId: String!
  transactionReason: String!
}

enum InvoiceType {
  Issued
  Received
}

input ItemFamilyInput {
  description: String
  name: String!
}

type ItemFamilyOutput {
  description: String
  item_family_id: String!
  name: String
  status: String
}

input ItemInput {
  category: PLAN_CATEGORY_ENUM!
  description: String
  item_family_id: INTERNAL_PLAN_TYPE!
  item_type: SUBSCRIPTION_PLAN_TYPE!
  name: String!
}

type ItemOutput {
  description: String
  item_family_id: String!
  item_id: String!
  item_type: String!
  name: String
  status: String
}

input ItemPriceInput {
  billing_cycles: Float
  currency_code: String
  description: String
  discount_percent: Float
  item_id: String!
  name: String!
  noum_renewal: Float
  noum_setup: Float
  noum_validity_months: Float
  per_item_fee: Float
  percent_fee: Float
  period: Float
  period_unit: ITEM_PRICE_PERIOD_UNIT
  plan_validity_months: Float
  price: Float
  pricing_model: String
}

scalar JSON

scalar JSONObject

scalar Json

type Jurisdiction {
  country: String
  reagion: String @deprecated(reason: "Use region instead.")
  region: String
  state: String
}

input JurisdictionInput {
  country: String
  reagion: String
  region: String
  state: String
}

enum KYCActionTakenEnum {
  OPS_ADMIN
  PROVIDER
  SYSTEM
  USER
}

enum KYCCustomerTypeEnum {
  UNVERIFIED
  VERIFIED
}

enum KYCDocumentStatusEnum {
  NA
  PENDING
  PENDING_RE_UPLOAD
  RE_UPLOADED
  SENT_TO_PROVIDER
  UPLOADED
}

enum KYCNoumenaStatusEnum {
  APPROVED
  PENDING_REVIEW
  REJECTED
}

enum KYCProviderDocStatusEnum {
  PENDING
  REVIEWED
}

enum KYCProviderDocVerifyStatusEnum {
  ACCEPTED
  PENDING
  REJECTED
}

enum KYCProviderStatusEnum {
  DEACTIVATED
  DOCUMENT
  RETRY
  SUSPENDED
  UNVERIFIED
  VERIFIED
}

enum KYCUpdateStatusEnum {
  REQUEST_RE_UPDATE
  RE_UPDATED
}

type Knock {
  _id: ID!
  createDate: Date
  createdAt: Date
  declineMessage: String
  groupId: ID
  groupInfo: SocialGroup
  knockMessage: String
  knockStatus: KnockType
  knockerAttendeeId: ID
  knockerUser: UserOutput
  knockerUserId: ID!
  receiverAttendeeId: ID
  receiverUser: UserOutput
  receiverUserId: ID
  socialHallId: ID
}

type KnockEvent {
  _id: ID!
  event: String!
}

input KnockInput {
  groupId: ID
  hallAttendeeId: ID
  knockMessage: String
}

enum KnockType {
  ACCEPTED
  CANCELLED
  DECLINED
  PENDING
  TIMEOUT
}

type Knocks {
  count: Int!
  data: [Knock]
}

input KycInput {
  dob: String
  photoId: String
  photoIdBack: String
  photoIdExpiry: String
  photoIdNumber: String
  photoIdType: String
  salary: String
  ssn: String
}

type KycOutput {
  dob: String
  photoId: String
  photoIdBack: String
  photoIdExpiry: String
  photoIdNumber: String
  photoIdType: String
  salary: String
  ssn: String
}

enum LanguageCode {
  TW
  ar
  de
  en
  es
  fr
  hi
  it
  ja
  ko
  pt
  zh
}

enum LateFeeType {
  Percentage
  Value
}

type LineItemOutput {
  amount: Float
  date_from: String
  date_to: String
  discount_amount: String
  entity_description: String
  entity_id: String
  entity_type: String
  external_line_item_id: String
  item_level_discount_amount: String
  line_item_id: Float!
  pricing_model: String
  quantity: Float
  tax_exempt_reason: String
  unit_amount: Float
}

type LinkedPaymentOutput {
  applied_amount: Float
  applied_at: String
  linked_payment_id: Float!
  txn_amount: Float
  txn_date: String
  txn_id: String
  txn_status: String
}

type ListInvoice {
  count: Float!
  data: [InvoiceDetail!]!
}

type ListNoums {
  count: Float!
  data: [NoumTransactionFee!]!
}

type ListUserInvitesForAdminFilter {
  connection: AdminInviteListInviteStatus
}

input ListUserInvitesForAdminFilterInput {
  connection: AdminInviteListInviteStatus
}

type ListUsersForAdminFilter {
  endDate: Date
  includeCurrentUser: Boolean
  roles: [String]
  rolesToExclude: [String]
  startDate: Date
  userIds: [ID]
  userIdsToExclude: [ID]
  userStatus: String
}

input ListUsersForAdminFilterInput {
  endDate: Date
  includeCurrentUser: Boolean
  roles: [String]
  rolesToExclude: [String]
  startDate: Date
  userIds: [ID]
  userIdsToExclude: [ID]
  userStatus: String
}

type LocationOutput {
  description: String
  placeId: String
}

type LoginOutput {
  accessToken: String
  email: String
  error: String
  refreshToken: String
}

type LogsOutput {
  additionalInfo: String
  changeOn: Date
  changedBy: String
  changedByDetails: UserOutput
  moreInfo: String
  reason: String
  statusFrom: String
  statusTo: String
}

input ManualNoumReferencePayload {
  capacity: NoumReferenceCapacity!
  imageUrl: String
  providerName: String!
  referenceText: String!
}

type MatchOutput {
  _id: ID
  matchScore: Int
  matchUid: UserOutput
  skillOwn: [ID]
}

type Matches {
  count: Int
  matches: [MatchOutput]
  uid: UserOutput
}

input MaxMinInput {
  max: Int
  min: Int
}

type MaxMinValue {
  max: Int
  min: Int
}

type Member {
  _id: ID!
  connection: ConnectionType
  role: [MemberRoles]
  user: UserOutput
}

enum MemberRoles {
  ADMIN
  MEMBER
}

type MembersOutput {
  count: Int
  data: [Member]
}

type MessageOutput {
  message: String
}

input MicroDepositAmountInput {
  amount1: CurrencyInput!
  amount2: CurrencyInput!
}

enum ModeEnum {
  PHONE
  PRIMARY_EMAIL
  SECONDARY_EMAIL
}

input MoveToolToNoumLayoutColumnInput {
  columnId: ID!
  position: Int!
  toolId: ID!
}

type Mutation {
  CreateSubscribe(subscriptionInput: SubscriptionInputType!): [SubscriptionOutput!]!
  OTPVerification(email: String, otp: Int, phone: String): OTPResponseOutput
  _: Boolean
  acceptKnock(knockId: ID!): SocialGroup
  acceptRaiseHandRequest(groupId: ID!, requestedByUserId: ID!): SocialGroup
  acceptSpeakerInvitation(groupId: ID!): SocialGroup
  addAnswer(answerBody: String!, questionId: ID!): NoumQuestionOutput
  addAppActivity(input: AppActivityInput!): AppActivity
  addBank(publicToken: String): [ChameleonBankListOutput]
  addComment(_id: ID!, content: String, tags: [TagsInput]): PostOutput
  addCommentToPost(_id: ID!, content: String, tags: [TagsInput]): CommentOutput
  addCookieConsent(input: CookieConsentInput!): CookieConsentOutput
  addDebitAccount(accountNumber: String!, accountSubType: String!, bankId: String!): Boolean
  addDepositAccount(accountNumber: String!, accountSubType: String!, bankId: String!): Boolean
  addElements(input: [CreateElementInput], isCalledFromNoumEditor2: Boolean, spaceId: ID!): [ElementOutput]
  addElementsToProjectChamber(input: [ProjectElementInput!], spaceId: ID!): [ElementOutput!]
  addManualReferenceForNoum(experienceId: ID!, reference: ManualNoumReferencePayload!): NoumReference!
  addNetwork(input: NetworkInput, spaceId: ID!): NetworkOutput
  addNewNoumContact(input: AddNewNoumContactInput!): NoumContactOutput!
  addNoumFile(input: AddNoumFileInput!): NoumFile!
  addNoumLayoutTool(input: AddNoumLayoutToolInput!): ElementOutput!
  addPaymentDetails(input: PaymentInput): PaymentDetailsOutput
  addPaymentProvider(input: AddPaymentProviderInput!): MessageOutput
  addProjectChamberCategory(input: ProjectChamberCategoryInput!): ProjectChamberCategory!
  addQuestionAnswers(input: [QuestionsInput]): Boolean
  addReaction(_id: ID!, type: ReactionCategory): PostOutput
  addReactionOnComment(commentId: ID!, postId: ID!, type: ReactionCategory!): CommentReplyReactionOutput
  addReactionOnCommentReply(commentId: ID!, postId: ID!, threadId: ID!, type: ReactionCategory!): CommentReplyReactionOutput
  addRemoveNoumSubscription(noumInput: NoumTransactionInputType!): NoumTransactionFee!
  addReplyToComment(commentId: ID, content: String, tags: [TagsInput]): PostOutput
  addReplyToCommentV2(commentId: ID, content: String, tags: [TagsInput]): ThreadOutput
  addReplyToCommentV3ForGenericEntity(_id: String!, content: String, tags: [TagsInput]): CommentOutput
  addRiseUserBank(applicationId: String, publicToken: String): addBankResponse
  addStatementDetails(input: StatementInput): StatementDetailsOutput
  addUserAddress(input: AddressInput): AddressOutput
  addUserIncomeData(input: UserIncomeData): Boolean
  applyForRiseApplication(noumId: ID!): RiseApplication
  approveConnectionRequest(connectionRequestId: ID!): Boolean!
  approveCustomerKYC(id: String!, msg: String!): PaymentCustomerDetailOutput
  approveNoumInvitation(noumId: ID!): Boolean!
  approveNoumMemberRolePromotion(noumId: ID!): Boolean!
  archiveNoumContact(contactId: ID!): Boolean!
  archiveNoumContacts(contactIDs: [ID!]!): Boolean!
  archiveNoumRole(noumRoleId: ID!): Boolean!
  archiveUserSpaces(userIDs: [ID!]!): Boolean
  askForNoumReference(experienceId: ID!, reference: AskForReferencePayload): NoumReference!
  assignHost(socialHallId: String, userId: String): SocialHallAttendee
  autoInvoicePayment(input: InvoiceTransactionInput!): PaymentOutput!
  belvoAccessToken(input: belvoAccessTokenInput): BelvoAccessToken
  blockUser(eventId: ID!, isBlocked: Boolean, userId: ID!): Boolean
  cancelConnectionRequestToNoum(noumId: ID!): Boolean!
  cancelInvoiceReport(report_id: Float!): Boolean!
  cancelKnock(knockId: ID!): Knock
  cancelNoumInvitation(memberId: ID!): Boolean!
  cancelNoumLayoutChanges(noumId: ID!): Boolean!
  cancelNoumMemberRolePromotion(memberId: ID!): Boolean!
  cancelProjectNoumCampaign(campaignId: ID!): ProjectNoumCampaign
  cancelRaiseHandByGroupId(groupId: ID!): SocialGroup
  cancelSpeakerInvitation(groupId: ID!, invitedUserId: ID!): SocialGroup
  cancelSubscription(reason: String, subscription_id: Float!): Boolean!
  capitalquotient: CapitalquotientMutations
  changeNoumMembersRole(input: ChangeNoumMemberRoleInput!): Boolean!
  changeProjectChamberStatus(spaceId: ID!, status: SpaceStatusEnum): SpaceOutput
  clearGlobalSearchIndex: Boolean!
  clearNonActiveUserEntities: Boolean!
  clearNoumContactsIndex: Boolean!
  clearNoumMembersIndex: Boolean!
  clearRecentSearchesIndex: Boolean
  closeCalendarMainEvent(socialHallId: ID!): Boolean
  closeSocialHallGroup(socialHallId: ID!): Boolean
  connectToNoum(noumId: ID!): SpaceOutput!
  createAccountDwolla(plaidToken: String!): MessageOutput
  createAdCampaign(input: AdCampaignInput): AdCampaignOutput
  createAdCampaignCsvReport(filters: AdCampaignCsvReportCreateInput): Boolean!
  createAdCampaignOffer(input: AdCampaignOfferInput!): AdCampaignOffer!
  createAddress(input: AddressInput): Boolean
  createAndUpdateSpotLightAdmin(chamberIds: [ID!]!, markSpotLight: Boolean!, spotLightForAll: Boolean!, userIds: [ID!]): [SpaceOutput]
  createChargebeeCustomer(customer: CustomerInputType!): Customer!
  createCommentForGenericEntity(content: String, entityId: String!, entityType: String, tags: [TagsInput]): CommentOutput
  createContractReport(filters: ContractReportFiltersInput!): Boolean
  createConversation(_id: ID!, input: ConversationInput): ConversationIdOutput @deprecated(reason: "Use getOrCreateConversation.")
  createCustomer(input: CreateCustomerInput!): CreateCustomerOutput
  createCustomerPayee(input: CreateCustomerPayee!): MessageOutput
  createCustomerUnverified: CreateCustomerOutput
  createEvent(input: CreateEventInput): Event
  createEventInvitation(_id: ID!, acceptAll: Boolean, chamberId: ID, userId: ID!): Event
  createGroup: Group
  createGroupInvitation(input: SendGroupInviteInput): UserOutputForGroup
  createGroupRequest(_id: ID!): GroupInvitation
  createInstantEvent(input: CreateInstantEventInput!): Event
  createInternalPlan(details: ItemInput!): PlanSettingOutput
  createInvitation(input: SendInviteInput): UserOutput
  createInvoiceDraft(input: InvoiceDraftInput): InvoiceOutput
  createInvoicePayment(input: InvoicePaymentInput!): InvoicePaymentOutput
  createInvoiceReport(input: PaymentSubReportGenerateInput!): Boolean!
  createInvoiceToolReport(filters: InvoiceToolReportFiltersInput!): Boolean
  createItem(details: ItemInput!): ItemOutput!
  createItemFamily(details: ItemFamilyInput!): ItemFamilyOutput!
  createItemPrice(details: ItemPriceInput!): String!
  createMultipleEventInvitation(_id: ID!, chamberIds: [ID], userIds: [ID!]!): [CurrentUser!]!
  createNewContract(input: CreateNewContractInput!): Contract!
  createNewItem: String!
  createNewSOW(input: CreateNewSOWInput!): SOW!
  createNote(customerId: String!, text: String!): Note
  createNotification(input: String): Boolean
  createNotificationV2(input: String): Boolean
  createNoumClass(input: InputNoumClass!): NoumClass
  createNoumLayoutSection(input: CreateNoumLayoutSectionInput!): NoumLayoutSection!
  createNoumProgram(input: InputNoumProgram!): NoumProgram
  createNoumRole(input: CreateNoumRoleInput!): NoumRole!
  createOpsPermission(opsPermission: OpsPermissionInputCreate): OpsPermissionOutput
  createOpsRole(opsRole: OpsRoleInputCreate): OpsRoleOutput
  createOrUpdateSocialHallForEvent(input: EventSocialHallInput): SocialHall
  createOrUpdateTokenArchive(tillDate: Date!): Boolean
  createPassCode(input: CreatePassCodeInput!): MessageOutput
  createPayment(input: createPaymentInput!): PaymentOutput
  createPaymentSubscriptionPlanGlobalSetting: Boolean!
  createPaymentSubscriptionSetting(settingsInput: SettingsInput!): Boolean!
  createPersonal(input: PersonalInput): PersonalProfileOutput
  createPlaidLink(androidPackageName: String): CreatePlaidLinkOutput
  createPost(input: PostInput): PostOutput
  createPostForChamber(input: PostInput): PostOutput
  createProduct(input: CreateProductInput): NewProductOutput
  createProjectChamber(input: ProjectChamberInput): SpaceOutput
  createProjectNoumCampaign(spaceId: ID!, targets: [CampaignAudienceTarget!]!): ProjectNoumCampaign
  createQuestion(input: QuestionInput!): NoumQuestionOutput
  createRenewedPlaidLink(input: RenewedPlaidToken!): CreatePlaidLinkOutput
  createRiseReport(filters: RiseReportFiltersInput): Boolean!
  createSignedUrl(fileName: String, fileType: String): String
  createSocialHall(input: SocialHallInput): SocialHall
  createSowReport(filters: SowReportFiltersInput!): Boolean
  createSpace(input: SpaceInput): SpaceOutput
  createSsn(isUSResident: Boolean, ssn: String): Boolean
  createStripeCustomer: CreateCustomerOutput
  createSubWallet(input: createSubLedgerInput): createSubLedgerOutput
  createSubscriptionAndInvoiceFromHostedPages(hosted_id: String!): SubscriptionOutput!
  createSurvey(input: SurveyInputCreate!): Survey!
  createSurveyPage(input: SurveyPageInputCreate!): SurveyPage!
  createTwilioToken: TwilioTokenOutput
  createUpdateAdCampaignReport(input: AdCampaignReportInput): AdCampaignReportOutput
  createUserInvoiceLineItem(input: InvoiceLineItemInput): InvoiceLineItem
  createUserRiseAddress(input: AddressInputRise): RiseUserDataOutput
  createUserRiseProfile(input: PersonalInput): RisePersonalProfileOutput
  createVideoThumbnail(url: String!): String!
  declineKnock(knockId: ID!): Knock
  declineRaiseHandByGroupId(groupId: ID!, requestedByUserId: ID!): SocialGroup
  declineSpeakerInvitation(groupId: ID!): SocialGroup
  deleteAccount(input: DeleteAccountInput): Boolean
  deleteAdCampaign(campaignId: ID!): AdCampaignOutput
  deleteAdCampaignOffer(offerId: String!): GenericResponseOutput!
  deleteAdCampaignReport(campaignId: ID!, reportId: ID!): AdCampaignReportOutput
  deleteAllEventsByUserId(userId: ID!): Boolean
  deleteCommentForGenericEntity(_id: ID!): CommentOutput
  deleteConnection(_id: ID!): UserOutput
  deleteContract(contractId: ID!): Boolean!
  deleteEvent(_id: ID!): Event
  deleteGroup(_id: ID!): GroupOutput
  deleteIdScanCheck: Boolean
  deleteInvoice(id: ID!): InvoiceOutput
  deleteInvoicePayment(id: ID!): InvoicePaymentOutput
  deleteNote(noteId: ID!): Boolean
  deleteNoumFile(fileId: ID!): Boolean!
  deleteOpNotification(_id: ID): Boolean
  deletePaymentProvider(id: String!): MessageOutput
  deletePost(_id: ID!): Boolean
  deleteQuestion(questionId: ID!): Boolean
  deleteReplyToComment(commentId: String, postId: ID!, replyId: String): PostOutput
  deleteReplyToCommentV2(commentId: String, postId: ID!, replyId: String): Boolean
  deleteSOW(_id: ID!): Boolean
  deleteSpace(spaceId: ID!): Boolean
  deleteSpaceConversation(spaceId: ID!): Boolean
  deleteSurvey(_id: String!): Boolean!
  deleteUserBankLink(publicToken: String): UserBankLinkOutput
  deleteUserInfo: Boolean
  deleteUserInvoiceLineItem(_id: ID!): InvoiceLineItem
  discardNoumReference(referenceId: ID!): NoumReference!
  docuSignAcceptance(input: DialsInput): DocuSignOutput
  duplicateInvoice(invoiceId: ID!): InvoiceOutput
  duplicateNoumLayoutSection(sectionId: ID!): NoumLayoutSection!
  duplicateNoumLayoutTool(toolId: ID!): ElementOutput!
  editAccountPassword(newPassword: String!, oldPassword: String!): EditAccountPasswordOutput
  exitFromGroup(groupId: ID!): SocialGroup
  exitFromSocialHall(fromLeaveCTA: Boolean, socialHallId: ID!): SocialHallAttendee
  favouriteNoum(noumId: ID!): Boolean
  fetchAndCreatePlans: [PlanItem!]!
  generateAdminReport(input: CreateAdminReportInput!): Boolean
  generateAiImages(prompt: String!): [String!]!
  generateAutoDebitContract: DocuSignOutput
  generateOTPForPasswordCreation: OTPForPasswordOutput
  generateOTPForVerification(email: String, phone: String): OTPResponseOutput
  generateOneTimeToken: String
  generateReferralCode(productKey: String): Referral
  generateReferralCodeV2(productKey: String): Referral
  generateUserS3SignedUrl(bucketName: String, file: FileInput!): SignedUrlOutput
  getOrCreateConversation(_id: ID, userIds: [ID]): ConversationIdOutput
  getOrCreateGlobalConversation(_id: ID, userIds: [ID]): ConversationOutput
  getOrCreateSpaceConversation(spaceId: ID!, userIds: [ID]): ConversationOutput
  groupEvent(eventName: String!, groupId: ID!, input: Object): Boolean
  handleFollow(action: FollowActionEnum!, source: FollowSource, spaceId: ID!): SpaceOutput
  handleSOWLinking(contractId: ID!, link: Boolean, sowId: ID!): SOW!
  healthCheck: String
  hideNotifications(input: HideNotificationInput): Boolean
  hideNotificationsV2(input: HideNotificationInputV2): Boolean
  identityCheck: String
  inactivateGroupAdmin(user: ID!): Boolean
  initiateMicroDepositDwolla(input: AccountRoutingInput!): AccountListOutput
  initiateTipForAnswer(input: TipsInput!): Boolean
  inviteAsSpeaker(groupId: ID!, invitedUserIds: [ID!]!): SocialGroup
  inviteNewNonNoumenaMember(input: InviteNonNoumenaMemberInput!): Boolean!
  inviteNonNoumenaMember(input: NMUserInput): NMUserOutput
  inviteNoumMembers(input: InviteNoumMembers!): Boolean!
  joinGroupWithoutKnocking(groupId: ID!): SocialGroup
  joinSocialHall(input: SocialHallAttendeeInput): SocialHallAttendee
  joinSocialHallV2(name: String): SocialHallAttendee
  joinWaitingList(email: String): Boolean
  kickNoumMembers(memberIDs: [ID!]!): Boolean!
  knock(input: KnockInput): Knock
  leaveNoumMembership(noumId: ID!): Boolean!
  leaveSocialHall(socialHallId: ID!): SocialHallAttendee
  linkNoums(linkedNoumIDs: [ID!]!): NoumLink
  makeAccountDefault(id: String!): MessageOutput
  markBroadcastedNoumAsViewed(spaceId: ID!): Boolean
  markNotificationAsRead(_id: ID!): Notification
  markNotificationAsReadV2(_id: ID!): NotificationV2
  markNoumAsRecent(noumId: ID!): Boolean!
  markNoumFileAsDownloaded(fileId: ID!): Boolean!
  markNoumFileAsViewed(fileId: ID!): Boolean!
  markSearchEntityAsClicked(id: ID!): Boolean!
  markSpaceAsEdited(spaceId: ID!): SpaceOutput
  moveToolToNoumLayoutColumn(input: MoveToolToNoumLayoutColumnInput!): Boolean!
  muteSpeaker(actionType: MuteSpeakerType!, groupId: ID!, speakerId: ID!): SocialGroup
  notificationHandler(input: NotificationInput): Boolean
  notificationHandlerV2(input: NotificationInputV2): Boolean
  notifyUserToSetupWallet(userId: ID!): NotifyOutput
  pinConversation(cid: String): Boolean
  pinPost(postId: ID): PostOutput
  principles: PrinciplesMutations
  publicProjectChamberElementState(currentState: ElementStatusEnum!, prevStates: [ElementStatusEnum!]!, spaceId: ID!): SpaceOutput
  publishElementState(currentState: ElementStatusEnum!, elementIds: [ID], prevStates: [ElementStatusEnum!]!, spaceId: ID!): SpaceOutput
  publishNoumLayout(noumId: ID!): Boolean!
  publishSpaceById(spaceId: ID): SpaceOutput
  raiseHandByGroupId(groupId: ID!): SocialGroup
  raiseInvoicePayment(input: RaiseInvoicePaymentInput!): RaisePaymentOutput
  rearrangeNoumHierarchyOrder(reorderedRoleIDs: [ID]!): Boolean!
  rearrangeSectionInNoumLayout(input: RearrangeSectionInNoumLayoutInput!): Boolean!
  redoNoumLayoutChange(noumId: ID!): NoumLayout!
  rejectAdCampaignOffer(offerId: String!, reason: String): GenericResponseOutput!
  rejectConnectionRequest(connectionRequestId: ID!): Boolean!
  rejectContract(documentId: ID!): Boolean!
  rejectCustomerKYC(id: String!, msg: String!): PaymentCustomerDetailOutput
  rejectNoumInvitation(noumId: ID!): Boolean!
  rejectNoumMemberRolePromotion(noumId: ID!): Boolean!
  rejectSow(documentId: ID!): Boolean!
  removeAccount(id: String!): MessageOutput
  removeCalendar(chamberId: ID!): Boolean
  removeComment(_id: ID!, commentId: ID!): PostOutput
  removeCustomerPayee(id: String!): MessageOutput
  removeDiscoveryProfiles(input: [ID]): Boolean
  removeElement(elementId: ID!, spaceId: ID!): SpaceOutput
  removeFollowersFromSpace(spaceId: ID!, userIds: [ID!]): SpaceOutput
  removeFromSocialHall(socialHallId: ID!, userId: ID!): Boolean
  removeGroupMember(_id: ID, groupId: ID!): [Member]
  removeInitiateMicroDepositDwolla(id: String!): AccountListOutput
  removeNetwork(networkId: ID!, spaceId: ID!): Boolean
  removeOpsPermission(permissionId: ID!): Boolean
  removeOpsRole(roleId: ID!): Boolean
  removePayment(paymentId: String): Boolean
  removeProjectChamberElement(elementId: ID!, spaceId: ID!): SpaceOutput!
  removeRaiseHandsRequest(socialHallId: ID!): SocialGroup
  removeReaction(_id: ID!, type: ReactionCategory): PostOutput
  removeRecommendation(_id: ID!): Matches
  removeSectionFromNoumLayout(sectionId: ID!): Boolean!
  removeSpeaker(groupId: ID!, speakerId: ID!): SocialGroup
  removeStatement(statementId: String): Boolean
  removeSubWallet(chamberId: String!): MessageOutput
  removeToolFromNoumLayout(toolId: ID!): Boolean!
  removeUnsavedAndDraftedData(spaceId: ID): SpaceOutput
  removeUserSpaces(userIDs: [ID!]!): Boolean
  removedPrevState(spaceId: ID!, state: ElementStatusEnumForStateChange!): SpaceOutput
  requestConnection(message: String, ownSpaceId: ID!, requestedSpaceId: ID!): SpaceConnection
  resendContractOrSowNotification(documentId: ID!, sendTo: [PARTIES!], type: ContractSOW!): Boolean!
  resetConnectionCount: User
  resetPassCode(input: ResetPassCodeInput!): MessageOutput
  resetPlanConfigurations: Boolean
  resignFromNoumCoManagerRole(input: ResignFromNoumCoManagerRoleInput!): Boolean!
  restoreNoumRole(noumRoleId: ID!): Boolean!
  retryBulkReport(id: String): MessageOutput
  retryTransaction(id: String!): MessageOutput
  rewritteNoumLayoutUnsavedChanges(input: RewritteNoumLayoutUnsavedChangesInput!): NoumLayout!
  saveBulkPaymentFile(documentName: String!, title: ReportImportTitle): MessageOutput
  saveCardStripe(paymentId: String!): StripeCardOutput
  saveNoumLayoutAsDraft(noumId: ID!): Boolean!
  saveOpNotification(input: NotificationOPInput): NotificationOP
  sendConnectionInvite(invitedSpaceId: ID!, message: String, ownSpaceId: ID!): SpaceConnection
  sendDocumentForSigning(documentId: ID!, senderNote: String, type: ContractSOW!): Boolean!
  sendEmail(input: EmailParams): Boolean
  sendInvoice(id: ID!): InvoiceOutput
  sendInvoiceReminder(customMessage: String, id: ID!): Boolean
  sendMultipleConnectionInvite(invitedSpaceIds: [ID!]!, message: String, ownSpaceId: ID!): [SpaceConnection]
  sendNeedMoreInfoEmail: Boolean
  sendNotification(input: String): Boolean
  sendOpNotification(input: NotificationOPInput): NotificationOP
  sendPostReport(input: ReportInput): PostOutput
  sendSms(input: SmsParams): Boolean
  sendUserNotification(input: String): Boolean
  sendUserNotificationV2(input: String): Boolean
  setAllowResetPassCode(userId: String!): MessageOutput
  setCustomerTransactionLimitFlag(flag: Boolean!, id: String!): MessageOutput
  setInviteInactive(token: String!): Boolean
  setNoumLayoutToolMetaValue(input: SetNoumLayoutToolMetaValueInput!): ElementOutput!
  signContract(documentId: ID!): Boolean!
  signSow(documentId: ID!): Boolean!
  spotlightPlans(enabled: Boolean!, plan_setting_id: Float!): Boolean!
  spotlightSelectedPlan(spotlightInput: SpotlightPlanInput!): Boolean!
  ssnUniqueness: PersonalProfileOutput
  startCalendarMainEvent(socialHallId: ID!): SocialGroup
  submitOnboardingQuestionnaire(input: [submitOnboardingQuestionnaire]): submitOnboardingQuestionnaireOutput
  submitSurveyAnswer(input: SurveyAnswerInputCreate!): Boolean!
  submitUserApplication(appContinue: applicationStatus, applicationId: String): RiseUserDataOutput
  syncAndUpdatePlans: [PlanSettingOutput]
  testToken(data: String): Boolean
  tipTransaction(input: TipTransactionInput!): PaymentOutput!
  toggleFastPass(active: Boolean!, code: String!): Referral
  turnOffAutoDebit: Boolean
  unPinConversation(cid: String): Boolean
  unarchiveNoumContacts(contactIDs: [ID!]!): Boolean!
  underwriting: UnderwritingMutations
  undoNoumLayoutChange(noumId: ID!): NoumLayout!
  unfavouriteNoum(noumId: ID!): Boolean
  unlinkNoumLink(noumLinkId: ID!): NoumLink
  unlinkNoums(linkedNoumIDs: [ID!]!, noumLinkId: ID!): NoumLink
  updateAccountFlag(input: UpdateAccountFlagInput): MessageOutput
  updateAdCampaign(input: UpdateAdCampaignInput): AdCampaignOutput
  updateBillingAddress(billingAddress: BillingAddressInpuType!): Customer!
  updateChargebeeCustomer(customer: CustomerInputType!): Customer!
  updateCommentForGenericEntity(_id: String!, content: String, entityType: String, tags: [TagsInput]): CommentOutput
  updateConnectionPermission(input: ConnectionPermissionInput!): [SpaceConnection]
  updateConnectionPermissionV2(permissions: [PermissionInputV2!]!): Boolean!
  updateConnectionStatus(connectionId: ID!, status: ConnectionRequestTypeEnum): SpaceConnection
  updateContract(contractId: ID!, input: ContractInput!): Contract!
  updateConversationParticipants(cid: String!, uid: ID!): Boolean
  updateCustomerAddressDetails(input: CustomerAddressInput): AddressOutput
  updateCustomerContactDetails(additionalEmail: String, mode: ModeEnum, phone: String): ContactOutput
  updateCustomerDocument(input: UpdateCustomerDocumentInput!): CustomerDocumentOutput
  updateCustomerFirstTimeFlag: Boolean
  updateCustomerPersonalDetails(input: CustomerPersonalInput): PersonalOutput
  updateDiscoveryFromUser(input: String): Boolean
  updateElement(id: ID!, input: [ElementInput!]): SpaceOutput
  updateElementByElementType(elementType: ElementTypeEnum!, input: ElementInput!, spaceType: SpaceTypeEnum!): SpaceOutput
  updateElementPosition(input: [ElementPositionInput], spaceId: ID!): SpaceOutput
  updateEvent(input: UpdateEventInput): Event
  updateEventStatus(_id: ID!, status: EventsStatus!): Event
  updateGroup(_id: ID!, input: GroupInput): Group
  updateGroupInvitation(input: UpdateGroupInvitation, limit: Int): InvitationOutput
  updateGroupInvitationV2(input: UpdateGroupInvitation): Group
  updateGroupName(groupId: ID!, input: SocialGroupInput): SocialGroup
  updateGroupRequest(input: UpdateGroupInvitation, limit: Int): InvitationOutput
  updateInvitation(input: UpdateInvitation): [Invitation]
  updateInviteStatus(_id: ID!, acceptAll: Boolean, status: InvitationStatus!): Event
  updateInvoice(id: ID!, input: UpdateInvoiceDraftInput): InvoiceOutput
  updateInvoicePayment(id: ID!, input: UpdateInvoicePaymentInput!): InvoicePaymentOutput
  updateInvoiceStatus(id: ID!, status: InvoiceStatusEnumInput): InvoiceOutput
  updateInvoiceTags(invoiceInput: UpdateInvoiceTagsInput!): InvoiceDetail!
  updateLocation(input: UpdateSocialHallAttendeeInput, socialHallAttendeeId: ID!): SocialHallAttendee
  updateMemberRole(_id: ID!, groupId: ID!): Member
  updateNote(noteId: ID!, text: String!): Note
  updateNotificationEventShowStatus(eventId: ID!, userId: ID): Boolean
  updateNotificationEventShowStatusV2(eventId: ID!, userId: ID): Boolean
  updateNotificationInviteStatus(input: String): Boolean
  updateNotificationInviteStatusV2(input: String): Boolean
  updateNotificationPostShowStatus(_id: ID): Boolean
  updateNotificationPostShowStatusV2(_id: ID): Boolean
  updateNotificationsReadStatus(_id: ID): Notifications
  updateNotificationsReadStatusV2(_id: ID): NotificationsV2
  updateNoumApplicationResult(_id: ID!, input: ApplicationResultInput!): ApplicationResult
  updateNoumApplicationResultForAdmin(_id: ID!, input: ApplicationResultInputAdmin!): ApplicationResult
  updateNoumClass(id: ID!, input: UpdateNoumClass!): NoumClass
  updateNoumContact(input: UpdateNoumContactInput!): NoumContactOutput!
  updateNoumCustomPreview(elements: [NoumCustomPreviewElementInput!], noumId: ID!): SpaceOutput
  updateNoumFile(input: UpdateNoumFileInput!): NoumFile!
  updateNoumLayoutSection(input: UpdateNoumLayoutSectionInput!): NoumLayoutSection!
  updateNoumProgram(id: ID, input: UpdateNoumProgram!): NoumProgram
  updateNoumReference(payload: UpdateNoumReferencePayload!, referenceId: ID!): NoumReference!
  updateNoumReferenceStatus(referenceId: ID!, status: NoumReferenceStatus!): NoumReference!
  updateNoumRole(input: UpdateNoumRoleInput!): NoumRole!
  updateNoumTransactionStatus(input: NoumTransactionUpdateStatusInput!): Boolean!
  updateNoumTransactionValidDays(input: NoumTransactionUpdateValidInput!): Boolean!
  updateNoumVisibilitySettings(spaceId: ID!, visibility: ProjectChamberType!): SpaceOutput
  updateOpNotification(_id: ID, input: NotificationOPInput): NotificationOP
  updateOpsPermission(opsPermission: OpsPermissionInputUpdate): OpsPermissionOutput
  updateOpsRole(opsRole: OpsRoleInputUpdate): OpsRoleOutput
  updatePaymentConfig(name: String!, value: String!): PaymentConfiguration
  updatePaymentProvider(input: UpdatePaymentProviderInput!): MessageOutput
  updatePaymentSubscriptionSetting(settingsInput: SettingsUpdateInput!): SettingsOutput!
  updatePaymentTCAcceptance(paymentTCAcceptanceInput: Boolean!): UserOutput
  updatePlanDetails(details: PlanDetailUpdateInput!): PlanDetail
  updatePlanEnabled(enabled: Boolean!, planSettingId: Float!): Boolean!
  updatePlanOrder(input: PlanSettingUpdateOrder!): Boolean!
  updatePlanSetting(data: PlanSettingUpdateInput!, planSettingId: Float!): Boolean!
  updatePlanVisiblity(period_unit: String!, plan_id: Float!, visiblity: Boolean!): Boolean!
  updatePost(_id: ID!, input: PostInput): PostOutput
  updatePostReadStatus: unreadCountOutput
  updateProfileElement: SpaceOutput
  updateProjectChamber(input: ProjectChamberUpdateInput, spaceId: ID!): SpaceOutput
  updateProjectChamberElementPosition(input: [ElementPositionInput!], spaceId: ID!): SpaceOutput!
  updateProjectChamberElements(id: ID!, input: [ProjectElementInput!]): SpaceOutput!
  updateQuestion(input: QuestionUpdateInput, questionId: ID!): NoumQuestionOutput
  updateReferralCount(inviteeUserId: String, referralCode: String): ReferralInvite
  updateReferralMaxAllowedCount(maxAllowedCount: Int, referralId: ID): Referral
  updateSOW(SOWId: ID!, input: UpdateSOWInput!): SOW!
  updateSocialHall(hallId: String, input: UpdateSocialHallInput): SocialHall
  updateSocialHallAttendeesStatus(id: ID!, socialHallId: ID!, status: SocialHallAttendeeStatus): SocialHallAttendee
  updateSpace(id: ID!, input: SpaceUpdateInput): SpaceOutput
  updateSurvey(_id: String!, input: SurveyInputUpdate!): Survey!
  updateSurveyPage(_id: String!, input: PageInputUpdate!): SurveyPage!
  updateTheme(input: ThemeInput, themeId: ID!): ThemeOutput
  updateUnreadMessageCount(cid: String): unreadCountOutput
  updateUserActionLog(input: UserActionLogInput): UserActionLog
  updateUserAddressByAdmin(email: String, id: ID, input: AddressInput!): User
  updateUserContact(input: [ContactInput]): User
  updateUserCpfNumberAndAnswer(cpf: String, questionAnswer: [QuestionsRiseInput]): RiseUserDataOutput
  updateUserData(input: UpdateUserDataInput): User
  updateUserDetailsByAdmin(input: updateUserByAdminInput): User
  updateUserInvoiceLineItem(_id: ID!, input: UpdateInvoiceLineItemInput!): InvoiceLineItem
  updateUserKyc(input: KycInput): KycOutput
  updateUserMediaTestingForSH(accept: Boolean!): Boolean
  updateUserPreferences(input: UserPreferencesInput!): UserPreferences!
  updateUserProfile(input: UserProfileInput): User
  updateUserProfilePicture(profilePictureLink: String): User
  updateUserReferralAndStatus(referralCode: String): User
  updateUserRolesForAdmin(_id: ID!, roles: [ID!]): UserOutput
  updateUserSkillSought(input: [ID!]): Discovery
  updateUserSkills(input: [ID!]): Discovery
  updateUserStatus(input: userInput): UserOutput
  updateUserType(input: UpdateUserDataInput): SuccessMessageOutput
  upgradeDowngradeSubscription(details: SubscriptionUpgradeDowngradeInput!): JSON!
  upsertDeviceToken(input: DeviceToken): [DeviceTokenOutput]
  validateResetPasswordOTP(newPassword: String!, otp: String!): validateResetPasswordOutput
  validateSecurityQuestion(securityQuestion: SecurityQuestion!): MessageOutput
  verifyMicroDepositDwolla(input: VerifyMicroDepositInput): AccountListOutput
  verifyUserIdentity(input: UserIdentityInput): String
  verifyUserProfile: Boolean
  verifyWithOneTimeAuth(token: ID): OneTimeTokenOutput
}

type MuteSpeakerSubscriptionData {
  actionType: MuteSpeakerType
  userId: ID
}

enum MuteSpeakerType {
  MUTE
  UNMUTE
}

input NMUserInput {
  email: String!
  firstName: String!
  lastName: String!
  message: String
  noumDetails: NoumDetalisInput!
  requestedForNoumId: ID!
}

type NMUserOutput {
  id: ID!
}

enum NOUM_FEE_OPERATION_TYPE {
  ACTIVATION
  ARCHIVED
  OPS_ADMIN
  RENEWAL
  SCHEDULED
}

input NetworkInput {
  accessToken: String!
  connectionType: ConnectionTypeEnum!
  isActive: Boolean
  userId: String
}

type NetworkOutput {
  _id: ID
  accessToken: String
  connectionType: ConnectionTypeEnum
  expiryDate: String
  isActive: Boolean
  userId: String
}

type NeuroProfileQueries {
  getNeuroQuestion(input: NeuroQuestionInput, shortQuestionnare: Boolean): Json
}

input NeuroQuestionInput {
  answer_id: String!
  questionaireId: String!
}

type NewProductOutput {
  _id: ID
  code: String
  countryCode: String
  currencyCode: String
  description: String
  effectiveDateFrom: String
  effectiveDateTo: String
  name: String
  productOwner: ID
}

type NoRelationBusinessOutput {
  city: String
  geo: Boolean
  id: ID
  name: String
  phone: String
  state: String
  street: String
  subcode: String
  taxId: String
  zip: String
}

type Note {
  createdAt: String
  createdBy: UserOutput
  customerId: String
  deletable: Boolean
  editable: Boolean
  id: ID
  text: String
  updatedAt: String
  updatedBy: UserOutput
}

input NotesInput {
  createdBy: ID
  customerId: String
  limit: Int
  offset: Int
  sortBy: SortNoteEnum
  updatedBy: ID
}

type Notification {
  _id: ID!
  adminUserId: UserOutput
  authorName: String
  commentId: ID
  createdAt: Date
  data: NotificationAdditionalData
  event: EventNotificationDetails
  group: GroupRef
  inviteId: ID
  inviteStatus: NotificationInviteStatus
  postId: ID
  sourceUserNoum: NoumType
  taggedPostCommentText: String
  type: NotificationType
  unread: Boolean
  updatedAt: Date
  userId: UserOutput
  users: [UserOutput]
}

type NotificationAdditionalData {
  adCampaign: NotificationDataAdCampaign
  answerId: String
  category: String
  chamber: ChamberByIdRef
  chamberId: String
  connection: ConnectionByIdRef
  connectionId: String
  contractId: Contract
  count: Int
  invoiceId: InvoiceOutput
  invoiceStatus: NotificationInvoiceStatusEnum
  message: String
  noumMember: NoumMember
  noumMemberId: String
  paymentSub: NotificationPaymentSubData
  questionId: String
  sowId: SOW
  topUpdatedElement: String
}

type NotificationAdditionalDataV2 {
  answerId: String
  category: String
  chamber: ChamberByIdRef
  chamberId: String
  connection: ConnectionByIdRef
  connectionId: String
  contractId: Contract
  count: Int
  invoiceId: InvoiceOutput
  invoiceStatus: NotificationInvoiceStatusEnumV2
  message: String
  paymentSub: NotificationPaymentSubscriptionDataV2
  questionId: String
  sowId: SOW
  topUpdatedElement: String
}

enum NotificationCategory {
  Community
  Money
  Noums
  Other
}

enum NotificationCategoryV2 {
  Community
  Money
  Noums
  Other
}

type NotificationDataAdCampaign {
  campaignId: String
  offerId: String
  reportId: String
}

input NotificationFilter {
  category: NotificationCategory
  type: [NotificationType]
}

input NotificationFilterV2 {
  category: NotificationCategoryV2
  type: [NotificationTypeV2]
}

input NotificationInput {
  answerId: ID
  category: NotificationCategory
  chamberId: ID
  connectionId: ID
  message: String
  noumMemberId: ID
  paymentSub: NotificationPaymentSubInput
  questionId: ID
  sourceUserIds: [ID]
  sourceUserNoum: NoumInput
  taggedPostCommentText: String
  title: String
  type: NotificationType
  userIds: [ID!]
}

input NotificationInputV2 {
  answerId: ID
  category: NotificationCategoryV2
  chamberId: ID
  connectionId: ID
  message: String
  questionId: ID
  sourceUserIds: [ID]
  title: String
  type: NotificationTypeV2
  userIds: [ID!]
}

enum NotificationInviteStatus {
  connected
  invited
  none
  rejected
  requested
}

enum NotificationInviteStatusV2 {
  connected
  invited
  none
  rejected
  requested
}

enum NotificationInvoiceStatusEnum {
  CANCELLED
  DRAFT
  ISSUED
  OVERDUE
  PAID
  PARTIALLY_PAID
  WRITE_OFF
}

enum NotificationInvoiceStatusEnumV2 {
  CANCELLED
  DRAFT
  ISSUED
  OVERDUE
  PAID
  PARTIALLY_PAID
  WRITE_OFF
}

type NotificationOP {
  attachmentLink: [String]
  message: String
  subject: String
  title: String
  to: String
  userId: String
}

input NotificationOPInput {
  attachmentLink: [String]
  message: String
  subject: String
  title: String
  to: String
  userId: String
}

type NotificationPaymentSubData {
  currency: String
  currencySymbol: String
  external_customer_id: String
  external_subscription_id: String
  next_billing_at: String
  noumExpiryDays: Int
  noumName: String
  planId: String
  planName: String
  planPrice: Int
  subscription_id: Int
}

input NotificationPaymentSubInput {
  currency: String
  currencySymbol: String
  external_customer_id: String
  external_subscription_id: String
  next_billing_at: String
  planId: String
  planName: String
  planPrice: Int
  subscription_id: Int
}

type NotificationPaymentSubscriptionDataV2 {
  currency: String
  currencySymbol: String
  external_customer_id: String
  external_subscription_id: String
  next_billing_at: String
  noumExpiryDays: Int
  noumName: String
  planId: String
  planName: String
  planPrice: Int
  subscription_id: Int
}

type NotificationSubscriptionData {
  _id: ID!
  type: NotificationType!
  userId: ID
}

enum NotificationType {
  DwollaDocumentReUploaded
  DwollaDocumentRequired
  DwollaDocumentUploadFail
  DwollaDocumentUploadSuccess
  DwollaDocumentUploaded
  DwollaMicroDepositComplete
  DwollaMicroDepositVerified
  DwollaWallet
  OpsAdminApproval
  OpsAdminRejection
  UploadKYCDocument
  amemdedInvoiceClient
  amemdedInvoiceFreelancer
  campaignExpired
  campaignRefreshed
  comment
  commentMentioned
  commentReplied
  commentRepliedMentioned
  commentReplyThread
  connected
  connectionDisconnected
  connectionInviteAccepted
  connectionInviteDeclined
  connectionInvited
  connectionInvitedReminder
  connectionRequestAccepted
  connectionRequestDeclined
  connectionRequested
  connectionRequestedReminder
  contractIssuedCounterParty
  contractIssuedOwner
  contractRejectedCounterParty
  contractRejectedOwner
  contractSendForSigning
  contractSignedCounterParty
  contractSignedOwner
  cqScoreUpdate
  eventCohostInvitee
  eventDateModified
  eventDeleted
  eventInvitee
  eventLive
  eventReminder
  eventStarting
  favoriteConnection
  groupInvite
  guestConnection
  instantEventInvitee
  invite
  inviteAccepted
  inviteReminder
  invoiceOnDraftState
  invoicePaymentFailedClient
  invoicePaymentFailedFreelancer
  invoiceStatusChangedClient
  invoiceStatusChangedFreelancer
  joinRequest
  like
  managerInviteAcceptedOwner
  managerInviteDeclinedOwner
  managerInviteExpired
  managerInviteExpiredOwner
  managerInvited
  managerResignedAndDisconnectedOwner
  managerResignedOwner
  managerTerminated
  managerTerminatedAndDisconnected
  managerTerminatedAndDisconnectedOwner
  managerTerminatedOwner
  memberInvitedToNoum
  memberRoleUpdated
  newAdminConnection
  newGroupPost
  newIndividualPost
  newReferralConnection
  noumArchived
  noumArchivedManager
  noumConnection
  noumFollowed
  noumPublished
  noumUnarchived
  noumUnfollowed
  paymentSubscriptionNoumExpired
  paymentSubscriptionNoumToBeExpired
  paymentSubscriptionNoumUnusedRenewSlots
  paymentSubscriptionNoumUnusedSetupSlots
  paymentSubscriptionUpcomingPayment
  postEvent
  postMentioned
  postRejected
  preEvent
  questionAnswered
  questionCreated
  reminderInvoiceClient
  reminderInvoiceFreelancer
  riseApplicationFormSubmissionReview
  riseApplicationStatusChanged
  riseApplicationSubmitted
  riseApplicationSubmittedToConnectedUser
  sendAdCampaignOffer
  sendAdCampaignReport
  sowIssuedCounterParty
  sowIssuedOwner
  sowRejectedCounterParty
  sowRejectedOwner
  sowSendForSigning
  sowSignedCounterParty
  sowSignedOwner
  spaceConversation
  tokenRewarded
  userActive
  userDeactivated
  userDisconnectFromProjectNoum
  userInactive
  userPending
  userRejected
  userUnregisgtered
  walletSetupRequest
}

enum NotificationTypeV2 {
  DwollaDocumentReUploaded
  DwollaDocumentRequired
  DwollaDocumentUploadFail
  DwollaDocumentUploadSuccess
  DwollaDocumentUploaded
  DwollaWallet
  amemdedInvoiceClient
  amemdedInvoiceFreelancer
  campaignExpired
  campaignRefreshed
  comment
  commentMentioned
  commentReplied
  commentRepliedMentioned
  commentReplyThread
  connected
  connectionDisconnected
  connectionInviteAccepted
  connectionInviteDeclined
  connectionInvited
  connectionInvitedReminder
  connectionRequestAccepted
  connectionRequestDeclined
  connectionRequested
  connectionRequestedReminder
  contractIssuedCounterParty
  contractIssuedOwner
  contractRejectedCounterParty
  contractRejectedOwner
  contractSendForSigning
  contractSignedCounterParty
  contractSignedOwner
  cqScoreUpdate
  eventCohostInvitee
  eventDateModified
  eventDeleted
  eventInvitee
  eventLive
  eventReminder
  eventStarting
  favoriteConnection
  groupInvite
  guestConnection
  instantEventInvitee
  invite
  inviteAccepted
  inviteReminder
  invoiceOnDraftState
  invoiceOnDraftStateFreelancer
  invoicePaymentFailedClient
  invoicePaymentFailedFreelancer
  invoiceStatusChangedClient
  invoiceStatusChangedFreelancer
  joinRequest
  like
  newAdminConnection
  newGroupPost
  newIndividualPost
  newReferralConnection
  noumArchived
  noumConnection
  noumFollowed
  noumPublished
  noumUnarchived
  noumUnfollowed
  paymentSubscriptionNoumExpired
  paymentSubscriptionNoumToBeExpired
  paymentSubscriptionNoumUnusedRenewSlots
  paymentSubscriptionNoumUnusedSetupSlots
  paymentSubscriptionUpcomingPayment
  postEvent
  postMentioned
  postRejected
  preEvent
  questionAnswered
  questionCreated
  reminderInvoiceClient
  reminderInvoiceFreelancer
  riseApplicationFormSubmissionReview
  riseApplicationStatusChanged
  riseApplicationSubmitted
  riseApplicationSubmittedToConnectedUser
  sowIssuedCounterParty
  sowIssuedOwner
  sowRejectedCounterParty
  sowRejectedOwner
  sowSendForSigning
  sowSignedCounterParty
  sowSignedOwner
  spaceConversation
  tokenRewarded
  userActive
  userDeactivated
  userDisconnectFromProjectNoum
  userInactive
  userPending
  userRejected
  userUnregisgtered
}

type NotificationV2 {
  _id: ID!
  adminUserId: UserOutput
  authorName: String
  commentId: ID
  createdAt: Date
  data: NotificationAdditionalDataV2
  event: EventNotificationDetailsV2
  group: GroupRef
  inviteId: ID
  inviteStatus: NotificationInviteStatusV2
  postId: ID
  type: NotificationTypeV2
  unread: Boolean
  updatedAt: Date
  userId: UserOutput
  users: [UserOutput]
}

type Notifications {
  count: Int
  data: [Notification]
  unreadCount: Int
  unviewedCount: Int
}

type NotificationsV2 {
  count: Int
  data: [NotificationV2]
  unreadCount: Int
  unviewedCount: Int
}

type NotifyOutput {
  success: Boolean
}

input NotifyReviewerInput {
  formType: String
}

input NoumActivityLogFilter {
  type: AppActivityTypes
  types: [AppActivityTypes]
  userId: ID
}

type NoumActivityStats {
  eventsHosted: Int!
  membersInvited: Int!
  messagesSent: Int!
  others: Int!
  postsPosted: Int!
  transactions: Int!
}

input NoumActivityStatsFilter {
  endDate: Date
  startDate: Date
}

type NoumClass {
  _id: ID!
  description: String
  isDeleted: Boolean
  name: String!
  noumId: SpaceOutput
  programId: NoumProgram
  questions: [JSONObject]
  reviewers: [SpaceOutput]
  type: String
}

type NoumClassList {
  count: Int
  data: [NoumClass]
}

input NoumClassQuery {
  description: String
  isDeleted: Boolean
  name: String
  noumId: ID
  programId: ID
  reviewers: [ID]
  type: String
}

type NoumColors {
  investment: JSONObject
  member: JSONObject
  project: JSONObject
  social: JSONObject
  special: JSONObject
  story: JSONObject
}

input NoumColorsInput {
  investment: JSONObject
  member: JSONObject
  project: JSONObject
  social: JSONObject
  special: JSONObject
  story: JSONObject
}

type NoumConnectionKPIDatePoint {
  date: ISODate
  values: NoumSingleConnectionKPI
}

type NoumConnectionRequest {
  _id: ID!
  requestedAt: ISODate!
  role: NoumMemberRole!
  user: UserOutput
}

type NoumConnectionsKPI {
  kpi: NoumSingleConnectionKPI
  series: [NoumConnectionKPIDatePoint]
}

enum NoumConnectionsWithinTimeframeType {
  Connected
  Disconnected
}

type NoumContactAdminResult {
  count: Int
  data: [NoumContactOutput]
}

type NoumContactOutput {
  _id: ID!
  apartmentNo: String
  city: String
  companyName: String
  connectionWithNoum(noumId: ID!): SpaceConnection
  country: String
  createdAt: ISODate!
  displayName: String!
  fullName: String
  isConnectedWithNoum: Boolean! @deprecated(reason: "Please use connectionWithNoum instead.")
  ownerId: UserOutput!
  state: String
  status: NoumContactStatus!
  street: String
  title: String
  type: NoumContactType!
  userId: UserOutput!
  zipCode: String
}

type NoumContactPaginated {
  count: Int
  data: [NoumContactOutput]
}

enum NoumContactStatus {
  Active
  Archived
}

enum NoumContactType {
  External
  Internal
}

type NoumContractOutput {
  count: Int
  data: [Contract!]
}

type NoumContractOutputAdmin {
  count: Int
  data: [Contract!]
  sowCount: Int
}

input NoumCustomPreviewElementInput {
  _id: ID!
  customPosition: Int
  isCustomPreviewVisible: Boolean
}

input NoumDetalisInput {
  owner: String!
  profileUrl: String!
  title: String!
  type: String!
}

enum NoumEditorVersion {
  V1
  V2
}

enum NoumElementProfanityStatus {
  ACCEPTED
  ERROR
  NOT_VERIFIED
  REJECTED
  VERIFYING
}

type NoumFile {
  _id: ID!
  description: String
  downloadsCount: Int!
  extension: String
  fileSize: Int!
  fileUrl: String
  name: String!
  owner: UserOutput
  status: NoumFileStatus!
  updatedAt: ISODate
  uploadedAt: ISODate!
  viewsCount: Int!
  visibilityRoles: [ID!]!
}

enum NoumFileRole {
  Favorite
  Guest
}

enum NoumFileStatus {
  Active
  Deleted
}

enum NoumFilesFilterType {
  All
  UploadedByMe
}

type NoumFollowKPIDatePoint {
  date: ISODate
  values: NoumSingleFollowKPI
}

enum NoumFollowWithinTimeframeType {
  Following
  Unfollowed
}

type NoumFollowersKPI {
  kpi: NoumSingleFollowKPI
  series: [NoumFollowKPIDatePoint]
}

input NoumGetAllFilters {
  date_from: String
  date_to: String
  is_publishable: Boolean
  plans: [String!]
  status: [STATUS_NOUM!]
  uid: String
}

type NoumGroupConversationItem implements ConversationItem {
  cids: [String]
  conversations: [BasicConversationItem]
  conversationsCount: Int
  last_updatedAt: Date
  noum: ChamberByIdRef
  unread: Int
  unreadConversation: Int
}

input NoumInput {
  name: String
  profileImage: String
}

enum NoumKPIGranularity {
  Daily
  Monthly
  Yearly
}

type NoumLayout {
  _id: ID!
  hasRedoAction: Boolean!
  hasUndoAction: Boolean!
  sections: [NoumLayoutSection!]!
  status: NoumLayoutStatus!
  uniqueToolStatuses: [UniqueToolStatus!]!
}

type NoumLayoutColumn {
  _id: ID!
  background: Boolean!
  position: Int!
  tools: [ElementOutput!]!
}

type NoumLayoutSection {
  _id: ID!
  background: Boolean!
  columns: [NoumLayoutColumn!]!
  columnsVerticalAlignType: NoumLayoutSectionVerticalAlignType!
  position: Int!
  type: NoumLayoutSectionType!
  visible: Boolean!
}

enum NoumLayoutSectionType {
  SINGLE_COLUMN
  SINGLE_COLUMN_700PX
  THREE_EQUAL_COLUMNS
  TWO_COLUMNS_LEFT_WIDER
  TWO_COLUMNS_RIGHT_WIDER
  TWO_EQUAL_COLUMNS
}

enum NoumLayoutSectionVerticalAlignType {
  BOTTOM
  CENTER
  TOP
}

enum NoumLayoutStatus {
  DRAFT
  PUBLISHED
  UNSAVED
}

enum NoumLayoutStatusFilter {
  PUBLISHED
  UNPUBLISHED
}

type NoumLink {
  _id: ID!
  connectionsCount: Int!
  followersCount: Int!
  linkedAt: ISODate!
  linkedNoums: [SpaceOutput]!
  linkedNoumsCount: Int!
  projectType: ProjectChamberType!
  status: NoumLinkStatus!
  updatedAt: ISODate
}

type NoumLinkResponse {
  count: Int
  data: [NoumLink]
}

enum NoumLinkSorting {
  Newest
  Oldest
}

enum NoumLinkStatus {
  Archived
  Linked
  Unlinked
}

type NoumMember {
  _id: ID!
  activeInvitation(noumId: ID!): ActiveNoumInvitation
  activeRequest(noumId: ID!): NoumConnectionRequest
  approvedAt: ISODate
  coManagerStatistics(input: CoManagerStatisticsInput): CoManagerStatistics
  connectedAt: ISODate
  connectedNoums(input: ConnectedNoumsWithMemberInput): ConnectedNoumsWithMember!
  noum: SpaceOutput
  noumId: ID!
  previousRole: NoumMemberRole
  requestedAt: ISODate
  role: NoumMemberRole!
  rolePromotionToApprove: NoumMemberRole
  status: NoumMemberStatus!
  updatedAt: ISODate
  user: UserOutput
}

type NoumMemberByIdRef {
  _id: ID!
  approvedAt: ISODate
  archivedAt: ISODate
  connectedAt: ISODate
  hasAccessToNoumWallet: Boolean
  message: String
  noumId: ID!
  permission: ConnectionPermissionTypeEnum
  requestedAt: ISODate
  roleId: ID!
  status: NoumMemberStatus
  type: connectionTypeEnum
  userId: ID!
  walletLimitAmount: Int
  walletLimitType: String
  welcomeMessage: String
}

type NoumMemberRole {
  _id: ID!
  isManager: Boolean!
  name: String!
  permission: String!
  rolePromotedBy: UserOutput
}

enum NoumMemberStatus {
  CANCELLED
  CONNECTED
  EXPIRED
  INVITED
  KICKED
  LEFT
  REJECTED
  REQUESTED
}

input NoumMembersInput {
  limit: Int
  noumId: ID!
  offset: Int
  roleId: ID
  searchTerm: String
  status: NoumMemberStatus
}

type NoumMembershipStatus {
  _id: ID!
  connectedAt: ISODate
  invitationSentFrom: UserOutput
  role: NoumMemberRole!
  rolePromotionToApprove: NoumMemberRole
  status: NoumMemberStatus!
}

type NoumPendingConnection {
  _id: ID!
  noum: SpaceOutput!
  requestedAt: ISODate!
  type: NoumPendingConnectionType!
  user: UserOutput!
}

enum NoumPendingConnectionType {
  CONNECTION_REQUEST
  INVITATION_REQUEST
}

type NoumProgram {
  _id: ID!
  createdBy: UserOutput
  description: String
  isDeleted: Boolean
  title: String
}

type NoumProgramList {
  count: Int
  data: [NoumProgram]
}

input NoumProgramQuery {
  description: String
  isDeleted: Boolean
  title: String
}

type NoumQuestionOutput {
  _id: ID
  answers: [AnswerOutput]
  body: String
  createdAt: ISODate
  expiryDate: ISODate
  questionImage: String
  spaceId: SpaceOutput
  updatedAt: ISODate
  user: UserOutput
}

type NoumReference {
  _id: ID!
  capacity: NoumReferenceCapacity!
  experienceId: ID!
  imageUrl: String
  providerName: String!
  referenceText: String
  status: NoumReferenceStatus!
}

enum NoumReferenceCapacity {
  CLIENT
  COLLEAGUE
  CO_WORKER
  EMPLOYER
  GUIDE
  MANAGER
  SUPERVISOR
}

type NoumReferenceMetadata {
  _id: ID!
  capacity: NoumReferenceCapacity!
  experience: JSONObject
  experienceId: ID!
  providerName: String!
}

type NoumReferenceResponse {
  count: Int
  data: [NoumReference]
}

enum NoumReferenceStatus {
  Accepted
  Discarded
  Draft
  Pending
  Rejected
}

type NoumRole {
  _id: ID!
  archivedAt: ISODate
  createdAt: ISODate!
  description: String!
  groupedPermissions: [NoumRolePermissionGroup!]!
  hierarchyOrder: Int!
  isDefault: Boolean!
  name: String!
  permissionIDs: [ID!]!
  status: NoumRoleStatus!
  updatedAt: ISODate
  usageCount: Int!
}

type NoumRoleElementHistoryLog {
  from: Boolean!
  id: ID!
  to: Boolean!
}

enum NoumRoleHistoryActionType {
  Archived
  Created
  Updated
}

type NoumRoleHistoryLog {
  field: String!
  from: StringOrInteger!
  to: StringOrInteger!
}

input NoumRoleHistoryLogInput {
  limit: Int
  noumRoleId: ID!
  offset: Int
}

type NoumRoleHistoryLogOutput {
  count: Int!
  data: [NoumRoleHistoryLogs!]!
}

type NoumRoleHistoryLogs {
  _id: ID!
  action: NoumRoleHistoryActionType!
  changes: [NoumRoleHistoryLog!]!
  createdAt: ISODate!
  permissionChanges: [GroupedNoumRolePermissionChange!]!
}

input NoumRoleOrderInput {
  order: SortOperator!
  sortBy: NoumRoleSortBy!
}

type NoumRolePermission {
  elementType: PermissibleElementType
  id: ID!
  level: NoumRolePermissionLevel!
}

type NoumRolePermissionGroup {
  elementType: PermissibleElementType
  level: NoumRolePermissionLevel!
  permissionIDs: [ID!]!
  permissions: [NoumRolePermissionItem!]!
}

type NoumRolePermissionItem {
  id: ID!
  isActive: Boolean!
  requirePermissions: [ID!]!
}

enum NoumRolePermissionLevel {
  Element
  Noum
}

enum NoumRoleSortBy {
  HIERARCHY_ORDER
  RECENTLY_UPDATED
}

enum NoumRoleStatus {
  Active
  Archived
}

type NoumSingleConnectionKPI {
  connected: Int!
  currentConnections: Int!
  disconnected: Int!
}

type NoumSingleFollowKPI {
  currentFollowers: Int!
  followed: Int!
  unfollowed: Int!
}

enum NoumStatus {
  OwnedByYou
  You
}

input NoumTransactionDetailInputType {
  """Noum ID"""
  chamber_id: String

  """Selected Noum Transaction Fee ID"""
  noum_transaction_fee_id: Float
  plan_category: PLAN_CATEGORY_ENUM
  plan_type: SUBSCRIPTION_PLAN_TYPE
  status: STATUS_NOUM

  """Selected Subscription ID"""
  subscription_id: Float

  """User ID"""
  uid: String
}

type NoumTransactionFee {
  chamber_id: ChamberByIdRef
  created_at: String
  history_details: [NoumTransactionFeeHistoryOutput!]
  is_publishable: Boolean
  noum_transaction_fee_id: Float
  operation_type: String
  status: STATUS_NOUM
  subscription_id: SubscriptionOutput
  uid: String
  updated_at: String
  valid_till: String
}

type NoumTransactionFeeByChamberIdRef {
  chamberId: String
  created_at: String
  is_publishable: Boolean
  status: STATUS_NOUM
  subscription_id: SubscriptionOutput
  updated_at: String
  valid_till: String
}

type NoumTransactionFeeHistoryOutput {
  chamber_id: String!
  created_at: String!
  message: String
  noum_transaction_fee_history_id: Float!
  operation_type: String!
  status: String!
  subscription_id: Float!
  uid: String!
  updated_at: String!
}

input NoumTransactionInputType {
  chamber_id: String!
  operation_type: NOUM_FEE_OPERATION_TYPE!
  subscription_id: Float
}

input NoumTransactionPaginationInput {
  filters: NoumGetAllFilters
  limit: Float = 15
  offset: Float = 0
  sort_key: String = "updated_at"
  sort_value: SORT = DESC
}

input NoumTransactionStatusInputType {
  """Noum ID"""
  chamber_id: String

  """Selected Noum Transaction Fee ID"""
  noum_transaction_fee_id: Float
  status: STATUS_NOUM

  """Selected Subscription ID"""
  subscription_id: Float
}

input NoumTransactionUpdateStatusInput {
  chamber_id: String
  is_publishable: Boolean
  noum_transaction_fee_id: Float
  status: STATUS_NOUM
}

input NoumTransactionUpdateValidInput {
  days: Float!
  noum_transaction_fee_id: Float!
}

type NoumType {
  name: String
  profileImage: String
}

input NoumenaScoreInput {
  blessing: String
  capitalQuotient: String
  noumId: ID!
  status: String
  uid: ID!
  visibility: String
}

type NoumenaScoreOutput {
  blessing: String
  capitalQuotient: String
  createdAt: String
  noumId: ID
  reviewDate: String
  scoreId: ID
  status: String
  uid: ID
  updatedAt: String
  visibility: String
}

type NoumenaScoreOutputByNoumId {
  capitalQuotient: String
  noumId: ID
}

input NoumenaScoreVisibilityInput {
  noumId: ID!
  visibility: String
}

enum NoumenaUserType {
  NOUMENA
  USER
}

type OTPForPasswordOutput {
  message: String
  nextRequestAfter: String
  nextRequestAfterInSecond: Int
  remainingRequest: Int
  success: Boolean!
}

type OTPOutput {
  error: String
  success: Boolean
}

type OTPResponseOutput {
  Status: Int
  error: Boolean
  message: String
  success: Boolean
}

scalar Object

input OffsetLimit {
  offset: Int
  page: Int
}

type OneTimeTokenOutput {
  accessToken: String
  email: String
  refreshToken: String
}

input OpsPermissionInputCreate {
  permissions: [String]!
  roles: [String]!
  uid: String!
}

input OpsPermissionInputUpdate {
  permissionId: ID!
  permissions: [String!]
  roles: [String!]
  uid: ID
}

"""Type type starts here"""
type OpsPermissionOutput {
  _id: ID
  createdAt: Date
  permissions: [String]
  roles: [String]
  uid: ID
  updatedAt: Date
}

type OpsPermissionOutputAdminData {
  opsPermission: [OpsPermissionOutput]!
  user: User!
}

type OpsPermissionOutputAdminPaginate {
  count: Int
  data: [OpsPermissionOutputAdminData]
}

input OpsRoleInputCreate {
  description: String!
  name: String!
  permissions: [String!]!
}

input OpsRoleInputUpdate {
  description: String
  name: String
  permissions: [String!]
  roleId: ID!
}

type OpsRoleOutput {
  _id: ID
  createdAt: Date
  description: String
  name: String
  permissions: [String]
  updatedAt: Date
}

input OrderBy {
  field: UserSortableFields
  order: orderByValues
}

type OutputListUserInvitesForAdmin {
  data: [Invitation]
  filter: ListUserInvitesForAdminFilter
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  orderBy: SortBy
  page: Int
  perPage: Int
  totalItemsCount: Int
  totalPagesCount: Int
}

enum PARTIES {
  COUNTER_PARTY
  OWNER
}

enum PAYMENT_SUB_REPORT_TYPE {
  OPS_INVOICES
}

enum PAYMENT_SUB_STATUS_REPORT {
  CANCELLED
  COMPLETED
  FAILED
  INITIALIZED
  PROGRESS
}

input PDFContactDetail {
  address: [String]
  email: String
  name: String
}

input PDFFooter {
  text: String
}

input PDFInvoiceDetail {
  currency: String
  date: String
  due: String
  latefee: String
  number: String
  terms: String
  title: String
}

input PDFLineItem {
  amount: String
  description: String
  price: String
  quantity: String
  tax: String
}

input PDFLogo {
  height: Int
  image: String
  width: Int
}

input PDFSummary {
  subTotal: String
  taxes: [PDFTax]
  total: String
}

input PDFTax {
  title: String
  value: String
}

enum PLAN_CATEGORY_ENUM {
  FREE
  INTERNAL
  MEMBERSHIP
  PAYASGO
}

enum PLAN_SETTING_ACTION_TYPE {
  CREATE
  DELETE
  MODIFY
  VIEW
}

enum PLAN_STATUS {
  ACTIVE
  INACTIVE
}

input PageInputUpdate {
  description: String!
  position: Float!
  questions: [SurveyQuestionInput!]!
  rules: [SurveyPageInputRule!]!
  title: String!
}

type PaginatedAttendeesData {
  count: Int
  data: [Attendees]
  meta: AttendeesMeta
}

type PaginatedEventsData {
  count: Int
  data: [Event]
  meta: EventMeta
}

type PaginatedLogsOutput {
  count: Int
  data: [LogsOutput!]!
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  page: Int
  perPage: Int
  totalPagesCount: Int
}

type PaginatedNoumConnectionRequests {
  count: Int!
  data: [NoumConnectionRequest!]!
}

type PaginatedNoumFiles {
  count: Int!
  data: [NoumFile!]!
}

type PaginatedNoumMembers {
  count: Int!
  data: [NoumMember!]!
}

type PaginatedNoumPendingConnections {
  count: Int!
  data: [NoumPendingConnection!]!
}

type PaginatedNoumRoles {
  count: Int!
  data: [NoumRole!]!
}

type PaginatedSearchableNoumContact {
  count: Int!
  data: [SearchableNoumContact!]!
}

type PaginatedSearchableNoumMember {
  count: Int!
  data: [SearchableNoumMember!]!
}

type PaginatedThreads {
  count: Int
  data: [ThreadOutput]
}

type PaginatedTimezoneData {
  count: Int
  data: [Timezone]
}

type PaginationNotificationOp {
  count: Int
  data: [NotificationOP]
}

input Params {
  limit: Int
  offset: Int
  search: String
}

type PassCodeResetOutput {
  allowReset: Boolean
}

type PaymentAccountDetails {
  data: [AccountListOutput]
  userId: ID!
}

enum PaymentAccountTypeEnum {
  BANK
  CARD
  PAYEE
  SUB_WALLET
  WALLET
}

type PaymentActivity {
  amount: Float
  currency: String
  destination: String
  invoice: InvoiceOutput
  invoiceId: String
  netAmount: Float
  paymentDate: Date
  paymentId: ID
  source: String
  transactionType: String
}

input PaymentActivityInput {
  amount: Float
  currency: String
  destination: String
  invoiceId: String
  netAmount: Float
  paymentDate: Date
  paymentId: ID
  source: String
  transactionType: String
}

type PaymentConfiguration {
  createdAt: String
  displayName: String
  name: String
  updatedAt: String
  value: String
}

type PaymentCountOutput {
  count: Int!
  data: [PaymentOutput]
}

enum PaymentCustomerColumnName {
  DATE
  DOC_STATUS
  NAME
  NOUMENA_STATUS
  PROVIDER_STATUS
  UPDATE_STATUS
  USER_ID
}

input PaymentCustomerCommonFilter {
  column: PaymentCustomerColumnName!
  operator: PaymentFilterOperator!
  values: [String!]!
}

type PaymentCustomerDetailOutput {
  createdAt: String
  customerType: String
  docStatus: KYCDocumentStatusEnum
  enableTransactionLimit: Boolean
  id: String
  msg: String
  name: String
  noumenaStatus: KYCNoumenaStatusEnum
  providerStatus: KYCProviderStatusEnum
  status: String
  transactionFlagHistory: [TransactionFlagHistoryForAdmin]
  updateStatus: KYCUpdateStatusEnum
  userId: UserOutput
}

type PaymentCustomerOutput {
  customerName: String
  id: String
  paymentChannel: paymentChannelsEnum
  userId: UserOutput
}

enum PaymentDetails {
  ACH
  CARD
  WALLET
}

type PaymentDetailsOutput {
  accountNumber: String
  actualPaymentDate: String
  amount: String
  createdAt: String
  createdBy: UserOutput
  currency: String
  isManual: Boolean
  isPublished: Boolean
  paymentChannel: String
  paymentDueDate: String
  paymentId: String
  paymentNotes: String
  paymentReason: String
  paymentStatus: String
  paymentType: String
  statementId: String
  updatedAt: String
  updatedBy: UserOutput
}

input PaymentFilter {
  accountId: String
  accountType: [PaymentAccountTypeEnum]
  chamberId: String
  endDate: String
  ids: [ID]
  paymentStatus: PaymentStatusEnum
  search: String
  startDate: String
  userId: String
}

enum PaymentFilterOperator {
  and
  btw
  btwe
  eq
  gt
  gte
  iLike
  in
  like
  lt
  lte
  ne
  notIn
  or
}

input PaymentInput {
  accountNumber: String
  amount: String
  createdAt: String
  currency: String
  isManual: Boolean
  isPublished: Boolean
  paymentChannel: String
  paymentDueDate: String
  paymentId: String
  paymentNotes: String
  paymentReason: String
  paymentStatus: String
  paymentType: String
  statementId: String
}

type PaymentMethodOutput {
  brand: String
  country: String
  exp_month: Int
  exp_year: Int
  funding: String
  id: String
  last4: String
}

type PaymentOutput {
  amount: Float
  charges: Float
  clientSecret: String
  createUserId: String
  createdAt: String
  currency: String
  customerName: String
  destination: String
  destinationAccountId: String
  destinationDetail: TransferDetail
  destinationSubLedgerAccountId: String
  destinationUser: UserOutput
  dueDate: String
  errorObj: ErrorObject
  history: String
  id: ID
  idempotencyKey: String
  invoiceId: ID
  isPublished: String
  netAmount: Float
  notes: String
  paymentDate: String
  paymentId: String
  paymentStatus: String
  requestOriginator: String
  settlementPeriod: SettlementPeriodEnum
  source: String
  sourceAccountId: String
  sourceDetail: TransferDetail
  sourceSubLedgerAccountId: String
  sourceUser: UserOutput
  tenantId: String
  transactionReason: String
  transactionType: String
  updatedAt: String
  updatedUserId: String
}

input PaymentProviderChargesInput {
  amount: Float!
  destinationAccountId: String!
  enableNoumFees: Boolean
  invoicePayment: Boolean
  settlementPeriod: SettlementPeriodEnum!
  sourceAccountId: String!
}

type PaymentProviderChargesOutput {
  amount: Float
  charges: Float
  netAmount: Float
}

input PaymentProviderInput {
  payeeCurrency: CurrencyEnum
  payerCurrency: CurrencyEnum
  paymentMethod: PaymentProviderMethodEnum
  settlementPeriod: SettlementPeriodEnum
  source: PaymentProviderSourceEnum
  target: PaymentProviderSourceEnum
}

enum PaymentProviderMethodEnum {
  ACH
  CARD
  WALLET
}

type PaymentProviderOutput {
  available: Boolean
  chargePercentage: Float
  chargeValue: Float
  feeAppliedTo: FeeApplied
  flowOfFunds: FlowofFundsEnum
  id: String!
  invoiceFeeAppliedTo: FeeApplied
  invoicePayment: Boolean
  payeeCurrency: CurrencyEnum
  payerCurrency: CurrencyEnum
  paymentMethod: PaymentProviderMethodEnum
  preference: Int
  provider: paymentChannelsEnum
  settlementPeriod: SettlementPeriodEnum
  source: PaymentProviderSourceEnum
  target: PaymentProviderSourceEnum
}

enum PaymentProviderSourceEnum {
  BANK
  CARD
  NOUM
}

type PaymentReportDataOutput {
  bulkReportId: ID
  createdAt: String
  fileData: FileData
  id: ID
  note: String
  paymentId: ID
  status: String
  transactionId: ID
  updatedAt: String
}

type PaymentReportOutput {
  BulkReportLogData: [PaymentReportDataOutput]
  createdAt: String
  createdBy: UserOutput
  failed: Int
  id: String!
  notes: String
  processed: Int
  progress: Float
  reqFile: String
  respFile: String
  retryDate: String
  status: String
  title: String
  total: Int
  type: String
  updatedAt: String
}

type PaymentReportWithCountOutput {
  count: Int
  data: [PaymentReportOutput!]
}

enum PaymentStatusEnum {
  AWAITING_PROCESSING
  CANCELLED
  PROCESSED
  REJECTED
  SUBMITTED_TO_PGTWY
}

type PaymentSubReport {
  created_at: String!
  filters: String!
  logs: [PaymentSubReportLog!]!
  message: String
  report_id: Float!
  report_type: PAYMENT_SUB_REPORT_TYPE!
  status: PAYMENT_SUB_STATUS_REPORT!
  url: String
}

input PaymentSubReportGenerateInput {
  dateFrom: String!
  dateTo: String!
  type: PAYMENT_SUB_REPORT_TYPE!
}

type PaymentSubReportLog {
  created_at: DateTime!
  report_log_id: Float!
  status: PAYMENT_SUB_STATUS_REPORT!
}

type PaymentSubReportPaginated {
  count: Float!
  data: [PaymentSubReport!]!
}

enum PaymentTerms {
  FullPaymentAdvance
  InstallmentPayment
  MilestonePayment
}

type PaymentTransactionOutput {
  amount: Float
  charges: Float
  createUserId: String
  createdAt: String
  currency: String
  customerName: String
  destination: String
  destinationAccountId: String
  destinationDetail: TransferDetail
  destinationSubLedgerAccountId: String
  dueDate: String
  history: String
  id: String
  idempotencyKey: String
  isPublished: String
  netAmount: Float
  notes: String
  paymentChannel: String
  paymentDate: String
  paymentId: String
  paymentStatus: String
  providerId: String
  requestOriginator: String
  sequence: Int
  settlementPeriod: SettlementPeriodEnum
  source: String
  sourceAccountId: String
  sourceDetail: TransferDetail
  sourceSubLedgerAccountId: String
  sourceUser: UserOutput
  tenantId: String
  transactionId: String
  transactionReason: String
  transactionType: String
  updatedAt: String
  updatedUserId: String
}

type PdfPreview {
  base64: String!
}

enum PermissibleElementType {
  Calendar
  ContractTool
  FileManager
  Image
  InvoiceTool
  Messages
  Payment
  Posts
  QuickQuestions
  Text
  Video
}

input PermissionInput {
  connectionId: ID!
  permission: ConnectionPermissionTypeEnum!
}

input PermissionInputV2 {
  connectionId: ID!
  roleId: ID!
}

type PermissionsCountersSubOutput {
  homeNoumCounters: SubSettingNoumCountersOutput
  permissions: [String]
}

type PermissionsHomeCountersOutput {
  data: PermissionsCountersSubOutput!
  success: Boolean!
}

input PersonalInput {
  dob: String
  email: String
  firstName: String
  industry: String
  isUSResident: Boolean
  lastName: String
  middleName: String
  phone: String
  ssn: String
}

type PersonalOutput {
  accountNumber: String
  contracts: [UserContractOutput]
  customerId: String
  dob: Date
  firstName: String
  industry: String
  lastName: String
  middleName: String
}

type PersonalOutputUser {
  address: AddressOutput
  averageMonthlyExpense: String
  averageMonthlyIncome: String
  bestMonthlyIncome: String
  dob: String
  email: String
  firstName: String
  incomeFromTaxReturn: String
  industry: String
  isUSResident: Boolean
  lastName: String
  middleName: String
  phone: String
  questionAnswers: [QuestionsAnswerOutput]
  ssn: String
  taxEndPeriod: String
  worstMonthlyIncome: String
}

type PersonalProfileOutput {
  error: Boolean
  message: String
  status: Int
  success: Boolean
}

input PlaidInput {
  customerId: String
  days: Int
  reportOrigin: String
  uid: String
}

type PlaidInputSchema {
  customerId: String
  days: Int
  reportOrigin: String
  uid: String
}

type PlaidOutput {
  assets: Json
  createdAt: String
  datasources: Json
  errors: Json
  id: ID!
  input: PlaidInputSchema
  modules: Json
  transaction: Json
}

type PlaidReportList {
  count: Int
  data: [PlaidReportOutput]
}

type PlaidReportOutput {
  activeBanks: Json
  assets: Json
  createdAt: String
  datasources: Json
  errorsArr: Json
  expiredBanks: Json
  id: ID!
  input: PlaidInputSchema
  modules: Json
}

type PlanDetail {
  created_at: String!
  discount_percent: Float
  noum_renewal: Float
  noum_setup: Float
  noum_validity_months: Float
  per_item_fee: Float
  percent_fee: Float
  plan_detail_id: Float
  plan_validity_months: Float
  price: Float
  status: String
  updated_at: String!
}

input PlanDetailUpdateInput {
  discount_percent: Float
  noum_renewal: Float
  noum_setup: Float
  noum_validity_months: Float
  per_item_fee: Float
  percent_fee: Float
  plan_detail_id: Float!
  plan_name_id: String!
  plan_validity_months: Float
  price: Float
  status: PLAN_STATUS
}

type PlanItem {
  billing_cycles: Float
  channel: String
  created_at: String
  currency_code: String
  description: String
  external_name: String
  free_quantity: Float
  is_taxable: Boolean
  item_family_id: String
  item_id: String
  item_type: String
  name: String
  object: String
  period: Float
  period_unit: String
  plan_details: [PlanDetail!]
  plan_id: Float
  plan_name_id: String
  plan_visibility: Boolean!
  price: Float
  pricing_model: String
  spotlight: Boolean
  status: String
  trial_period: Int
  trial_period_unit: String
  updated_at: String
}

type PlanOutput {
  plan_label: String!
  plan_name: String!
  plan_value: PlanOutputType!
}

type PlanOutputType {
  month: [PlanItem!]
  once: [PlanItem!]
  year: [PlanItem!]
}

input PlanSettingActionItemInput {
  actionType: PLAN_SETTING_ACTION_TYPE!
  label: String!
}

type PlanSettingActionItemOutput {
  actionType: PLAN_SETTING_ACTION_TYPE!
  label: String!
}

input PlanSettingItemInput {
  action: [PLAN_SETTING_ACTION_TYPE]
  control: String!
  description: String
  id: String
  label: String!
  resource: String!
  resourceType: String!
}

type PlanSettingItemOutput {
  action: [PLAN_SETTING_ACTION_TYPE]
  control: String!
  description: String
  id: String
  label: String!
  resource: String!
  resourceType: String!
}

input PlanSettingNoumInput {
  limits: [PlanSettingNoumOptionsInput!]!
  tools: [PlanSettingNoumOptionsInput!]!
}

input PlanSettingNoumOptionsConfigureInput {
  description: String
  info: String
  type: String
  value: Float!
}

type PlanSettingNoumOptionsConfigureOutput {
  description: String
  info: String
  type: String
  value: Float!
}

input PlanSettingNoumOptionsInput {
  action: [PLAN_SETTING_ACTION_TYPE!]
  control: String!
  description: String
  id: String
  label: String!
  possibleActions: [PlanSettingActionItemInput!]
  resource: String!
  resourceType: String!
  settings: [PlanSettingNoumOptionsConfigureInput!]
}

type PlanSettingNoumOptionsOutput {
  action: [PLAN_SETTING_ACTION_TYPE!]
  control: String!
  description: String
  id: String
  label: String!
  possibleActions: [PlanSettingActionItemOutput!]
  resource: String!
  resourceType: String!
  settings: [PlanSettingNoumOptionsConfigureOutput!]
}

type PlanSettingNoumOutput {
  limits: [PlanSettingNoumOptionsOutput!]!
  tools: [PlanSettingNoumOptionsOutput!]!
}

type PlanSettingOutput {
  category: PLAN_CATEGORY_ENUM
  created_at: String!
  description: String
  enabled: Boolean!
  financialProducts: [PlanSettingItemOutput!]!
  homeNoumSetting: PlanSettingNoumOutput!
  item_id: String!
  learningProducts: [PlanSettingItemOutput!]!
  menuItems: [PlanSettingItemOutput!]!
  metadata: String
  noumSetting: PlanSettingNoumOutput!
  noum_setup_count: Int
  plan_family: String
  plan_name: String
  plan_setting_id: Float!
  plans: [PlanItem!]!
  sort_index: Float!
  spotlight: Boolean!
  transactionInfo: PlanSettingTransactionInfoOutput!
  updated_at: String!
  user_count: Int
}

type PlanSettingTransactionInfoDetail {
  category: ENUM_TRANSACTION_CATEGORY!
  label: String
  options: [PlanSettingTransactionInfoOptions]!
}

input PlanSettingTransactionInfoDetailInput {
  category: ENUM_TRANSACTION_CATEGORY!
  label: String
  options: [PlanSettingTransactionInfoOptionsInput!]!
}

input PlanSettingTransactionInfoFeeDetailsInput {
  fixed: Float!
  maxFee: Float!
  minFee: Float!
  percentage: Float!
}

type PlanSettingTransactionInfoFeeDetailsOutput {
  fixed: Float!
  maxFee: Float!
  minFee: Float!
  percentage: Float!
}

input PlanSettingTransactionInfoFeeInput {
  noumenaFee: PlanSettingTransactionInfoFeeDetailsInput!
}

type PlanSettingTransactionInfoFeeOutput {
  noumenaFee: PlanSettingTransactionInfoFeeDetailsOutput!
}

input PlanSettingTransactionInfoInput {
  details: [PlanSettingTransactionInfoDetailInput!]!
  isEnabled: Boolean!
}

input PlanSettingTransactionInfoMetadataInput {
  fee: PlanSettingTransactionInfoFeeInput!
  provider: [ENUM_TRANSACTION_PROVIDER!]!
  settlementValue: ENUM_TRANSACTION_SETTLEMENT!
}

type PlanSettingTransactionInfoMetadataOutput {
  fee: PlanSettingTransactionInfoFeeOutput!
  provider: [ENUM_TRANSACTION_PROVIDER]
  settlementValue: ENUM_TRANSACTION_SETTLEMENT!
}

type PlanSettingTransactionInfoOptions {
  destination: ENUM_TRANSACTIONS_ACCOUNTS!
  metadata: [PlanSettingTransactionInfoMetadataOutput!]!
  source: ENUM_TRANSACTIONS_ACCOUNTS!
}

input PlanSettingTransactionInfoOptionsInput {
  destination: ENUM_TRANSACTIONS_ACCOUNTS!
  metadata: [PlanSettingTransactionInfoMetadataInput!]!
  source: ENUM_TRANSACTIONS_ACCOUNTS!
}

type PlanSettingTransactionInfoOutput {
  details: [PlanSettingTransactionInfoDetail]
  isEnabled: Boolean
}

input PlanSettingUpdateInput {
  category: PLAN_CATEGORY_ENUM!
  financialProducts: [PlanSettingItemInput!]!
  homeNoumSetting: PlanSettingNoumInput!
  learningProducts: [PlanSettingItemInput!]!
  menuItems: [PlanSettingItemInput!]!
  metadata: String
  noumSetting: PlanSettingNoumInput!
  transactionInfo: PlanSettingTransactionInfoInput!
}

input PlanSettingUpdateOrder {
  sortOrder: [Float!]!
}

type Post {
  category: PostCategory
  content: String
  resolutions: [ResolutionOutput]
  thumbnail: String
}

type PostActivity {
  _id: ID
}

enum PostCategory {
  IMAGE
  INVITE
  VIDEO
}

input PostContentInput {
  category: PostCategory
  content: String
  thumbnail: String
}

input PostFilter {
  uid: ID
  uids: [ID!]
  visibility: [PostVisibility]
}

input PostInput {
  chamberId: ID
  groupId: ID
  post: PostContentInput
  rawJSON: InputAny
  tags: [TagsInput]
  text: String
  visibility: PostVisibility
}

type PostOutput {
  _id: ID!
  chamber: ChamberByIdRef
  chamberId: ID
  comments: [Comments]
  commentsCount: Int
  createdAt: Date
  groupId: ID
  isPinned: Boolean
  pinnedTimestamp: Date
  post: Post
  postStatus: PostStatus
  rawJSON: TypeAny
  reactions: [Reaction]
  reactionsCount: Int
  reports: [ReportOutput]
  tags: [TagsOutput]
  text: String
  uid: UserOutput
  updatedAt: Date
  userReaction: ReactionCategory
  visibility: PostVisibility
}

type PostOutputData {
  count: Int
  data: [PostOutput]
}

enum PostStatus {
  ACCEPTED
  BEING_REVIEWED
  DELETED
  REJECTED
}

enum PostType {
  CommunityPost
  ProjectPost
}

enum PostVisibility {
  ALL
  CONNECTION
  FOLLOWER
  GROUP
}

type PreCalculateNoumLinkData {
  connectionsCount: Int!
  followersCount: Int!
  membersCount: Int!
}

input PrincipleAnswerInput {
  answerNumber: Int
  questionNumber: Int
}

type PrinciplesAssessmentResult {
  fullAssessmetResult: Json
  shortScaleAssessmetResult: Json
}

type PrinciplesMutations {
  submitPrinciplesAnswers(answers: [PrincipleAnswerInput], principleUserId: String): Json
}

type PrinciplesQueries {
  getPrinciplesAssessmentPDF(uid: String): AssessmentPDFOutput
  getPrinciplesAssessmentResults(uid: String): PrinciplesAssessmentResult
  getPrinciplesQuestion(principleUserId: String): Json
  getPrinciplesUser(displayName: String, email: String): String
}

enum Privacy {
  CONNECTED
  INVITATION
  PUBLIC
}

type ProductCategoryOutput {
  _id: ID
  code: String
  description: String
  name: String
}

enum ProductKey {
  NOUMENATI
}

type ProductOutput {
  _id: ID
  code: String
  countryCode: String
  currencyCode: String
  description: String
  effectiveDateFrom: String
  effectiveDateTo: String
  name: String
  productOwner: String
  terms: [ProductTermOutput]
  type: ProductTypeOutput
}

type ProductProfile {
  _id: ID
  code: String
  description: String
  name: String
  productCode: String
  productType: String
}

type ProductTermOutput {
  _id: ID
  code: String
  description: String
  effectiveDateFrom: String
  effectiveDateTo: String
  isCustomerSpecific: Boolean
  isMandatory: Boolean
  name: String
  type: String
}

type ProductTypeOutput {
  _id: ID
  category: ProductCategoryOutput
  code: String
  description: String
  name: String
}

type Profile {
  _id: ID
  profilePicture: String
  profilePictureThumbnail: String
  secondaryEmail: String
  socialLinks: [SocialLink]
}

input ProfileCheckInput {
  name: String
  reasons: [String]
  result: String
}

type ProfileCheckResult {
  ILILimit: String
  ISR: [String]
  reasons: [String]
  recap: [String]
  result: String
}

type ProfileCompletion {
  name: String
  value: Boolean
}

input ProfileInput {
  profilePicture: String
  secondaryEmail: String
  socialLinks: [SocialLinkInput]
}

type ProfileOutput {
  _id: ID
  profilePicture: String
  profilePictureThumbnail: String
  socialLinks: [SocialLink]
}

type ProfilePictureOutput {
  profilePicture: String
}

enum ProjectChamberCategoriesEnum {
  ADMIN
  WEB
}

type ProjectChamberCategory {
  _id: ID!
  name: String!
}

input ProjectChamberCategoryInput {
  name: String!
}

input ProjectChamberFilter {
  category: ID
  categoryIn: [ID]
  categoryNotIn: [ID]
  projectType: ProjectChamberType
  search: String
  spaceIds: [ID]
  status: SpaceStatusEnum
  statusNotIn: [SpaceStatusEnum]
  type: SpaceTypeEnum
}

input ProjectChamberInput {
  category: ID!
  description: String
  elements: [ProjectElementInput]
  institution: InstitutionsEnum!
  name: String!
  permission: SpacePermissionEnum
  profileImage: String
  projectType: ProjectChamberType
  status: SpaceStatusEnum!
  title: String
}

enum ProjectChamberType {
  PRIVATE
  PUBLIC
  SECRET
}

enum ProjectChamberTypeForFilter {
  PRIVATE
  PUBLIC
}

input ProjectChamberUpdateInput {
  category: ID
  description: String
  fonts: JSONObject
  headerBackgroundUrl: String
  name: String
  profileImage: String
  projectType: ProjectChamberType
  theme: ID
  title: String
}

input ProjectElementInput {
  bodyContent: String
  bodyContentJson: JSONObject
  bodyContentType: BodyContentEnum
  elementId: ID
  elementType: ElementTypeEnum
  headerContent: String
  percentCompleted: Int
  position: Int
  status: ElementStatusEnum
}

type ProjectNoumCampaign {
  _id: ID
  clicksToNoums: Int
  connectionsDeclined: Int
  connectionsMade: Int
  finishedAt: ISODate
  followersGained: Int
  invitesSent: Int
  refreshedAt: ISODate
  space: SpaceOutput
  startedAt: ISODate
  status: ProjectNoumCampaignStatus
  targets: [CampaignAudienceTarget]
  uid: UserOutput
  views: Int
}

input ProjectNoumCampaignFilter {
  spaceId: ID
  status: ProjectNoumCampaignStatus
}

type ProjectNoumCampaignResponse {
  count: Int
  data: [ProjectNoumCampaign]
}

enum ProjectNoumCampaignStatus {
  ACTIVE
  CANCELLED
  FINISHED
  REFRESHED
}

input PromptOptionsInput {
  frequency_penalty: Float
  max_tokens: Int
  model: String
  presence_penalty: Float
  temperature: Float
  top_p: Int
}

enum ProviderVariant {
  FACEBOOK_TOKEN
  GOOGLE_TOKEN
  LINKEDIN_TOKEN
  PASSWORD
}

type PublishableKey {
  publishableKey: String
}

enum PushNotificationTypes {
  CONNECTION_APPROVED
  CONNECTION_REJECTED
  CONVERSATION
  CQ_SCORE_UPDATED
  EVENT_DELETED
  EVENT_INVITEE
  EVENT_LIVE
  EVENT_REMINDER
  EVENT_STARTING
  GROUP_INVITE
  GROUP_JOIN_REQUEST
  GROUP_POST
  INDIVIDUAL_INVITE
  INSTANT_EVENT_INVITEE
  NEW_INDIVIDUAL_POST
  NOUM_CONNECTION
  POST_COMMENT
  POST_COMMENT_MENTIONED
  POST_COMMENT_THREAD
  POST_COMMENT_THREAD_MENTIONED
  POST_MENTIONED
  TOKEN_REWARDED
  USER_ACTIVE
  USER_DEACTIVATED
  USER_INACTIVE
  USER_PENDING
  USER_REJECTED
  USER_UNREGISTERED
  amemdedInvoice
  campaignExpired
  campaignRefreshed
  connected
  connectionDisconnected
  connectionInviteAccepted
  connectionInviteDeclined
  connectionInvited
  connectionRequestAccepted
  connectionRequestDeclined
  connectionRequested
  favoriteConnection
  guestConnection
  inviteAccepted
  invoiceOnDraftState
  invoiceOnDraftStateFreelancer
  invoicePaymentFailedClient
  invoicePaymentFailedFreelancer
  invoiceStatusChanged
  managerInviteDeclined
  managerInviteExpired
  managerInvited
  managerTerminated
  memberInvitedToNoum
  noumArchived
  noumFollowed
  noumPublished
  noumUnarchived
  noumUnfollowed
  questionAnswered
  questionCreated
  spaceConversation
}

enum PushNotificationTypesV2 {
  CONNECTION_APPROVED
  CONNECTION_REJECTED
  CONVERSATION
  CONVERSATION_READ
  CQ_SCORE_UPDATED
  EVENT_INVITEE
  EVENT_LIVE
  EVENT_REMINDER
  EVENT_STARTING
  GROUP_INVITE
  GROUP_JOIN_REQUEST
  GROUP_POST
  INDIVIDUAL_INVITE
  INSTANT_EVENT_INVITEE
  NEW_INDIVIDUAL_POST
  NOUM_CONNECTION
  POST_COMMENT
  POST_COMMENT_MENTIONED
  POST_COMMENT_THREAD
  POST_COMMENT_THREAD_MENTIONED
  POST_MENTIONED
  TOKEN_REWARDED
  USER_ACTIVE
  USER_DEACTIVATED
  USER_INACTIVE
  USER_PENDING
  USER_REJECTED
  USER_UNREGISTERED
  amemdedInvoiceClient
  amemdedInvoiceFreelancer
  campaignExpired
  campaignRefreshed
  connected
  connectionDisconnected
  connectionInviteAccepted
  connectionInviteDeclined
  connectionInvited
  connectionRequestAccepted
  connectionRequestDeclined
  connectionRequested
  eventDateModified
  eventDeleted
  favoriteConnection
  guestConnection
  inviteAccepted
  invoiceOnDraftState
  invoicePaymentFailedClient
  invoicePaymentFailedFreelancer
  invoiceStatusChangedClient
  invoiceStatusChangedFreelancer
  noumArchived
  noumFollowed
  noumPublished
  noumUnarchived
  noumUnfollowed
  questionAnswered
  questionCreated
  riseApplicationStatusChanged
  riseApplicationSubmitted
  riseApplicationSubmittedToConnectedUser
  sendAdCampaignOffer
  sendAdCampaignReport
  spaceConversation
  userDisconnectFromProjectNoum
}

type Query {
  _: Boolean
  accountLogs(accountId: String, limit: Int, page: Int, targets: [String]): [AccountLogsOutput]
  accountPaymentDetails(accountNumber: String!, isPublished: Boolean): [PaymentDetailsOutput]
  accountStatmentDetails(accountNumber: String!, isPublished: Boolean): [StatementDetailsOutput]
  accounts: String
  allCustomers: [CustomerOutput]
  allNoumsContacts(input: AllNoumsContactsInput!): PaginatedSearchableNoumContact!
  allNoumsContactsForAdmin(limit: Int!, offset: Int!, search: String): NoumContactAdminResult
  allUsers(activeUserOnly: Boolean, chamberId: ID, filter: SearchUserFilter, limit: Int, offset: Int, oldConnectionFlow: Boolean, search: String, type: UserRelationType): UserOutputAllUsers!
  allowPassCodeReset: PassCodeResetOutput
  amountDueThisMonth: AmountDueOutput
  audit: String
  authenticationError: String
  availableNoumRoles: [AvailableNoumRole!]!
  broadcastAudienceTargets: [String!]!
  canUserJoinEvent(eventId: ID!, userId: ID!): Boolean
  capitalquotient: CapitalquotientQueries
  chamber: String
  chameleon: String
  check: String
  checkForAdmin(uid: ID!): Boolean
  checkIfSlugExists(slug: String!): Boolean
  checkPassCodeExists: Boolean!
  checkPaymentRetry(id: String!): Boolean
  checkWalletExistDetail(invoiceId: ID, noumId: ID!, sourceUserId: ID!, targetUserId: ID!): WalletExistDetailType
  checkWalletExists(targetUserId: ID!): WalletExistType
  config: UserConfigOutput
  connectedNoums(input: ConnectedNoumsInput): SpaceOutputResponse!
  connections(limit: Int, offset: Int, search: String): [UserOutput]
  currentUser: User
  currentUserPaymentLimits: CurrentUserPaymentLimitOutput
  customer: String
  customerAddressDetails: AddressOutput
  customerApprovedILI: ILIOutput
  customerBankList(customerId: String): [BankListOutput]
  customerContactDetails: ContactOutput
  customerContractDetails(customerId: String): [ContractOutput]
  customerFirstTimeFlag: Boolean
  customerList(end: String, filter: CustomerSearch, limit: Int, offset: Int, search: String, start: String): CustomerWithTotalOutput
  customerLogs(customerId: String, limit: Int, page: Int, targets: [String]): [CustomerLogsOutput]
  customerPersonalDetails(customerId: String): PersonalOutput
  customers(limit: Int, offset: Int, search: CustomerSearch): CustomersOutput
  dailyRecommendations(limit: Int, offset: Int): Matches
  downloadInvoicePDF(id: ID!): InvoicePDFUrl!
  dwollaTransactions(filter: ExportCsvFilter, limit: Int!, page: Int!): DwollaTransactionOutput
  exportCsv(fileHeaders: String!, filter: ExportCsvFilter, title: ReportExportTitle!): MessageOutput!
  findSpaceBySearchQuery(type: SpaceTypeEnum, uid: ID): SpaceOutput
  getAccountById(id: String!): AccountListOutput
  getAccountList(query: AccountListInput!): [AccountListOutput!]
  getAccountListByUser(userId: String!): [AccountListOutput!]
  getAccountListV2(query: AccountListInput!): AccountListOutputV2!
  getAdCampaignCsvReportUrl(id: ID!): String!
  getAdCampaignCsvReports(pagination: ChamberPaginationInput): AdCampaignCsvReportListOutput
  getAdCampaignListAdmin(filters: [CommonFilter]!, limit: Int, offset: Int, search: String): AdCampaignOutputPaginated!
  getAdCampaignOfferOne(id: String!): AdCampaignOffer!
  getAdCampaignOffers(campaignId: String!, pagination: ChamberPaginationInput): AdCampaignOfferPaginated!
  getAdCampaignOffersAll(limit: Int, offset: Int): AdCampaignOfferPaginated!
  getAdCampaignReportOne(id: String!): AdCampaignReportOutput!
  getAdCampaignReports(campaignId: ID!, limit: Int!, offset: Int!): AdCampaignReportsOutputPaginated
  getAdCampaignSettings(input: AdCampaignSettingsInput): AdCampaignSettingsOutput
  getAdCampaignsByUser(filter: AdCampaignFilter, limit: Int, offset: Int): AdCampaignOutputPaginated
  getAdEnabledNoums(filter: AdEnabledNoumFilter, limit: Int, offset: Int): SpaceOutputResponse
  getAdKeywords(options: PromptOptionsInput, promptText: String!): JSONObject
  getAdminReportByID(reportId: ID!): AdminReportsOutputType
  getAdminReportSignedURL(reportPath: String!): String
  getAdminReportsByType(limit: Int, offset: Int, reportType: AdminReportType!): AdminReportsOutputCollection
  getAllChargebeeCustomers: [Customer!]!
  getAllInvoices(input: InvoiceGetAllInput!): ListInvoice!
  getAllNoums(fetchOwn: Boolean, filter: GetAllNoumFilter, limit: Int, offset: Int): SpaceOutputResponse
  getAllNoumsTransactions(input: NoumTransactionPaginationInput!): ListNoums!
  getAllPayments(filter: PaymentFilter, limit: Int!, page: Int!): PaymentCountOutput
  getAllPlansDetails(forPurchase: Boolean!): [PlanSettingOutput]
  getAllSOW(filter: GetAllSOWFilter, limit: Int, offset: Int, viewingAs: ContractListingPOV): SOWOutput!
  getAllSubscriptionsForUser: [SubscriptionOutput!]!
  getAllSurveys(input: SurveyInputGetAll!): SurveyOutputGetAll!
  getAllThemes(limit: Int, offset: Int): ThemeOutputResponse
  getAllTokenArchives(filter: TokenArchiveFilter, limit: Int, offset: Int): TokenArchiveOutput
  getAllUidForChamberPosts(chamberId: ID!, limit: Int, offset: Int): ChamberAuthors
  getAllUserGroupsForAdmin(ADMIN: Params, MEMBER: Params, uid: ID!): AdminGroupOutput
  getAppActivities(filter: AppActivityFilter!, limit: Int, offset: Int): AppActivitiesOutput
  getAvailableItemFamilies: [ItemFamilyOutput!]!
  getAvailableItemsByFamily(familyName: String!, planType: String!): [ItemOutput!]!
  getAvailablePlans(input: AvailablePlansFilterInput!): [PlanOutput!]!
  getAvailableSubscriptions: [SubscriptionOutput!]!
  getBankAccountBalance(id: String!): BankAccountBalance
  getBroadcastedProjectNoums(limit: Int, offset: Int): SpaceOutputResponse
  getCampaignAccount: CampaignAccountOutput
  getCardStripe: [StripeCardOutput]
  getCategoryWithSkills(limit: Int, offset: Int, search: String): [CategoryWithSkills]
  getCommentById(commentId: ID!, postId: ID!): Comments
  getCommentByIdForGenericEntity(commentId: ID!): Comments
  getCommentsForGenericEntity(entityId: String!, limit: Int, offset: Int, sortOrder: SortOrder): commentsWithPagination
  getConfig: ConfigOutput
  getConnectedChamberPayments(filter: PaymentFilter, limit: Int!, page: Int!): PaymentCountOutput
  getConnectedSpaces(filter: ProjectChamberFilter, limit: Int, offset: Int, sort: SortType, uid: ID): SpaceOutputResponse
  getConnectionById(connectionId: ID!): SpaceConnection
  getConsignors(pov: ContractListingPOV!): [NoumContactOutput!]
  getContactConnectionWithNoum(contactId: ID!, noumId: ID!): SpaceConnection
  getContractList(filter: ContractFilter, limit: Int, offset: Int, viewingAs: ContractListingPOV): NoumContractOutput!
  getContractListForAdmin(filter: ContractFilterForAdmin, limit: Int, offset: Int): NoumContractOutputAdmin
  getContractReportCsvUrl(id: ID!): String!
  getContractReports(limit: Int, offset: Int): InvoiceToolReportOutputPaginated
  getConversation(spaceId: ID, userIds: [ID]): ConversationIdOutput
  getConversationByCid(cid: String): ConversationOutput
  getConversations(filter: SearchFilterForConversation, limit: Int, offset: Int): ConversationOutputAll
  getCookieConsent(cookieConsentId: String!): CookieConsentOutput
  getCustomerAuditLogs(customerId: String, limit: Int, offset: Int): CustomerKYCAuditLogCount
  getCustomerDetails: CustomerOutput
  getCustomerDocumentUrl(id: String!, uploadFor: UploadFor!): URLOutput
  getCustomerDocuments(customerId: String!): [CustomerDocumentOutput]
  getCustomerLimits: CustomerLimitOutput
  getCustomerLimitsV2(destinationAccountId: ID!, invoicePayment: Boolean, sourceAccountId: ID!): CustomerLimitOutput
  getCustomerPayeeList: [CustomerPayeeList]
  getCustomerPayeeListV2(query: SearchInput!): CustomerPayeeListV2
  getCustomerSearchList: [String]
  getCustomers(filter: CustomersFilter, limit: Int!, page: Int!): CustomerAccountsOutput
  getDefaultNoumTransactionFeeDetails(defaulInput: DefaultNoumTransactionFeeDetailInput!): NoumTransactionFee!
  getDistinctNoumAdCampaigns: [AdCampaignOutput]
  getDocuSignURL: DocuSignOutput
  getDocumentByEnvelopeId(envelopeId: String): String
  getDocumentUploadUrl(input: uploadDcoumentInput!): uploadDocumentOutput
  getElement(elementId: ID!, spaceId: ID!, status: ElementStatusEnum): ElementOutput
  getElementList(type: SpaceTypeEnum): [String!]
  getEventAttendees(_id: ID!, filter: EventAttendeesFilter, limit: Int, offset: Int): PaginatedAttendeesData
  getEventById(_id: ID!): Event
  getEventCounter(chamberId: ID!, filter: FilterEvents): EventMeta
  getEventUserRole(eventId: ID!, userId: ID): CurrentUser
  getEvents(chamberId: ID!, filter: FilterEvents, limit: Int, offset: Int, sortOrder: SortOrder): PaginatedEventsData
  getEventsV2(chamberId: ID!, filter: FilterEvents, limit: Int, offset: Int, sortOrder: SortOrder): EventOutput
  getFeaturedNoums(limit: Int, offset: Int): SpaceOutputResponse
  getFollowingSpaces(filter: ProjectChamberFilter, limit: Int, offset: Int, sort: SortType, uid: ID): SpaceOutputResponse
  getGlobalInvoiceConfig: GlobalConfigOutput
  getHomeSpaceConversations(limit: Int, offset: Int, spaceId: ID, uid: ID): HomeSpaceConversationOutput
  getIDScanCheckResult: Boolean
  getInvoiceAmount(id: ID, invoiceId: ID!): InvoiceAmountOutput
  getInvoiceById(id: ID!): InvoiceOutput
  getInvoiceDownloadURL(invoice_id: String!): String!
  getInvoiceHistory(id: Float!): [InvoiceHistory!]!
  getInvoiceList(filter: InvoiceQueryInput!): InvoiceList
  getInvoiceListForAdmin(filter: InvoiceQueryInputForAdmin!): InvoiceList
  getInvoicePayment(id: ID!): InvoicePaymentOutput
  getInvoicePaymentByPaymentId(paymentId: String!): InvoicePaymentOutput
  getInvoicePayments(invoiceId: ID!): [InvoicePaymentOutput]
  getInvoiceReports(limit: Float!, skip: Float!): PaymentSubReportPaginated!
  getInvoiceSequence(noumId: ID!): InvoiceSequenceOutput!
  getInvoiceTimeLines(invoiceId: ID!, limit: Int, offset: Int): InvoiceTimelinePaginationOutput
  getInvoiceToolReportCsvUrl(id: ID!): String!
  getInvoiceToolReports(limit: Int, offset: Int): InvoiceToolReportOutputPaginated
  getInvoices(input: InvoiceFetchInput): [InvoiceDetail!]!
  getKYCCustomer(id: String!): PaymentCustomerDetailOutput
  getKYCCustomers(filter: CustomerKYCFilter, limit: Int, offset: Int): CustomerKYCAccountsOutput
  getLinkToken: String
  getLinkedNoums(limit: Int, noumLinkId: ID!, offset: Int): SpaceOutputResponse
  getLinkedSOWs(contractId: ID!, filter: GetLinkedSOWsFilter, limit: Int, offset: Int): SOWOutput!
  getLocation(search: String!): [LocationOutput]
  getMasterWalletBalance(userId: ID!): FundingSourceBalanceOutput
  getNoumActivityLog(filter: NoumActivityLogFilter, limit: Int, noumId: ID!, offset: Int): AppActivitiesOutput
  getNoumActivityStats(filter: NoumActivityStatsFilter, noumId: ID!, userId: ID!): NoumActivityStats
  getNoumClassById(id: ID!): NoumClass
  getNoumClassByNoumId(noumId: ID!): NoumClass
  getNoumClassList(limit: Int, offset: Int, query: NoumClassQuery): NoumClassList
  getNoumConnectedMembers(includeNoumOwner: Boolean, limit: Int, noumId: ID!, offset: Int, sort: SortType): SpaceOutputResponse
  getNoumConnectionsKPIs(from: ISODate, granularity: NoumKPIGranularity, noumId: ID!, to: ISODate): NoumConnectionsKPI
  getNoumConnectionsWithinTimeframe(connectionType: NoumConnectionsWithinTimeframeType, from: ISODate, limit: Int, noumId: ID!, offset: Int, to: ISODate): SpaceOutputResponse
  getNoumFollowersKPIs(from: ISODate, granularity: NoumKPIGranularity, noumId: ID!, to: ISODate): NoumFollowersKPI
  getNoumFollowersWithinTimeframeQuery(followStatus: NoumFollowWithinTimeframeType, from: ISODate, limit: Int, noumId: ID!, offset: Int, to: ISODate): SpaceOutputResponse
  getNoumLink(noumLinkId: ID!): NoumLink
  getNoumLinkConnections(limit: Int, noumLinkId: ID!, offset: Int, sort: SortType): SpaceOutputResponse
  getNoumLinkFollowers(limit: Int, noumLinkId: ID!, offset: Int, sort: SortType): SpaceOutputResponse
  getNoumLinkedNoums(limit: Int, noumId: ID!, offset: Int): SpaceOutputResponse
  getNoumLinks(limit: Int, offset: Int, sorting: NoumLinkSorting): NoumLinkResponse
  getNoumProgramById(id: ID!): NoumProgram
  getNoumProgramList(limit: Int, offset: Int, query: NoumProgramQuery): NoumProgramList
  getNoumProgramresultById(noumId: ID!): ApplicationResult
  getNoumReferenceCapacites: [NoumReferenceCapacity!]! @deprecated(reason: "getNoumReferenceCapacites query is deprecated. Use getNoumReferenceCapacity instead.")
  getNoumReferenceCapacity: [NoumReferenceCapacity!]!
  getNoumReferences(experienceId: ID!, limit: Int, offset: Int, status: [NoumReferenceStatus]): NoumReferenceResponse
  getNoumTransactionFeeDetails(noumDetailInput: NoumTransactionDetailInputType!): [NoumTransactionFee!]!
  getNoumTransactionHistory(id: Float!): [NoumTransactionFeeHistoryOutput!]!
  getNoumsByStatus(input: NoumTransactionStatusInputType!): [NoumTransactionFee!]!
  getNoumsLinkedToContracts(pov: ContractListingPOV!): [SpaceOutput!]
  getNoumsLinkedToSOWs(pov: ContractListingPOV!): [SpaceOutput!]
  getNoumsLinkedToUserInvoices: [SpaceOutput!]
  getOnboardingQuestionAndAnswers(limit: Int, offset: Int): QuestionAndAnswersOutput
  getOneSurvey(_id: String!): Survey!
  getOneSurveyPage(_id: String!): SurveyPage!
  getOpNotification(_id: ID): NotificationOP
  getOpsAdminPermissions(limit: Int, offset: Int, search: String): OpsPermissionOutputAdminPaginate
  getOpsPermission(userId: ID!): OpsPermissionOutput
  getOpsRoles: [OpsRoleOutput]
  getOtpStats(email: String!, limit: Int, startDate: String): [getOtpStatsOutput]
  getOwnProjectChambers(filter: ProjectChamberFilter, limit: Int, offset: Int, sort: SortType): SpaceOutputResponse
  getPaymentById(_id: ID): PaymentOutput
  getPaymentConfigByName(name: String!): PaymentConfiguration
  getPaymentConfigs: [PaymentConfiguration]
  getPaymentProviderCharges(query: PaymentProviderChargesInput): PaymentProviderChargesOutput
  getPaymentProviders(filter: UpdatePaymentProviderInput): [PaymentProviderOutput]
  getPaymentSubscriptionSetting: [SettingsOutput!]!
  getPaymentTransactions(id: String!): [PaymentTransactionOutput]
  getPlanSettingById(planSettingId: Float!): PlanSettingOutput
  getPostsByChamberId(chamberId: ID!, filter: PostFilter, limit: Int, offset: Int, sort: SortType): PostOutputData
  getPreSignedURLForFileUpload(fileUploadInput: FileUploadInput!): String
  getProjectChamberCategories(type: ProjectChamberCategoriesEnum): [ProjectChamberCategory!]
  getProjectChambers(fetchOwn: Boolean, filter: ProjectChamberFilter, limit: Int, offset: Int): SpaceOutputResponse
  getProjectChambersAdmin(filter: ChamberFiltersAdmin, limit: Int, offset: Int, sortOrder: SortType): SpaceOutputResponse
  getProjectChambersByUserId(userId: ID!): [SpaceOutput!]
  getPublishableKey: String!
  getQuestionAnswers(limit: Int, offset: Int, questionId: ID!, spaceId: ID!): AnswersOutputResponse
  getQuestionById(questionId: ID!): NoumQuestionOutput
  getQuestionnaire: [QuestionOutput!]!
  getQuestionsForSpace(filter: QuestionsFilter, limit: Int, offset: Int, sort: SortType, spaceId: ID!): QuestionOutputResponse
  getRandomQuestionnaire: [QuestionOutput!]!
  getRecommendedNoums(filter: SpaceCategoryFilter, limit: Int, offset: Int): SpaceOutputResponse
  getReferredUser(_id: ID!): UserOutput
  getRegistrationOTP(email: String!): OTPOutput
  getRenewalToken(institutionId: String): String
  getRepliesByCommentId(commentId: ID, limit: Int, offset: Int, sortOrder: SortOperator): PaginatedThreads
  getRepliesByCommentIdForGenericEntity(commentId: ID!, limit: Int, offset: Int): PaginatedThreads
  getReport(id: ID!): PaymentReportOutput
  getReportUrl(fileType: ExportFileType, id: ID!): URLOutput
  getReports(query: ReportFilters): PaymentReportWithCountOutput!
  getRiseNoumApplicationResultAdmin(id: ID!): ApplicationResult
  getRiseNoumByClassIdForAdmin(classId: ID!, filter: ApplicationFilter, limit: Int, offset: Int): ApplicationResultResponse
  getRiseReportCsvUrl(id: ID!): String!
  getRiseReports(pagination: ChamberPaginationInput, type: RiseReportTypes!): RiseReportListOutput
  getRoles: [UserRoleOutput]
  getSOWListForAdmin(filter: SowFilterForAdmin, limit: Int, offset: Int): SOWOutput
  getSecurityQuestionForReset: QuestionOutput!
  getSecurityQuestionsForReset: [QuestionOutput!]!
  getSelectedAdCampaignDetails(campaignId: ID!): AdCampaignOutput
  getSelectedInvoiceDetails(input: SelectedInvoiceInput): [InvoiceDetail!]!
  getSignedURLForFileAccess(fileAccessInput: FileAccessInput!): String
  getSignedUrl(fileName: String): String
  getSingleContract(_id: ID!): Contract
  getSingleContractUnAuthenticated(_id: ID!): Contract! @deprecated(reason: "Use getSingleContract instead")
  getSingleSOW(_id: ID!): SOW
  getSingleSOWUnAuthenticated(_id: ID!): SOW! @deprecated(reason: "Use getSingleSOW instead")
  getSingleTheme(_id: ID!): ThemeOutput
  getSowReportCsvUrl(id: ID!): String!
  getSowReports(limit: Int, offset: Int): InvoiceToolReportOutputPaginated
  getSpaceById(id: ID!): SpaceOutput
  getSpaceByType(type: SpaceTypeEnum!): [SpaceOutput]
  getSpaceConfig(type: SpaceTypeEnum!): [SpaceProfileValue]
  getSpaceConnectedMembers(includeNoumOwner: Boolean, limit: Int, offset: Int, spaceId: ID!, spaceType: SpaceTypeEnum): SpaceOutputResponse @deprecated(reason: "getSpaceConnectedMembers query is deprecated. Use getNoumConnectedMembers instead.")
  getSpaceConnections(limit: Int, offset: Int, spaceId: ID!, status: ConnectionRequestTypeEnum): [SpaceConnection] @deprecated(reason: "getSpaceConnections query is deprecated. Use getSpaceConnectionsV2 instead")
  getSpaceConnectionsV2(limit: Int, offset: Int, spaceId: ID!, status: [ConnectionRequestTypeEnum]): SpaceConnectionsResponse
  getSpaceConversations(limit: Int, offset: Int, spaceId: ID!): ConversationsOutput
  getSpaceConversationsAsAdminQuery(filter: SearchChamberAdminFilter, limit: Int, offset: Int, spaceId: ID!): ConversationsOutput
  getSpaceFollowers(limit: Int, offset: Int, spaceId: ID): SpaceOutputResponse
  getSpacesByUserId: [SpaceOutput]
  getSpotLightChambers(filter: SpotlightChamberFilters, limit: Int, offset: Int): SpaceOutputResponse
  getStripePaymentMethod: [PaymentMethodOutput]
  getSubWalletBalance(chamberId: String!): SubWalletBalance
  getSubWalletBalanceByUser(chamberId: String!, userId: String!): SubWalletBalance
  getSubWalletEntries(chamberId: String!): [SubWalletBalance]
  getSubmittedOnboardingQuestionsAndAnswers(limit: Int, offset: Int): UserSelectedQuestionAndAnswersOutput
  getSubscriptionById(subscription_id: Float!): SubscriptionOutput!
  getSubscriptionPermissionsAndHomeNoumCounters(homeNoumId: String!): PermissionsHomeCountersOutput
  getSurveyAnswers(survey: String!): SurveyAnswer!
  getSurveyPageAnswer(page: String!, survey: String!): SurveyAnswer!
  getTokenArchive(_id: ID): TokenArchive
  getUnreadMessageCount: Int
  getUserAccessData: UserAccessData
  getUserApplication(applicationId: String): RiseUserDataOutput
  getUserApplications(uid: String): [RiseUserDataOutput]
  getUserCampaigns(filter: ProjectNoumCampaignFilter, limit: Int, offset: Int): ProjectNoumCampaignResponse
  getUserConnections(limit: Int, offset: Int, search: String, uid: ID!): [UserOutput]
  getUserCustomerDetails: Customer!
  getUserDeviceToken(uid: ID): UserDeviceTokenOutput
  getUserEmail: String
  getUserHistory(limit: Int, offset: Int): [UserHistoryOutput]
  getUserInvoiceLineItem(_id: ID!): InvoiceLineItem
  getUserInvoiceLineItemList(filter: InvoiceSearchInput!): UserInvoiceLineItemOutput!
  getUserListForTagging(search: String): [UserOutput!]!
  getUserNetworks(uid: ID): [NetworkOutput]
  getUserNoums(filter: UserNoumsFilter, limit: Int, offset: Int, uid: ID): SpaceOutputResponse
  getUserOwnedContacts(filter: Contactfilter, limit: Int, offset: Int): NoumContactPaginated!
  getUserPreferences: UserPreferences
  getUserReferralCode(uid: ID): Referral
  getUserSpace(userId: ID!): [SpaceOutput]
  getUserStatusUpdateLogs(_id: ID, limit: Int, offset: Int): PaginatedLogsOutput!
  getUserSubmittedOnboardingQuestionsAndAnswers(userId: ID): UserSelectedQuestionAndAnswersOutputObject
  getUsersAddressByAdmin(limit: Int, offset: Int, userIds: [ID], userStatus: UserStatus): [AddressOutput]
  getUsersPosts(limit: Int, offset: Int): PostOutputData
  getWalletBalance: FundingSourceBalanceOutput
  getinviteNonNoumenaMember(limit: Int, noumId: ID!, offset: Int): inviteNonNoumUsersOutput
  globalSearch(entityType: EntityType, excludeEntityTypes: [EntityType], limit: Int, offset: Int, query: String, userStatus: GlobalSearchUserEntityStatus, userStatuses: [GlobalSearchUserEntityStatus]): GlobalSearchResult!
  group(_id: ID!): Group
  groupConnectionCheck(_id: ID!, userIds: [ID]): [ConnectionCheck]
  groupConnections(_id: ID!, limit: Int, offset: Int, search: String): MembersOutput
  groupMembers(_id: ID): Group
  groupPosts(groupId: ID!, limit: Int, offset: Int): PostOutputData @deprecated(reason: "groupPosts query is deprecated.")
  groupRequestForAdmin(_id: ID!, limit: Int, offset: Int): InvitationOutput
  groups(filter: SearchGroupInvite, limit: Int, offset: Int, search: String): GroupOutput
  healthCheck: String
  incomeData(customerId: String): IncomeDataOutput
  initTimezone(timezone: String!): Timezone
  invoicePDFPreview(data: InvoicePDFInput): InvoicePDF!
  invoicePDFPreviewByID(id: ID!): InvoicePDF!
  isSocialHallAttendee(socialHallIds: [ID!]!): [isUserSocialHallAttendee]
  listAllOpNotification(limit: Int, offset: Int): PaginationNotificationOp
  listBlockedCountries(limit: Int, offset: Int): BlockedCountryOutput
  listDraftOpNotification(limit: Int, offset: Int): PaginationNotificationOp
  listIndustries(limit: Int, offset: Int): IndustryListOutput!
  listSentOpNotification(limit: Int, offset: Int): PaginationNotificationOp
  listUserInvitesForAdmin(filter: ListUserInvitesForAdminFilterInput, orderBy: OrderBy, page: Int, perPage: Int, userId: ID!): OutputListUserInvitesForAdmin
  listUsersForAdmin(filter: ListUsersForAdminFilterInput, orderBy: OrderBy, page: Int, perPage: Int, search: String): UserOutputListUsersForAdmin
  myCircle(limit: Int, offset: Int): SpaceOutputResponse
  myFeed(filter: myFeedFilters, limit: Int, offset: Int): PostOutputData
  myGroupsFeed(limit: Int, offset: Int): PostOutputData @deprecated(reason: "myGroupsFeed query is deprecated.")
  neuroprofiler: NeuroProfileQueries
  note(noteId: ID!): Note
  notes(input: NotesInput): AllNotesOutput
  notificationV2(_id: ID!): Notification
  notifications(filter: NotificationFilter, limit: Int, offset: Int): Notifications
  notificationsUnreadCount(type: [NotificationType]): UnreadNotificationCount
  notificationsV2(filter: NotificationFilterV2, limit: Int, offset: Int): NotificationsV2
  noumContacts(input: SearchNoumContactsInput!): PaginatedSearchableNoumContact!
  noumFile(id: ID!): NoumFile
  noumFiles(input: GetNoumFilesInput!): PaginatedNoumFiles!
  noumMember(memberId: ID!): NoumMember
  noumMembers(input: NoumMembersInput): PaginatedSearchableNoumMember!
  noumRoleGroupedPermissions: [NoumRolePermissionGroup!]!
  noumRoleHistoryLog(input: NoumRoleHistoryLogInput!): NoumRoleHistoryLogOutput!
  noumRolePermissions: [NoumRolePermission!]!
  noumRoles(filterBy: FilterNoumRoleByValue, limit: Int, offset: Int, order: NoumRoleOrderInput): PaginatedNoumRoles!
  paymentConfig: paymentConfigOutput
  payments(filter: PaymentFilter, limit: Int!, page: Int!): PaymentCountOutput
  pingSurvey: String!
  popularNoums(limit: Int, offset: Int): SpaceOutputResponse
  post(_id: ID): PostOutput
  postComments(limit: Int, offset: Int, postId: ID!): commentsWithPagination
  postConnectionGroupsIds(_id: ID): UserConnectionGroupsId
  preCalculateNoumLinkData(linkedNoumIDs: [ID!]!): PreCalculateNoumLinkData
  preDefinedMessages: [String!]!
  previewWithSign(_id: ID!, contactId: ID!, entity: ContractOrSow!): PdfPreview
  principles: PrinciplesQueries
  product: String
  productDetails(code: String!): ProductOutput
  productProfiles: [ProductProfile]
  profileCheckResult: ProfileCheckResult
  reactions(_id: ID, limit: Int, offset: Int): ReactionOutput
  receivedConnectionRequest(limit: Int, offset: Int, spaceId: ID, status: ConnectionRequestStatus): ConnectionOutputResponse
  receivedNoumConnectionInvites(input: ChambersMicroservicePaginationPayload!): PaginatedNoumPendingConnections!
  receivedNoumConnectionRequests(input: ChambersMicroservicePaginationPayload!): PaginatedNoumPendingConnections!
  recentNoums(limit: Int, offset: Int): SpaceOutputResponse!
  recentSearches: RecentSearchesResult!
  recommendedUsersWithCompleteProfile(limit: Int, offset: Int): UserOutputAllUsers
  requestedConnection(limit: Int, offset: Int, requestFrom: ID, status: ConnectionRequestStatus): ConnectionOutputResponse

  """searchEngine query is only for demonstration/healthcheck purposes"""
  searchEngine: ExampleType
  searchGroups(limit: Int, offset: Int, search: String, sortBy: SearchGroupsSortBy): GroupOutput
  sentNoumConnectionInvites(input: ChambersMicroservicePaginationPayload!): PaginatedNoumPendingConnections!
  sentNoumConnectionRequests(input: ChambersMicroservicePaginationPayload!): PaginatedNoumPendingConnections!
  skills: SkillsOutput
  socialHall(type: String!): SocialHall
  socialHallAttendee(includeGroupUsers: Boolean, limit: Int!, location: [Float], offset: Int!, socialHallId: ID!): SocialHallAttendees
  socialHallById(id: ID): SocialHall
  socialHallByName(name: String!): SocialHall
  socialHallGroupById(id: ID!): SocialGroup
  socialHallGroups(limit: Int!, offset: Int!, socialHallId: ID!): SocialGroups
  testEvents: String
  testToken(chamberId: ID!): TokenLedger
  testUserData(uid: ID!): TestDataOutput
  timezones(limit: Int, offset: Int, search: String): PaginatedTimezoneData
  tokenTransaction(chamberId: ID!, limit: Int!, offset: Int!): TokenTransactionHistory
  triggerHourlyEmailNotifcations: Boolean
  underwriting: UnderwritingQueries
  updateOldConnectionHomeNoum(limit: Int, offset: Int): Boolean
  uploadCustomerDocuments(input: uploadDcoumentInput!): uploadDocumentOutput
  user(_id: ID!): UserOutput
  userActiveKnocks(socialHallId: ID): Knocks
  userActiveSocialHallGroup(socialHallId: ID): SocialGroup
  userAddress: AddressOutput
  userAdminGroup(userId: ID): [ID]
  userBankList: [ChameleonBankListOutput]
  userBySkillId(column: String!, operator: FilterOperator!, skillIds: [ID!]!): DiscoveryResponse
  userChamProfile: UserDataOutput
  userCompletedApplication: RiseUserDataOutput
  userConnections(limit: Int, offset: Int, search: String, uid: ID!): UserOutputAllUsers
  userConnectionsForAdmin(limit: Int, offset: Int, search: String, uid: ID!): UserOutputAllUsers
  userCreditCheck: String
  userDiscovery: Discovery
  userFavourites(limit: Int, offset: Int): UserFavouritesOutput!
  userGroupInviteRequest(limit: Int, offset: Int): InvitationOutput
  userGroupSentRequest(limit: Int, offset: Int): InvitationOutput
  userGroupsUpdate(input: String): Boolean
  userInviteRequest(limit: Int, offset: Int): [Invitation]
  userJoinRequestForGroups(limit: Int, offset: Int): InvitationOutput
  userKyc: KycOutput
  userKycForAdmin(userId: ID!): KycOutput
  userKycResult: String
  userLogin(email: String, password: String): LoginOutput
  userMembers(input: SearchMembersInput): PaginatedNoumMembers!
  userMonthlyData: UserMonthlyDataOutput
  userOwnKnocks(socialHallId: ID): Knocks
  userPosts(limit: Int, offset: Int, uid: ID!): PostOutputData
  userReferralEntry(productKey: String): Referral
  userRiseBankList: [RiseBankListOutput]
  userRiseProfile: RiseUserDataOutput
  userSentRequest(limit: Int, offset: Int): [Invitation]
  users(filter: SearchUserFilter, limit: Int, offset: Int, search: String): [UserOutput!]!
  usersGroups(filter: SearchUserFilter, groupId: ID!, limit: Int, offset: Int, search: String): UserOutputCount
  usersSearchAdmin(input: SearchUserFilterAdmin, limit: Int, offset: Int, search: String, sortOrder: SortType): UserSearchResponse
  validateInvoiceSequence(invoiceId: ID, noumId: ID!, sequence: String!): ValidateInvoiceSequenceOutput!
  validateReferralCode(referralCode: String): Boolean
  validateText(languageCode: LanguageCode, text: String!): Boolean
}

type QuestionAndAnswers {
  _id: ID
  options: [AnswerOptions]
  question: String
}

type QuestionAndAnswersOutput {
  count: Int
  data: [QuestionAndAnswers]
}

input QuestionInput {
  body: String!
  expiryDate: String
  questionImage: String
  spaceId: ID!
}

type QuestionOutput {
  id: String!
  question: String!
}

type QuestionOutputResponse {
  count: Int
  data: [NoumQuestionOutput]
  totalCount: Int
}

enum QuestionStatusEnum {
  ACTIVE
  ANSWERED
  CLOSED
  TIPPED
}

input QuestionUpdateInput {
  body: String
  expiryDate: String
  questionImage: String
}

type QuestionsAnswerOutput {
  answer: String
  qid: Int
  question: String
}

input QuestionsFilter {
  status: QuestionStatusEnum
}

input QuestionsInput {
  answer: String
  qid: Int
  question: String
}

type QuestionsOutput {
  options: [String]
  qid: Int
  question: String
}

input QuestionsRiseInput {
  answer: String
  qid: Int
  question: String
}

type QuestionsRiseOutput {
  answer: String
  qid: Int
  question: String
}

input RaiseInvoicePaymentInput {
  amount: Float!
  destinationAccountId: String!
  invoiceId: ID!
  passCode: String
  requestOriginator: RequestOriginator!
  sourceAccountId: String!
}

type RaisePaymentOutput {
  clientSecret: String
  id: ID
  paymentId: ID
}

type RaisedHandSubscriptionData {
  actionType: RaisedHandType
  userId: ID
}

enum RaisedHandType {
  """all users in group"""
  ACCEPTED

  """all users in group"""
  CANCELLED

  """all users in group"""
  DECLINED

  """all users in group"""
  RAISED
}

type Reaction {
  _id: ID!
  category: ReactionCategory
  createdAt: Date
  uid: UserOutput
  updatedAt: Date
}

enum ReactionCategory {
  DISLIKE
  LIKE
  LOVE
}

type ReactionOutput {
  count: Int
  data: [Reaction]
}

input RearrangeSectionInNoumLayoutInput {
  position: Int!
  sectionId: ID!
}

type RecentSearchesResult {
  clickedEntities: GlobalSearchResult!
  searchedQueries: [String]!
}

type RecurringDetails {
  custom: Boolean
  frequency: Frequency
  interval: Int
  monthDates: [Int]
  weekDays: [WeekDays]
}

input RecurringDetailsInput {
  custom: Boolean
  frequency: Frequency
  interval: Int
  monthDates: [Int]
  weekDays: [WeekDays]
}

type Referral {
  _id: ID
  fastPass: Boolean
  maxAllowedCount: Int
  ownerPartnerId: ID
  ownerUserId: UserOutput
  referralCode: String
  usedBy: [UserOutput]
  usedCount: Int
}

type ReferralInvite {
  referralCode: String
  referralInviteUserId: UserOutput
}

input RenewedPlaidToken {
  androidPackageName: String
  institutionId: String!
}

type ReplyOutput {
  firstReply: ThreadOutput
  total: Int
  userIdList: [ThreadUser]
}

enum ReportExportTitle {
  CUSTOMERS
  DWOLLA_TRANSACTION_EXPORT
  PAYMENTS
  PAYMENT_KYC_CUSTOMERS
}

input ReportFilters {
  createdBy: String
  endDate: String
  limit: Int!
  offset: Int!
  startDate: String
  title: GroupReportTitle
  type: ReportTypeEnum
}

enum ReportImportTitle {
  BULK_PAYMENT
  DWOLLA_MASS_PAYMENT
}

input ReportInput {
  postId: ID
  reportText: String
  reportType: ReportType
}

type ReportOutput {
  createdAt: Date
  reportText: String
  reportType: ReportType
  uid: UserOutput
  updatedAt: Date
}

enum ReportType {
  JERK
  OFFENSIVE
  OTHER
  SAFETY
}

enum ReportTypeEnum {
  Download
  Upload
}

enum RequestOriginator {
  NOUMENA_MOBILE
  NOUMENA_OPS_PORTAL
  NOUMENA_PARTNER_PORTAL
  NOUMENA_WEB
}

enum RequestOriginatorsEnum {
  CHAMELEON
  NOUMENA_MOBILE
  NOUMENA_OPS_PORTAL
  NOUMENA_PARTNER_PORTAL
  NOUMENA_WEB
}

input ResetPassCodeInput {
  passCode: String!
  securityQuestion: SecurityQuestion!
}

input ResignFromNoumCoManagerRoleInput {
  disconnectFromNoum: Boolean!
  noumIDs: [ID!]!
}

type ResolutionOutput {
  content: String
  resolutionType: String
}

type ResultOutput {
  name: String
  reasons: [String]
  result: String
  value: String
}

input RewritteNoumLayoutUnsavedChangesInput {
  noumId: ID!
  sections: JSONObject!
}

type RiseApplication {
  alredayCreated: Boolean
  data: SpaceOutput
}

type RiseBankListOutput {
  accountNumber: String
  accountSubType: String
  accountType: String
  id: String
  logo: String
  name: String
}

type RisePersonalProfileOutput {
  error: Boolean
  message: String
  status: Int
  success: Boolean
  user: RiseUserDataOutput
}

input RiseReportFiltersInput {
  fileHeaders: String!
  riseClassId: String!
  riseReportType: RiseReportTypes!
  status: [ApplicationResultStatusAdmin]!
}

type RiseReportListOutput {
  count: Int
  data: [RiseReportOutput]
}

type RiseReportOutput {
  _id: ID!
  createdAt: ISODate!
  filters: JSONObject!
  stage: CsvReportStage!
  status: CsvReportStatus!
  type: RiseReportTypes!
  updatedAt: ISODate!
}

input RiseReportPaginationInput {
  pagination: ChamberPaginationInput
  type: RiseReportTypes!
}

enum RiseReportTypes {
  RISE_CLASS_APPLICATIONS
}

type RiseUserDataOutput {
  address: AddressOutput
  applicationId: String
  applicationStatus: String
  averageMonthlyExpense: String
  averageMonthlyIncome: String
  bestMonthlyIncome: String
  dob: String
  email: String
  firstName: String
  incomeFromTaxReturn: String
  industry: String
  isUSResident: Boolean
  lastName: String
  middleName: String
  phone: String
  questionAnswers: [QuestionsRiseOutput]
  ssn: String
  taxEndPeriod: String
  worstMonthlyIncome: String
}

enum SORT {
  ASC
  DESC
}

type SOW {
  SOWNumber: Int!
  _id: ID!
  commission: [CommissionAndReimbursement]
  createdAt: ISODate!
  createdBy: UserOutput
  deliverables: [DeliverablesAndMilestones]
  effectiveDate: ISODate
  expenseReimbursement: [CommissionAndReimbursement]
  fees: FeesCategory
  isCompleted: Boolean!
  linkedContract: Contract
  linkedNoum: SpaceOutput!
  logo: String
  milestones: [DeliverablesAndMilestones]
  scopeOfWork: String
  sowPDF: PdfPreview
  status: SOWStatus!
  templateName: String
  timeline: [ContractSowTimeLine!]
  timezone: String
  title: String
}

type SOWOutput {
  count: Int
  data: [SOW!]
}

enum SOWStatus {
  AMENDED
  DRAFT
  ISSUED
  SIGNED
}

enum STATUS_INVOICE {
  INTERNAL_VOIDED
  NOT_PAID
  PAID
  PAYMENT_DUE
  PENDING
  POSTED
  VOIDED
}

enum STATUS_NOUM {
  ACTIVE
  ARCHIVED
  DELINQUENT
  INACTIVE
  SUSPENDED
}

enum SUBSCRIPTION_PLAN_TYPE {
  CHARGE
  PLAN
}

type SaveCardOutput {
  accountType: String
  clientAccountId: String
  customerId: String
  id: String
  maskAccountNumber: String
  paymentChannel: String
  status: Boolean
}

input ScoreLineInput {
  description: String
  scoreId: ID!
  type: String
  value: String
}

type ScoreLineOutput {
  createdAt: String
  description: String
  reviewDate: String
  scoreId: ID
  scoreLineId: ID
  type: String
  updatedAt: String
  value: String
}

input SearchChamberAdminFilter {
  type: CONVERSATIONTYPEENUMFORADMIN
  uid: ID
}

input SearchFilterForConversation {
  type: GetConversationsFilterType
}

input SearchGroupInvite {
  canInvite: Boolean
  canInviteUser: ID
}

enum SearchGroupsSortBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
}

input SearchInput {
  limit: Int!
  page: Int!
  search: String
}

input SearchMembersInput {
  limit: Int
  offset: Int
  roleIDs: [ID!]
  roleId: ID
  searchTerm: String
  status: NoumMemberStatus
  statuses: [NoumMemberStatus!]
}

input SearchNoumContactsInput {
  limit: Int
  noumId: ID!
  offset: Int
  query: String
  status: NoumContactStatus
}

input SearchUserFilter {
  connectionType: ConnectionPermissionType
  excludeUsersByStatus: [UserStatus]
  includeNonMembers: Boolean
  includeNoumOwner: Boolean
  includeSelf: Boolean
  userIds: [String]
}

input SearchUserFilterAdmin {
  filters: [FilterType]
}

type SearchableNoumContact {
  _id: ID!
  apartmentNo: String
  city: String
  companyName: String
  country: String
  createdAt: ISODate!
  displayName: String!
  email: String
  fullName: String
  isConnectedWithNoum(noumId: ID): Boolean!
  noum: ChamberByIdRef!
  ownerId: ID!
  state: String
  status: NoumContactStatus!
  street: String
  title: String
  type: NoumContactType!
  user: UserOutput!
  zipCode: String
}

type SearchableNoumMember {
  _id: ID!
  connectedAt: ISODate
  previousRole: NoumMemberRole
  role: NoumMemberRole!
  status: NoumMemberStatus!
  updatedAt: ISODate
  user: UserOutput!
}

input SecurityQuestion {
  answer: String
  id: String
}

input SelectedInvoiceInput {
  invoice_id: Float
}

input SendGroupInviteInput {
  groupId: ID!
  inviteTo: ID!
}

input SendInviteInput {
  groupId: String
  inviteTo: String
  inviteType: inviteType!
}

input SetNoumLayoutToolMetaValueInput {
  metaValues: JSONObject!
  toolId: ID!
}

input SettingsInput {
  setting_name: String!
  setting_value: String!
  setting_value_type: String!
}

type SettingsOutput {
  setting_name: String!
  setting_value: String!
  setting_value_type: String!
  settings_id: Float!
}

input SettingsUpdateInput {
  setting_value: String!
  settings_id: Float!
}

enum SettlementPeriodEnum {
  INSTANT
  NEXTDAY
  SAMEDAY
}

type SignedUrlOutput {
  url: String
}

type Skill {
  _id: ID!
  icon: String!
  name: String!
}

type SkillsOutput {
  categories: [Skill]
  createdAt: String
  updatedAt: String
}

input SmsParams {
  body: String!
  from: String
  to: String!
}

type SocialGroup {
  _id: ID!
  channelName: String
  chatRoomId: String
  chatToken: String
  host: UserOutput
  hosts: [ID]
  invitedAsSpeakers: [SpeakerInvitation]
  mutedSpeakers: [ID]
  name: String
  raiseHands: [ID]
  requestedJoiningStatus: [ID]
  rtmToken: String
  socialHallId: ID
  speakers: [ID]
  startTime: Date
  token: String
  topic: [String]
  users: [UserOutput]
  usersRequestedJoiningStatus: [GroupShJoiningStatus]
}

input SocialGroupInput {
  name: String!
}

type SocialGroups {
  count: Int!
  data: [SocialGroup]
}

type SocialHall {
  _id: ID!
  attendees: [UserOutput]
  chamberId: ID
  endTime: Date
  eventId: ID
  groupId: ID
  hasUserJoined: Boolean
  hosts: [UserOutput]
  isActive: Boolean!
  name: String
  ownerUserId: UserOutput
  socialHallId: ID
  startTime: Date
  status: Boolean
  type: SocialHallType
}

enum SocialHallActionType {
  GROUPNAMECHANGED
}

type SocialHallAttendee {
  _id: ID!
  agoraUserId: Int
  attendeeId: UserOutput
  entryTime: Date
  eventId: ID
  eventRole: CurrentUser
  exitTime: Date
  hallGroupId: ID
  isHost: Boolean
  location: [Float]!
  rtmToken: String
  shJoiningStatus: SocialHallAttendeeStatus
  socialHallId: ID!
  waitingRoomChannelName: String
}

input SocialHallAttendeeInput {
  location: [Float]
  socialHallId: ID!
  socialHallTCAccepted: Boolean
}

enum SocialHallAttendeeStatus {
  Approved
  Default
  Rejected
  Requested
}

type SocialHallAttendees {
  count: Int!
  data: [SocialHallAttendee]
}

input SocialHallInput {
  endTime: Date
  hosts: [ID]
  isActive: Boolean
  name: String
  startTime: Date
  type: SocialHallType!
}

enum SocialHallType {
  MENTORING
  NETWORKING
  NOUM_EVENT
  PERSONAL
  PROMOTING
  RECRUITMENT
}

type SocialHallUpdatesResponse {
  actionData: Object
  actionType: SocialHallActionType
}

type SocialLink {
  link: String
  name: String
}

input SocialLinkInput {
  link: String
  name: String
}

type SortBy {
  field: UserSortableFields
  order: orderByValues
}

enum SortNoteEnum {
  CREATED_AT_ASC
  CREATED_AT_DESC
}

enum SortOperator {
  asc
  desc
}

enum SortOrder {
  ASC
  DESC
}

input SortType {
  column: String
  operator: SortOperator
  order: Int
}

enum SortUnderwritingReportEnum {
  CREATED_AT_ASC
  CREATED_AT_DESC
}

input SowFilterForAdmin {
  noums: [ID!]
  rangeFilter: [CommonFilter!]
  search: String
  status: [SOWStatus!]
}

input SowReportFiltersInput {
  fileHeaders: String!
  rangeFilters: [CommonFilter]!
  search: String
  status: [SOWStatus]!
}

input SpaceCategoryFilter {
  categoryIn: [ID]
  categoryNotIn: [ID]
  spaceType: SpaceTypeEnum
}

type SpaceConnection {
  _id: ID
  approvedAt: String
  draft: SpaceConnectionDraft
  message: String
  permission: ConnectionPermissionTypeEnum
  requestFrom: SpaceOutput
  requestTo: SpaceOutput
  requestedAt: String
  status: ConnectionRequestTypeEnum
  type: connectionTypeEnum
}

type SpaceConnectionDraft {
  permission: ConnectionPermissionTypeEnum
}

type SpaceConnectionsResponse {
  count: Int
  data: [SpaceConnection]
}

type SpaceDraftData {
  customPreviewPosition: Int
  description: String
  fonts: JSONObject
  isCustomPreviewVisible: Boolean
  name: String
  profileImage: String
  profileImageThumbnail: String
  projectType: ProjectChamberType
  theme: ThemeOutput
  title: String
}

input SpaceInput {
  description: String
  elements: [ElementInput]
  institution: InstitutionsEnum!
  name: String!
  permission: SpacePermissionEnum
  profileImage: String
  status: SpaceStatusEnum!
  title: String
  type: SpaceTypeEnum!
}

type SpaceOutput {
  _id: ID
  activeInvitation: ActiveNoumInvitation
  adsMeta: JSONObject
  approvedAt: ISODate
  archivedAt: ISODate
  assignedRole: NoumRole
  broadcastEndedAt: ISODate
  broadcastedAt: ISODate
  category: ProjectChamberCategory
  connectionId: ID
  connectionRequests(input: GetNoumConnectionRequestsInput): PaginatedNoumConnectionRequests
  connectionRole: String
  connectionWithNoum(noumId: ID!): SpaceConnection
  connectionsCount: Int
  createdAt: ISODate
  description: String
  draft: SpaceDraftData
  editorVersion: NoumEditorVersion
  elements: [ElementOutput] @deprecated(reason: "elements are deprecated, use layout instead")
  elementsForNoumAds: [ElementOutput]
  enableAds: Boolean
  favouritedAt: ISODate
  followersCount: Int
  fonts: JSONObject
  headerBackgroundUrl: String
  institution: String
  isConnected: Boolean
  isFavourited: Boolean
  isFollowing: Boolean
  keywords: [String]
  lastCustomPreviewSavedTime: ISODate
  lastEditedBy: UserOutput
  lastUpdatedAt: ISODate
  layout(editorV2Enabled: Boolean, status: NoumLayoutStatusFilter): NoumLayout
  link: NoumLink
  members(input: SearchMembersInput, limit: Int, offset: Int): PaginatedNoumMembers
  membershipStatus: NoumMembershipStatus
  name: String
  networks: [NetworkOutput]
  noumTransactionFee: NoumTransactionFeeByChamberIdRef
  percentCompleted: Int
  permission: String
  profileImage: String
  profileImageThumbnail: String
  projectType: String
  publishedAt: ISODate
  recentlyViewedAt: ISODate
  references: [NoumReference]
  requestedAt: ISODate
  slug: String
  spotLight: Boolean
  spotLightForAll: Boolean
  spotLightUserWhiteList: [ID]
  status: String
  tempStatus: ElementStatusEnum
  theme: ThemeOutput
  title: String
  token: Token
  tokenTransaction: TokenTransaction
  type: String
  uid: UserOutput
  unSaved: SpaceDraftData
  unfavouritedAt: ISODate
  updatedAt: ISODate
  userId: ID
}

type SpaceOutputResponse {
  count: Int
  data: [SpaceOutput]
}

enum SpacePermissionEnum {
  ALL
  CONVERSATION
  NONE
  POST_COMMENT
  POST_CREATE
  POST_LIKE
}

type SpaceProfileValue {
  id: String
  name: String
  value: Int
}

enum SpaceStatusEnum {
  ARCHIVED
  DELETED
  DRAFT
  PUBLISHED
}

enum SpaceTypeEnum {
  HOME
  PROJECT
  RISE_APPLICATION
  SOCIAL
  WORK
}

input SpaceUpdateInput {
  adsMeta: JSONObject
  category: ID
  description: String
  enableAds: Boolean
  headerBackgroundUrl: String
  institution: InstitutionsEnum
  keywords: [String]
  name: String
  permission: SpacePermissionEnum
  profileImage: String
  slug: String
  status: SpaceStatusEnum
  title: String
  type: SpaceTypeEnum
}

type SpeakerInvitation {
  invitee: UserOutput
  inviter: UserOutput
}

type SpeakerInvitationSubscriptionData {
  actionType: SpeakerInvitationType
  inviteeId: ID
  inviterId: ID
}

enum SpeakerInvitationType {
  """all users in group"""
  ACCEPTED

  """only to user who was invited"""
  CANCELLED

  """only to host who invited the user"""
  DECLINED

  """only invited user"""
  INVITED

  """all users in group"""
  SPEAKER_REMOVED
}

input SpotlightChamberFilters {
  categoryIds: [ID]
  projectType: ProjectChamberTypeForFilter
  search: String
}

input SpotlightPlanInput {
  period_unit: ITEM_PRICE_PERIOD_UNIT!
  plan_id: Float!
  spotlight: Boolean!
}

type StandardResponse {
  error: String
  message: String
  statusCode: Int
  success: Boolean
}

type StatementDetailsOutput {
  accountNumber: String
  amount: String
  createdAt: String
  createdBy: UserOutput
  currency: String
  documentName: String
  documentType: String
  dueDate: String
  isPublished: Boolean
  month: String
  pdfDocumentLink: String
  statementId: String
  statementName: String
  statementNotes: String
  updatedAt: String
  updatedBy: UserOutput
  year: String
}

input StatementInput {
  accountNumber: String
  amount: String
  currency: String
  documentType: String
  dueDate: String
  isPublished: Boolean
  month: String
  notes: String
  pdfDocumentLink: String
  statementId: String
  statementName: String
  statementNotes: String
  year: String
}

enum Status {
  ACTIVE
  INACTIVE
}

enum StatusUpdateTypeEnum {
  DOCUMENT
  NOUMENA
  PROVIDER
  PROVIDER_DOCUMENT
  PROVIDER_DOCUMENT_VERIFICATION
  RETRY
}

scalar StringOrBoolean

scalar StringOrInteger

type StripeCardOutput {
  brand: String
  country: String
  exp_month: Int
  exp_year: Int
  funding: String
  id: String
  last4: String
}

enum SubAccountType {
  EXTERNAL
  INTERNAL
}

type SubSettingCounterOptionsOutput {
  current: Float!
  limit: Float!
  type: String
}

type SubSettingCountersOutput {
  noumSetup: SubSettingCounterOptionsOutput!
}

type SubSettingNoumCountersOutput {
  eventAttendees: SubSettingCounterOptionsOutput!
  eventDuration: SubSettingCounterOptionsOutput!
  eventHosted: SubSettingCounterOptionsOutput!
  noumConnections: SubSettingCounterOptionsOutput!
  storage: SubSettingCounterOptionsOutput!
}

type SubSettingOutput {
  description: String
  financialProducts: [PlanSettingItemOutput!]!
  homeNoumSetting: PlanSettingNoumOutput!
  item_id: String!
  learningProducts: [PlanSettingItemOutput!]!
  menuItems: [PlanSettingItemOutput!]!
  metadata: String
  noumSetting: PlanSettingNoumOutput!
  permissions: [String]
  plan_setting_id: Float!
  transactionInfo: [PlanSettingTransactionInfoOutput!]!
}

type SubWalletBalance {
  amount: CurrencyData
  id: String
  masterWalletId: String
}

type Subscription {
  events(userId: ID!): EventSubscriptionData
  groupClosed: ID!
  groupDeleted(groupId: ID): ID!
  knockAccepted: ID!
  knockUpdates(socialHallId: ID): KnockEvent!
  muteSpeaker(groupId: ID!): MuteSpeakerSubscriptionData
  newAttendeeOnGroup(groupId: ID!): ID!
  newAttendeeOnSocialHall(socialHallId: ID!): ID!
  newGroup: ID!
  newKnockResponse(knockId: ID!): ID!
  newKnockToGroup(groupId: ID!): ID!
  newKnockToUser(hallAttendeeId: ID!): ID!
  notification(userId: ID!): NotificationSubscriptionData
  quitAttendeeOnGroup(groupId: ID!): ID!
  quitAttendeeOnSocialHall(socialHallId: ID!): ID!
  raisedHand(groupId: ID!): RaisedHandSubscriptionData
  socialHallUpdates(socialHallId: ID!): SocialHallUpdatesResponse
  speakerInvitation(groupId: ID!): SpeakerInvitationSubscriptionData
  subscribeGroupEvent(groupId: ID!): GroupEvent
  subscribeSocialHall(socialHallId: ID!): Boolean
  updateGroupName(groupId: ID!): ID!
}

input SubscriptionInput {
  events: Boolean
  marketing: Boolean
  messagesAndConnections: Boolean
  paymentsAndOTPs: Boolean
  postAndCommentMentions: Boolean
}

input SubscriptionInputType {
  billing_cycles: Float!
  id: String
  trial_end: String
  user_id: String!
}

type SubscriptionOutput {
  activated_at: String
  billing_cycles: Float
  billing_period: String!
  billing_period_unit: String!
  cancel_schedule_created_at: String
  cancelled_at: String
  card_funding_type: String
  card_last4: String
  card_masked_number: String
  card_status: String
  card_type: String
  counters: SubSettingCountersOutput
  created_at: String
  current_term_end: String
  current_term_start: String
  external_created_at: String
  external_customer_id: String
  external_status: String
  external_subscription_id: String
  external_updated_at: String
  home_noum_counters: SubSettingNoumCountersOutput
  hosted_page_id: String
  is_cancelled: Boolean
  item_price_id: String
  next_billing_at: String
  noum_counters: SubSettingNoumCountersOutput
  plan_category: PLAN_CATEGORY_ENUM
  plan_id: Float!
  plan_name: String
  plan_order: Float
  plan_price: Float
  plan_type: String
  plan_validity_months: Float
  remaining_billing_cycles: String
  settings: SubSettingOutput
  started_at: String
  status: String!
  subscription_id: Float!
  trial_end: String
  trial_start: String
  uid: String!
  unit_price: Float
  updated_at: String
  valid_till: String
}

type SubscriptionTypes {
  events: Boolean
  marketing: Boolean
  messagesAndConnections: Boolean
  paymentsAndOTPs: Boolean
  postAndCommentMentions: Boolean
}

input SubscriptionUpgradeDowngradeInput {
  archivable_noums: [String]
  plan_id: Float!
  redirectURL: String
  subscription_id: Float!
}

type SuccessMessageOutput {
  message: String
  success: Boolean
}

type SurveryAnswerPage {
  next: String
  pageId: String!
  previous: String
}

type Survey {
  _id: ID!
  active: Boolean!
  allowNavigation: Boolean!
  createdAt: String!
  description: String!
  pageCount: Float!
  pages: [SurveyPage!]!
  questionCount: Float!
  tags: [String!]!
  title: String!
  updatedAt: String!
}

type SurveyAnswer {
  _id: ID!
  answers: JSON!
  createdAt: String!
  lastSubmitted: SurveyPage!
  pages: [SurveryAnswerPage!]!
  survey: Survey!
  uid: String!
  updatedAt: String!
}

input SurveyAnswerInputCreate {
  answers: JSON!
  page: String!
  survey: String!
  uid: String!
}

input SurveyInputCreate {
  description: String!
  tags: [String!]!
  title: String!
}

input SurveyInputGetAll {
  limit: Float = 30
  offset: Float = 0
  status: ENUM_SURVEY_STATUS_INPUT = ALL
}

input SurveyInputUpdate {
  active: Boolean
  allowNavigation: Boolean
  description: String
  tags: [String!]
  title: String
}

type SurveyOutputGetAll {
  count: Float!
  data: [Survey!]!
}

type SurveyPage {
  _id: ID!
  createdAt: String!
  description: String!
  isDeleted: Boolean!
  position: Float!
  questionCount: Float!
  questions: [SurveyQuestion!]!
  rules: [SurveyPageRule!]!
  survey: Survey!
  title: String!
  updatedAt: String!
}

input SurveyPageInputCreate {
  description: String!
  position: Float!
  questions: [SurveyQuestionInput!]!
  rules: [SurveyPageInputRule!]!
  survey: String!
  title: String!
}

input SurveyPageInputRule {
  goto: String!
  operator: ENUM_PAGE_RULE_OPERATOR!
  values: [SurveyPageInputRuleValues!]!
}

input SurveyPageInputRuleValues {
  qid: String!
  value: String!
}

type SurveyPageRule {
  goto: String!
  operator: ENUM_PAGE_RULE_OPERATOR!
  values: [SurveyPageRuleValues!]!
}

type SurveyPageRuleValues {
  qid: String!
  value: String!
}

type SurveyQuestion {
  explainerText: String
  helperText: String
  id: String!
  position: Float!
  text: String!
  type: SurveyQuestionType!
}

input SurveyQuestionInput {
  explainerText: String
  helperText: String
  id: String!
  position: Float!
  text: String!
  type: SurveyQuestionInputType!
}

input SurveyQuestionInputType {
  input: SurveyQuestionInputTypeI
  multiSelect: SurveyQuestionInputTypeMS
  select: SurveyQuestionInputTypeS
}

input SurveyQuestionInputTypeI {
  label: String!
  subType: ENUM_QUESTION_INPUT_SUBTYPE!
  validation: SurveyQuestionInputTypeValidation!
}

input SurveyQuestionInputTypeMS {
  defaultOptions: [String!]!
  label: String!
  options: [SurveyQuestionInputTypeOption!]!
  presentation: ENUM_QUESTION_SELECT_PRESENTATION!
  subType: ENUM_QUESTION_MULTI_SELECT_SUBTYPE!
  validation: SurveyQuestionInputTypeValidation!
}

input SurveyQuestionInputTypeOption {
  description: String!
  id: String!
  position: Float!
  title: String!
}

input SurveyQuestionInputTypeS {
  defaultOption: String!
  label: String!
  options: [SurveyQuestionInputTypeOption!]!
  presentation: ENUM_QUESTION_SELECT_PRESENTATION!
  subType: ENUM_QUESTION_SELECT_SUBTYPE!
  validation: SurveyQuestionInputTypeValidation!
}

input SurveyQuestionInputTypeValidation {
  max: Float
  min: Float
  required: Boolean!
}

type SurveyQuestionType {
  input: SurveyQuestionTypeInput
  multiSelect: SurveyQuestionTypeMultiSelect
  select: SurveyQuestionTypeSelect
}

type SurveyQuestionTypeInput {
  label: String!
  subType: ENUM_QUESTION_INPUT_SUBTYPE!
  validation: SurveyQuestionTypeValidation!
}

type SurveyQuestionTypeMultiSelect {
  defaultOptions: [String!]!
  label: String!
  options: [SurveyQuestionTypeOption!]!
  presentation: ENUM_QUESTION_SELECT_PRESENTATION!
  subType: ENUM_QUESTION_MULTI_SELECT_SUBTYPE!
  validation: SurveyQuestionTypeValidation!
}

type SurveyQuestionTypeOption {
  description: String!
  id: String!
  position: Float!
  title: String!
}

type SurveyQuestionTypeSelect {
  defaultOption: String!
  label: String!
  options: [SurveyQuestionTypeOption!]!
  presentation: ENUM_QUESTION_SELECT_PRESENTATION!
  subType: ENUM_QUESTION_SELECT_SUBTYPE!
  validation: SurveyQuestionTypeValidation!
}

type SurveyQuestionTypeValidation {
  max: Float
  min: Float
  required: Boolean!
}

type Tag {
  uid: UserOutput
}

input TagsInput {
  groupId: ID
  uid: ID!
}

type TagsOutput {
  groupId: ID
  uid: UserOutput
}

enum Template {
  connectionDisconnected
  invite
  otpEmail
  personalEventInvite
  resetpassword
  riseResetpassword
  riseWelcome
  userActivation
  userDeleted
  userRejection
  userWithoutReferral
  welcome
}

type TestDataOutput {
  ageCheck: ResultOutput
  creditCheck: String
  fixedExpenseCheck: ResultOutput
  freeLanceQuestionsCheck: ResultOutput
  gamingDebtCheck: ResultOutput
  identityCheck: String
  minimumEarningCheck: ResultOutput
  overdrawCheck: ResultOutput
  reasons: [String]
  result: String
  user: PersonalOutputUser
}

type ThemeColors {
  error: JSONObject
  gray: JSONObject
  miscColors: JSONObject
  noums: NoumColors
  primary: JSONObject
  secondary: JSONObject
  success: JSONObject
}

input ThemeColorsInput {
  error: JSONObject
  gray: JSONObject
  miscColors: JSONObject
  noums: NoumColorsInput
  primary: JSONObject
  secondary: JSONObject
  success: JSONObject
}

input ThemeInput {
  colors: ThemeColorsInput
  name: String
}

type ThemeOutput {
  _id: ID!
  colors: ThemeColors
  name: String!
}

type ThemeOutputResponse {
  count: Int
  data: [ThemeOutput]
}

type ThreadOutput {
  _id: ID
  content: String
  createdAt: Date
  reactions: [Reaction]
  tags: [TagsOutput]
  uid: UserOutput
}

type ThreadUser {
  _id: UserOutput
}

type Timezone {
  _id: ID!
  abbr: String
  isdst: Boolean
  offset: String
  text: String
  timezone: String
  utcOffset: String
  value: String
}

type TipOutput {
  amount: Int
  description: String
  tipBy: UserOutput
}

input TipTransactionInput {
  amount: Float!
  currency: CurrencyEnum!
  destinationUserId: ID!
  passCode: String!
  requestOriginator: RequestOriginatorsEnum!
  transactionReason: String!
}

input TipsInput {
  amount: Float!
  answerId: ID!
  currency: CurrencyEnum!
  description: String!
  passCode: String!
  requestOriginator: RequestOriginator!
}

type Token {
  _id: ID!
  count: Int!
  walletId: ID
}

type TokenArchive {
  createdAt: Date
  fromDate: Date
  id: ID
  records: [TokenTransactionDetails]
  tillDate: Date
}

input TokenArchiveFilter {
  tillDate: Date
}

type TokenArchiveOutput {
  count: Int
  data: [TokenArchive]
}

type TokenLedger {
  chamberId: ID
  count: Int
  createdAt: Date
  id: ID
  updatedAt: Date
  walletId: ID
}

type TokenTransaction {
  chamberId: ID!
  data: [TokenTransactionType]
}

type TokenTransactionDetails {
  activityType: String
  chamberId: ChamberByIdRef
  countIssued: Int
  dateOfIssue: Date
  remainingCount: Int
}

type TokenTransactionHistory {
  count: Int
  data: [TokenTransactionType]
}

type TokenTransactionType {
  activityType: String
  count: Int
  createdAt: Date
  id: ID
  message: String
  refId: String
  refType: String
}

input TransactionAccountInput {
  accountNumber: String!
  accountType: String!
  routingNumber: String!
}

input TransactionAddressInput {
  addressLineOne: String
  addressLineTwo: String
  firstName: String!
  lastName: String!
  postalCode: Int!
}

type TransactionAddressOutput {
  first_name: String
  last_name: String
  physical_address: TransactionAddressPhysicalAddressOutput
}

type TransactionAddressPhysicalAddressOutput {
  postal_code: String
}

type TransactionEcheckOutput {
  account_holder: String
  account_type: String
  last_4_account_number: Int
  masked_account_number: String
  routing_number: Int
  sec_code: String
}

type TransactionFlagHistoryForAdmin {
  date: String
  new: String
  old: String
  userId: UserOutput
}

input TransactionInput {
  account: TransactionAccountInput!
  address: TransactionAddressInput!
  amount: Float!
}

type TransactionLinksOutput {
  disputes: String
  self: String
  settlements: String
}

type TransactionModel {
  id: String
  income: Float
  month: String
}

type TransactionOutput {
  action: String
  authorization_amount: Float
  authorization_code: Int
  billing_address: TransactionAddressOutput
  echeck: TransactionEcheckOutput
  entered_by: String
  links: TransactionLinksOutput
  location_id: String
  response: TransactionResponseOutput
  transaction_id: String
}

type TransactionResourceSpecification {
  end_received_date: String
  location_id: String
  start_received_date: String
}

type TransactionResponseOutput {
  authorization_code: Int
  environment: String
  preauth_desc: String
  preauth_result: String
  response_code: String
  response_desc: String
  response_type: String
}

enum TransactionTypeEnum {
  DISBURSED
  LATEFEE
  MUNTHLYPYMT
  MYNTHLYSERFEE
  TRUEUPPYMT
  VOLPAYMENT
  WITHDRAWL
}

type TransactionsSearchCriteria {
  home_organization_id: String
  page_index: Int
  page_size: Int
  resource_specific: TransactionResourceSpecification
}

type TransferDetail {
  accountName: String
  accountType: String
  chamber: ChamberByIdRef
  chamberId: String
  maskNumber: String
  name: String
}

type TwilioTokenOutput {
  token: String
}

scalar TypeAny

type URLOutput {
  url: String
}

type UnderwritingCsvReportOutput {
  count: Int
  data: [UnderwritingCsvReportOutputData]
}

type UnderwritingCsvReportOutputData {
  _id: ID
  createdAt: Date
  filters: Json
  stage: UnderwritingCsvReportStage
  status: UnderwritingCsvReportStatus
  updatedAt: Date
}

enum UnderwritingCsvReportStage {
  converted
  fetched
  finished
  initialized
  mapped
  started
  uploaded
}

enum UnderwritingCsvReportStatus {
  completed
  failed
  progress
}

type UnderwritingDervDatapoint {
  description: String
  key: ID
  name: String
  type: String
}

type UnderwritingMutations {
  businessSearch(input: BusinessSearchInput): [BusinessSearch]
  plaidAssets(input: PlaidInput): PlaidReportOutput
  plaidTransaction(input: PlaidInput): PlaidReportOutput
  runScoringReport(input: UnderwritingRunScoringReportInput): UnderwritingScoringReport
}

type UnderwritingQueries {
  assetReportsByUser(limit: Int, offset: Int, sortBy: SortUnderwritingReportEnum, userId: ID!): PlaidReportList
  availableDervDatapoints: [AvailableDerivatives]
  calculateMonthlyObligationRatio(userId: ID!): Json
  distinctScoringReportUserList: [distinctUserList]

  """Get the last business report for a given company name."""
  lastBusinessReportForCompany(name: String): BusinessSearch

  """Get the last business report for a given customer."""
  lastBusinessReportForCustomer(customerId: String): BusinessSearch

  """Get the last business report for a given user."""
  lastBusinessReportForUser(userId: ID!): BusinessSearch
  lastPlaidAssetReportForUser(input: PlaidInput): PlaidReportOutput
  lastPlaidTransactionReportForUser(input: PlaidInput): PlaidReportOutput

  """Get the report for business name which doesn't have any relation"""
  lastReportForNoRelationBusiness(name: String): BusinessSearch

  """Get the last underwriting report for a given customer."""
  lastScoringReportForCustomer(customerId: ID!): UnderwritingScoringReport

  """Get the last underwriting report for a given user."""
  lastScoringReportForUser(userId: ID!): UnderwritingScoringReport

  """Get the total available business names which doesn't have any relation"""
  noRelationBusinessAvailable: [String]
  ping: String

  """Get the underwriting report history for a given customer."""
  scoringReportsByCustomer(customerId: ID!, limit: Int, offset: Int, sortBy: SortUnderwritingReportEnum): UnderwritingScoringReportList

  """Get the underwriting report history for a given user."""
  scoringReportsByUser(limit: Int, offset: Int, sortBy: SortUnderwritingReportEnum, userId: ID!): UnderwritingScoringReportList
  transactionReportsByUser(limit: Int, offset: Int, sortBy: SortUnderwritingReportEnum, userId: ID!): PlaidReportList
}

input UnderwritingRunScoringReportInput {
  address: String!
  city: String!
  customerId: String
  firstName: String!
  lastName: String!
  ssn: String!
  state: String!
  userId: ID!
  zipCode: String!
}

type UnderwritingScoringReport {
  createdAt: String
  datasources: Json
  id: ID
  input: UnderwritingScoringReportInput
  modules: Json
  user: UserOutput
}

type UnderwritingScoringReportInput {
  address: String!
  city: String!
  customerId: String
  dob: String!
  firstName: String!
  lastName: String!
  ssn: String!
  state: String!
  userId: String
  zipCode: String!
}

type UnderwritingScoringReportList {
  count: Int
  data: [UnderwritingScoringReport]
}

type UniqueSkill {
  type: String
  values: [ID]
}

type UniqueToolStatus {
  isAlreadyUsed: Boolean!
  toolType: ElementTypeEnum!
}

type UnreadNotificationCount {
  Community: Int
  Money: Int
  Noums: Int
  Other: Int
  total: Int
}

input UpdateAccountFlagInput {
  accountId: ID!
  isBulkPayment: Boolean
  isCampaignAccount: Boolean
}

input UpdateAdCampaignInput {
  campaignId: ID!
  offerId: String
  paymentRef: ID
  status: AdCampaignInputStatus
}

input UpdateCustomerDocumentInput {
  documents: [DocumentInput!]!
  type: DocumentType!
}

input UpdateEventInput {
  _id: ID!
  chamberId: ID!
  cohosts: [CohostInput]!
  description: String!
  duration: Int
  eventDate: Date!
  eventEndDate: Date
  frequency: Frequency
  icsFile: String
  invitations: [InvitationInput]!
  privacy: Privacy!
  recurring: Boolean
  recurringDetails: RecurringDetailsInput
  recurringEndDate: Date
  repeat: Boolean
  timezone: String!
  title: String!
  weekDays: WeekDays
}

input UpdateGroupInvitation {
  accept: Boolean
  inviteId: ID!
}

input UpdateInvitation {
  accept: Boolean
  inviteId: String
}

input UpdateInvoiceDraftInput {
  currency: AllCurrencyEnum
  dueDate: ISODate
  invoiceFrom: String
  invoiceNumber: String
  invoiceTo: String
  issueDate: ISODate
  lateFeeType: LateFeeType
  lateFeeValue: Float
  lineItems: [InvoiceLineItemInput]
  logoUrl: String
  notes: String
  noumId: ID
  paymentDetails: PaymentDetails
  paymentTerms: PaymentTerms
  summary: String
}

input UpdateInvoiceLineItemInput {
  currency: AllCurrencyEnum
  description: String
  quantity: Int
  taxLabel: String
  taxRate: Float
  unitPrice: Float
}

input UpdateInvoicePaymentInput {
  amount: Float
  invoiceId: ID
  paidBy: String
  paymentDate: ISODate
  paymentId: String
}

input UpdateInvoiceTagsInput {
  invoice_id: Float!
  tags: [String!]!
}

input UpdateNoumClass {
  description: String
  isDeleted: Boolean
  name: String
  questions: [JSONObject]
  reviewers: [ID]
  type: String
}

input UpdateNoumContactInput {
  apartmentNo: String
  city: String
  companyName: String
  contactId: ID!
  country: String
  displayName: String
  state: String
  street: String
  title: String
  zipCode: String
}

input UpdateNoumFileInput {
  description: String
  fileId: ID!
  fileUrl: String
  name: String
  visibilityRoles: [ID!]
}

input UpdateNoumLayoutSectionColumnInput {
  background: Boolean
  columnId: ID!
}

input UpdateNoumLayoutSectionInput {
  background: Boolean
  columns: [UpdateNoumLayoutSectionColumnInput]
  columnsVerticalAlignType: NoumLayoutSectionVerticalAlignType
  sectionId: ID
  type: NoumLayoutSectionType
}

input UpdateNoumProgram {
  description: String
  isDeleted: Boolean
  title: String
}

input UpdateNoumReferencePayload {
  capacity: NoumReferenceCapacity
  imageUrl: String
  providerName: String
  referenceText: String
}

input UpdateNoumRoleInput {
  description: String
  name: String
  noumRoleId: ID!
  permissionIDs: [ID!]
}

input UpdatePaymentProviderInput {
  available: Boolean
  chargePercentage: Float
  chargeValue: Float
  feeAppliedTo: FeeApplied
  flowOfFunds: FlowofFundsEnum
  id: String
  invoiceFeeAppliedTo: FeeApplied
  invoicePayment: Boolean
  payeeCurrency: CurrencyEnum
  payerCurrency: CurrencyEnum
  paymentMethod: PaymentProviderMethodEnum
  preference: Int
  provider: paymentChannelsEnum
  settlementPeriod: SettlementPeriodEnum
  source: PaymentProviderSourceEnum
  target: PaymentProviderSourceEnum
}

input UpdateSOWInput {
  commission: [CommissionAndReimbursementInput!]
  deliverables: [DeliverablesAndMilestonesInput!]
  effectiveDate: ISODate
  expenseReimbursement: [CommissionAndReimbursementInput!]
  fees: FeesCategoryInput
  linkedContract: ID
  linkedNoum: ID
  milestones: [DeliverablesAndMilestonesInput!]
  scopeOfWork: String
  templateName: String
  timezone: String
  title: String
}

input UpdateSocialHallAttendeeInput {
  location: [Float]
}

input UpdateSocialHallInput {
  endTime: Date
  hosts: [ID]
  isActive: Boolean
  name: String
  startTime: Date
}

input UpdateUserDataInput {
  _id: ID!
  userType: NoumenaUserType
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

enum UploadFor {
  BACK
  FRONT
  MERGED
}

type User {
  SocialHallTCAccepted: Boolean
  _id: ID!
  ageGroup: MaxMinValue
  bio: String
  chamber: ChamberByUserIdRef
  citizenship: String
  connections: [Connections]
  contact: [Contact]
  createdAt: Date
  credentials: [UserCredentialsOutput]
  dob: String
  email: String
  firstName: String
  freelancingExperience: MaxMinValue
  getInvite: [Invitation]
  isAcceptedSkipMediaTesting: Boolean
  isPhoneVerified: Boolean
  lastCheckedNotificationsDate: Date
  lastName: String
  location: String
  metadata: [LogsOutput]
  middleName: String
  numericUserId: Float
  paymentTCAccepted: Boolean
  permissions: [String]
  phone: String
  profile: Profile
  referralCode: String
  roles: [UserRoleOutput]
  sendInvite: [Invitation]
  skills: [Skill]
  status: String
  title: String
  unreadConnectionCount: Int
  usedReferralCodeOwnerName: String
  userAddress: AddressOutput
  userOwnReferralCode: String
  userSocialHall: UserSocialHall
  userStatus: String
  userType: NoumenaUserType
  username: String
  visibility: Visibility
}

type UserAccessData {
  accountNumber: String
  accountSubType: String
  accountType: String
  debitAccount: DebitAccountOutput
  institutionId: String
  institutionName: String
  logo: String
  routingNumber: String
}

type UserActionLog {
  lastCheckedMessagesDate: Date
  lastCheckedNotificationsDate: Date
}

input UserActionLogInput {
  lastCheckedMessagesDate: Date
  lastCheckedNotificationsDate: Date
}

type UserBankLinkOutput {
  code: String
  message: String
  status: String
}

type UserConfigOutput {
  docScanCompleted: Boolean
  freelancingQuestions: [QuestionsOutput]
  idScanFlag: Boolean
  identityVerified: Boolean
  industries: [String]
  tempILILIMIT: String
}

type UserConnectionGroupsId {
  connectionIds: [ID]
  groupIds: [ID]
}

type UserContractOutput {
  accountNumber: String
  applicationId: String
  applicationName: String
  approvedInvestmentAmount: String
  documents: [DocumentOutput]
  effectiveDate: Date
  initialMonthlyIncome: String
  maximumIncomePaymentRate: String
  maximumInvestmentReturn: String
  productCode: String
}

type UserCredentialsOutput {
  providerType: ProviderVariant
}

type UserDataOutput {
  address: AddressOutput
  applicationStatus: String
  averageMonthlyExpense: String
  averageMonthlyIncome: String
  bestMonthlyIncome: String
  dob: String
  docuSignRedirectURL: String
  email: String
  firstName: String
  incomeFromTaxReturn: String
  industry: String
  isUSResident: Boolean
  lastName: String
  middleName: String
  phone: String
  questionAnswers: [QuestionsAnswerOutput]
  ssn: String
  taxEndPeriod: String
  worstMonthlyIncome: String
}

type UserDeviceTokenOutput {
  _id: ID
  deviceToken: [DeviceTokenOutput]
}

type UserFavourites {
  _id: ID!
  favouritedAt: ISODate!
  noum: SpaceOutput!
  order: Int!
}

type UserFavouritesOutput {
  count: Int!
  data: [UserFavourites!]!
}

type UserHistoryOutput {
  _id: ID
  address: String
  city: String
  country: String
  createdAt: Date
  dob: String
  firstName: String
  lastName: String
  updateById: User
  updatedAt: Date
  userId: User
  username: String
  zipcode: String
}

input UserIdentityInput {
  address: String
  city: String
  dobMonth: String
  dobYear: String
  email: String
  firstName: String
  lastName: String
  state: String
  zip: String
}

input UserIncomeData {
  averageMonthlyExpense: String
  averageMonthlyIncome: String
  bestMonthlyIncome: String
  incomeFromTaxReturn: String
  taxEndPeriod: String
  worstMonthlyIncome: String
}

type UserInvoiceLineItemOutput {
  count: Int!
  data: [InvoiceLineItem]
}

type UserMonthlyDataOutput {
  incomePaymentRate: String
  transactions: [TransactionModel]
}

input UserNoumsFilter {
  categoryIn: [ID]
  categoryNotIn: [ID]
  projectType: ProjectChamberType
  search: String
  status: SpaceStatusEnum
}

type UserOutput {
  SocialHallTCAccepted: Boolean
  _id: ID!
  ageGroup: MaxMinValue
  bio: String
  chamber: ChamberByUserIdRef
  citizenship: String
  connection: ConnectionType
  connections: [UserOutputVisibilityTo]
  createdAt: Date
  credentials: [UserCredentialsOutput]
  creditCheckResult: String
  dob: String
  email: String
  firstName: String
  freelancingExperience: MaxMinValue
  getEventUserRole(eventId: ID): CurrentUser
  isAcceptedSkipMediaTesting: Boolean
  isPhoneVerified: Boolean
  kycResult: String
  lastCheckedNotificationsDate: Date
  lastLoginAt: Date
  lastName: String
  location: String
  metadata: [LogsOutput]
  middleName: String
  numericUserId: Float
  paymentTCAccepted: Boolean
  phone: String
  profile: ProfileOutput
  profileUrl: String
  referralCode: String
  roles: [UserRoleOutput]
  skills: [Skill]
  status: String
  title: String
  unMaskedEmail: String
  unreadConnectionCount: Int
  updatedAt: Date
  usedReferralCodeOwnerName: String
  userAddress: AddressOutput
  userOwnReferralCode: String
  userStatus: String
  userType: NoumenaUserType
  username: String
  visibility: UserOutputVisibility
  visibleTo: [UserOutputVisibilityTo]
}

type UserOutputAllUsers {
  count: Int
  data: [UserOutput]
}

type UserOutputCount {
  count: Int
  data: [UserOutputForGroup]
}

type UserOutputForGroup {
  _id: ID
  connection: ConnectionType
  user: UserOutput
}

type UserOutputListUsersForAdmin {
  data: [UserOutput]
  filter: ListUsersForAdminFilter
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  oldestUserCreatedAt: Date
  page: Int
  perPage: Int
  search: String
  totalPagesCount: Int
}

type UserOutputVisibility {
  email: String
  location: String
  phone: String
}

type UserOutputVisibilityTo {
  userid: String
}

type UserPreferences {
  emailSubscriptions: SubscriptionTypes!
  timezone: String
  userId: String!
}

input UserPreferencesInput {
  emailSubscriptions: SubscriptionInput
  timezone: String
}

input UserProfileInput {
  SocialHallTCAccepted: Boolean
  additionalInfo: String
  ageGroup: MaxMinInput
  bio: String
  citizenship: String
  email: String
  firstName: String
  freelancingExperience: MaxMinInput
  lastCheckedNotificationsDate: Date
  lastName: String
  location: String
  middleName: String
  phone: String
  profile: ProfileInput
  profileUrl: String
  title: String
  username: String
  visibility: VisibilityInput
}

enum UserRelationType {
  ADMIN
  ALL
  CONNECTED
  OTHERS
}

enum UserRole {
  COHOST
  HOST
  NONE
  PARTICIPANT
}

type UserRoleOutput {
  _id: ID!
  permissions: [String]
  roleType: String
}

type UserSearchResponse {
  count: Int
  data: [UserOutput]
}

type UserSelectedQuestionAndAnswersOutput {
  count: Int
  data: [UserSelectedQuestionAndAnswersOutputObject]
}

type UserSelectedQuestionAndAnswersOutputObject {
  userId: ID
  userSelection: [UserSelectionForQuestionAndAnswers]
}

type UserSelectionForQuestionAndAnswers {
  _id: ID
  answer: String
  questionId: ID
}

type UserSocialHall {
  _id: ID
  isActive: Boolean!
  name: String
  type: SocialHallType
  userId: ID
}

enum UserSortableFields {
  bio
  createdAt
  email
  firstName
  lastName
  location
  middleName
  phone
  status
  title
  updatedAt
  userStatus
  username
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
  DELETED
  INACTIVE
  INREVIEW
  PENDING
  REJECTED
  UNREGISTERED
}

enum UserType {
  ADMIN
  ALL
  CONNECTED
}

type ValidateInvoiceSequenceOutput {
  message: String
  success: Boolean!
}

type VerifyMicroDeposit {
  amount1: CurrencyOutput
  amount2: CurrencyOutput
  createdAt: String
  id: String
  status: String
  updatedAt: String
}

input VerifyMicroDepositInput {
  id: String!
  microDeposits: MicroDepositAmountInput!
}

type Visibility {
  email: String
  location: String
  phone: String
}

input VisibilityInput {
  email: VisibilityType
  location: VisibilityType
  phone: VisibilityType
}

enum VisibilityType {
  ALL
  CONNECTIONS
  USER
}

type WalletDetails {
  balance: String
  walletName: String
}

type WalletExistDetailType {
  sourceWallet: Boolean!
  sourceWalletDetail: AccountListOutput
  targetWallet: Boolean!
  targetWalletDetail: [AccountListOutput]
}

type WalletExistType {
  source: Boolean!
  sourceId: String
  success: Boolean!
  target: Boolean!
  targetId: String
}

enum WalletLimitType {
  ANNUAL
  DAILY
  NO_LIMIT
}

enum WeekDays {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

enum actionType {
  ACTIVE
  DEACTIVATED
  INACTIVE
  INREVIEW
  PENDING
  REGISTERED
  REJECTED
  UNREGISTERED
}

type addBankResponse {
  code: String
  data: [RiseBankListOutput]
  message: String
  requestId: String
  status: String
}

enum applicationStatus {
  APPROVED
  CLOSE
  COMPLETED
  EXPIRED
  IN_PROGRESS
  REJECTED
}

input belvoAccessTokenInput {
  company_benefit_content: String
  company_benefit_header: String
  company_icon: String
  company_logo: String
  company_name: String
  opportunity_loss: String
}

enum belvoError {
  REPORT
  RETRY
}

type commentsWithPagination {
  count: Int
  data: [Comments]
}

enum connectionTypeEnum {
  CONNECTION
  INVITE
}

type createCustomerDocumentsOutput {
  message: String
  userId: String
}

input createPaymentInput {
  amount: Float!
  currency: CurrencyEnum!
  destinationAccountId: String!
  errorObj: Boolean
  idempotencyKey: String!
  passCode: String!
  requestOriginator: RequestOriginatorsEnum!
  saveCard: Boolean
  settlementPeriod: SettlementPeriodEnum!
  sourceAccountId: String!
  tenantId: String!
  transactionReason: String
  transactionType: TransactionTypeEnum!
}

input createSubLedgerInput {
  amount: Float!
  chamberId: String!
  currency: CurrencyEnum
  name: String!
}

type createSubLedgerOutput {
  accountId: String
  chamberId: String
  id: String
  name: String
  status: Boolean
}

type distinctUserList {
  userId: UserOutput
}

type downloadDocumentOutput {
  url: String
}

input generateCsvInput {
  otherParam: String
}

type generateCsvResponse {
  url: String!
}

type getOtpStatsOutput {
  _id: ID
  createdAt: Date
  email: String
  event: String
  isLogin: Boolean
  timestamp: Float
  updatedAt: Date
  verified: Boolean
}

type getUserDetailsOutput {
  accountType: AccountType
  dateOfRegistration: String
  name: String
  subWalletDetails: WalletDetails
  uid: UserOutput
  walletDetails: WalletDetails
}

type inviteNonNoumUserOutput {
  _id: ID!
  isActive: Boolean
  isVerified: Boolean
  requestedForNoumId: String
  token: String
  uid: UserOutput
}

type inviteNonNoumUsersOutput {
  count: Int
  data: [inviteNonNoumUserOutput]
}

enum inviteType {
  GROUP
  PRIVATE
}

type isUserSocialHallAttendee {
  socialHallId: ID
  status: Boolean
}

type keyPair {
  key: String
  label: String
}

input myFeedFilters {
  usersType: [UserType]
}

enum operationType {
  ACTIVATION
  ARCHIVED
  RENEWAL
}

enum orderByValues {
  ASC
  DESC
}

type payType {
  key: String
  label: String
  reasons: [keyPair]
}

enum paymentChannelsEnum {
  DWOLLA
  STRIPE
}

type paymentConfigOutput {
  paymentChannel: [keyPair]
  paymentType: [payType]
}

input stripePaymentMethodInput {
  transactionId: String!
}

input submitOnboardingQuestionnaire {
  answer: String!
  countryCode: String
  questionId: ID!
}

type submitOnboardingQuestionnaireOutput {
  userStatus: String
}

type unreadCountOutput {
  badge: Int
}

"""Input type Starts here"""
input updateUserByAdminInput {
  address: AddressInput
  country: String
  firstName: String
  kyc: KycInput
  lastName: String
  userId: ID!
  username: String
}

input uploadDcoumentInput {
  contentType: String
  documentName: String
}

type uploadDocumentOutput {
  documentName: String
  url: String
}

input userInput {
  _id: ID!
  action: actionType!
  moreInfo: String
  reason: String!
}

type validateResetPasswordOutput {
  message: String
  success: Boolean!
}