import { type FC, useCallback, useEffect, useRef } from 'react';
import Quill from 'quill';

import { onTextChange } from '../../utils';
import { type IInitializerProps } from '../../types';
import {
  EDITOR_ELEMENT_ID,
  DOWNLOAD_CLASS,
  REMOVE_CLASS,
  DOWNLOAD_ICON,
  REMOVE_ICON,
  ATTACHMENT_ICON,
  VIDEO_ICON,
  ERROR_ICON,
} from '../../constants';

type TDelta = typeof Delta;

const Delta = Quill.import('delta');

export const Initializer: FC<IInitializerProps> = ({
  editor,
  editorUUID,
  onEvent,
}) => {
  const uuid = `${EDITOR_ELEMENT_ID}-${editorUUID}`;

  const timer = useRef<NodeJS.Timeout | null>(null);
  // In view mode,  enrich existing elements with functionality
  const enrichElements = useCallback(() => {
    // EDIT AND VIEW MODE
    // Add controls to the video
    document.querySelectorAll(`#${uuid} video`).forEach((el) => {
      const attr = el.getAttribute('controls');
      if (!attr || attr === 'false') {
        el.setAttribute('controls', 'true');
      }
    });

    document.querySelectorAll(`#${uuid} .${DOWNLOAD_CLASS}`).forEach((el) => {
      if (!el.innerHTML.startsWith('<svg')) {
        // eslint-disable-next-line no-param-reassign
        el.innerHTML = DOWNLOAD_ICON;
      }
    });

    document
      .querySelectorAll(`#${uuid} .icon.attachment_icon`)
      .forEach((el) => {
        if (!el.innerHTML.startsWith('<svg')) {
          // eslint-disable-next-line no-param-reassign
          el.innerHTML = ATTACHMENT_ICON;
        }
      });

    document.querySelectorAll(`#${uuid} .icon.video_icon`).forEach((el) => {
      if (!el.innerHTML.startsWith('<svg')) {
        // eslint-disable-next-line no-param-reassign
        el.innerHTML = VIDEO_ICON;
      }
    });

    document.querySelectorAll(`#${uuid} .error_icon`).forEach((el) => {
      if (!el.innerHTML.startsWith('<svg')) {
        // eslint-disable-next-line no-param-reassign
        el.innerHTML = ERROR_ICON;
      }
    });

    document.querySelectorAll(`#${uuid} .${REMOVE_CLASS}`).forEach((el) => {
      if (!el.innerHTML.startsWith('<svg')) {
        // eslint-disable-next-line no-param-reassign
        el.innerHTML = REMOVE_ICON;
      }
    });
  }, [uuid]);

  useEffect(() => {
    timer.current = setTimeout(() => {
      // The mobile doesn't add some props so we have to add them to get things to work on the web
      enrichElements();
    }, 100);

    return () => {
      if (timer.current) {
        clearTimeout(timer.current);
      }
    };
  }, [enrichElements]);

  useEffect(() => {
    new ResizeObserver((entries) => {
      window.requestAnimationFrame(() => {
        if (!Array.isArray(entries) || !entries.length) {
          /* empty */
        } else {
          onTextChange({ editorUUID, editor, source: 'api', onEvent });
        }
      });
    }).observe(document.getElementById(`${uuid}`) || document.body);
  }, [editor, editorUUID, onEvent, uuid]);

  useEffect(() => {
    // Clear any undo history that has been generated by setting up;
    // @ts-ignore
    editor.history.clear();
    onTextChange({ editorUUID, editor, source: 'api', onEvent });
  }, [editorUUID, editor, onEvent]);

  useEffect(() => {
    editor.on(
      'text-change',
      (_delta: TDelta, _old: TDelta, _source: string) => {
        onTextChange({ editorUUID, editor, source: _source, onEvent });
      },
    );
  }, [editor, editorUUID, onEvent]);

  return null;
};
