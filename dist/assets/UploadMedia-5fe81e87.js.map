{"version":3,"file":"UploadMedia-5fe81e87.js","sources":["../../src/features/upload/components/UploadMedia/UploadMedia.tsx"],"sourcesContent":["import React, { type MouseEventHandler } from 'react';\nimport { t } from 'i18next';\nimport { Trans } from 'react-i18next';\nimport { type CSSProperties } from 'styled-components';\nimport { TSpan } from '@/components/Typography';\nimport { Upload } from '../Upload';\nimport { UploadContainer, UploadDescription, DragDropText } from './style';\n\nexport type UploadMediaProps = {\n  acceptedFileTypes?: string;\n  maxSize?: number;\n  isHidden?: boolean;\n  style?: CSSProperties;\n  marginTop?: number;\n  keepOriginalName?: boolean;\n  error?: boolean;\n  allTypesSupported?: boolean;\n  setMediaDetail: (e: File) => void;\n  onUploading: (uploading: boolean) => void;\n  onContentChange?: (next: string) => void;\n  onError?(hasError: boolean): void;\n};\n\nconst UploadMedia: React.FC<UploadMediaProps> = (props) => (\n  <Upload<HTMLDivElement>\n    acceptedFileTypes={props.acceptedFileTypes}\n    maxSize={props.maxSize || 500}\n    onContentChange={props.onContentChange}\n    onUploadFile={props.setMediaDetail}\n    keepOriginalName={props.keepOriginalName}\n    allTypesSupported={props.allTypesSupported}\n  >\n    {({ triggerElRef, isDraggingOver, ...rest }) => {\n      props.onUploading(rest.isUploadStarted && !rest.isUploadComplete);\n      props.onError?.(rest.error);\n\n      return (\n        <UploadContainer\n          ref={triggerElRef}\n          disabled={rest.isUploadStarted && !rest.isUploadComplete}\n          data-testid=\"multi_media_upload\"\n          isDraggingOver={isDraggingOver}\n          style={props.style}\n          isHidden={props.isHidden}\n          marginTop={props.marginTop}\n          error={props.error}\n        >\n          <DragDropText>\n            <Trans\n              i18nKey=\"noumena.image_element.edit_pre_upload.text\"\n              components={{\n                link1: (\n                  <TSpan\n                    data-testid=\"multi_media_upload_btn\"\n                    colorToken=\"--text-dragdrop-brand-primary-default\"\n                    font=\"body-l-bold\"\n                    onClick={\n                      rest.onClickHandler as MouseEventHandler<HTMLButtonElement>\n                    }\n                  />\n                ),\n              }}\n            />\n          </DragDropText>\n          <UploadDescription font=\"footnote\" error={props.error}>\n            {t('noumena.drag_drop_media_type_size.text', {\n              maxSize: props.maxSize,\n            })}\n          </UploadDescription>\n        </UploadContainer>\n      );\n    }}\n  </Upload>\n);\n\nexport default UploadMedia;\n"],"names":["UploadMedia","props","jsx","Upload","acceptedFileTypes","maxSize","onContentChange","setMediaDetail","keepOriginalName","allTypesSupported","triggerElRef","isDraggingOver","rest","onUploading","isUploadStarted","isUploadComplete","onError","error","jsxs","UploadContainer","style","isHidden","marginTop","DragDropText","Trans","link1","TSpan","onClickHandler","UploadDescription","t"],"mappings":"uIAuBMA,MAAAA,EACJC,GAAAC,EAACC,EACC,CAAA,kBAAmBF,EAAMG,kBACzB,QAASH,EAAMI,SAAW,IAC1B,gBAAiBJ,EAAMK,gBACvB,aAAcL,EAAMM,eACpB,iBAAkBN,EAAMO,iBACxB,kBAAmBP,EAAMQ,kBAAkB,YAAA,qBAE1C,SAAC,CAAA,CAAEC,aAAAA,EAAcC,eAAAA,EAAgB,GAAGC,CAAK,IAAM,OAC9CX,OAAAA,EAAMY,YAAYD,EAAKE,iBAAmB,CAACF,EAAKG,gBAAgB,GAC1DC,EAAAA,EAAAA,UAAAA,MAAAA,EAAAA,KAAAA,EAAUJ,EAAKK,OAGnBC,EAACC,EACC,CAAA,IAAKT,EACL,SAAUE,EAAKE,iBAAmB,CAACF,EAAKG,iBACxC,cAAY,qBACZ,eAAAJ,EACA,MAAOV,EAAMmB,MACb,SAAUnB,EAAMoB,SAChB,UAAWpB,EAAMqB,UACjB,MAAOrB,EAAMgB,MAAM,YAAA,8BAEnB,SAAA,CAAAf,EAACqB,GAAY,YAAA,2BACX,WAACC,EACC,CAAA,QAAQ,6CACR,WAAY,CACVC,MACEvB,EAACwB,EACC,CAAA,cAAY,yBACZ,WAAW,wCACX,KAAK,cACL,QACEd,EAAKe,eACN,YAAA,oBAAA,CAAA,EAGL,YAAA,mBAAA,CAAA,EAEN,EACAzB,EAAC0B,EAAkB,CAAA,KAAK,WAAW,MAAO3B,EAAMgB,MAAM,YAAA,gCACnDY,SAAAA,EAAE,yCAA0C,CAC3CxB,QAASJ,EAAMI,OAChB,CAAA,EACH,CACF,CAAA,CAAA,CAEJ,CACF,CAAA"}