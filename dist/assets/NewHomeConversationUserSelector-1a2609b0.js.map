{"version":3,"file":"NewHomeConversationUserSelector-1a2609b0.js","sources":["../../src/features/conversation/contexts/ConversationViewProvider.tsx","../../src/features/conversation/contexts/ActiveConversationProvider.tsx","../../src/features/conversation/contexts/NewConversationContext.tsx","../../src/features/conversation/contexts/NewConversationProvider.tsx","../../src/features/conversation/contexts/TwilioClientProvider.tsx","../../src/features/conversation/components/ChatItem/ChatItemAvatar.tsx","../../src/features/conversation/components/ChatItem/styles.tsx","../../src/features/conversation/components/ChatItem/ChatItemView.tsx","../../src/features/conversation/components/ChatItem/ChatItem.tsx","../../src/features/conversation/components/ChatItem/NewChatItem.tsx","../../src/hooks/intersecting.ts","../../src/features/conversation/components/MessageItem/MessageItem.tsx","../../src/features/conversation/components/MessageItem/PendingMessageItem.tsx","../../src/features/conversation/components/MessageList/styles.ts","../../src/features/conversation/components/MessageList/MessageList.tsx","../../src/features/conversation/components/ConversationUsersModal/styles.ts","../../src/features/conversation/components/ConversationUsersModal/ConversationUsersModal.tsx","../../src/features/conversation/components/ConversationProfile/styles.ts","../../src/features/conversation/components/ConversationProfile/ConversationProfileView.tsx","../../src/features/conversation/components/ConversationProfile/ConversationProfile.tsx","../../src/features/conversation/components/MessageUserPicker/MessageSelectedUser.tsx","../../src/features/conversation/components/MessageUserPicker/MessageUserOptionRenderer.tsx","../../src/features/conversation/components/MessageUserPicker/MessageUserSearch.tsx","../../src/features/conversation/components/MessageUserPicker/utils.ts","../../src/features/conversation/components/MessageUserPicker/MessageUserPicker.tsx","../../src/features/conversation/components/NewConversationUserSelector/NewHomeConversationUserSelector.tsx"],"sourcesContent":["import { type FC, type ReactNode, useCallback, useMemo, useState } from 'react';\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\nimport { ConversationViewContext } from './ConversationViewContext';\nimport { ConversationType, ViewMode } from '../types';\n\nexport const ConversationViewProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const deviceType = useDeviceType();\n\n  const [viewMode, changeViewMode] = useState<ViewMode>(ViewMode.DEFAULT);\n  const setViewMode = useCallback(\n    (value: ViewMode) => {\n      if (deviceType === DeviceTypeEnum.MOBILE) {\n        changeViewMode(value);\n      } else {\n        changeViewMode(ViewMode.DEFAULT);\n      }\n    },\n    [deviceType],\n  );\n\n  const [isNewConversation, setIsNewConversation] = useState<boolean>(false);\n  const [conversationType, setConversationType] = useState(\n    ConversationType.GLOBAL_ALL,\n  );\n  const [conversationWrapperWidth, setConversationWrapperWidth] =\n    useState<number>(0);\n\n  const value = useMemo(\n    () => ({\n      viewMode,\n      setViewMode,\n      isNewConversation,\n      setIsNewConversation,\n      conversationType,\n      setConversationType,\n      conversationWrapperWidth,\n      setConversationWrapperWidth,\n    }),\n    [\n      conversationType,\n      conversationWrapperWidth,\n      isNewConversation,\n      setViewMode,\n      viewMode,\n    ],\n  );\n\n  return (\n    <ConversationViewContext.Provider value={value}>\n      {children}\n    </ConversationViewContext.Provider>\n  );\n};\n","import {\n  type FC,\n  type ReactNode,\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { type MediaCategory, type UnsentMessage } from '@twilio/conversations';\n\nimport { useAuth } from '@/features/auth/contexts';\nimport { replaceItemAtIndex } from '@/utils/list';\n\nimport { type MessageAttributes, type PendingMessage } from '../types';\nimport ConversationHooks from '../hooks/globalMessages';\nimport { ActiveConversationContext } from './ActiveConversationContext';\nimport { ConversationUnreadStatusContext } from './ConversationUnreadStatusContext';\n\nexport const ActiveConversationProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const { user } = useAuth();\n\n  const [sid, setSid] = useState<string>('');\n  const { conversation } = ConversationHooks.useConversation({ sid });\n\n  const [pendingMessages, setPendingMessages] = useState<\n    Record<string, PendingMessage[]>\n  >({});\n\n  const pendingMessagesRef = useRef(pendingMessages);\n  useEffect(() => {\n    pendingMessagesRef.current = pendingMessages;\n  }, [pendingMessages]);\n\n  const activeConversationPendingMessages = useMemo(\n    () => pendingMessages[sid] || [],\n    [pendingMessages, sid],\n  );\n\n  const { setMutedConversationId } = useContext(\n    ConversationUnreadStatusContext,\n  );\n\n  useLayoutEffect(() => {\n    setMutedConversationId(sid);\n\n    return () => setMutedConversationId(null);\n  }, [sid, setMutedConversationId]);\n\n  const addPendingMessage = useCallback(\n    (unsentMessage: UnsentMessage) => {\n      if (!conversation) return;\n\n      const pendingMessage: PendingMessage = {\n        ...unsentMessage,\n        send: unsentMessage.send,\n        attributes: unsentMessage.attributes as MessageAttributes,\n        mediaContent: unsentMessage.mediaContent as [MediaCategory, FormData][],\n        author: user?._id || null,\n        dateCreated: new Date(),\n        index: -1,\n        conversation,\n        status: { status: 'sending' },\n      };\n\n      setPendingMessages((prev) => ({\n        ...prev,\n        [sid]: [...(prev[sid] || []), pendingMessage],\n      }));\n    },\n    [conversation, sid, user?._id],\n  );\n\n  const updatePendingMessage = useCallback(\n    (id: string, pendingMessage: Partial<PendingMessage>) => {\n      const activePendingMessages = pendingMessagesRef.current[sid] || [];\n      const index = activePendingMessages.findIndex(\n        (message) => message.attributes.id === id,\n      );\n\n      if (index > -1) {\n        const updatedPendingMessage = {\n          ...activePendingMessages[index],\n          ...pendingMessage,\n        };\n        const updatedPendingMessages = replaceItemAtIndex(\n          activePendingMessages,\n          index,\n          updatedPendingMessage,\n        );\n        setPendingMessages((prev) => ({\n          ...prev,\n          [sid]: [...updatedPendingMessages],\n        }));\n      }\n    },\n    [sid],\n  );\n\n  const removePendingMessage = useCallback(\n    (id: string) => {\n      setPendingMessages((prev) => ({\n        ...prev,\n        [sid]: prev[sid]?.filter((message) => message.attributes.id !== id),\n      }));\n    },\n    [sid],\n  );\n\n  const resendErrorMessage = useCallback(\n    (id: string) => {\n      const activePendingMessages = pendingMessagesRef.current[sid] || [];\n      const index = activePendingMessages.findIndex(\n        (message) => message.attributes.id === id,\n      );\n\n      if (index > -1) {\n        const failedMessage = activePendingMessages[index];\n\n        if (\n          failedMessage.index > -1 ||\n          failedMessage.status?.status === 'failed'\n        ) {\n          updatePendingMessage(id, {\n            status: { status: 'sending' },\n          });\n\n          const promise = activePendingMessages[index].send();\n          promise\n            .then((resp) => {\n              if (resp === null) return;\n              updatePendingMessage(id, {\n                status: { status: 'sent' },\n                index: resp,\n              });\n            })\n            .catch(() => {\n              updatePendingMessage(id, {\n                status: { status: 'failed' },\n              });\n            });\n        } else {\n          updatePendingMessage(id, {\n            status: { status: 'sent' },\n          });\n        }\n      }\n    },\n    [sid, updatePendingMessage],\n  );\n\n  const value = useMemo(\n    () => ({\n      activeConversationSid: sid,\n      setActiveConversationSid: setSid,\n      addPendingMessage,\n      updatePendingMessage,\n      removePendingMessage,\n      resendErrorMessage,\n      pendingMessages: activeConversationPendingMessages,\n    }),\n    [\n      sid,\n      activeConversationPendingMessages,\n      addPendingMessage,\n      removePendingMessage,\n      resendErrorMessage,\n      updatePendingMessage,\n    ],\n  );\n\n  return (\n    <ActiveConversationContext.Provider value={value}>\n      {children}\n    </ActiveConversationContext.Provider>\n  );\n};\n\nexport const useActiveConversation = () => {\n  const value = useContext(ActiveConversationContext);\n\n  return value;\n};\n","import { createContext, type Dispatch, type SetStateAction } from 'react';\nimport { type Conversation } from '@twilio/conversations';\nimport { type UserOutput } from '@/apollo/generated/types';\n\nexport type NewConversationContextProps = {\n  isConversationCreatable: boolean;\n  loading: boolean;\n  ecLoading: boolean;\n  selectedUsers: UserOutput[];\n  setSelectedUsers: Dispatch<SetStateAction<UserOutput[]>>;\n  createNewConversation: () => Promise<Conversation | undefined>;\n  createHomeNoumNewConversation: () => Promise<Conversation | undefined>;\n};\n\nexport const NewConversationContextInitialValue = {\n  isConversationCreatable: false,\n  loading: false,\n  ecLoading: false,\n  selectedUsers: [],\n  setSelectedUsers: () => {},\n  createNewConversation: async () => undefined,\n  createHomeNoumNewConversation: async () => undefined,\n};\n\nexport const NewConversationContext =\n  createContext<NewConversationContextProps>(\n    NewConversationContextInitialValue,\n  );\n","import {\n  type FC,\n  type ReactNode,\n  useState,\n  useMemo,\n  useContext,\n  useCallback,\n  useEffect,\n} from 'react';\nimport * as Sentry from '@sentry/react';\nimport { type UserOutput } from '@/apollo/generated/types';\nimport {\n  type GetOrCreateSpaceConversationMutation,\n  useGetOrCreateSpaceConversationMutation,\n  type GetOrCreateGlobalConversationMutation,\n  useGetOrCreateGlobalConversationMutation,\n  useGetConversationLazyQuery,\n} from '@/apollo/graphql';\nimport { cleanList } from '@/utils/list';\nimport { useNoumContext } from '@/screens/Chamber/ViewChamber/ChamberProvider';\nimport { CREAT_CONVERSATION_WITH_HOME_OWNER } from '@/constants/conversation';\nimport { useAuth } from '@/features/auth/contexts';\nimport { ActiveConversationContext } from './ActiveConversationContext';\nimport { ConversationViewContext } from './ConversationViewContext';\nimport { NewConversationContext } from './NewConversationContext';\nimport { TwilioClientContext } from './TwilioClientContext';\n\nexport const isGetOrCreateSpaceConversationType = (\n  input:\n    | GetOrCreateSpaceConversationMutation['getOrCreateSpaceConversation']\n    | undefined,\n): input is NonNullable<\n  GetOrCreateSpaceConversationMutation['getOrCreateSpaceConversation']\n> => !!(input && input.__typename === 'ConversationOutput');\n\nexport const isGetOrCreateGlobalConversationType = (\n  input:\n    | GetOrCreateGlobalConversationMutation['getOrCreateGlobalConversation']\n    | undefined,\n): input is NonNullable<\n  GetOrCreateGlobalConversationMutation['getOrCreateGlobalConversation']\n> => !!(input && input.__typename === 'ConversationOutput');\n\nexport const NewConversationProvider: FC<{\n  children: ReactNode;\n  onCreated?: (sid: string) => void;\n}> = ({ children, onCreated }) => {\n  const { user } = useAuth();\n  const { spaceId, isMasterNoum } = useNoumContext();\n  const { client } = useContext(TwilioClientContext);\n  const { isNewConversation, setIsNewConversation } = useContext(\n    ConversationViewContext,\n  );\n  const { activeConversationSid, setActiveConversationSid } = useContext(\n    ActiveConversationContext,\n  );\n  const [getOrCreateSpaceConversationMutation] =\n    useGetOrCreateSpaceConversationMutation();\n  const [getOrCreateGlobalConversationMutation] =\n    useGetOrCreateGlobalConversationMutation();\n  const [getConversation] = useGetConversationLazyQuery();\n\n  const [selectedUsers, setSelectedUsers] = useState<UserOutput[]>([]);\n  useEffect(() => {\n    if (!isNewConversation) setSelectedUsers([]);\n  }, [isNewConversation]);\n  const [loading, setLoading] = useState(false);\n  const [ecLoading, setECLoading] = useState(false);\n\n  const selectedUserIds: string[] = useMemo(\n    () => selectedUsers.map((u) => u._id),\n    [selectedUsers],\n  );\n\n  const isConversationCreatable = useMemo(\n    () =>\n      (isNewConversation ||\n        activeConversationSid === CREAT_CONVERSATION_WITH_HOME_OWNER) &&\n      selectedUserIds.length > 0,\n    [activeConversationSid, isNewConversation, selectedUserIds.length],\n  );\n\n  const createNewConversation = useCallback(async () => {\n    if (!client || !isConversationCreatable) {\n      return undefined;\n    }\n\n    try {\n      setLoading(true);\n      const { data } = await getOrCreateSpaceConversationMutation({\n        variables: {\n          userIds: selectedUserIds,\n          spaceId: spaceId || '',\n        },\n      });\n\n      if (!data) {\n        const error = new Error('[handleCreateConversation] No data returned');\n        Sentry.captureException(error, {\n          tags: {\n            section: 'CreateNewConversation',\n          },\n        });\n        throw error;\n      }\n\n      const { getOrCreateSpaceConversation: conversationData } = data;\n\n      if (isGetOrCreateSpaceConversationType(conversationData)) {\n        const sid = conversationData.cid;\n        if (sid) {\n          const conversation = await client!.getConversationBySid(sid);\n          setActiveConversationSid(sid);\n          setIsNewConversation(false);\n          onCreated?.(sid);\n          return conversation;\n        }\n      }\n\n      return undefined;\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    client,\n    getOrCreateSpaceConversationMutation,\n    isConversationCreatable,\n    onCreated,\n    selectedUserIds,\n    setActiveConversationSid,\n    setIsNewConversation,\n    spaceId,\n  ]);\n\n  const createHomeNoumNewConversation = useCallback(async () => {\n    if (!client || !isConversationCreatable) {\n      return undefined;\n    }\n\n    try {\n      setLoading(true);\n      const { data } = await getOrCreateGlobalConversationMutation({\n        variables: {\n          userIds: selectedUserIds,\n        },\n      });\n\n      if (!data) {\n        const error = new Error('[handleCreateConversation] No data returned');\n        Sentry.captureException(error, {\n          tags: {\n            section: 'CreateNewConversation',\n          },\n        });\n        throw error;\n      }\n\n      const { getOrCreateGlobalConversation: conversationData } = data;\n\n      if (isGetOrCreateGlobalConversationType(conversationData)) {\n        const sid = conversationData.cid;\n        if (sid) {\n          const conversation = await client!.getConversationBySid(sid);\n\n          setActiveConversationSid(sid);\n          setIsNewConversation(false);\n          onCreated?.(sid);\n          return conversation;\n        }\n      }\n\n      return undefined;\n    } finally {\n      setLoading(false);\n    }\n  }, [\n    client,\n    getOrCreateGlobalConversationMutation,\n    isConversationCreatable,\n    onCreated,\n    selectedUserIds,\n    setActiveConversationSid,\n    setIsNewConversation,\n  ]);\n\n  const value = useMemo(\n    () => ({\n      isConversationCreatable,\n      loading,\n      ecLoading,\n      selectedUsers,\n      setSelectedUsers,\n      createNewConversation,\n      createHomeNoumNewConversation,\n    }),\n    [\n      isConversationCreatable,\n      loading,\n      ecLoading,\n      selectedUsers,\n      setSelectedUsers,\n      createNewConversation,\n      createHomeNoumNewConversation,\n    ],\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (!isNewConversation) return;\n\n      setECLoading(true);\n      if (selectedUserIds.length > 0) {\n        const { data } = await getConversation({\n          variables: {\n            spaceId: isMasterNoum ? undefined : spaceId,\n            userIds: cleanList([...selectedUserIds, user?._id]),\n          },\n        });\n        const cid = data?.getConversation?.cid;\n        setActiveConversationSid(cid ?? '');\n      } else {\n        setActiveConversationSid('');\n      }\n      setECLoading(false);\n    })();\n  }, [\n    getConversation,\n    isMasterNoum,\n    isNewConversation,\n    selectedUserIds,\n    setActiveConversationSid,\n    spaceId,\n    user?._id,\n  ]);\n\n  return (\n    <NewConversationContext.Provider value={value}>\n      {children}\n    </NewConversationContext.Provider>\n  );\n};\n","/* eslint-disable no-console */\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport { debounce, throttle } from 'lodash';\nimport { useQueryClient } from 'react-query';\n\nimport * as Sentry from '@sentry/react';\nimport { Client, type Conversation, type Message } from '@twilio/conversations';\n\nimport { useCreateTwilioTokenMutation } from '@/apollo/graphql';\n\nimport { TwilioClientContext } from './TwilioClientContext';\nimport ConversationHooks from '../hooks/globalMessages';\nimport { ConversationViewContext } from './ConversationViewContext';\n\ntype TwilioClientProviderProps = {\n  children: React.ReactNode;\n  onLoadConversations?: () => void;\n};\n\nexport const TwilioClientProvider = ({\n  children,\n  onLoadConversations,\n}: TwilioClientProviderProps) => {\n  const queryClient = useQueryClient();\n\n  const [createTwilioToken] = useCreateTwilioTokenMutation();\n  const [twilioClient, setTwilioClient] = useState<Client>();\n  const [token, setToken] = useState<string>();\n  const [isClientInitialized, setIsClientInitialized] = useState(false);\n  const [isConversationsListLoaded, setIsConversationsListLoaded] =\n    useState(false);\n  const conversationsBuffer = useRef<Conversation[]>([]);\n\n  const { addMessage } = ConversationHooks.useMessageHandlers();\n  const { conversationType } = useContext(ConversationViewContext);\n  const { bulkAddConversations, updateConversation, removeConversation } =\n    ConversationHooks.useConversationHandlers(conversationType);\n  const {\n    addConversationParticipant,\n    updateConversationParticipant,\n    removeConversationParticipant,\n  } = ConversationHooks.useParticipantHandlers();\n\n  const throttledFlushConversationBuffer = useMemo(\n    () =>\n      throttle(\n        () => {\n          bulkAddConversations({\n            conversations: conversationsBuffer.current,\n            isInitialized: isConversationsListLoaded,\n          });\n          conversationsBuffer.current = [];\n        },\n        300,\n        {\n          leading: false,\n          trailing: true,\n        },\n      ),\n    [bulkAddConversations, isConversationsListLoaded],\n  );\n\n  const doubouncedConversationsBuffer = useMemo(\n    () => debounce(() => setIsConversationsListLoaded(true), 1500),\n    [],\n  );\n\n  const handleConversationAdded = useCallback(\n    (conversation: Conversation) => {\n      conversationsBuffer.current.push(conversation);\n      throttledFlushConversationBuffer();\n      doubouncedConversationsBuffer();\n    },\n    [throttledFlushConversationBuffer, doubouncedConversationsBuffer],\n  );\n\n  const initializeClient = useCallback(async () => {\n    if (token) {\n      setIsClientInitialized(false);\n      const client = new Client(token);\n      setTwilioClient(client);\n    }\n  }, [token]);\n\n  useEffect(() => {\n    if (isClientInitialized) {\n      return;\n    }\n\n    const fn = async () => {\n      try {\n        const { data } = await createTwilioToken();\n        console.log(\n          '[TwilioV2] generating new token: ',\n          data?.createTwilioToken?.token,\n        );\n        if (data?.createTwilioToken?.token) {\n          setToken(data?.createTwilioToken?.token);\n        }\n      } catch (e) {\n        console.log('[TwilioV2] generating token failed:', e);\n        Sentry.captureException(e);\n      }\n    };\n    fn();\n  }, [createTwilioToken, isClientInitialized]);\n\n  useEffect(() => {\n    if (!isClientInitialized) {\n      initializeClient();\n    }\n  }, [initializeClient, isClientInitialized]);\n\n  useEffect(() => {\n    if (isConversationsListLoaded) {\n      console.log('[TwilioV2] conversations list loaded');\n      onLoadConversations?.();\n    }\n  }, [isConversationsListLoaded, onLoadConversations]);\n\n  useEffect(() => {\n    if (!twilioClient) {\n      return;\n    }\n\n    twilioClient.on('stateChanged', (state) => {\n      console.log('[TwilioV2] stateChanged', state);\n      if (state === 'initialized') {\n        setIsClientInitialized(true);\n      }\n    });\n\n    twilioClient.on('connectionStateChanged', async (state) => {\n      console.log('[TwilioV2] connectionStateChanged:', state);\n      if (state === 'disconnecting' || state === 'disconnected') {\n        initializeClient();\n      }\n    });\n  }, [initializeClient, twilioClient]);\n\n  useEffect(() => {\n    if (!twilioClient || !isClientInitialized) {\n      return undefined;\n    }\n\n    twilioClient.getSubscribedConversations().then(() => {\n      // console.log('[TwilioV2] getSubscribedConversations resolved');\n      setIsConversationsListLoaded(true);\n    });\n\n    twilioClient.on('conversationJoined', (conversation: Conversation) => {\n      // Skip empty conversations.\n      if (!conversation.lastMessage) {\n        // console.log('[TwilioV2] conversationJoined, empty conversation - leaving:', conversation.sid)\n        // conversation.leave()\n        return;\n      }\n\n      // console.log('[TwilioV2] conversationJoined:', conversation.sid);\n      handleConversationAdded(conversation);\n    });\n\n    twilioClient.on(\n      'conversationUpdated',\n      ({ conversation, updateReasons }) => {\n        console.log(\n          '[TwilioV2] conversationUpdated:',\n          conversation.sid,\n          'reasons:',\n          updateReasons,\n        );\n        updateConversation({ conversation });\n      },\n    );\n\n    twilioClient.on('conversationLeft', (conversation) => {\n      // console.log('[TwilioV2] conversationLeft:', conversation.sid);\n      removeConversation({ conversation });\n    });\n\n    twilioClient.on('participantJoined', (participant) => {\n      // console.log('[TwilioV2] participantJoined:', participant.identity);\n      addConversationParticipant({ participant });\n    });\n\n    twilioClient.on('participantUpdated', ({ participant, updateReasons }) => {\n      // console.log(\n      //   '[TwilioV2] participantUpdated:',\n      //   participant.identity,\n      //   'reasons:',\n      //   updateReasons,\n      // );\n      if (updateReasons.includes('lastReadMessageIndex')) {\n        updateConversationParticipant({ participant });\n      }\n    });\n\n    twilioClient.on('participantLeft', (participant) => {\n      // console.log('[TwilioV2] participantLeft:', participant.identity);\n      removeConversationParticipant({ participant });\n    });\n\n    twilioClient.on('messageAdded', (message: Message) => {\n      // console.log('[TwilioV2] messageAdded:', message.body);\n      addMessage({ message });\n    });\n\n    return () => {\n      twilioClient.removeAllListeners();\n    };\n  }, [\n    addConversationParticipant,\n    addMessage,\n    handleConversationAdded,\n    initializeClient,\n    isClientInitialized,\n    removeConversation,\n    removeConversationParticipant,\n    twilioClient,\n    updateConversation,\n    updateConversationParticipant,\n  ]);\n\n  useEffect(() => () => queryClient?.clear(), [queryClient]);\n\n  const value = useMemo(\n    () => ({\n      client: twilioClient,\n      isInitialized: isConversationsListLoaded,\n    }),\n    [twilioClient, isConversationsListLoaded],\n  );\n\n  return (\n    <TwilioClientContext.Provider value={value}>\n      {children}\n    </TwilioClientContext.Provider>\n  );\n};\n","import { Avatar } from '@/components/Avatar/Avatar';\nimport { DiagonalAvatar2 } from '@/components/Avatar/Diagonal2/Diagonal2';\nimport { DiagonalAvatar3 } from '@/components/Avatar/Diagonal3/Diagonal3';\n\nimport { type UserData } from '../../types';\n\ntype ChatItemAvatarProps = {\n  size?: 'S' | 'M' | 'L';\n  users: UserData[];\n};\n\nexport const ChatItemAvatar = ({ size, users }: ChatItemAvatarProps) => {\n  const urls = users.map((participant) => participant.source);\n\n  if (urls && urls.length === 1) {\n    return (\n      <Avatar\n        data-testid=\"avatar-testid\"\n        url={urls[0]}\n        size={size === 'L' ? 'L' : 'M'}\n      />\n    );\n  }\n  if (urls && urls.length === 2) {\n    return (\n      <DiagonalAvatar2\n        data-testid=\"diagonalavatar-testid\"\n        urls={urls}\n        size={size === 'L' ? 'L' : 'M'}\n      />\n    );\n  }\n  if (urls && urls.length > 2) {\n    return (\n      <DiagonalAvatar3\n        data-testid=\"diagonalavatar3-testid\"\n        urls={urls}\n        size={size === 'L' ? 'L' : 'M'}\n      />\n    );\n  }\n  return null;\n};\n","import styled from 'styled-components';\nimport { TSpan } from '@/components/Typography';\nimport { type ChatItemProps, type ChatItemWrapperProps } from './types';\n\nexport const ChatItemWrapper = styled.div<ChatItemWrapperProps>`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: ${({ size }) =>\n    size === 'L' ? '16px' : size === 'M' ? '12px 16px 12px 32px' : '12px 14px'};\n  box-sizing: border-box;\n  border-bottom: 1px solid var(--bg-separator-neutral-default);\n  width: 100%;\n  min-height: ${({ size }) =>\n    size === 'L' ? '78px' : size === 'M' ? '70px' : '65px'};\n  cursor: pointer;\n  ${(props) =>\n    props.active\n      ? 'border-left: 2px solid var(--bg-tab-indicator-primary-brand-default);'\n      : 'border-left: 2px solid transparent;'}\n  ${(props) =>\n    props.active && 'background-color: var(--bg-separator-neutral-default);'}\n`;\nexport const AvatarWrapper = styled.div<{ size?: ChatItemProps['size'] }>`\n  width: ${({ size }) => (size === 'L' ? '40px' : '24px')};\n  height: ${({ size }) => (size === 'L' ? '40px' : '24px')};\n`;\nexport const Content = styled.div`\n  width: 100%;\n  overflow: hidden;\n  justify-content: center;\n  margin-left: 16px;\n`;\nexport const ChatAvatarWrapper = styled.div<{ isMarginRight?: boolean }>`\n  position: relative;\n  cursor: pointer;\n  margin-right: ${(props) => (props.isMarginRight ? '24px' : '24px')};\n`;\nexport const BadgeWrapper = styled.div`\n  position: absolute;\n  bottom: -5px;\n  right: -5px;\n`;\n\nexport const MessageContent = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const MessageStatus = styled.div`\n  width: 8px;\n  height: 8px;\n  background: var(--bg-badge-danger-primary-default);\n  border-radius: 1000px;\n  margin-right: 8px;\n`;\nexport const DotSpan = styled(TSpan).attrs({\n  font: 'footnote',\n})`\n  margin: 0 3px;\n`;\nexport const TimestampSpan = styled(TSpan).attrs({\n  font: 'footnote',\n})``;\n\nexport const TitleTSPan = styled(TSpan).attrs({\n  overflow: 'ellipsis',\n  colorToken: '--text-tablecell-body-neutral-highlighted',\n})`\n  display: block;\n`;\n\nexport const BlockTSPan = styled(TSpan).attrs({\n  overflow: 'ellipsis',\n  colorToken: '--text-tablecell-body-neutral-default',\n})`\n  display: block;\n`;\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { formatLastMessageSentDate } from '@/utils/date';\n\nimport { type Media, type Message } from '@twilio/conversations';\nimport { NoumLayoutViewMode, type UserData } from '../../types';\nimport { ChatItemAvatar } from './ChatItemAvatar';\nimport * as S from './styles';\nimport { type ChatItemProps } from './types';\n\ninterface ChatItemViewProps extends ChatItemProps {\n  noumLayoutViewMode?: NoumLayoutViewMode;\n  users: UserData[];\n  title: string;\n  messages: Message[];\n  unread: number;\n  lastMessageHasAsset?: Media;\n  author: string;\n  lastMessage: Message | undefined;\n}\n\nexport const ChatItemView = ({\n  sid,\n  isActive = false,\n  size = 'S',\n  onClick,\n  noumLayoutViewMode,\n  users,\n  title,\n  messages,\n  unread,\n  lastMessageHasAsset,\n  author,\n  lastMessage,\n}: ChatItemViewProps) => {\n  const { t } = useTranslation();\n\n  const fontSize = useMemo(() => {\n    if (size === 'L') return unread !== 0 ? 'body-m-bold' : 'body-m';\n    if (size === 'M') return 'body-m';\n    return 'footnote';\n  }, [size, unread]);\n\n  return (\n    <S.ChatItemWrapper\n      data-testid=\"chatitem-testid\"\n      active={isActive}\n      size={size}\n      onClick={() => onClick(sid)}\n    >\n      <S.AvatarWrapper size={size}>\n        <ChatItemAvatar\n          users={users}\n          size={\n            noumLayoutViewMode === NoumLayoutViewMode.NOUMLAYOUTCOMPACT\n              ? 'M'\n              : size\n          }\n        />\n      </S.AvatarWrapper>\n      {noumLayoutViewMode !== NoumLayoutViewMode.NOUMLAYOUTCOMPACT && (\n        <S.Content>\n          <S.TitleTSPan\n            font={size === 'S' ? 'body-m-bold' : 'body-l-bold'}\n            colorToken=\"--text-tablecell-header-neutral-highlighted\"\n          >\n            {title}\n          </S.TitleTSPan>\n          {!!users.length && messages && (\n            <S.MessageContent>\n              {unread !== 0 && (\n                <S.MessageStatus data-testid=\"messagestatus-testid\" />\n              )}\n              {lastMessageHasAsset && (\n                <S.BlockTSPan\n                  font={fontSize}\n                  colorToken=\"--text-tablecell-body-neutral-default\"\n                >\n                  {t('noumena.chat.user_sent_an_asset', { user: author })}\n                </S.BlockTSPan>\n              )}\n\n              {lastMessage?.body && (\n                <S.BlockTSPan\n                  font={fontSize}\n                  flex={1}\n                  colorToken=\"--text-tablecell-body-neutral-default\"\n                >\n                  {author && `${author}: `}\n                  {`${lastMessage.body.trim()}`}\n                </S.BlockTSPan>\n              )}\n              {lastMessage?.dateCreated && (\n                <>\n                  <S.DotSpan colorToken=\"--text-tablecell-body-neutral-disabled\">\n                    ·\n                  </S.DotSpan>\n                  <S.TimestampSpan colorToken=\"--text-timestamp-neutral-default\">\n                    {formatLastMessageSentDate(\n                      new Date(lastMessage.dateCreated),\n                    )}\n                  </S.TimestampSpan>\n                </>\n              )}\n            </S.MessageContent>\n          )}\n        </S.Content>\n      )}\n    </S.ChatItemWrapper>\n  );\n};\n","import { type Message } from '@twilio/conversations';\nimport { useContext, useEffect, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { useAuth } from '@/features/auth/contexts';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\n\nimport { MessageElementContext } from '@/screens/Chamber/components/elements/MessageElementV2/contexts/MessageElementProvider';\nimport { ChatItemView } from './ChatItemView';\nimport { type ChatItemProps } from './types';\n\nexport const ChatItem = ({ sid, onRead, ...props }: ChatItemProps) => {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const { conversation } = ConversationHooks.useConversation({ sid });\n  const { messages } = ConversationHooks.useConversationMessages({ sid });\n  const { users, title, getParticipantById } =\n    ConversationHooks.useConversationDetails({ sid });\n  const { noumLayoutViewMode } = useContext(MessageElementContext);\n\n  const lastMessage = useMemo(\n    () => messages[messages.length - 1] as Message | undefined,\n    [messages],\n  );\n\n  const unread = ConversationHooks.useConversationUnreadMessageCount({ sid });\n\n  const { author, lastMessageHasAsset } = useMemo(() => {\n    let tempAuthor = '';\n    let lastMessageHasAssetTmp;\n\n    if (conversation) {\n      lastMessageHasAssetTmp = lastMessage?.attachedMedia?.[0];\n\n      if (lastMessage?.author && user?._id) {\n        if (lastMessage.author === user._id) {\n          tempAuthor = t('noumena.chat.you');\n        } else {\n          tempAuthor = `${\n            getParticipantById(lastMessage.author)?.firstName ?? ''\n          }`;\n        }\n      }\n    }\n    return {\n      author: tempAuthor,\n      lastMessageHasAsset: lastMessageHasAssetTmp,\n    };\n  }, [conversation, getParticipantById, lastMessage, t, user]);\n\n  useEffect(() => {\n    if (conversation && lastMessage?.author === user?._id) {\n      conversation.setAllMessagesRead();\n    }\n  }, [conversation, lastMessage?.author, user?._id]);\n\n  useEffect(() => {\n    if (!unread) {\n      onRead?.();\n    }\n  }, [onRead, unread]);\n\n  return (\n    <ChatItemView\n      noumLayoutViewMode={noumLayoutViewMode}\n      author={author}\n      lastMessageHasAsset={lastMessageHasAsset}\n      users={users}\n      title={title}\n      messages={messages}\n      unread={unread}\n      lastMessage={lastMessage}\n      sid={sid}\n      {...props}\n    />\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport { ChatItemWrapper, Content } from './styles';\nimport { type ChatItemProps } from './types';\n\nconst NewChatItem = ({ size }: { size?: ChatItemProps['size'] }) => {\n  const { t } = useTranslation();\n  return (\n    <ChatItemWrapper active size={size}>\n      <Icon\n        data-testid=\"chat_new_icon-testid\"\n        name=\"chat_new\"\n        size={24}\n        color=\"--icon-tablecell-neutral-highlighted\"\n      />\n      <Content>\n        <TSpan\n          font={size === 'L' ? 'body-l-bold' : 'body-m-bold'}\n          colorToken=\"--text-tablecell-header-neutral-highlighted\"\n        >\n          {t('noumena.chatItem.title')}\n        </TSpan>\n      </Content>\n    </ChatItemWrapper>\n  );\n};\n\nexport default NewChatItem;\n","import { type RefObject, useEffect, useState } from 'react';\n\nexport default function useElementOnScreen(\n  ref: RefObject<Element>,\n  options: IntersectionObserverInit | undefined = undefined,\n) {\n  const [isVisible, setIsVisible] = useState(false);\n\n  const callback = (entries: IntersectionObserverEntry[]) => {\n    const [entry] = entries;\n    setIsVisible(entry.isIntersecting);\n  };\n\n  useEffect(() => {\n    const element = ref.current;\n    const observer = new IntersectionObserver(callback, options);\n    if (element) observer.observe(element);\n\n    return () => {\n      if (element) observer.unobserve(element);\n    };\n  }, [options, ref]);\n\n  return isVisible;\n}\n","import { type FC, useContext, useEffect, useRef } from 'react';\nimport { type Message } from '@twilio/conversations';\nimport useElementOnScreen from '@/hooks/intersecting';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { ConversationUnreadStatusContext } from '@/features/conversation/contexts/ConversationUnreadStatusContext';\nimport {\n  ImageMessageBubble,\n  TextMessageBubble,\n  VideoMessageBubble,\n} from '../MessageBubbles';\nimport { type MessageAttributes, type PendingMessage } from '../../types';\nimport { getMediaType, getMessageItemMaxLength } from '../../helpers';\n\nexport const MessageItem: FC<{\n  message: Message;\n  prev?: Message;\n  next?: Message;\n  sameTypeNext?: Message | PendingMessage;\n}> = ({ message, prev, next, sameTypeNext }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const isVisible = useElementOnScreen(ref, {\n    root: document.querySelector('body'),\n    rootMargin: '0px',\n    threshold: 0.5,\n  });\n\n  const { conversationType, conversationWrapperWidth } = useContext(\n    ConversationViewContext,\n  );\n  const messageItemMaxLength = getMessageItemMaxLength(\n    conversationType,\n    conversationWrapperWidth,\n  );\n\n  const { activeConversationSid, removePendingMessage } = useContext(\n    ActiveConversationContext,\n  );\n  const { conversation } = ConversationHooks.useConversation({\n    sid: activeConversationSid,\n  });\n  const { readConversation } = useContext(ConversationUnreadStatusContext);\n\n  const { messageBubbleProps } = ConversationHooks.useMessageBubbleProps({\n    message,\n    prev,\n    next,\n    sameTypeNext,\n  });\n\n  // we currently do support only one media per message\n  const media = message.attachedMedia?.[0];\n\n  useEffect(() => {\n    const attrs = message.attributes as MessageAttributes;\n    if (attrs?.id) {\n      removePendingMessage(attrs.id);\n    }\n  }, [message.attributes, removePendingMessage]);\n\n  useEffect(() => {\n    if (!next && isVisible) {\n      (async () => {\n        await conversation?.setAllMessagesRead();\n        readConversation(activeConversationSid);\n      })();\n    }\n  }, [activeConversationSid, conversation, isVisible, next, readConversation]);\n\n  return messageBubbleProps ? (\n    <>\n      {media ? (\n        getMediaType(media.contentType) === 'video' ? (\n          <VideoMessageBubble\n            data-testid=\"video-message-bubble\"\n            {...messageBubbleProps}\n            media={media}\n            ref={ref}\n          />\n        ) : (\n          <ImageMessageBubble\n            data-testid=\"image-message-bubble\"\n            {...messageBubbleProps}\n            media={media}\n            ref={ref}\n          />\n        )\n      ) : (\n        message.body && (\n          <TextMessageBubble\n            data-testid=\"text-message-bubble\"\n            {...messageBubbleProps}\n            maxWidth={messageItemMaxLength}\n            ref={ref}\n          />\n        )\n      )}\n    </>\n  ) : null;\n};\n","import { type FC, useCallback, useContext } from 'react';\nimport { type Message } from '@twilio/conversations';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\nimport {\n  ImageMessageBubble,\n  TextMessageBubble,\n  VideoMessageBubble,\n} from '../MessageBubbles';\nimport { type PendingMessage } from '../../types';\nimport {\n  getFileFromPendingMessage,\n  getMediaType,\n  isGlobalType,\n} from '../../helpers';\n\nexport const PendingMessageItem: FC<{\n  message: PendingMessage;\n  prev?: PendingMessage | Message;\n  next?: PendingMessage | Message;\n  sameTypeNext?: Message | PendingMessage;\n}> = ({ message, prev, next, sameTypeNext }) => {\n  const deviceType = useDeviceType();\n  const isMobile = Boolean(deviceType === DeviceTypeEnum.MOBILE);\n  const { conversationType } = useContext(ConversationViewContext);\n  const isGlobal = isGlobalType(conversationType);\n  const messageItemMaxLength = isGlobal && !isMobile ? '600px' : undefined;\n\n  const { resendErrorMessage } = useContext(ActiveConversationContext);\n  const { pendingMessageBubbleProps } = ConversationHooks.useMessageBubbleProps(\n    {\n      message,\n      prev,\n      next,\n      sameTypeNext,\n    },\n  );\n  const file = getFileFromPendingMessage(message);\n\n  const onResend = useCallback(\n    (id: string) => {\n      resendErrorMessage(id);\n    },\n    [resendErrorMessage],\n  );\n\n  return file ? (\n    <>\n      {getMediaType(file.type) === 'image' ? (\n        <ImageMessageBubble\n          {...pendingMessageBubbleProps}\n          pendingFile={file}\n          onResend={onResend}\n        />\n      ) : (\n        <VideoMessageBubble\n          {...pendingMessageBubbleProps}\n          pendingFile={file}\n          onResend={onResend}\n        />\n      )}\n    </>\n  ) : message.text ? (\n    <TextMessageBubble\n      {...pendingMessageBubbleProps}\n      maxWidth={messageItemMaxLength}\n      message={message.text}\n      onResend={onResend}\n    />\n  ) : null;\n};\n","import styled from 'styled-components';\n\nexport const SpinnerContainer = styled.div`\n  position: relative;\n  padding: 32px;\n`;\n","import {\n  type FC,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { orderBy, last, first } from 'lodash';\nimport { Infinite } from '@/components/Infinite';\nimport { Spinner } from '@/components/Spinner';\nimport { useAuth } from '@/features/auth/contexts';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { MessageItem, PendingMessageItem } from '../MessageItem';\nimport {\n  getMessageDateCreated,\n  getNextOrPrevMessage,\n  getNextSameTypeMessage,\n  isPendingMessage,\n} from '../../helpers';\nimport { SpinnerContainer } from './styles';\n\nexport const MessageList: FC = () => {\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const { user } = useAuth();\n  const { activeConversationSid } = useContext(ActiveConversationContext);\n  const { isGroupConversation } = ConversationHooks.useConversationDetails({\n    sid: activeConversationSid,\n  });\n  const {\n    messages,\n    pendingMessages,\n    isFetched,\n    isLoading,\n    status: messageStatus,\n    hasPreviousPage,\n    fetchPreviousMessages,\n  } = ConversationHooks.useConversationMessages({\n    sid: activeConversationSid,\n  });\n  const [prevScrollHeight, setPrevScrollHeight] = useState(0);\n\n  const infiniteStatus =\n    messageStatus === 'loading'\n      ? 'loading'\n      : hasPreviousPage\n      ? 'hasNextPage'\n      : 'end';\n\n  const mergedMessages = useMemo(\n    () =>\n      orderBy(\n        [...messages, ...pendingMessages].filter(Boolean),\n        (message) => getMessageDateCreated(message),\n        'asc',\n      ),\n    [pendingMessages, messages],\n  );\n\n  const firstMessage = first(mergedMessages);\n  const lastMessage = last(mergedMessages);\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (\n      scrollContainer &&\n      hasPreviousPage &&\n      scrollContainer.scrollHeight > prevScrollHeight\n    ) {\n      scrollContainer.scrollTop =\n        scrollContainer.scrollHeight - prevScrollHeight;\n      setPrevScrollHeight(scrollContainer.scrollHeight);\n    }\n  }, [firstMessage, hasPreviousPage, prevScrollHeight]);\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (scrollContainer)\n      scrollContainer.scrollTop = scrollContainer.scrollHeight;\n  }, [activeConversationSid, isFetched]);\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (scrollContainer?.scrollTo)\n      scrollContainer.scrollTo({\n        behavior: 'smooth',\n        top: scrollContainer.scrollHeight,\n      });\n  }, [lastMessage]);\n\n  if (isLoading) {\n    return (\n      <SpinnerContainer>\n        <Spinner />\n      </SpinnerContainer>\n    );\n  }\n\n  return (\n    <Infinite\n      ref={scrollContainerRef}\n      onFetchMore={fetchPreviousMessages}\n      status={infiniteStatus}\n      paddingTop={infiniteStatus === 'hasNextPage' ? '30px' : '0px'}\n      scrollbarWidth={0}\n      reverse\n      grow\n    >\n      {mergedMessages.map((message, i) =>\n        isPendingMessage(message) ? (\n          <PendingMessageItem\n            key={message.attributes.id}\n            message={message}\n            prev={mergedMessages[i - 1]}\n            next={mergedMessages[i + 1]}\n            sameTypeNext={\n              isGroupConversation\n                ? mergedMessages[i + 1]\n                : getNextSameTypeMessage(user?._id || '', mergedMessages, i)\n            }\n          />\n        ) : (\n          <MessageItem\n            key={message.sid}\n            message={message}\n            prev={getNextOrPrevMessage(mergedMessages, i, 'prev')}\n            next={getNextOrPrevMessage(mergedMessages, i, 'next')}\n            sameTypeNext={getNextSameTypeMessage(\n              user?._id || '',\n              mergedMessages,\n              i,\n            )}\n          />\n        ),\n      )}\n    </Infinite>\n  );\n};\n","import styled from 'styled-components';\nimport { TSpan } from '@/components/Typography';\n\nexport const UserWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  width: 100%;\n  height: 86px;\n  border-bottom: 1px solid var(--bg-separator-neutral-default);\n  padding: 20px 4px;\n  box-sizing: border-box;\n  &:hover {\n    cursor: pointer;\n    background-color: var(--bg-tablecell-neutral-hover);\n  }\n`;\n\nexport const UserBody = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: 16px;\n`;\n\nexport const UserName = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const UserTitle = styled(TSpan)``;\n","import { type FC } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { useAuth } from '@/features/auth/contexts';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { type ConversationUsersModalProps } from './types';\nimport * as S from './styles';\nimport { type UserData } from '../../types';\n\nconst ConversationUserModal: FC<ConversationUsersModalProps> = ({\n  users,\n  isOpen,\n  onClose,\n  onGoHomeNoum,\n}) => {\n  const { isUnregistered } = useAuth();\n  const { t } = useTranslation();\n\n  const handleClick = (user: UserData) => {\n    onClose();\n    if (!isUnregistered) onGoHomeNoum(user);\n  };\n\n  return (\n    <Modal\n      testId=\"conversation-user-modal\"\n      open={isOpen}\n      onClose={onClose}\n      enableCloseButton\n      size={ModalSize.L}\n      disableBackdropClick\n    >\n      <ModalHeader>{t(`noumena.message.chat_memebers`)}</ModalHeader>\n      <ModalBody mobileFlex noFooter>\n        {users.map((user, index) => (\n          <S.UserWrapper\n            key={user._id}\n            onClick={() => handleClick(user)}\n            data-testid={`conversation-user-item-${index}`}\n          >\n            <Avatar url={user.source || ''} />\n            <S.UserBody>\n              <S.UserName>\n                <TSpan\n                  font=\"body-l-bold\"\n                  colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                >\n                  {user.firstName} {user.lastName}\n                </TSpan>\n                {!!user.title && (\n                  <S.UserTitle\n                    font=\"body-m\"\n                    colorToken=\"--text-tablecell-body-neutral-default\"\n                  >\n                    {user.title}\n                  </S.UserTitle>\n                )}\n              </S.UserName>\n            </S.UserBody>\n          </S.UserWrapper>\n        ))}\n      </ModalBody>\n    </Modal>\n  );\n};\n\nexport default ConversationUserModal;\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nexport const ProfileWrapper = styled(Stack).attrs((props) => ({\n  ...props,\n  align: 'center',\n  fullWidth: true,\n}))`\n  overflow: hidden;\n`;\n\nexport const ProfileInfo = styled(Stack).attrs((props) => ({\n  ...props,\n  align: 'center',\n  fullWidth: true,\n}))`\n  cursor: pointer;\n`;\n\nexport const ProfileTitle = styled(Stack).attrs((props) => ({\n  ...props,\n  vertical: true,\n}))`\n  flex: 1;\n  overflow: hidden;\n`;\n","import { UserStatus } from '@/apollo/generated/types';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { DiagonalAvatar2 } from '@/components/Avatar/Diagonal2/Diagonal2';\nimport { DiagonalAvatar3 } from '@/components/Avatar/Diagonal3/Diagonal3';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer } from '@/layout';\nimport { useCallback, useMemo, useState, type FC } from 'react';\nimport { type UserData } from '../../types';\nimport ConversationUserModal from '../ConversationUsersModal';\nimport { ProfileInfo, ProfileTitle, ProfileWrapper } from './styles';\n\ninterface ConversationProfileViewProps {\n  isConversationBlocked?: boolean;\n  users: UserData[];\n  title: string;\n}\nexport const ConversationProfileView: FC<ConversationProfileViewProps> = ({\n  isConversationBlocked,\n  users,\n  title,\n}) => {\n  const [isOpenMembersModal, setIsOpenMembersModal] = useState<boolean>(false);\n\n  const subTitle = useMemo(() => {\n    if (users.length === 1) {\n      return users[0].title;\n    }\n    return undefined;\n  }, [users]);\n\n  const url = useMemo(() => {\n    const urls = users.map((user) => user.source);\n    return urls;\n  }, [users]);\n\n  const avatar = useMemo(() => {\n    if (url && url.length === 1) {\n      return <Avatar data-testid=\"avatar-testid\" url={url[0]} size=\"M\" />;\n    }\n    if (url && url.length === 2) {\n      return (\n        <DiagonalAvatar2\n          data-testid=\"diagonalavatar-testid\"\n          urls={url}\n          size=\"M\"\n        />\n      );\n    }\n    if (url && url.length > 2) {\n      return (\n        <DiagonalAvatar3\n          data-testid=\"diagonalavatar3-testid\"\n          urls={url}\n          size=\"M\"\n        />\n      );\n    }\n    return undefined;\n  }, [url]);\n\n  const goHomeNoum = useCallback((user: UserData) => {\n    const { userStatus, homeNoumId } = user;\n    if (userStatus === UserStatus.Active && homeNoumId)\n      window.open(`/noum/${homeNoumId}`, '_blank');\n  }, []);\n\n  const handleClick = useCallback(() => {\n    if (users.length === 1) {\n      goHomeNoum(users[0]);\n    } else {\n      setIsOpenMembersModal(true);\n    }\n  }, [goHomeNoum, users]);\n\n  return (\n    <>\n      <ProfileWrapper data-testid=\"receiverprofile\">\n        <ProfileInfo onClick={handleClick}>\n          {avatar}\n          <Spacer width={16} />\n          {!isConversationBlocked && (\n            <ProfileTitle>\n              <TSpan\n                font=\"body-m-bold\"\n                overflow=\"ellipsis\"\n                colorToken=\"--text-tablecell-header-neutral-highlighted\"\n              >\n                {title}\n              </TSpan>\n              <TSpan\n                font=\"footnote\"\n                colorToken=\"--text-tablecell-body-neutral-default\"\n              >\n                {subTitle}\n              </TSpan>\n            </ProfileTitle>\n          )}\n        </ProfileInfo>\n      </ProfileWrapper>\n\n      <ConversationUserModal\n        users={users}\n        isOpen={isOpenMembersModal}\n        onClose={() => {\n          setIsOpenMembersModal(false);\n        }}\n        onGoHomeNoum={goHomeNoum}\n      />\n    </>\n  );\n};\n","import ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { useContext, type FC } from 'react';\nimport { ActiveConversationContext } from '../../contexts/ActiveConversationContext';\nimport { ConversationProfileView } from './ConversationProfileView';\n\nexport const ConversationProfile: FC = () => {\n  const { activeConversationSid: sid } = useContext(ActiveConversationContext);\n  const { title, users, isConversationBlocked } =\n    ConversationHooks.useConversationDetails({\n      sid,\n    });\n\n  return (\n    <ConversationProfileView\n      isConversationBlocked={isConversationBlocked}\n      users={users}\n      title={title}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { Icon } from '@/components/Icon';\nimport { Tag } from '@/components/Tag';\nimport { TSpan } from '@/components/Typography';\n\nimport { UserUtil } from '@/utils/user';\nimport { SelectedUser } from './styles';\nimport { type MessageSelectedUserProps } from './types';\n\nexport const MessageSelectedUser: React.FC<MessageSelectedUserProps> = ({\n  data,\n  multiselect,\n  onRemove,\n}) => (\n  <SelectedUser data-testid=\"selected-user\" multiselect={multiselect}>\n    <Tag\n      avatar={\n        <Avatar\n          url={UserUtil.getProfilePicture(data.value) || undefined}\n          size=\"S\"\n        />\n      }\n      rightIcon={\n        multiselect ? (\n          <Icon\n            data-testid=\"remove-button\"\n            name=\"close_m\"\n            size={15}\n            color=\"--icon-tag-neutral\"\n            onClick={() => onRemove(data.value)}\n          />\n        ) : undefined\n      }\n    >\n      <TSpan\n        data-testid=\"text-message\"\n        flex={1}\n        font=\"body-m\"\n        colorToken=\"--text-tag-neutral-default\"\n      >\n        {data.label}\n      </TSpan>\n    </Tag>\n  </SelectedUser>\n);\n","import React, { useMemo } from 'react';\n\nimport { t } from 'i18next';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { Infinite } from '@/components/Infinite';\nimport { Checkbox } from '@/components/Checkbox';\nimport { Icon } from '@/components/Icon';\nimport { useWindowDimensions } from '@/hooks/dimensions';\nimport {\n  DropdownItemLayout,\n  CheckboxWrapper,\n  DropDownLabel,\n  DropdownValueWrapper,\n  DropdownValueLabel,\n  DropdownValueDescription,\n} from '@/components/Dropdown/styles';\nimport { UserUtil } from '@/utils/user';\nimport { Stack } from '@/layout';\nimport { NoumenaUserType } from '@/apollo/generated/types';\nimport { OptionRendererWrapper, AvatarWrapper, TagLabel } from './styles';\nimport { type UserOptionItemProps } from './types';\n\nexport const MessageUserOptionRenderer: React.FC<UserOptionItemProps> = ({\n  options,\n  multiselect,\n  activeItem,\n  loading,\n  hasMore,\n  onSelect,\n  onFetchMore,\n}) => {\n  const { width } = useWindowDimensions();\n\n  const infiniteStatus = loading ? 'loading' : hasMore ? 'hasNextPage' : 'end';\n\n  const showCheck = useMemo(() => {\n    if (width < 768) return multiselect;\n\n    return false;\n  }, [multiselect, width]);\n\n  return (\n    <OptionRendererWrapper>\n      <Infinite\n        data-testid=\"users-list\"\n        status={infiniteStatus}\n        paddingBottom={infiniteStatus !== 'end' ? '30px' : '0px'}\n        onFetchMore={onFetchMore}\n      >\n        {options.map((option) =>\n          option.type === 'value' ? (\n            <DropdownItemLayout\n              key={option.key}\n              active={activeItem?.key === option.key}\n              tabIndex={0}\n              onClick={() => onSelect(option)}\n            >\n              <DropDownLabel selected={activeItem?.key === option.key}>\n                <AvatarWrapper>\n                  <Avatar\n                    url={UserUtil.getProfilePicture(option.value) || undefined}\n                    size=\"M\"\n                  />\n                </AvatarWrapper>\n                <DropdownValueWrapper>\n                  <DropdownValueLabel>{option.label}</DropdownValueLabel>\n                  <Stack gap={3}>\n                    {option.description && (\n                      <DropdownValueDescription>\n                        {option.description}\n                      </DropdownValueDescription>\n                    )}\n                    {option.value.userType === NoumenaUserType.Noumena && (\n                      <TagLabel>\n                        {t('noumena.message.noumena.employees')}\n                      </TagLabel>\n                    )}\n                  </Stack>\n                </DropdownValueWrapper>\n              </DropDownLabel>\n              {showCheck && (\n                <CheckboxWrapper data-testid=\"user-checkbox\">\n                  <Checkbox\n                    isChecked={option.selected ?? false}\n                    icon={\n                      <Icon\n                        name=\"tick_m\"\n                        size={option.selected ? 24 : 0}\n                        color=\"--icon-checkbox-neutral-alt-default\"\n                      />\n                    }\n                  />\n                </CheckboxWrapper>\n              )}\n            </DropdownItemLayout>\n          ) : null,\n        )}\n      </Infinite>\n    </OptionRendererWrapper>\n  );\n};\n","import {\n  useCallback,\n  useState,\n  forwardRef,\n  type FocusEvent,\n  useRef,\n  useEffect,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Button } from '@/components/Button';\nimport {\n  SearchWrapper,\n  SearchContainer,\n  InputWrapper,\n  InputField,\n  ButtonWrapper,\n} from './styles';\nimport { type MessageUserSearchProps } from './types';\n\nexport const MessageUserSearch = forwardRef<\n  HTMLInputElement,\n  MessageUserSearchProps\n>(\n  (\n    {\n      inputProps,\n      cancellable = true,\n      hasSelectedOption = false,\n      onCancel,\n      children,\n    },\n    ref,\n  ) => {\n    const { t } = useTranslation();\n    const [focused, setFocused] = useState<boolean>(true);\n    const inputRef = useRef<HTMLInputElement>(null);\n    useEffect(() => {\n      if (focused) {\n        const timeout = setTimeout(() => {\n          inputRef.current?.focus();\n          clearTimeout(timeout);\n        }, 100);\n      }\n    }, [focused, inputRef]);\n\n    const onFocus = useCallback(\n      (e: FocusEvent<HTMLInputElement>) => {\n        if (inputProps.onFocus) inputProps.onFocus(e);\n        setFocused(true);\n      },\n      [inputProps],\n    );\n\n    const onClick = useCallback(() => {\n      setFocused(true);\n    }, []);\n\n    const onBlur = useCallback(\n      (e: FocusEvent<HTMLInputElement>) => {\n        if (inputProps.onBlur) inputProps.onBlur(e);\n        setFocused(false);\n      },\n      [inputProps],\n    );\n\n    return (\n      <SearchWrapper data-testid=\"user-search\" ref={ref}>\n        <SearchContainer focused={focused} onClick={onClick}>\n          {children}\n          <InputWrapper focused={focused || !hasSelectedOption}>\n            <InputField\n              ref={inputRef}\n              {...inputProps}\n              onFocus={onFocus}\n              onBlur={onBlur}\n            />\n          </InputWrapper>\n        </SearchContainer>\n        {cancellable && (\n          <ButtonWrapper>\n            <Button data-testid=\"cancel-button\" textOnly onClick={onCancel}>\n              {t('noumena.cancel')}\n            </Button>\n          </ButtonWrapper>\n        )}\n      </SearchWrapper>\n    );\n  },\n);\n","import { type UserOutput } from '@/apollo/generated/types';\nimport { getFullName } from '@/utils/fullName';\nimport { type IUserDropdown } from './types';\n\nexport const buildDropDownData = (data: UserOutput[]): IUserDropdown[] =>\n  data.map((datum: UserOutput) => ({\n    key: datum._id,\n    label: getFullName(datum.firstName, datum.middleName, datum.lastName),\n    type: 'value',\n    description: datum.title || undefined,\n    value: datum,\n  }));\n","import {\n  forwardRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n  type ForwardedRef,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { type UserOutput } from '@/apollo/generated/types';\nimport { Dropdown } from '@/components/Dropdown';\n\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\n\nimport { ConversationViewContext } from '../../contexts/ConversationViewContext';\nimport { ConversationType } from '../../types';\nimport { MessageSelectedUser } from './MessageSelectedUser';\nimport { MessageUserOptionRenderer } from './MessageUserOptionRenderer';\nimport { MessageUserSearch } from './MessageUserSearch';\nimport { Container, UserSearchDropDownInfobox } from './styles';\nimport {\n  type IUserDropdown,\n  type MessageUserPickerForwardRefProps,\n  type MessageUserPickerProps,\n} from './types';\nimport { buildDropDownData } from './utils';\n\nexport const MessageUserPicker = forwardRef(\n  (\n    {\n      data,\n      initialValue,\n      onSelectUsers,\n      initLoading,\n      loading,\n      hasMore,\n      onFetchMore,\n      CustomOptionsContent,\n      onSetSearch,\n      multiselect = true,\n    }: MessageUserPickerProps,\n    ref: ForwardedRef<MessageUserPickerForwardRefProps>,\n  ) => {\n    const { t } = useTranslation();\n    const { conversationType, setIsNewConversation } = useContext(\n      ConversationViewContext,\n    );\n    const deviceType = useDeviceType();\n    const isMobile = useMemo(\n      () => deviceType === DeviceTypeEnum.MOBILE,\n      [deviceType],\n    );\n    const containerRef = useRef<HTMLDivElement>(null);\n    const height = isMobile\n      ? `calc(100% - ${(containerRef.current?.clientHeight || 0) + 180}px)`\n      : '250px';\n    const [width, setWidth] = useState<string>();\n    const [openDropdown, setOpenDropdown] = useState<boolean>(false);\n    useLayoutEffect(() => {\n      if (openDropdown) {\n        setWidth(\n          isMobile ? '100vw' : `${containerRef.current?.scrollWidth ?? 0}px`,\n        );\n      }\n    }, [isMobile, openDropdown]);\n    const [selectedUsers, setSelectedUsers] = useState<\n      UserOutput[] | undefined\n    >();\n    const selectedUsersIds = useMemo(\n      () => selectedUsers?.map((user) => user._id),\n      [selectedUsers],\n    );\n    const [search, setSearch] = useState<string>('');\n    useEffect(() => onSetSearch?.(search), [onSetSearch, search]);\n    useEffect(() => {\n      // Dropdown component trigger onClose on any document click event\n      // This is for initial opening state\n      const timeOut = setTimeout(() => {\n        setOpenDropdown(true);\n      }, 200);\n\n      return () => {\n        clearTimeout(timeOut);\n      };\n    }, []);\n\n    useEffect(\n      () => () => {\n        setOpenDropdown(false);\n      },\n      [],\n    );\n\n    useEffect(() => {\n      if (selectedUsers === undefined) {\n        setSelectedUsers(initialValue || []);\n      }\n    }, [initialValue, selectedUsers]);\n\n    useEffect(() => {\n      if (selectedUsers) {\n        onSelectUsers(selectedUsers);\n      }\n    }, [onSelectUsers, selectedUsers]);\n\n    const closeOnSelect = useMemo(() => {\n      if (isMobile) {\n        return multiselect ? !!search : true;\n      }\n\n      return true;\n    }, [multiselect, search, isMobile]);\n\n    const allOptions = useMemo(() => buildDropDownData(data), [data]);\n\n    const selectableOptions: IUserDropdown[] = useMemo(() => {\n      const availableOptions: IUserDropdown[] = [];\n\n      allOptions.forEach((option) => {\n        if (isMobile) {\n          // In mobile, we show all items with selected status\n          availableOptions.push({\n            ...option,\n            selected: (selectedUsersIds || []).includes(option.key),\n          });\n          // In web/tablet, we only show unselected items\n        } else if (!(selectedUsersIds || []).includes(option.key)) {\n          availableOptions.push({\n            ...option,\n            selected: false,\n          });\n        }\n      });\n\n      return availableOptions;\n    }, [allOptions, isMobile, selectedUsersIds]);\n\n    const selectedOptions = useMemo(\n      () => buildDropDownData(selectedUsers || []),\n      [selectedUsers],\n    );\n\n    const isGlobalMessageScreen = useMemo(\n      () =>\n        [\n          ConversationType.GLOBAL_ALL,\n          ConversationType.GLOBAL_DIRECT,\n          ConversationType.GLOBAL_NOUM,\n        ].includes(conversationType),\n      [conversationType],\n    );\n\n    const onCancel = useCallback(() => {\n      setSearch('');\n      setSelectedUsers([]);\n      setOpenDropdown(false);\n      setIsNewConversation(false);\n    }, [setIsNewConversation]);\n\n    const onChange = useCallback((e: { target: { value: string } }) => {\n      const { value } = e.target;\n      setOpenDropdown(true);\n      setSearch(value);\n    }, []);\n\n    const onSelect = useCallback(\n      (option: IUserDropdown) => {\n        const mSelectedUsers: UserOutput[] = selectedUsers || [];\n\n        if (multiselect) {\n          if (mSelectedUsers.map((u) => u._id).includes(option.key)) {\n            setSelectedUsers(\n              mSelectedUsers.filter((s) => s._id !== option.key),\n            );\n          } else {\n            setSelectedUsers([...mSelectedUsers, option.value]);\n          }\n        } else {\n          setSelectedUsers([option.value]);\n        }\n        setSearch('');\n      },\n      [multiselect, selectedUsers],\n    );\n\n    const onUnSelect = useCallback((k: UserOutput) => {\n      setSelectedUsers((s) => (s || []).filter((_s) => _s._id !== k._id));\n    }, []);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        cancel() {\n          onCancel();\n        },\n      }),\n      [onCancel],\n    );\n\n    return (\n      <Container data-testid=\"users-picker\" ref={containerRef}>\n        <Dropdown\n          hideIcons\n          isLoading={initLoading}\n          isOpen={openDropdown}\n          onOpen={() => setOpenDropdown(true)}\n          onClose={() => setOpenDropdown(false)}\n          closeOnSelect={closeOnSelect}\n          multiselect={multiselect}\n          placement=\"bottom-start\"\n          options={selectableOptions}\n          onSelectOption={onSelect}\n          usePortal={false}\n          isAnimation={false}\n          usePopStyle={true}\n          containerWidth={width}\n          containerStyle={{ maxHeight: height }}\n          noAvailableOptions={!allOptions || allOptions.length === 0}\n          noAvailableOptionsText={t('noumena.dropdown.no_users_searched.text')}\n          noSearchOptionsText={t('noumena.dropdown.no_search_results.text')}\n          optionsRenderer={(options, handleSelectOption, activeItem) =>\n            CustomOptionsContent || (\n              <>\n                {options.length && isGlobalMessageScreen ? (\n                  <UserSearchDropDownInfobox\n                    colorToken=\"--text-body-neutral-default\"\n                    font=\"footnote\"\n                  >\n                    Create a direct conversation. To create a Noum conversation,\n                    visit the Noum Page.\n                  </UserSearchDropDownInfobox>\n                ) : null}\n                <MessageUserOptionRenderer\n                  loading={loading}\n                  hasMore={hasMore}\n                  options={options}\n                  multiselect={multiselect}\n                  activeItem={activeItem}\n                  onSelect={handleSelectOption}\n                  onFetchMore={onFetchMore}\n                />\n              </>\n            )\n          }\n        >\n          {({ inputProps, inputRef }) => (\n            <MessageUserSearch\n              ref={inputRef}\n              inputProps={{\n                ...inputProps,\n                autoFocus: true,\n                placeholder: selectedUsers?.length\n                  ? ''\n                  : isMobile\n                  ? t('noumena.message.user_select_placeholder_mobile')\n                  : t('noumena.message.user_select_placeholder'),\n                value: search,\n                onChange,\n              }}\n              hasSelectedOption={\n                Boolean(selectedUsers?.length || search) || false\n              }\n              onCancel={onCancel}\n            >\n              {selectedOptions.map((s) => (\n                <MessageSelectedUser\n                  key={s.key}\n                  multiselect={true}\n                  data={s}\n                  onRemove={onUnSelect}\n                />\n              ))}\n            </MessageUserSearch>\n          )}\n        </Dropdown>\n      </Container>\n    );\n  },\n);\n","import { type UserOutput } from '@/apollo/generated/types';\nimport { useAllUsersWithoutEventQuery } from '@/apollo/graphql';\nimport { useAuth } from '@/features/auth/contexts';\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\nimport { Stack } from '@/layout';\nimport { PAGE_BIG_SIZE, PAGE_SIZE } from '@/screens/Chambers/constants';\nimport { cleanList } from '@/utils/list';\nimport {\n  forwardRef,\n  useCallback,\n  useContext,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n  type ForwardedRef,\n} from 'react';\n\nimport { NetworkStatus } from '@apollo/client';\nimport { NewConversationContext } from '../../contexts/NewConversationContext';\nimport { MessageUserPicker } from '../MessageUserPicker/MessageUserPicker';\nimport { type MessageUserPickerForwardRefProps } from '../MessageUserPicker/types';\n\nexport const NewHomeConversationUserSelector = forwardRef(\n  (_, ref: ForwardedRef<MessageUserPickerForwardRefProps>) => {\n    const { user: currentUser } = useAuth();\n    const deviceType = useDeviceType();\n    const { selectedUsers, setSelectedUsers } = useContext(\n      NewConversationContext,\n    );\n    const [search, setSearch] = useState('');\n\n    const { data, fetchMore, loading, networkStatus } =\n      useAllUsersWithoutEventQuery({\n        fetchPolicy: 'cache-and-network',\n        variables: {\n          search,\n          offset: 0,\n          limit:\n            deviceType === DeviceTypeEnum.MOBILE ? PAGE_BIG_SIZE : PAGE_SIZE,\n          activeUserOnly: true,\n        },\n      });\n\n    const users = cleanList(\n      data?.allUsers?.data?.filter((user) => user?._id !== currentUser?._id),\n    );\n    const totalCount = useMemo(() => data?.allUsers?.count || 0, [data]);\n\n    const messageUserPickerRef =\n      useRef<React.ElementRef<typeof MessageUserPicker>>(null);\n\n    const onLoadMore = useCallback(async () => {\n      fetchMore({\n        variables: {\n          offset: users.length,\n        },\n      });\n    }, [fetchMore, users.length]);\n\n    const onSelect = useCallback(\n      (_users: UserOutput[]) => {\n        setSelectedUsers(_users);\n      },\n      [setSelectedUsers],\n    );\n\n    const onCancel = useCallback(() => {\n      messageUserPickerRef?.current?.cancel?.();\n    }, [messageUserPickerRef]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        cancel() {\n          onCancel();\n        },\n      }),\n      [onCancel],\n    );\n\n    return (\n      <Stack align=\"center\" fullWidth data-testid=\"newhomeconversation\">\n        <MessageUserPicker\n          ref={messageUserPickerRef}\n          data={users}\n          initialValue={selectedUsers}\n          onSelectUsers={onSelect}\n          initLoading={loading && !users.length}\n          loading={loading && networkStatus === NetworkStatus.fetchMore}\n          hasMore={users.length < totalCount}\n          onFetchMore={onLoadMore}\n          onSetSearch={setSearch}\n        />\n      </Stack>\n    );\n  },\n);\n"],"names":["ConversationViewProvider","children","deviceType","useDeviceType","viewMode","changeViewMode","useState","ViewMode","DEFAULT","setViewMode","useCallback","value","DeviceTypeEnum","MOBILE","isNewConversation","setIsNewConversation","conversationType","setConversationType","ConversationType","GLOBAL_ALL","conversationWrapperWidth","setConversationWrapperWidth","useMemo","jsx","ConversationViewContext","ActiveConversationProvider","user","useAuth","sid","setSid","conversation","ConversationHooks","useConversation","pendingMessages","setPendingMessages","pendingMessagesRef","useRef","useEffect","current","activeConversationPendingMessages","setMutedConversationId","useContext","ConversationUnreadStatusContext","useLayoutEffect","addPendingMessage","unsentMessage","pendingMessage","send","attributes","mediaContent","author","_id","dateCreated","Date","index","status","prev","updatePendingMessage","id","activePendingMessages","findIndex","message","updatedPendingMessage","updatedPendingMessages","replaceItemAtIndex","removePendingMessage","filter","resendErrorMessage","failedMessage","then","resp","catch","activeConversationSid","setActiveConversationSid","ActiveConversationContext","NewConversationContextInitialValue","isConversationCreatable","loading","ecLoading","selectedUsers","setSelectedUsers","createNewConversation","undefined","createHomeNoumNewConversation","NewConversationContext","createContext","isGetOrCreateSpaceConversationType","input","__typename","isGetOrCreateGlobalConversationType","NewConversationProvider","onCreated","spaceId","isMasterNoum","useNoumContext","client","TwilioClientContext","getOrCreateSpaceConversationMutation","useGetOrCreateSpaceConversationMutation","getOrCreateGlobalConversationMutation","useGetOrCreateGlobalConversationMutation","getConversation","useGetConversationLazyQuery","setLoading","setECLoading","selectedUserIds","map","u","CREAT_CONVERSATION_WITH_HOME_OWNER","length","data","variables","userIds","error","Error","Sentry","tags","section","getOrCreateSpaceConversation","conversationData","cid","getConversationBySid","getOrCreateGlobalConversation","cleanList","TwilioClientProvider","onLoadConversations","queryClient","useQueryClient","createTwilioToken","useCreateTwilioTokenMutation","twilioClient","setTwilioClient","token","setToken","isClientInitialized","setIsClientInitialized","isConversationsListLoaded","setIsConversationsListLoaded","conversationsBuffer","addMessage","useMessageHandlers","bulkAddConversations","updateConversation","removeConversation","useConversationHandlers","addConversationParticipant","updateConversationParticipant","removeConversationParticipant","useParticipantHandlers","throttledFlushConversationBuffer","throttle","conversations","isInitialized","leading","trailing","doubouncedConversationsBuffer","debounce","handleConversationAdded","push","initializeClient","Client","console","log","e","on","state","getSubscribedConversations","lastMessage","updateReasons","participant","includes","removeAllListeners","clear","ChatItemAvatar","size","users","urls","source","Avatar","DiagonalAvatar2","DiagonalAvatar3","ChatItemWrapper","styled","div","props","active","AvatarWrapper","Content","ChatAvatarWrapper","isMarginRight","BadgeWrapper","MessageContent","MessageStatus","DotSpan","TSpan","attrs","font","TimestampSpan","TitleTSPan","overflow","colorToken","BlockTSPan","ChatItemView","isActive","onClick","noumLayoutViewMode","title","messages","unread","lastMessageHasAsset","t","useTranslation","fontSize","jsxs","S.ChatItemWrapper","S.AvatarWrapper","NoumLayoutViewMode","NOUMLAYOUTCOMPACT","S.Content","S.TitleTSPan","S.MessageContent","S.MessageStatus","S.BlockTSPan","body","trim","Fragment","S.DotSpan","S.TimestampSpan","formatLastMessageSentDate","ChatItem","onRead","useConversationMessages","getParticipantById","useConversationDetails","MessageElementContext","useConversationUnreadMessageCount","tempAuthor","lastMessageHasAssetTmp","attachedMedia","firstName","setAllMessagesRead","NewChatItem","Icon","useElementOnScreen","ref","options","isVisible","setIsVisible","callback","entries","entry","isIntersecting","element","observer","IntersectionObserver","observe","unobserve","MessageItem","next","sameTypeNext","root","document","querySelector","rootMargin","threshold","messageItemMaxLength","getMessageItemMaxLength","readConversation","messageBubbleProps","useMessageBubbleProps","media","getMediaType","contentType","VideoMessageBubble","ImageMessageBubble","TextMessageBubble","PendingMessageItem","isMobile","isGlobalType","pendingMessageBubbleProps","file","getFileFromPendingMessage","onResend","type","text","SpinnerContainer","MessageList","scrollContainerRef","isGroupConversation","isFetched","isLoading","messageStatus","hasPreviousPage","fetchPreviousMessages","prevScrollHeight","setPrevScrollHeight","infiniteStatus","mergedMessages","orderBy","Boolean","getMessageDateCreated","firstMessage","first","last","scrollContainer","scrollHeight","scrollTop","scrollTo","behavior","top","Spinner","Infinite","i","isPendingMessage","getNextSameTypeMessage","getNextOrPrevMessage","UserWrapper","UserBody","UserName","UserTitle","ConversationUserModal","isOpen","onClose","onGoHomeNoum","isUnregistered","handleClick","Modal","ModalSize","L","ModalHeader","ModalBody","S.UserWrapper","S.UserBody","S.UserName","lastName","S.UserTitle","ProfileWrapper","Stack","align","fullWidth","ProfileInfo","ProfileTitle","vertical","ConversationProfileView","isConversationBlocked","isOpenMembersModal","setIsOpenMembersModal","subTitle","url","avatar","goHomeNoum","userStatus","homeNoumId","UserStatus","Active","open","Spacer","ConversationProfile","MessageSelectedUser","multiselect","onRemove","SelectedUser","Tag","UserUtil","getProfilePicture","label","MessageUserOptionRenderer","activeItem","hasMore","onSelect","onFetchMore","width","useWindowDimensions","showCheck","OptionRendererWrapper","option","DropdownItemLayout","key","DropDownLabel","DropdownValueWrapper","DropdownValueLabel","description","DropdownValueDescription","userType","NoumenaUserType","Noumena","TagLabel","CheckboxWrapper","Checkbox","selected","MessageUserSearch","forwardRef","inputProps","cancellable","hasSelectedOption","onCancel","focused","setFocused","inputRef","timeout","setTimeout","focus","clearTimeout","onFocus","onBlur","SearchWrapper","SearchContainer","InputWrapper","InputField","ButtonWrapper","Button","buildDropDownData","datum","getFullName","middleName","MessageUserPicker","initialValue","onSelectUsers","initLoading","CustomOptionsContent","onSetSearch","containerRef","height","clientHeight","setWidth","openDropdown","setOpenDropdown","scrollWidth","selectedUsersIds","search","setSearch","timeOut","closeOnSelect","allOptions","selectableOptions","availableOptions","forEach","selectedOptions","isGlobalMessageScreen","GLOBAL_DIRECT","GLOBAL_NOUM","onChange","target","mSelectedUsers","s","onUnSelect","k","_s","useImperativeHandle","cancel","Container","Dropdown","maxHeight","handleSelectOption","UserSearchDropDownInfobox","autoFocus","placeholder","NewHomeConversationUserSelector","_","currentUser","fetchMore","networkStatus","useAllUsersWithoutEventQuery","fetchPolicy","offset","limit","PAGE_BIG_SIZE","PAGE_SIZE","activeUserOnly","allUsers","totalCount","count","messageUserPickerRef","onLoadMore","_users","NetworkStatus"],"mappings":"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"}