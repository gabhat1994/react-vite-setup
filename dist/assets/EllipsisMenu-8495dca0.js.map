{"version":3,"file":"EllipsisMenu-8495dca0.js","sources":["../../src/screens/Chambers/EllipsisMenu.tsx"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\nimport {\n  Dropdown,\n  type DropdownTargetProps,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { Spacer, Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { Spinner } from '@/components/Spinner';\nimport { OptionContainer, SpinnerWrapper } from './styles';\nimport { type IEllipsisMenu } from './types';\n\nconst EllipsisMenu = <ValueType extends string>({\n  isMobile,\n  onClick,\n  menuOptions,\n  containerWidth,\n  textOnly,\n  size = 'small',\n  tertiary = true,\n  neutral,\n  loadingLinked,\n  iconColorToken = '--icon-button-neutral-default',\n  placement,\n}: IEllipsisMenu<ValueType>) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const toggle = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen]);\n\n  const handleClick = (value: DropdownValueType<ValueType>) => {\n    if (onClick) {\n      value.onClick?.();\n      onClick(value.value);\n    }\n    toggle();\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        ref.current &&\n        event.target &&\n        !ref.current.contains(event.target as Node)\n      ) {\n        toggle();\n      }\n    };\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [ref, toggle]);\n\n  return (\n    <>\n      <Dropdown\n        placement={placement || 'auto'}\n        onSelectOption={() => {}}\n        containerWidth={containerWidth}\n        isAnimation={false}\n        calRefTop={false}\n        onClose={() => setIsOpen(false)}\n        optionsRenderer={() => (\n          <>\n            {!loadingLinked ? (\n              <Stack\n                ref={ref}\n                padding={isMobile ? 16 : 0}\n                gap={isMobile ? 16 : 0}\n                vertical\n                overflow=\"hidden\"\n                fullWidth\n                align=\"stretch\"\n              >\n                {isMobile ? (\n                  <>\n                    {menuOptions.map((value) => (\n                      <Button\n                        key={value.value}\n                        size=\"full\"\n                        intent={\n                          value.intent === 'danger' ? 'negative' : undefined\n                        }\n                        icon={value.icon ?? undefined}\n                        disabled={value.disabled}\n                        onClick={() => handleClick(value)}\n                      >\n                        {value.label}\n                      </Button>\n                    ))}\n                    <Spacer height={14} />\n                  </>\n                ) : (\n                  menuOptions.map((value) => (\n                    <OptionContainer\n                      key={value.value}\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleClick(value);\n                      }}\n                    >\n                      {value.icon}\n                      <TSpan\n                        font=\"body-m-bold\"\n                        colorToken={\n                          value.intent === 'danger'\n                            ? '--text-tablecell-header-danger-primary-highlighted'\n                            : undefined\n                        }\n                      >\n                        {value.label}\n                      </TSpan>\n                    </OptionContainer>\n                  ))\n                )}\n              </Stack>\n            ) : (\n              <SpinnerWrapper>\n                <Spinner />\n              </SpinnerWrapper>\n            )}\n          </>\n        )}\n        isOpen={isOpen}\n        options={menuOptions}\n        padding=\"0px\"\n        renderContainerFromBottom\n        isMobile={isMobile}\n      >\n        {({ targetRef }: DropdownTargetProps<HTMLButtonElement>) => (\n          <Button\n            ref={targetRef}\n            size={size}\n            tertiary={tertiary}\n            neutral={neutral}\n            textOnly={textOnly}\n            onClick={(event) => {\n              event.stopPropagation();\n              toggle();\n            }}\n          >\n            <Icon size={24} name=\"more_m\" color={iconColorToken} />\n          </Button>\n        )}\n      </Dropdown>\n    </>\n  );\n};\n\nexport default EllipsisMenu;\n"],"names":["EllipsisMenu","isMobile","onClick","menuOptions","containerWidth","textOnly","size","tertiary","neutral","loadingLinked","iconColorToken","placement","isOpen","setIsOpen","useState","ref","useRef","toggle","useCallback","handleClick","value","useEffect","handleClickOutside","event","current","target","contains","addEventListener","removeEventListener","jsx","Dropdown","SpinnerWrapper","Spinner","Stack","map","Button","intent","undefined","icon","disabled","label","Spacer","jsxs","OptionContainer","e","stopPropagation","TSpan","targetRef","Icon"],"mappings":"uLAcA,MAAMA,EAAe,CAA2B,CAC9CC,SAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAC,SAAAA,EACAC,KAAAA,EAAO,QACPC,SAAAA,EAAW,GACXC,QAAAA,EACAC,cAAAA,EACAC,eAAAA,EAAiB,gCACjBC,UAAAA,CACwB,IAAM,CAC9B,KAAM,CAACC,EAAQC,CAAS,EAAIC,WAAS,EAAK,EACpCC,EAAMC,SAA8B,IAAI,EAExCC,EAASC,EAAAA,YAAY,IAAM,CAC/BL,EAAU,CAACD,CAAM,CAAA,EAChB,CAACA,CAAM,CAAC,EAELO,EAAeC,GAAwC,OACvDlB,KACFkB,EAAAA,EAAMlB,UAANkB,MAAAA,EAAAA,KAAAA,GACAlB,EAAQkB,EAAMA,KAAK,GAEbH,GAAA,EAGVI,OAAAA,EAAAA,UAAU,IAAM,CACRC,MAAAA,EAAsBC,GAAsB,CAE9CR,EAAIS,SACJD,EAAME,QACN,CAACV,EAAIS,QAAQE,SAASH,EAAME,MAAc,GAElCR,GACV,EAEOU,gBAAAA,iBAAiB,QAASL,CAAkB,EAC9C,IAAM,CACFM,SAAAA,oBAAoB,QAASN,CAAkB,CAAA,CAC1D,EACC,CAACP,EAAKE,CAAM,CAAC,OAIZ,SAACY,EAAAC,EAAA,CACC,UAAWnB,GAAa,OACxB,eAAgB,IAAM,CAAA,EACtB,eAAAP,EACA,YAAa,GACb,UAAW,GACX,QAAS,IAAMS,EAAU,EAAK,EAC9B,gBAAiB,SAEZ,SAACJ,EAqDCoB,EAAAE,EAAA,CAAc,YAAA,8BACb,SAACF,EAAAG,EAAA,CAAO,YAAA,uBAAA,EACV,IAtDCC,EACC,CAAA,IAAAlB,EACA,QAASd,EAAW,GAAK,EACzB,IAAKA,EAAW,GAAK,EACrB,SAAQ,GACR,SAAS,SACT,UAAS,GACT,MAAM,UAAS,YAAA,qBAEdA,WAEIE,EAAAA,EAAAA,CAAAA,SAAAA,CAAAA,EAAY+B,IAAKd,GACfS,EAAAM,EAAA,CAEC,KAAK,OACL,OACEf,EAAMgB,SAAW,SAAW,WAAaC,OAE3C,KAAMjB,EAAMkB,MAAQD,OACpB,SAAUjB,EAAMmB,SAChB,QAAS,IAAMpB,EAAYC,CAAK,EAAE,YAAA,sBAEjCA,SAAAA,EAAMoB,KATFpB,EAAAA,EAAMA,KAUb,CACD,EACAS,EAAAY,EAAA,CAAO,OAAQ,GAAG,YAAA,sBAAA,CAAA,EACrB,EAEAtC,EAAY+B,OACTQ,EAAAC,EAAA,CAEC,QAAgBC,GAAA,CACdA,EAAEC,gBAAiB,EACnB1B,EAAYC,CAAK,CAAA,EACjB,YAAA,+BAEDA,SAAAA,CAAMkB,EAAAA,KACNT,EAAAiB,EAAA,CACC,KAAK,cACL,WACE1B,EAAMgB,SAAW,SACb,qDACAC,OACL,YAAA,qBAEAjB,WAAMoB,MACT,CAhBKpB,CAAAA,EAAAA,EAAMA,KAiBb,CACD,CAEL,CAAA,CAMJ,CAAA,EAEF,OAAAR,EACA,QAAST,EACT,QAAQ,MACR,0BAAyB,GACzB,SAAAF,EAAmB,YAAA,wBAElB,SAAC,CAAA,CAAE8C,UAAAA,CAAkD,IACnDlB,EAAAM,EAAA,CACC,IAAKY,EACL,KAAAzC,EACA,SAAAC,EACA,QAAAC,EACA,SAAAH,EACA,QAAoBkB,GAAA,CAClBA,EAAMsB,gBAAiB,EACf5B,GAAA,EACR,YAAA,sBAEF,SAAAY,EAACmB,GAAK,KAAM,GAAI,KAAK,SAAS,MAAOtC,EAAe,YAAA,mBAAA,CAAA,EACtD,EAEJ,CACF,CAAA,CAEJ"}