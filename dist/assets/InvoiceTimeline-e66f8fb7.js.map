{"version":3,"file":"InvoiceTimeline-e66f8fb7.js","sources":["../../src/features/invoices/components/InvoiceSummary/styles.ts","../../src/features/invoices/components/InvoiceSummary/InvoiceDetailsSection.tsx","../../src/features/invoices/components/InvoiceItemsSummaryTable/styles.ts","../../src/features/invoices/components/InvoiceItemsSummaryTable/InvoiceItemsSummaryTable.tsx","../../src/features/invoices/components/InvoiceSummary/AccountDetails.tsx","../../src/features/invoices/components/InvoiceSummary/InvoiceSummary.tsx","../../src/features/invoices/components/InvoiceSummary/PlanDetails.tsx","../../src/features/invoices/components/InvoiceTimeline/styles.ts","../../src/features/invoices/components/InvoiceTimeline/TranslatedBody.tsx","../../src/features/invoices/components/InvoiceTimeline/utils.ts","../../src/features/invoices/components/InvoiceTimeline/hooks/useInvoiceTimeline.ts","../../src/features/invoices/components/InvoiceTimeline/TimelineListItem.tsx","../../src/features/invoices/components/InvoiceTimeline/InvoiceTimeline.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Card } from '@/components/Card';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { breakpoints, mediaSizes } from '@/constants/devices';\n\nconst PageCard = styled(Card)`\n  width: 100%;\n  padding: 24px;\n  overflow: visible;\n`;\n\nconst InvoiceNumberLabel = styled(TSpan)`\n  min-width: 110px;\n`;\n\nconst Separator = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: var(--bg-separator-neutral-default);\n`;\n\nconst DetailsRow = styled.div`\n  display: grid;\n  grid-template-columns: 160px auto;\n  align-items: flex-start;\n\n  @media (max-width: ${breakpoints.MOBILE_MAX}px) {\n    grid-template-columns: auto;\n    gap: 8px;\n    padding-bottom: 12px;\n    width: 100%;\n    border-bottom: 1px solid var(--bg-separator-neutral-default);\n  }\n`;\n\nconst AccountDetailsColumn = styled(Stack)`\n  display: grid;\n  grid-template-columns: 160px auto;\n  gap: 24px;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    grid-template-columns: auto;\n    gap: 8px;\n  }\n`;\n\nconst AccountDetailsValueText = styled(TSpan).attrs({\n  colorToken: '--text-card-neutral-highlighted',\n  font: 'body-m',\n})``;\n\nexport default {\n  PageCard,\n  InvoiceNumberLabel,\n  Separator,\n  DetailsRow,\n  AccountDetailsColumn,\n  AccountDetailsValueText,\n};\n","import { format } from 'date-fns';\nimport { useMemo } from 'react';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { AvatarSize } from '@/components/Avatar/Avatar/types';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\n\nimport { PaymentTerms } from '@/apollo/generated/types';\nimport { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport ChamberDefaultImage from '@/assets/images/chamber_default.png';\nimport S from './styles';\nimport { InvoiceUtils } from '../../utils/invoice';\n\ntype InvoiceDetailsSectionProps = {\n  invoice: InvoiceOutputFragment;\n};\n\nconst InvoiceDetailsSection: React.FC<InvoiceDetailsSectionProps> = ({\n  invoice,\n}) => {\n  const renderDetailsRow = (\n    label: string,\n    value: string | null | undefined,\n    icon: React.ReactNode = null,\n  ) =>\n    value ? (\n      <S.DetailsRow>\n        <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n          {label}\n        </TSpan>\n        <Stack align=\"center\" gap={8}>\n          {icon}\n          <TSpan\n            font=\"body-m\"\n            colorToken=\"--text-card-header-neutral-highlighted\"\n          >\n            {value}\n          </TSpan>\n        </Stack>\n      </S.DetailsRow>\n    ) : null;\n\n  const paymentTermText = useMemo(() => {\n    switch (invoice.paymentTerms) {\n      case PaymentTerms.FullPaymentAdvance:\n        return 'Payable on or Before Due Date';\n      case PaymentTerms.MilestonePayment:\n        return 'Milestone Payment';\n      case PaymentTerms.InstallmentPayment:\n        return 'Installment Payment';\n      default:\n        return '';\n    }\n  }, [invoice.paymentTerms]);\n\n  const lateFeeText = InvoiceUtils.getLateFeeText(\n    invoice.lateFeeType,\n    invoice.lateFeeValue,\n    invoice.currency,\n  );\n\n  return (\n    <S.PageCard>\n      <Stack vertical gap={16} fullWidth>\n        <TSpan font=\"heading-xs-bold\">Details</TSpan>\n\n        <Stack fullWidth vertical gap={8}>\n          {invoice.issueDate\n            ? renderDetailsRow(\n                'Created',\n                format(new Date(invoice.issueDate), 'dd MMM yyyy'),\n              )\n            : null}\n          {renderDetailsRow('Currency', invoice?.currency, null)}\n          {renderDetailsRow('Payment Terms', paymentTermText)}\n          {renderDetailsRow('Late Fee', lateFeeText)}\n          {renderDetailsRow(\n            'Connected Noum',\n            invoice.noumId?.name,\n            <Avatar\n              url={invoice.noumId?.profileImage || ChamberDefaultImage}\n              size={AvatarSize.M}\n            />,\n          )}\n          {/* Hidden until it's not handled by BE */}\n          {/* {renderDetailsRow(\n            'Scope of Work',\n            'SOW #129573',\n            <Icon name=\"file_m\" size={24} />,\n          )} */}\n        </Stack>\n      </Stack>\n    </S.PageCard>\n  );\n};\n\nexport default InvoiceDetailsSection;\n","import styled from 'styled-components';\nimport { footnoteTypography, TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableBody = styled.tbody``;\n\nconst TableRow = styled.tr``;\n\nconst TableHead = styled.thead``;\n\nconst TableCell = styled.td<{\n  $width?: 'fit-contents' | string;\n  align?: 'left' | 'right';\n}>`\n  ${footnoteTypography.footnote}\n  padding: 12px;\n  text-align: right;\n  border-bottom: 1px solid var(--border-card-neutral-default);\n  color: var(--text-card-neutral-default);\n  width: ${({ $width }) => $width || 'auto'};\n  text-align: ${({ align }) => align || 'right'};\n`;\n\nconst TableHeader = styled.th<{\n  align?: 'left' | 'right';\n}>`\n  ${footnoteTypography.footnoteBold}\n  background-color: var(--bg-card-neutral-default);\n  color: var(--text-card-header-neutral-default);\n  padding: 12px;\n  text-align: ${({ align }) => align || 'right'};\n\n  :first-of-type {\n    border-radius: 8px 0 0 8px;\n  }\n\n  :last-of-type {\n    border-radius: 0 8px 8px 0;\n  }\n`;\n\nconst SummaryText = styled(TSpan)`\n  color: var(--text-card-neutral-highlighted);\n`;\n\nconst ItemDetailsRowText = styled(TSpan).attrs({\n  font: 'footnote',\n  colorToken: '--text-card-neutral-default',\n})``;\n\nconst ItemDetailsRow = styled(Stack).attrs({\n  fullWidth: true,\n  justify: 'space-between',\n  align: 'center',\n  padding: '0 12px 0 0',\n})``;\n\nexport default {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  SummaryText,\n  TableHead,\n  TableHeader,\n  ItemDetailsRowText,\n  ItemDetailsRow,\n};\n","import { isNumber } from 'lodash';\nimport { TSpan } from '@/components/Typography';\nimport {\n  type AllCurrencyEnum,\n  type InvoiceLineItem,\n} from '@/apollo/generated/types';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { Stack } from '@/layout';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport InvoiceSummaryTable from '../InvoiceTableSummary/InvoiceTableSummary';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport S from './styles';\n\ntype InvoiceItemsSummaryTableProps = {\n  data: InvoiceLineItem[];\n  currency?: AllCurrencyEnum;\n};\n\nconst InvoiceItemsSummaryTable: React.FC<InvoiceItemsSummaryTableProps> = ({\n  data,\n  currency,\n}) => {\n  const { isMobile } = useBreakpoints();\n\n  return (\n    <>\n      <S.Table>\n        {!isMobile && (\n          <S.TableHead>\n            <S.TableRow>\n              <S.TableHeader align=\"left\">DESCRIPTION</S.TableHeader>\n              <S.TableHeader>QTY</S.TableHeader>\n              <S.TableHeader>UNIT PRICE</S.TableHeader>\n              <S.TableHeader>TAX RATE</S.TableHeader>\n              <S.TableHeader>AMOUNT</S.TableHeader>\n            </S.TableRow>\n          </S.TableHead>\n        )}\n\n        <S.TableBody>\n          {data.map((item) =>\n            isMobile ? (\n              <S.TableRow key={item.id}>\n                <S.TableCell>\n                  <Stack>\n                    <TSpan\n                      font=\"body-m-bold\"\n                      colorToken=\"--text-card-neutral-highlighted\"\n                    >\n                      {item.description}\n                    </TSpan>\n                  </Stack>\n\n                  <S.ItemDetailsRow>\n                    <S.ItemDetailsRowText>Quantity:</S.ItemDetailsRowText>\n                    <S.ItemDetailsRowText>{item.quantity}</S.ItemDetailsRowText>\n                  </S.ItemDetailsRow>\n\n                  <S.ItemDetailsRow>\n                    <S.ItemDetailsRowText>Unit Price:</S.ItemDetailsRowText>\n                    <S.ItemDetailsRowText>\n                      {item.unitPrice}\n                    </S.ItemDetailsRowText>\n                  </S.ItemDetailsRow>\n\n                  <S.ItemDetailsRow>\n                    <S.ItemDetailsRowText>Tax Rate:</S.ItemDetailsRowText>\n                    <S.ItemDetailsRowText>\n                      {isNumber(item.taxRate) ? `${item.taxRate}%` : '-'}\n                    </S.ItemDetailsRowText>\n                  </S.ItemDetailsRow>\n\n                  <S.ItemDetailsRow>\n                    <S.ItemDetailsRowText>Amount:</S.ItemDetailsRowText>\n                    <S.ItemDetailsRowText>\n                      {InvoiceUtils.getItemTotalValueWithCurrency(\n                        item.quantity,\n                        item.unitPrice,\n                        item.taxRate,\n                        currency,\n                      )}\n                    </S.ItemDetailsRowText>\n                  </S.ItemDetailsRow>\n                </S.TableCell>\n              </S.TableRow>\n            ) : (\n              <S.TableRow key={item.id}>\n                <S.TableCell align=\"left\">\n                  <TSpan\n                    font=\"body-m\"\n                    colorToken=\"--text-card-neutral-highlighted\"\n                  >\n                    {item.description}\n                  </TSpan>\n                </S.TableCell>\n\n                <S.TableCell $width=\"10%\">\n                  <TSpan\n                    font=\"body-m\"\n                    colorToken=\"--text-card-neutral-highlighted\"\n                  >\n                    {item.quantity}\n                  </TSpan>\n                </S.TableCell>\n\n                <S.TableCell $width=\"10%\">\n                  <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n                    {convertToCurrency(item.unitPrice, currency, 2)}\n                  </TSpan>\n                </S.TableCell>\n\n                <S.TableCell $width=\"10%\">\n                  <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n                    {isNumber(item.taxRate) ? `${item.taxRate}%` : ''}\n                  </TSpan>\n                </S.TableCell>\n\n                <S.TableCell $width=\"10%\">\n                  <TSpan\n                    font=\"body-m\"\n                    colorToken=\"--text-card-neutral-highlighted\"\n                  >\n                    {InvoiceUtils.getItemTotalValueWithCurrency(\n                      item.quantity,\n                      item.unitPrice,\n                      item.taxRate,\n                      currency,\n                    )}\n                  </TSpan>\n                </S.TableCell>\n              </S.TableRow>\n            ),\n          )}\n        </S.TableBody>\n      </S.Table>\n\n      <InvoiceSummaryTable lineItems={data} currency={currency} />\n    </>\n  );\n};\n\nexport default InvoiceItemsSummaryTable;\n","import { Avatar } from '@/components/Avatar/Avatar';\nimport { AvatarSize } from '@/components/Avatar/Avatar/types';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\n\nimport { type NoumContactFragment } from '@/apollo/graphql';\nimport { ContactDetailsUtils } from '@/features/noumContacts/utils/contactDetails';\nimport { getCountryByCode } from '@/utils/country';\nimport S from './styles';\n\ntype AccountDetailsProps = {\n  contact: NoumContactFragment;\n};\n\nconst AccountDetails: React.FC<AccountDetailsProps> = ({ contact }) => (\n  <>\n    <Stack align=\"center\" gap={8} padding=\"8px 0\">\n      <Avatar\n        url={contact?.userId.profile?.profilePictureThumbnail}\n        size={AvatarSize.M}\n      />\n      <TSpan\n        font=\"body-m-bold\"\n        colorToken=\"--text-tablecell-header-neutral-highlighted\"\n      >\n        {contact.displayName}\n      </TSpan>\n    </Stack>\n\n    <S.AccountDetailsColumn padding=\"8px 0\">\n      <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n        Account Information\n      </TSpan>\n\n      <Stack vertical>\n        <S.AccountDetailsValueText>\n          {contact.displayName}\n        </S.AccountDetailsValueText>\n        <S.AccountDetailsValueText>\n          {ContactDetailsUtils.formatCompanyAndTitle(contact)}\n        </S.AccountDetailsValueText>\n        <S.AccountDetailsValueText>\n          {contact.userId.email}\n        </S.AccountDetailsValueText>\n      </Stack>\n    </S.AccountDetailsColumn>\n\n    <S.AccountDetailsColumn padding=\"8px 0\">\n      <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n        Billing Details\n      </TSpan>\n\n      <Stack vertical>\n        <S.AccountDetailsValueText>\n          {contact.apartmentNo} {contact.street}\n        </S.AccountDetailsValueText>\n        <S.AccountDetailsValueText>{contact.city}</S.AccountDetailsValueText>\n        <S.AccountDetailsValueText>\n          {contact.state}, {contact.zipCode}\n        </S.AccountDetailsValueText>\n        <S.AccountDetailsValueText>\n          {getCountryByCode(contact.country)?.name ?? contact.country ?? '--'}\n        </S.AccountDetailsValueText>\n      </Stack>\n    </S.AccountDetailsColumn>\n  </>\n);\n\nexport default AccountDetails;\n","import { TSpan } from '@/components/Typography';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack } from '@/layout';\nimport { cleanList } from '@/utils/list';\nimport { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport FormSection from '../FormSection/FormSection';\nimport InvoiceItemsSummaryTable from '../InvoiceItemsSummaryTable/InvoiceItemsSummaryTable';\nimport S from './styles';\n\nimport AccountDetails from './AccountDetails';\n\ntype InvoiceSummaryProps = {\n  invoice: InvoiceOutputFragment;\n};\n\nconst InvoiceSummary: React.FC<InvoiceSummaryProps> = ({ invoice }) => {\n  const { isMobile } = useBreakpoints();\n\n  return (\n    <S.PageCard>\n      <Stack vertical gap={16} fullWidth>\n        <TSpan font=\"heading-xs-bold\">Summary</TSpan>\n        <Stack fullWidth vertical={isMobile} gap={isMobile ? 16 : 0}>\n          <FormSection title=\"Recipient\" sectionSeparator={false}>\n            {invoice.invoiceTo ? (\n              <AccountDetails contact={invoice.invoiceTo} />\n            ) : null}\n          </FormSection>\n\n          <FormSection title=\"Service Provider\" sectionSeparator={false}>\n            {invoice.invoiceFrom ? (\n              <AccountDetails contact={invoice.invoiceFrom} />\n            ) : null}\n          </FormSection>\n        </Stack>\n\n        {invoice.summary ? (\n          <FormSection title=\"Attention\">{invoice.summary}</FormSection>\n        ) : null}\n\n        {invoice.lineItems?.length ? (\n          <FormSection title=\"Items\" fullSize>\n            <InvoiceItemsSummaryTable\n              data={cleanList(invoice.lineItems)}\n              currency={invoice.currency ?? undefined}\n            />\n          </FormSection>\n        ) : null}\n\n        {invoice.notes ? (\n          <FormSection title=\"Notes\">{invoice.notes}</FormSection>\n        ) : null}\n      </Stack>\n    </S.PageCard>\n  );\n};\n\nexport default InvoiceSummary;\n","import { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport { Tag } from '@/components/Tag';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { format } from 'date-fns';\nimport S from './styles';\n\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\nimport InvoiceStatusBadge from '../InvoiceStatusBadge/InvoiceStatusBadge';\n\ntype PlanDetailsProps = {\n  invoice: InvoiceOutputFragment;\n};\n\nconst PlanDetails: React.FC<PlanDetailsProps> = ({ invoice }) => {\n  const { isNoumOwner } = useInvoicePermissions();\n\n  return (\n    <S.PageCard>\n      <Stack justify=\"space-between\">\n        <Stack vertical gap={16}>\n          <Stack align=\"center\" gap={8}>\n            <TSpan\n              colorToken=\"--text-card-neutral-highlighted\"\n              font=\"heading-xs-bold\"\n            >\n              {invoice.invoiceNumber}\n            </TSpan>\n            {invoice.amount ? (\n              <TSpan\n                colorToken=\"--text-card-neutral-highlighted\"\n                font=\"body-xl\"\n              >\n                for{' '}\n                {convertToCurrency(\n                  invoice.amount,\n                  invoice.currency ?? undefined,\n                  2,\n                )}\n              </TSpan>\n            ) : null}\n\n            {invoice.duplicatedFromInvoiceNumber && isNoumOwner(invoice) ? (\n              <Tag size=\"medium\" tertiary>\n                Duplicated from {invoice.duplicatedFromInvoiceNumber}\n              </Tag>\n            ) : null}\n          </Stack>\n\n          <Stack align=\"center\" gap={8}>\n            <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n              Payment Due:\n            </TSpan>\n            <TSpan\n              font=\"body-m-bold\"\n              colorToken=\"--text-card-header-neutral-highlighted\"\n            >\n              {invoice.issueDate\n                ? format(new Date(invoice.dueDate), 'dd MMM yyyy')\n                : null}\n            </TSpan>\n          </Stack>\n        </Stack>\n\n        <InvoiceStatusBadge status={invoice?.status} />\n      </Stack>\n    </S.PageCard>\n  );\n};\n\nexport default PlanDetails;\n","import styled from 'styled-components';\nimport { Card } from '@/components/Card';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\n\nconst PageCard = styled(Card)`\n  width: 100%;\n  padding: 24px;\n  overflow: visible;\n`;\n\nconst TimelineListItem = styled(Stack).attrs({\n  fullWidth: true,\n})`\n  border-bottom: 1px solid var(--bg-separator-neutral-default);\n  padding: 8px 0;\n`;\n\nconst TimelineInfoWrapper = styled(Stack).attrs({\n  vertical: true,\n})``;\n\nconst TimelineIconWrapper = styled.div`\n  padding: 2px 8px 0;\n`;\n\nconst TimelineContainer = styled(Stack).attrs({\n  fullWidth: true,\n  vertical: true,\n})`\n  padding-top: 16px;\n`;\n\nconst DateText = styled(TSpan).attrs({\n  font: 'footnote',\n  colorToken: '--text-timestamp-neutral-default',\n})``;\n\nconst ActivityText = styled(TSpan).attrs({\n  font: 'body-m',\n  colorToken: '--text-card-header-neutral-highlighted',\n})``;\n\nconst BodyHighlighted = styled(TSpan).attrs({\n  font: 'body-m-bold',\n  colorToken: '--text-card-header-neutral-highlighted',\n})``;\n\nexport default {\n  PageCard,\n  TimelineListItem,\n  TimelineInfoWrapper,\n  TimelineIconWrapper,\n  TimelineContainer,\n  DateText,\n  ActivityText,\n  BodyHighlighted,\n};\n","import { Trans } from 'react-i18next';\nimport S from './styles';\n\ninterface TranslatedBodyProps {\n  i18nKey: string;\n  values?: Record<string, string | number | boolean | undefined | null>;\n}\n\nexport function TranslatedBody({ i18nKey, values }: TranslatedBodyProps) {\n  return (\n    <Trans\n      i18nKey={i18nKey}\n      values={values}\n      components={{\n        b: <S.BodyHighlighted />,\n      }}\n    />\n  );\n}\n","import { type DefaultNamespace, type TFunction } from 'react-i18next';\nimport {\n  type AllCurrencyEnum,\n  InvoiceActivityType,\n  InvoiceStatusEnum,\n} from '@/apollo/generated/types';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport {\n  type InvoiceTimelineOutputFragment,\n  type NoumContactBasicFragment,\n} from '@/apollo/graphql';\nimport { type TimelineActivityType } from './types';\n\nfunction getStatusTranslationKey(status?: InvoiceStatusEnum): string {\n  switch (status) {\n    case InvoiceStatusEnum.Draft:\n      return 'noumena.invoices.status.draft';\n    case InvoiceStatusEnum.Issued:\n      return 'noumena.invoices.status.issued';\n    case InvoiceStatusEnum.Paid:\n      return 'noumena.invoices.status.paid';\n    case InvoiceStatusEnum.Overdue:\n      return 'noumena.invoices.status.overdue';\n    case InvoiceStatusEnum.Cancelled:\n      return 'noumena.invoices.status.cancelled';\n    case InvoiceStatusEnum.PartiallyPaid:\n      return 'noumena.invoices.status.partially_paid';\n    case InvoiceStatusEnum.WriteOff:\n      return 'noumena.invoices.status.write_off';\n    default:\n      return '';\n  }\n}\n\nfunction createUsersMapEntry(\n  contact: NoumContactBasicFragment | undefined,\n): Record<string, string> | undefined {\n  if (!contact || !contact.userId._id || !contact.displayName) {\n    return undefined;\n  }\n\n  return {\n    [contact.userId._id]: contact.displayName,\n  };\n}\n\nfunction getTimelineItemByType({\n  item,\n  currency,\n  currentUserId,\n  serviceProvider,\n  buyer,\n  t,\n  isOpsUser,\n}: {\n  item: InvoiceTimelineOutputFragment;\n  currency: AllCurrencyEnum;\n  buyer?: NoumContactBasicFragment;\n  serviceProvider?: NoumContactBasicFragment;\n  currentUserId: string;\n  t: TFunction<DefaultNamespace, undefined>;\n  isOpsUser: boolean;\n}): TimelineActivityType | null {\n  const usersMap = {\n    ...createUsersMapEntry(buyer),\n    ...createUsersMapEntry(serviceProvider),\n  };\n  const isDoneByCurrentUser = currentUserId === item.userId?._id;\n  const oppositeUserId =\n    buyer?.userId._id === currentUserId\n      ? serviceProvider?.userId._id\n      : buyer?.userId._id;\n\n  const userDisplayName = isDoneByCurrentUser\n    ? 'You'\n    : (item.userId ? usersMap[item?.userId?._id] : undefined) ?? 'Unknown User';\n\n  const oppositeUserDisplayName = usersMap[oppositeUserId ?? ''];\n\n  switch (item.activityType) {\n    case InvoiceActivityType.InvoiceCreated:\n      if (item.duplicatedFrom && isDoneByCurrentUser) {\n        return {\n          translation: {\n            key: 'noumena.invoices.timeline.duplicated',\n            values: {\n              invoiceNumber: item.duplicatedFrom,\n            },\n          },\n          icon: 'check_xs',\n        };\n      }\n\n      if (item.toStatus === InvoiceStatusEnum.Draft) {\n        return {\n          translation: {\n            key: 'noumena.invoices.timeline.drafted',\n          },\n          icon: 'check_xs',\n        };\n      }\n\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.created',\n        },\n        icon: 'check_xs',\n      };\n\n    case InvoiceActivityType.StatusChanged:\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.status_changed',\n          values: {\n            status: t(getStatusTranslationKey(item.toStatus ?? undefined)),\n          },\n        },\n        icon: 'transfer_m',\n      };\n    case InvoiceActivityType.Paid: {\n      const buyerDisplayName =\n        buyer?.userId._id === currentUserId ? 'You' : buyer?.displayName;\n\n      return {\n        translation:\n          (item.remainingAmount ?? 0) > 0\n            ? {\n                key: 'noumena.invoices.timeline.partially_paid',\n                values: {\n                  user: buyerDisplayName,\n                  amount: convertToCurrency(item.amount ?? 0, currency),\n                  remainingAmount: convertToCurrency(\n                    item.remainingAmount ?? 0,\n                    currency,\n                  ),\n                },\n              }\n            : {\n                key: 'noumena.invoices.timeline.paid',\n                values: {\n                  user: buyerDisplayName,\n                  amount: convertToCurrency(item.amount ?? 0, currency),\n                },\n              },\n        icon: 'wallet_m',\n      };\n    }\n    case InvoiceActivityType.Reminder:\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.reminder',\n          values: {\n            user: userDisplayName,\n          },\n        },\n        icon: 'notifications_m',\n      };\n    case InvoiceActivityType.InvoiceSent:\n      if (isOpsUser) {\n        return {\n          translation: {\n            key: 'noumena.invoices.timeline.sent',\n            values: {\n              user: usersMap[serviceProvider?.userId?._id ?? ''],\n            },\n          },\n          icon: 'send_m_1',\n        };\n      }\n      return {\n        translation: isDoneByCurrentUser\n          ? {\n              key: 'noumena.invoices.timeline.received',\n              values: {\n                user: oppositeUserDisplayName,\n              },\n            }\n          : {\n              key: 'noumena.invoices.timeline.sent',\n              values: {\n                user: oppositeUserDisplayName,\n              },\n            },\n        icon: 'send_m_1',\n      };\n    case InvoiceActivityType.InvoiceEdited:\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.edited',\n          values: {\n            user: userDisplayName,\n          },\n        },\n        icon: 'edit_m',\n      };\n    case InvoiceActivityType.PaymentFailed:\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.declined',\n        },\n        icon: 'close_m',\n      };\n    case InvoiceActivityType.DueDateChanged:\n      return {\n        translation: {\n          key: 'noumena.invoices.timeline.due_date_changed',\n          values: {\n            user: userDisplayName,\n          },\n        },\n        icon: 'time_m',\n      };\n    default:\n      return null;\n  }\n}\n\nexport const TimelineUtils = {\n  getTimelineItemByType,\n  getStatusTranslationKey,\n};\n","import { useTranslation } from 'react-i18next';\nimport { useAuth } from '@/features/auth/contexts';\nimport {\n  type InvoiceOutputFragment,\n  type InvoiceTimelineOutputFragment,\n} from '@/apollo/graphql';\nimport { AllCurrencyEnum } from '@/apollo/generated/types';\nimport { TimelineUtils } from '../utils';\n\ntype UseInvoiceTimelineOptions = {\n  item: InvoiceTimelineOutputFragment;\n  invoice: InvoiceOutputFragment;\n};\n\nexport function useInvoiceTimeline({\n  item,\n  invoice,\n}: UseInvoiceTimelineOptions) {\n  const { t } = useTranslation();\n  const { user, isOpsUser } = useAuth();\n\n  const currency = invoice.currency ?? AllCurrencyEnum.Usd;\n  const buyer = invoice.invoiceTo;\n  const serviceProvider = invoice.invoiceFrom;\n\n  return TimelineUtils.getTimelineItemByType({\n    currency,\n    currentUserId: user?._id ?? '',\n    buyer: buyer ?? undefined,\n    serviceProvider: serviceProvider ?? undefined,\n    item,\n    t,\n    isOpsUser,\n  });\n}\n","import { ActivityLog } from '@/components/ActivityLog';\nimport {\n  type InvoiceOutputFragment,\n  type InvoiceTimelineOutputFragment,\n} from '@/apollo/graphql';\nimport { TranslatedBody } from './TranslatedBody';\nimport { useInvoiceTimeline } from './hooks/useInvoiceTimeline';\n\ntype TimelineListItemProps = {\n  item: InvoiceTimelineOutputFragment;\n  invoice: InvoiceOutputFragment;\n};\n\nexport const TimelineListItem: React.FC<TimelineListItemProps> = ({\n  item,\n  invoice,\n}) => {\n  const activity = useInvoiceTimeline({ item, invoice });\n\n  if (!activity) {\n    return null;\n  }\n\n  return (\n    <ActivityLog.Item\n      iconName={activity.icon}\n      description={\n        activity.translation.key ? (\n          <TranslatedBody\n            i18nKey={activity.translation.key}\n            values={activity.translation.values}\n          />\n        ) : null\n      }\n      timestamp={item.createdAt}\n    />\n  );\n};\n","import { useTranslation } from 'react-i18next';\nimport { TSpan } from '@/components/Typography';\nimport {\n  type InvoiceOutputFragment,\n  useGetInvoiceTimeLinesQuery,\n} from '@/apollo/graphql';\nimport { cleanList } from '@/utils/list';\nimport { ActivityLog } from '@/components/ActivityLog';\nimport { Stack } from '@/layout';\nimport { TimelineListItem } from './TimelineListItem';\nimport S from './styles';\n\ntype InvoiceTimelineProps = {\n  invoice: InvoiceOutputFragment;\n};\n\nexport const InvoiceTimeline: React.FC<InvoiceTimelineProps> = ({\n  invoice,\n}) => {\n  const { t } = useTranslation();\n\n  const { data } = useGetInvoiceTimeLinesQuery({\n    variables: {\n      invoiceId: invoice.id,\n      limit: 100,\n      offset: 0,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const timeline = cleanList(data?.getInvoiceTimeLines?.data);\n\n  return timeline.length ? (\n    <S.PageCard>\n      <Stack gap={16} vertical fullWidth>\n        <TSpan font=\"heading-xs-bold\">\n          {t('noumena.invoices.timeline.heading')}\n        </TSpan>\n        <ActivityLog.List>\n          {timeline.map((item) => (\n            <TimelineListItem key={item._id} invoice={invoice} item={item} />\n          ))}\n        </ActivityLog.List>\n      </Stack>\n    </S.PageCard>\n  ) : null;\n};\n"],"names":["PageCard","styled","Card","InvoiceNumberLabel","TSpan","Separator","div","DetailsRow","breakpoints","MOBILE_MAX","AccountDetailsColumn","Stack","mediaSizes","TABLET_MAX","AccountDetailsValueText","attrs","colorToken","font","S$2","InvoiceDetailsSection","invoice","renderDetailsRow","label","value","icon","jsxs","S","jsx","paymentTermText","useMemo","paymentTerms","PaymentTerms","FullPaymentAdvance","MilestonePayment","InstallmentPayment","lateFeeText","InvoiceUtils","getLateFeeText","lateFeeType","lateFeeValue","currency","issueDate","format","Date","noumId","name","Avatar","profileImage","ChamberDefaultImage","AvatarSize","M","Table","table","TableBody","tbody","TableRow","tr","TableHead","thead","TableCell","td","footnoteTypography","footnote","$width","align","TableHeader","th","footnoteBold","SummaryText","ItemDetailsRowText","ItemDetailsRow","fullWidth","justify","padding","S$1","InvoiceItemsSummaryTable","data","isMobile","useBreakpoints","Fragment","map","item","description","quantity","unitPrice","isNumber","taxRate","getItemTotalValueWithCurrency","id","convertToCurrency","InvoiceSummaryTable","AccountDetails","contact","userId","profile","profilePictureThumbnail","displayName","ContactDetailsUtils","formatCompanyAndTitle","email","apartmentNo","street","city","state","zipCode","getCountryByCode","country","InvoiceSummary","FormSection","invoiceTo","invoiceFrom","summary","lineItems","length","cleanList","undefined","notes","PlanDetails","isNoumOwner","useInvoicePermissions","invoiceNumber","amount","duplicatedFromInvoiceNumber","Tag","dueDate","InvoiceStatusBadge","status","TimelineListItem","TimelineInfoWrapper","vertical","TimelineIconWrapper","TimelineContainer","DateText","ActivityText","BodyHighlighted","TranslatedBody","i18nKey","values","Trans","b","getStatusTranslationKey","InvoiceStatusEnum","Draft","Issued","Paid","Overdue","Cancelled","PartiallyPaid","WriteOff","createUsersMapEntry","_id","getTimelineItemByType","currentUserId","serviceProvider","buyer","t","isOpsUser","usersMap","isDoneByCurrentUser","oppositeUserId","userDisplayName","oppositeUserDisplayName","activityType","InvoiceActivityType","InvoiceCreated","duplicatedFrom","translation","key","toStatus","StatusChanged","buyerDisplayName","remainingAmount","user","Reminder","InvoiceSent","InvoiceEdited","PaymentFailed","DueDateChanged","TimelineUtils","useInvoiceTimeline","useTranslation","useAuth","AllCurrencyEnum","Usd","activity","ActivityLog","createdAt","InvoiceTimeline","useGetInvoiceTimeLinesQuery","variables","invoiceId","limit","offset","fetchPolicy","timeline","getInvoiceTimeLines"],"mappings":"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"}