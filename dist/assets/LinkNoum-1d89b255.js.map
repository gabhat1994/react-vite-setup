{"version":3,"file":"LinkNoum-1d89b255.js","sources":["../../src/screens/LinkNoum/helper.ts","../../src/features/noums/hooks/noums/linkNoums/useSelectNoumsToLink.tsx","../../src/screens/LinkNoum/components/modal/LinkCompletedModal.tsx","../../src/screens/LinkNoum/components/modal/LinkVisibilityModal.tsx","../../src/screens/LinkNoum/components/ResultContainer.tsx","../../src/screens/LinkNoum/components/NoumPreview.tsx","../../src/screens/LinkNoum/components/modal/LinkExistingNoumModal.tsx","../../src/screens/LinkNoum/components/modal/LinkConfirmationModal.tsx","../../src/screens/LinkNoum/components/LinkNoumActionFooter.tsx","../../src/screens/LinkNoum/components/LinkUnlinkNoumsSearch.tsx","../../src/screens/LinkNoum/components/SelectNoumOptionsToLink.tsx","../../src/screens/LinkNoum/index.tsx"],"sourcesContent":["import { cloneDeep, flatten, isArray } from 'lodash';\nimport { visibilityLevel } from './data';\nimport { type OptionType } from './types';\n\nconst updateSubNoums = (\n  foundOptionIdx: number,\n  inputOptions: OptionType[],\n  incomingChecked?: boolean,\n  linkedNoums?: OptionType[],\n) => {\n  const newOptionState = [...inputOptions];\n  let spliceItems = 1;\n  const subNoumIds: { [key: string]: string } = {};\n  const foundOption = newOptionState[foundOptionIdx];\n  const checked =\n    incomingChecked !== undefined ? incomingChecked : !foundOption.checked;\n  const parentNoum = {\n    ...foundOption,\n    checked,\n  };\n  let toBeAppended = [parentNoum];\n  spliceItems += linkedNoums?.length ?? 0;\n  if (linkedNoums && linkedNoums.length > 0) {\n    const newlyUpdated = linkedNoums.map((noum: OptionType) => {\n      subNoumIds[noum.spaceId] = noum.spaceId;\n      return {\n        ...noum,\n        checked,\n        disabled: checked,\n        isSubNoum: checked,\n      };\n    });\n    toBeAppended = [...toBeAppended, ...newlyUpdated];\n  }\n  const clonedOptionState = cloneDeep(newOptionState);\n  if (checked) {\n    clonedOptionState.splice(foundOptionIdx, 1, ...toBeAppended);\n  } else {\n    clonedOptionState.splice(foundOptionIdx, spliceItems, ...toBeAppended);\n  }\n\n  const newOptions = checked\n    ? clonedOptionState.filter(({ spaceId, isSubNoum }) => {\n        if (subNoumIds[spaceId] && !isSubNoum) {\n          return false;\n        }\n        return true;\n      })\n    : clonedOptionState;\n\n  return {\n    newState: newOptions,\n    toBeAppended,\n    subNoumIds,\n  };\n};\n\nexport const getUniqueItems = (input: OptionType[]) => [\n  ...new Map([...input].map((item) => [item.spaceId, item])).values(),\n];\n\nexport const getSubNoums = (globalChecked: { [key: string]: OptionType[] }) => {\n  const obj: { [key: string]: string } = {};\n  flatten(Object.values(globalChecked))\n    .filter(({ isSubNoum }) => isSubNoum)\n    .forEach(({ spaceId }) => {\n      obj[spaceId] = spaceId;\n    });\n  return obj;\n};\n\nexport const findParentNoum = (optionState: OptionType[], spaceId: string) => {\n  const foundOptionIdx = optionState.findIndex(\n    (item) => item.spaceId === spaceId && !item.isSubNoum,\n  );\n  const foundOption = optionState[foundOptionIdx];\n  return {\n    foundOption,\n    foundOptionIdx,\n  };\n};\n\nexport const getLinkedNoumsOfNoum = (response: OptionType[], spaceId: string) =>\n  response.filter(({ spaceId: subSpaceId }) => subSpaceId !== spaceId);\n\nexport const filterOutSubNoums = (\n  inputOptions: OptionType[],\n  subNoums: { [key: string]: string },\n) =>\n  inputOptions.filter(({ spaceId, isSubNoum }) => {\n    if (subNoums[spaceId] && !isSubNoum) {\n      return false;\n    }\n    return true;\n  });\n\nexport const reGroupNoums = (\n  inputOptions: OptionType[],\n  defaultOptionState: OptionType[],\n  verifyAndReturnInGlobalChecked: (spaceId: string) => {},\n) => {\n  const linkIdHash: { [key: string]: string } = {};\n  const reGrouped = inputOptions.map((noum) => {\n    const value = verifyAndReturnInGlobalChecked(noum.spaceId);\n    if (value) {\n      if (isArray(value)) {\n        const [firstNoum] = value;\n        const { linkId = '' } = firstNoum as OptionType;\n        linkIdHash[linkId] = linkId;\n        return value;\n      }\n      return value;\n    }\n    const foundOption = defaultOptionState.find(\n      (item) => item.spaceId === (value as OptionType).spaceId,\n    );\n    return foundOption || noum;\n  });\n  const filtered = reGrouped.filter((noum) => {\n    if (isArray(noum)) {\n      return true;\n    }\n    const { checked, linkId, isSubNoum } = noum as OptionType;\n    if (checked && linkId && isSubNoum) {\n      return !linkIdHash[linkId];\n    }\n    return true;\n  });\n  return getUniqueItems(flatten(filtered) as OptionType[]);\n};\n\nexport const calculateVisibilityLevel = (checkedOptions: OptionType[]) =>\n  Math.max(...checkedOptions.map((item) => visibilityLevel[item.visibility]));\n\nexport const visibilityDialogFlag = (\n  visibilityLevelSettings: {\n    Public: number;\n    Private: number;\n    Secret: number;\n  },\n  acceptedWarning: boolean,\n) => {\n  const distinctLevels = Object.values(visibilityLevelSettings).filter(\n    (count: number) => count >= 1,\n  ).length;\n  return distinctLevels > 1 && !acceptedWarning;\n};\n\nexport default updateSubNoums;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { flatten } from 'lodash';\nimport { useSearchParams } from 'react-router-dom';\nimport updateSubNoums, {\n  calculateVisibilityLevel,\n  findParentNoum,\n  getLinkedNoumsOfNoum,\n  getSubNoums,\n  getUniqueItems,\n} from '@/screens/LinkNoum/helper';\nimport { useToggle } from '@/hooks';\nimport {\n  type NoumVisibility,\n  type OptionType,\n  VisibiltiyType,\n} from '@/screens/LinkNoum/types';\n\nconst useSelectNoumsToLink = ({\n  getDefaultNoumLink,\n  fetchOwnedNoums,\n  getDefaultNoum,\n}: {\n  getDefaultNoumLink: (noumLinkId: string) => Promise<false | OptionType[]>;\n  fetchOwnedNoums: (search?: string) => Promise<void>;\n  getDefaultNoum: (noumId: string) => Promise<false | OptionType>;\n}) => {\n  const [searchParams] = useSearchParams();\n  const [searchStr, setSearchStr] = useState('');\n  const [selectedOption, setSelectedOption] = useState<OptionType>();\n  const [existingLinkedNoum, setExistingLinkedNoum] = useState<OptionType[]>();\n  const [optionState, setOptionState] = useState<OptionType[]>([]);\n  const [defaultOptionState, setDefaultOptionState] = useState<OptionType[]>(\n    [],\n  );\n  const [pageLoader, setPageLoader] = useState(false);\n  const [globalChecked, setGlobalChecked] = useState<{\n    [key: string]: OptionType[];\n  }>({});\n  const [visibilityLevelSettings, setVisibilityLevelSettings] = useState({\n    [VisibiltiyType.Public]: 0,\n    [VisibiltiyType.Private]: 0,\n    [VisibiltiyType.Secret]: 0,\n  });\n  const [acceptedWarning, setWarning] = useState(false);\n  const [showCompletedModal, toggleShowCompletedModal] = useToggle(false);\n  const [showConfirmationModal, setShowConfirmationModal] = useState(false);\n  const [showVisibilityModal, toggleShowVisibilityModal] = useState(false);\n  const [showLinkExistingNoumModal, toggleShowLinkExistingNoumModal] =\n    useState(false);\n\n  const previewOptions = useMemo(\n    () => flatten(Object.values(globalChecked)),\n    [globalChecked],\n  );\n\n  const checkedOptions = useMemo(\n    () => optionState.filter((item) => item.checked),\n    [optionState],\n  );\n\n  const parentNoumsLength = useMemo(() => {\n    const filtered = previewOptions.filter((option) => !option.isSubNoum);\n    return filtered.length;\n  }, [previewOptions]);\n\n  const subNoums = useMemo(() => getSubNoums(globalChecked), [globalChecked]);\n\n  const currentVisibilityLevel = useMemo(\n    () => calculateVisibilityLevel(previewOptions),\n    [previewOptions],\n  );\n\n  useEffect(() => {\n    setGlobalChecked({});\n  }, []);\n\n  useEffect(() => {\n    setWarning(false);\n  }, [checkedOptions]);\n\n  const handleSetPreSelectedNoum = useCallback(\n    async (paramId: string) => {\n      const response = await getDefaultNoum(paramId);\n      if (response) {\n        setGlobalChecked((prevState) => ({\n          ...prevState,\n          [searchParams.get('preselect') as string]: [response],\n        }));\n        setDefaultOptionState((dOS) => [response, ...dOS]);\n        const { visibility } = response;\n        updateVisibilitySettings(visibility, true);\n      }\n    },\n    [getDefaultNoum, searchParams],\n  );\n\n  const handleSetPreSelectedMultipleNoums = useCallback(\n    async (noumID: string) => {\n      const response = await getDefaultNoumLink(noumID);\n      if (response) {\n        setGlobalChecked((prevState) => ({\n          ...prevState,\n          [searchParams.get('linkID') as string]: response,\n        }));\n        setDefaultOptionState((dos) => [...response, ...dos]);\n        const { visibility } = response[0];\n        updateVisibilitySettings(visibility, true);\n      }\n    },\n    [getDefaultNoumLink, searchParams],\n  );\n\n  useEffect(\n    () => {\n      const paramId = searchParams.get('preselect');\n      if (paramId?.length) {\n        handleSetPreSelectedNoum(paramId);\n      }\n      const noumLinkID = searchParams.get('linkID');\n      if (noumLinkID) {\n        handleSetPreSelectedMultipleNoums(noumLinkID);\n      }\n    },\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [searchParams],\n  );\n\n  const verifyAndReturnInGlobalChecked = useCallback(\n    (spaceId: string) => {\n      const value =\n        globalChecked[spaceId] ||\n        previewOptions.find(({ spaceId: optionsId }) => optionsId === spaceId);\n      if (value) {\n        return value;\n      }\n      return false;\n    },\n    [globalChecked, previewOptions],\n  );\n\n  const updateVisibilitySettings = (\n    visibility: NoumVisibility,\n    increment = false,\n  ) => {\n    setVisibilityLevelSettings((prev) => ({\n      ...prev,\n      [visibility]: increment ? prev[visibility] + 1 : prev[visibility] - 1,\n    }));\n  };\n\n  const updateOption = useCallback(\n    async (newOption?: OptionType) => {\n      const { foundOption, foundOptionIdx } = findParentNoum(\n        optionState,\n        newOption?.spaceId || '',\n      );\n      if (foundOption) {\n        const {\n          checked,\n          spaceId,\n          linkId = '',\n          linked,\n          visibility,\n        } = foundOption;\n        let subNoumsLinked: OptionType[] = [];\n        if (linked > 0) {\n          setPageLoader(true);\n          const response = await getDefaultNoumLink(linkId);\n          if (response) {\n            const linkedNoumsOfNoum = getLinkedNoumsOfNoum(response, spaceId);\n            subNoumsLinked = linkedNoumsOfNoum;\n            setExistingLinkedNoum(linkedNoumsOfNoum);\n          }\n          setPageLoader(false);\n        }\n        const { newState, toBeAppended } = updateSubNoums(\n          foundOptionIdx,\n          optionState,\n          undefined,\n          subNoumsLinked.filter(\n            ({ spaceId: subSpaceId }) => subSpaceId !== spaceId,\n          ),\n        );\n        if (!checked) {\n          updateVisibilitySettings(visibility, true);\n          setGlobalChecked((prev) => ({\n            ...prev,\n            [spaceId]: toBeAppended,\n          }));\n        } else {\n          const currentGlobal = { ...globalChecked };\n          delete currentGlobal[spaceId];\n          setGlobalChecked(currentGlobal);\n          updateVisibilitySettings(visibility, false);\n        }\n        if (!checked) {\n          const newNoums = checked ? getUniqueItems(newState) : newState;\n          setOptionState(newNoums);\n        } else {\n          fetchOwnedNoums(searchStr);\n        }\n        setPageLoader(false);\n      }\n    },\n    [\n      fetchOwnedNoums,\n      getDefaultNoumLink,\n      globalChecked,\n      optionState,\n      searchStr,\n    ],\n  );\n\n  const fetchAndToggleExistingLinkModal = useCallback(\n    async (foundOption: OptionType) => {\n      toggleShowLinkExistingNoumModal(true);\n      const { linkId = '', spaceId } = foundOption;\n      const response = await getDefaultNoumLink(linkId);\n      if (response) {\n        const linkedNoumsOfNoum = getLinkedNoumsOfNoum(response, spaceId);\n        setExistingLinkedNoum(linkedNoumsOfNoum);\n        setPageLoader(false);\n      }\n      setSelectedOption(foundOption);\n    },\n    [getDefaultNoumLink, setExistingLinkedNoum, setSelectedOption],\n  );\n\n  const updateOptionState = useCallback(\n    (spaceId: string) => () => {\n      const { foundOption } = findParentNoum(optionState, spaceId);\n      if (foundOption) {\n        const { checked } = foundOption;\n        const optionsLength = previewOptions.length;\n        if (foundOption.linked && !checked && optionsLength) {\n          fetchAndToggleExistingLinkModal(foundOption);\n          return;\n        }\n        updateOption(foundOption);\n      }\n    },\n    [\n      fetchAndToggleExistingLinkModal,\n      optionState,\n      previewOptions.length,\n      updateOption,\n    ],\n  );\n\n  return {\n    globalChecked,\n    setGlobalChecked,\n    selectedOption,\n    setSelectedOption,\n    existingLinkedNoum,\n    setExistingLinkedNoum,\n    optionState,\n    setOptionState,\n    defaultOptionState,\n    setDefaultOptionState,\n    previewOptions,\n    subNoums,\n    parentNoumsLength,\n    checkedOptions,\n    currentVisibilityLevel,\n    setSearchStr,\n    searchStr,\n    searchParams,\n    updateOption,\n    verifyAndReturnInGlobalChecked,\n    updateOptionState,\n    showCompletedModal,\n    toggleShowCompletedModal,\n    showConfirmationModal,\n    setShowConfirmationModal,\n    showLinkExistingNoumModal,\n    toggleShowVisibilityModal,\n    toggleShowLinkExistingNoumModal,\n    showVisibilityModal,\n    visibilityLevelSettings,\n    setVisibilityLevelSettings,\n    acceptedWarning,\n    setWarning,\n    pageLoader,\n    setPageLoader,\n  };\n};\n\nexport default useSelectNoumsToLink;\n","import React, { useMemo } from 'react';\nimport { t } from 'i18next';\nimport { Modal, ModalBody, ModalFooter } from '@/components/ExtendedModal';\nimport { useWindowDimensions } from '@/hooks';\nimport { TSpan } from '@/components/Typography';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport { Stack } from '@/layout';\n\nexport const LinkNoumCompletedModal: React.FC<{\n  isOpen: boolean;\n  handleClose: () => void;\n  handleGoBack: () => void;\n}> = ({ isOpen, handleClose, handleGoBack }) => {\n  const { width } = useWindowDimensions();\n  const isMobile = useMemo(() => width < 768, [width]);\n\n  return (\n    <Modal\n      isFullScreen={false}\n      testId=\"chamber-broadcast-modal\"\n      open={isOpen}\n      onClose={handleClose}\n      style={{\n        width: isMobile ? 'auto' : '327px',\n      }}\n    >\n      <ModalBody\n        isFullScreen={false}\n        style={{\n          alignItems: 'center',\n        }}\n      >\n        <Stack>\n          <Icon name=\"link_noums_xxxxl\" size={144} />\n        </Stack>\n        <TSpan\n          textAlign=\"center\"\n          font=\"heading-m-bold\"\n          style={{\n            marginTop: 24,\n            marginBottom: 16,\n          }}\n          colorToken=\"--text-modal-header-neutral-default\"\n        >\n          {t('noumena.link_noums.completed', {\n            punctuation: '!',\n          })}\n        </TSpan>\n        <TSpan\n          textAlign=\"center\"\n          font=\"body-m\"\n          colorToken=\"--text-modal-neutral-default\"\n        >\n          {t('noumena.link_noums.success_message')}\n        </TSpan>\n      </ModalBody>\n      <ModalFooter isFullScreen={false} marginTop={28}>\n        <Button size=\"full\" primary onClick={handleGoBack}>\n          {t('noumena.close')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { t } from 'i18next';\nimport { Trans } from 'react-i18next';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\n\nexport const LinkVisibilityModal: React.FC<{\n  isOpen: boolean;\n  visibility: string;\n  handleAccept: () => void;\n  handleClose: () => void;\n}> = ({ isOpen, handleClose, visibility, handleAccept }) => (\n  <Modal\n    testId=\"link-visibility-modal\"\n    open={isOpen}\n    onClose={handleClose}\n    size={ModalSize.S}\n  >\n    <ModalHeader>\n      {t('noumena.link_noums.visibility_modal.heading')}\n    </ModalHeader>\n    <ModalBody\n      style={{\n        alignItems: 'center',\n      }}\n    >\n      <TSpan\n        colorToken=\"--text-modal-neutral-default\"\n        textAlign=\"center\"\n        font=\"body-l\"\n      >\n        <Trans\n          i18nKey=\"noumena.link_noums.visibility_modal.description\"\n          values={{ visibility }}\n          components={{\n            b: (\n              <TSpan\n                font=\"body-l\"\n                colorToken=\"--text-modal-neutral-highlighted\"\n                textAlign=\"center\"\n              />\n            ),\n          }}\n        />\n      </TSpan>\n    </ModalBody>\n    <ModalFooter marginTop={28} flexDirection=\"column\" gap={16}>\n      <Button size=\"full\" primary onClick={handleAccept}>\n        {t('noumena.continue')}\n      </Button>\n      <Button size=\"full\" onClick={handleClose}>\n        {t('noumena.cancel')}\n      </Button>\n    </ModalFooter>\n  </Modal>\n);\n","import { t } from 'i18next';\nimport { capitalize } from 'lodash';\nimport { TSpan } from '@/components/Typography';\nimport { Spinner } from '@/components/Spinner';\nimport { SpinnerContainer } from '@/common/globalStyles';\nimport { ResultContainer as ResultStack } from '../styles';\nimport { type ResultContainerProps } from './types';\n\nconst ResultContainer: React.FC<ResultContainerProps> = ({\n  connections,\n  followers,\n  selectedNoums,\n  loading,\n}) => (\n  <ResultStack>\n    <TSpan\n      colorToken=\"--text-tablecell-header-neutral-highlighted\"\n      font=\"body-l-bold\"\n    >\n      {t(`noumena.result`, {\n        punctuation: ':',\n      })}\n    </TSpan>\n    {loading ? (\n      <SpinnerContainer>\n        <Spinner />\n      </SpinnerContainer>\n    ) : (\n      <TSpan colorToken=\"--text-tablecell-body-neutral-default\" font=\"body-m\">\n        {`${selectedNoums} ${t(\n          'noumena.link_noums.linked_noums',\n        )} (${connections} ${capitalize(\n          t('noumena.connections'),\n        )}, ${followers} ${capitalize(t('noumena.followers'))})`}\n      </TSpan>\n    )}\n  </ResultStack>\n);\n\nexport default ResultContainer;\n","import { t } from 'i18next';\nimport React from 'react';\nimport { Icon } from '@/components/Icon';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { TSpan } from '@/components/Typography';\nimport {\n  PreviewContainer,\n  PreviewItem,\n  IconMainContainer,\n  IconDivider,\n  IconContainer,\n  NoumPreview as NoumPreviewContainer,\n} from '../styles';\nimport ResultContainer from './ResultContainer';\nimport { type NoumPreviewProps } from './types';\nimport NoumOptionTag from './NoumOptionTag';\n\nexport const NoumPreview: React.FC<NoumPreviewProps> = ({\n  options: previewOptions,\n  visibility,\n  connections,\n  followers,\n  loading,\n  isDesktop,\n  unLinkedSelected,\n}) => (\n  <NoumPreviewContainer>\n    {isDesktop ? (\n      <TSpan font=\"body-l-bold\" colorToken=\"--text-body-neutral-default\">\n        {t(`noumena.link_noums.preview`, {\n          punctuation: ':',\n        })}\n      </TSpan>\n    ) : null}\n    <PreviewContainer>\n      {previewOptions.map((item) => (\n        <React.Fragment key={item.key}>\n          <PreviewItem border=\"solid\">\n            <Avatar url={item.profileImage} />\n            <TSpan\n              singleLine\n              font=\"body-m-bold\"\n              style={{\n                marginLeft: '12px',\n                marginRight: 'auto',\n                width: 'calc(100% - 120px)',\n              }}\n              colorToken=\"--text-tablecell-header-neutral-highlighted\"\n            >\n              {item.name}\n            </TSpan>\n            <NoumOptionTag type={item.type} />\n          </PreviewItem>\n          <IconMainContainer>\n            <IconDivider />\n            <IconContainer>\n              <Icon\n                name=\"link_m\"\n                size={16}\n                color=\"--icon-card-neutral-default\"\n              />\n            </IconContainer>\n          </IconMainContainer>\n        </React.Fragment>\n      ))}\n      <PreviewItem border=\"dashed\">\n        <TSpan colorToken=\"--text-placeholder-neutral-default\" font=\"body-m\">\n          {previewOptions?.length > 1\n            ? t('noumena.link_noums.select_noums_optional')\n            : t('noumena.link_noums.select_noums')}\n        </TSpan>\n      </PreviewItem>\n    </PreviewContainer>\n    {unLinkedSelected && isDesktop ? (\n      <ResultContainer\n        visibility={visibility}\n        selectedNoums={previewOptions.length}\n        followers={followers}\n        connections={connections}\n        loading={loading}\n      />\n    ) : undefined}\n  </NoumPreviewContainer>\n);\n","import React, { useMemo } from 'react';\nimport { t } from 'i18next';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { useWindowDimensions } from '@/hooks';\nimport { breakpoints } from '@/constants/devices';\nimport { SpinnerContainer } from '@/common/globalStyles';\nimport { Spinner } from '@/components/Spinner';\nimport { type OptionType } from '../../types';\nimport LinkNoumOption from '../LinkNoumOption';\nimport { ExistingLinkContainer } from '../../styles';\nimport { type LinkedNoumOptionType } from '../types';\n\nexport const LinkExistingNoumModal: React.FC<{\n  isOpen: boolean;\n  selectedOption?: OptionType;\n  linkedNoums: OptionType[];\n  handleClose: () => void;\n  handleAccept: () => void;\n}> = ({ isOpen, handleClose, linkedNoums, selectedOption, handleAccept }) => {\n  const { width } = useWindowDimensions();\n  const isMobile = useMemo(() => width <= breakpoints.MOBILE_MAX, [width]);\n  return (\n    <Modal\n      isFullScreen={false}\n      testId=\"link-visibility-modal\"\n      open={isOpen}\n      onClose={handleClose}\n      style={{\n        width: !isMobile ? '450px' : 'auto',\n      }}\n    >\n      <ModalHeader isFullScreen={false}>\n        {t('noumena.link_noums.linked_noums_modal.heading')}\n      </ModalHeader>\n      <ModalBody\n        isFullScreen={false}\n        style={{\n          alignItems: 'center',\n        }}\n      >\n        {selectedOption ? (\n          <LinkNoumOption\n            iconSize={40}\n            item={selectedOption}\n            showBorder={false}\n            showChips\n            showDetail\n            style={{ alignSelf: 'stretch' }}\n          />\n        ) : undefined}\n        <TSpan\n          colorToken=\"--text-modal-neutral-default\"\n          textAlign=\"center\"\n          font=\"body-m\"\n        >\n          {t('noumena.link_noums.linked_noums_modal.description')}\n        </TSpan>\n        {linkedNoums.length ? (\n          <ExistingLinkContainer>\n            {linkedNoums.map((item, idx) => (\n              <LinkNoumOption\n                showCheckBox={false}\n                key={item.spaceId}\n                item={item as LinkedNoumOptionType}\n                showDetail={false}\n                showBorder={idx < linkedNoums.length - 1}\n              />\n            ))}\n          </ExistingLinkContainer>\n        ) : (\n          <SpinnerContainer>\n            <Spinner />\n          </SpinnerContainer>\n        )}\n      </ModalBody>\n      <ModalFooter\n        isFullScreen={false}\n        marginTop={24}\n        gap={16}\n        flexDirection={isMobile ? 'column' : 'row-reverse'}\n      >\n        <Button size=\"full\" primary onClick={handleAccept}>\n          {t('noumena.continue')}\n        </Button>\n        <Button size=\"full\" onClick={handleClose}>\n          {t('noumena.cancel')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { t } from 'i18next';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\n\nexport const LinkConfirmationModal: React.FC<{\n  isOpen: boolean;\n  noumsCount: number;\n  handleConfirm: () => void;\n  handleClose: () => void;\n  loading: boolean;\n}> = ({ isOpen, handleClose, noumsCount, handleConfirm, loading }) => (\n  <Modal\n    testId=\"link-confirmation-modal\"\n    open={isOpen}\n    onClose={handleClose}\n    size={ModalSize.S}\n  >\n    <ModalHeader>{t('noumena.noum_link.link_noums')}</ModalHeader>\n    <ModalBody\n      style={{\n        alignItems: 'center',\n      }}\n    >\n      <TSpan\n        colorToken=\"--text-modal-neutral-default\"\n        textAlign=\"center\"\n        font=\"body-l\"\n      >\n        {t('noumena.link_noums.confirmation_modal.description')}\n      </TSpan>\n    </ModalBody>\n    <ModalFooter marginTop={28} flexDirection=\"column\" gap={16}>\n      <Button size=\"full\" primary onClick={handleConfirm} loading={loading}>\n        {t('noumena.link_noums.confirmation_modal.button', { noumsCount })}\n      </Button>\n      <Button size=\"full\" onClick={handleClose}>\n        {t('noumena.cancel')}\n      </Button>\n    </ModalFooter>\n  </Modal>\n);\n","import React from 'react';\nimport { t } from 'i18next';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { type LinkNoumActionFooterProps } from './types';\nimport { ButtonWrapper, ButtonWrapper1, ButtonWrapper2 } from './styles';\n\nconst LinkNoumActionFooter: React.FC<LinkNoumActionFooterProps> = ({\n  isDesktop,\n  isConfirmScreen,\n  setConfirmScreen,\n  loading,\n  checkedOptions,\n  handleConfirmLinkNoums,\n  handleGoBack,\n  handleLinkNoums,\n  parentNoums,\n  defaultOptions,\n}) => {\n  const defaultLength = defaultOptions.length;\n  const disableLinkNoumButton =\n    (defaultLength === 0\n      ? parentNoums <= 1\n      : parentNoums - defaultLength < 1) || loading;\n\n  return !isDesktop && isConfirmScreen ? (\n    <ButtonWrapper>\n      <ButtonWrapper1>\n        <Button\n          size=\"full\"\n          leftIcon={\n            <Icon\n              name=\"arrow_left_m\"\n              size={16}\n              color=\"--icon-button-neutral-default\"\n            />\n          }\n          onClick={() => {\n            setConfirmScreen(false);\n          }}\n          tertiary\n          disabled={loading}\n        >\n          {t('noumena.back.text')}\n        </Button>\n      </ButtonWrapper1>\n      <ButtonWrapper2>\n        <Button\n          size=\"full\"\n          primary\n          loading={loading}\n          onClick={handleConfirmLinkNoums}\n          disabled={loading}\n        >\n          {t(`noumena.link_noums.footer.button.confirm`, {\n            noumsCount: checkedOptions.length,\n          })}\n        </Button>\n      </ButtonWrapper2>\n    </ButtonWrapper>\n  ) : (\n    <ButtonWrapper>\n      <ButtonWrapper1>\n        <Button size=\"full\" tertiary onClick={handleGoBack} disabled={loading}>\n          {t('noumena.cancel')}\n        </Button>\n      </ButtonWrapper1>\n      <ButtonWrapper2>\n        <Button\n          size=\"full\"\n          primary\n          disabled={disableLinkNoumButton}\n          onClick={handleLinkNoums}\n        >\n          {t(`noumena.link_noums.link_noums`, {\n            linkNo: checkedOptions.length,\n          })}\n        </Button>\n      </ButtonWrapper2>\n    </ButtonWrapper>\n  );\n};\n\nexport default LinkNoumActionFooter;\n","import { useEffect, useState } from 'react';\nimport useDebounce from '@/hooks/useDebounce';\nimport { Icon } from '@/components/Icon';\nimport { SearchField, SearchWrapper } from './styles';\n\nconst DEFAULT_DEBOUNCE_DELAY = 1000;\n\nexport const LinkUnlinkNoumsSearch: React.FC<{\n  onSearchChange: (value: string) => void;\n  searchString: string;\n}> = ({ onSearchChange, searchString }) => {\n  const [search, setSearch] = useState(searchString ?? '');\n\n  const debouncedSearch = useDebounce<string>(\n    search ?? '',\n    DEFAULT_DEBOUNCE_DELAY,\n  );\n\n  useEffect(() => {\n    onSearchChange(debouncedSearch);\n  }, [debouncedSearch, onSearchChange]);\n\n  return (\n    <SearchWrapper>\n      <SearchField\n        inputSize=\"small\"\n        placeholder=\"Search for a Noum\"\n        leftIcon={\n          <Icon\n            name=\"search_m\"\n            size={24}\n            color=\"--icon-input-neutral-default\"\n          />\n        }\n        rightIcon={\n          search ? (\n            <Icon\n              name=\"clear_m\"\n              size={24}\n              color=\"--icon-input-brand-primary-default\"\n              onClick={() => setSearch('')}\n            />\n          ) : null\n        }\n        rightIconColor=\"--icon-input-brand-primary-default\"\n        value={search || ''}\n        onChange={(e: React.FormEvent<HTMLInputElement>) =>\n          setSearch(e.currentTarget.value)\n        }\n        data-testid=\"link-unlink-noums-search\"\n      />\n    </SearchWrapper>\n  );\n};\n","import { SpinnerContainer } from '@/common/globalStyles';\nimport { Spinner } from '@/components/Spinner';\nimport { Infinite } from '@/components/Infinite';\nimport {\n  NoumContainer,\n  OptionContainer,\n  SearchContainer,\n  SelectNoumWrapper,\n} from '../styles';\nimport { LinkUnlinkNoumsSearch } from './LinkUnlinkNoumsSearch';\nimport { type OptionType } from '../types';\nimport LinkNoumOption from './LinkNoumOption';\nimport { CustomStyledSpinnerContainer, StyledInner } from './styles';\nimport NoSearchResultsForNoums from './NoSearchResultsForNoums';\n\ninterface SelectNoumOptionsToLinkProps {\n  searchStr: string;\n  loading: boolean;\n  pageLoader: boolean;\n  infiniteState: 'loading' | 'hasNextPage' | 'end' | 'end-with-force';\n  onSearchChange: (arg: string) => void;\n  optionState: OptionType[];\n  updateOptionState: (spaceId: string) => () => void;\n  fetchMore: (search?: string) => Promise<void>;\n}\n\nexport const SelectNoumOptionsToLink: React.FC<\n  SelectNoumOptionsToLinkProps\n> = ({\n  searchStr,\n  infiniteState,\n  onSearchChange,\n  optionState,\n  updateOptionState,\n  fetchMore,\n  pageLoader,\n  loading,\n}) => (\n  <SelectNoumWrapper>\n    <SearchContainer>\n      <LinkUnlinkNoumsSearch\n        searchString={searchStr}\n        onSearchChange={onSearchChange}\n      />\n    </SearchContainer>\n    <NoumContainer>\n      {loading ? (\n        <SpinnerContainer>\n          <Spinner />\n        </SpinnerContainer>\n      ) : (\n        <OptionContainer data-testid=\"link-noums-container\">\n          <Infinite\n            onFetchMore={() => {\n              fetchMore(searchStr);\n            }}\n            status={infiniteState}\n            scrollbarWidth={0}\n            paddingBottom=\"75px\"\n            width=\"100%\"\n          >\n            {pageLoader ? (\n              <StyledInner overlayVariant=\"light\">\n                <CustomStyledSpinnerContainer>\n                  <Spinner />\n                </CustomStyledSpinnerContainer>\n              </StyledInner>\n            ) : undefined}\n            {optionState.length > 0 ? (\n              optionState.map((item, idx) => (\n                <LinkNoumOption\n                  key={item.key}\n                  item={item}\n                  showDetail\n                  showExtraDetail\n                  showBorder={idx < optionState.length - 1}\n                  showPadding={true}\n                  updateOptionState={\n                    !item.disabled ? updateOptionState(item.spaceId) : undefined\n                  }\n                />\n              ))\n            ) : (\n              <NoSearchResultsForNoums />\n            )}\n          </Infinite>\n        </OptionContainer>\n      )}\n    </NoumContainer>\n  </SelectNoumWrapper>\n);\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { t } from 'i18next';\nimport { Header } from '@/components/Header';\nimport { TSpan } from '@/components/Typography';\nimport { NoumProvider } from '@/providers';\nimport { MainHeader } from '@/layout/MainHeader';\nimport { UserUtil } from '@/utils/user';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useWindowDimensions } from '@/hooks';\nimport useDebounce from '@/hooks/useDebounce';\nimport { breakpoints } from '@/constants/devices';\nimport ROUTES from '@/constants/routes';\nimport {\n  useLinkNoums,\n  useSelectNoumsToLink,\n} from '@/features/noums/hooks/noums';\nimport {\n  ActionWrapper,\n  Container,\n  LinkNoumDescription,\n  MainContainer,\n  NoumMainContainer,\n  TitleWrapper,\n} from './styles';\nimport { LinkNoumCompletedModal } from './components/modal/LinkCompletedModal';\nimport { LinkVisibilityModal } from './components/modal/LinkVisibilityModal';\nimport { type OptionType } from './types';\nimport { visibilityLevelReverse } from './data';\nimport { NoumPreview } from './components/NoumPreview';\nimport ResultContainer from './components/ResultContainer';\nimport { LinkExistingNoumModal } from './components/modal/LinkExistingNoumModal';\nimport { LinkConfirmationModal } from './components/modal/LinkConfirmationModal';\nimport LinkNoumActionFooter from './components/LinkNoumActionFooter';\nimport {\n  filterOutSubNoums,\n  getUniqueItems,\n  reGroupNoums,\n  visibilityDialogFlag,\n} from './helper';\nimport { SelectNoumOptionsToLink } from './components/SelectNoumOptionsToLink';\n\nconst LinkNoums = () => {\n  const { user } = useAuth();\n  const navigate = useNavigate();\n  const { width } = useWindowDimensions();\n  const isDesktop = useMemo(() => width >= breakpoints.LAPTOP, [width]);\n  const isMobile = useMemo(() => width <= breakpoints.MOBILE_MAX, [width]);\n  const [isConfirmScreen, setConfirmScreen] = useState(false);\n  const [followersCount, setFollowersCount] = useState(0);\n  const [connectionsCount, setConnectionsCount] = useState(0);\n  const {\n    noums,\n    fetchOwnedNoums,\n    fetchMore,\n    nextNoums,\n    infiniteState,\n    getDefaultNoum,\n    linkNoumsMutation,\n    preCalculateNoumLinkData,\n    linkedNoumsCalculatedData,\n    linkedNoumsCalculatedLoading,\n    mutationLoading,\n    getDefaultNoumLink,\n    loading,\n  } = useLinkNoums(true);\n\n  const {\n    searchStr,\n    setSearchStr,\n    selectedOption,\n    existingLinkedNoum,\n    optionState,\n    setOptionState,\n    defaultOptionState,\n    previewOptions,\n    subNoums,\n    parentNoumsLength,\n    checkedOptions,\n    currentVisibilityLevel,\n    updateOption,\n    verifyAndReturnInGlobalChecked,\n    updateOptionState,\n    showCompletedModal,\n    toggleShowCompletedModal,\n    showConfirmationModal,\n    setShowConfirmationModal,\n    showLinkExistingNoumModal,\n    toggleShowVisibilityModal,\n    toggleShowLinkExistingNoumModal,\n    showVisibilityModal,\n    visibilityLevelSettings,\n    setWarning,\n    acceptedWarning,\n    pageLoader,\n  } = useSelectNoumsToLink({\n    getDefaultNoumLink,\n    fetchOwnedNoums,\n    getDefaultNoum,\n  });\n\n  useEffect(() => {\n    const groupedNoums = reGroupNoums(\n      getUniqueItems([...noums]),\n      defaultOptionState,\n      verifyAndReturnInGlobalChecked,\n    );\n    const newNoums = filterOutSubNoums(groupedNoums, subNoums);\n    setOptionState(newNoums);\n    /* no need to iterate again when globalChecked is updated\n      which will reset the noums. */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [noums, defaultOptionState]);\n\n  useEffect(() => {\n    const groupedNoums = reGroupNoums(\n      nextNoums,\n      defaultOptionState,\n      verifyAndReturnInGlobalChecked,\n    );\n    const newNoums = filterOutSubNoums(groupedNoums, subNoums);\n    setOptionState((prevData) => getUniqueItems([...prevData, ...newNoums]));\n    /* no need to iterate when subNoums are changed */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [nextNoums]);\n\n  const onSearchChange = (arg: string) => {\n    setSearchStr(arg);\n  };\n\n  const handleGoBack = () => {\n    const url = window.location.href;\n    if (url.includes('preselect')) {\n      const searchParams = new URLSearchParams(window.location.search);\n      const spaceId = searchParams.get('preselect');\n      navigate(`/noum/${spaceId}`);\n    } else {\n      navigate(ROUTES.NOUMS);\n    }\n  };\n\n  const debouncedOptions = useDebounce(previewOptions, 1000);\n\n  useEffect(() => {\n    if (debouncedOptions.length >= 2) {\n      preCalculateNoumLinkData({\n        variables: {\n          linkedNoumIDs: debouncedOptions.map((option) => option.spaceId),\n        },\n      });\n    }\n  }, [debouncedOptions, preCalculateNoumLinkData]);\n\n  useEffect(() => {\n    setConfirmScreen(false);\n  }, [checkedOptions]);\n\n  useEffect(() => {\n    const followers =\n      linkedNoumsCalculatedData?.preCalculateNoumLinkData?.followersCount;\n\n    const connections =\n      linkedNoumsCalculatedData?.preCalculateNoumLinkData?.connectionsCount;\n    setFollowersCount(followers ?? 0);\n    setConnectionsCount(connections ?? 0);\n  }, [linkedNoumsCalculatedData]);\n\n  useEffect(() => {\n    fetchOwnedNoums(searchStr);\n  }, [searchStr, fetchOwnedNoums]);\n\n  const handleAcceptVisibilitySettings = useCallback(() => {\n    toggleShowVisibilityModal(false);\n    setWarning(true);\n    if (isDesktop) {\n      setShowConfirmationModal(true);\n    } else {\n      setConfirmScreen(true);\n    }\n  }, [\n    isDesktop,\n    setShowConfirmationModal,\n    setWarning,\n    toggleShowVisibilityModal,\n  ]);\n\n  const handleAcceptExtraLinking = () => {\n    updateOption(selectedOption);\n    toggleShowLinkExistingNoumModal(false);\n  };\n\n  const handleLinkNoums = useCallback(() => {\n    const showVisibilityDialog = visibilityDialogFlag(\n      visibilityLevelSettings,\n      acceptedWarning,\n    );\n    if (showVisibilityDialog) {\n      toggleShowVisibilityModal(!showVisibilityModal);\n    } else {\n      handleAcceptVisibilitySettings();\n    }\n  }, [\n    acceptedWarning,\n    handleAcceptVisibilitySettings,\n    showVisibilityModal,\n    toggleShowVisibilityModal,\n    visibilityLevelSettings,\n  ]);\n\n  const handleConfirmLinkNoums = useCallback(async () => {\n    await linkNoumsMutation({\n      variables: {\n        linkedNoumIDs: previewOptions.map((option) => option.spaceId),\n      },\n      onCompleted: (response) => {\n        if (response.linkNoums?.status) {\n          toggleShowCompletedModal();\n          setShowConfirmationModal(false);\n          setConfirmScreen(false);\n        }\n      },\n    });\n  }, [\n    linkNoumsMutation,\n    previewOptions,\n    toggleShowCompletedModal,\n    setShowConfirmationModal,\n  ]);\n\n  const enablePreview =\n    (isConfirmScreen || isDesktop) && previewOptions.length > 0;\n\n  const unLinkedSelected = useMemo(\n    () =>\n      previewOptions.length - defaultOptionState.length > 0 &&\n      parentNoumsLength > 1,\n    [defaultOptionState.length, parentNoumsLength, previewOptions.length],\n  );\n\n  const enableResult = useMemo(\n    () => !isDesktop && isConfirmScreen && unLinkedSelected,\n    [isConfirmScreen, isDesktop, unLinkedSelected],\n  );\n\n  const enableNoumContainer = !isConfirmScreen || isDesktop;\n\n  return (\n    <NoumProvider>\n      <MainContainer>\n        <Header isBorderRadius={false}>\n          <MainHeader\n            avatar={UserUtil.getProfilePicture(user) || undefined}\n            userName={user?.firstName || undefined}\n          />\n        </Header>\n        <Container>\n          <TitleWrapper>\n            {!isMobile && (\n              <TSpan\n                style={{\n                  marginBottom: '12px',\n                }}\n                font=\"body-xl-bold\"\n                colorToken=\"--text-card-header-neutral-default\"\n              >\n                {t(`noumena.link_noums.link_noums`, {\n                  linkNo: '',\n                })}\n              </TSpan>\n            )}\n            <LinkNoumDescription colorToken=\"--text-card-header-neutral-highlighted\">\n              {isConfirmScreen\n                ? t('noumena.link_noums.confirmation.description_header')\n                : t('noumena.link_noums.description_header')}\n            </LinkNoumDescription>\n          </TitleWrapper>\n          <NoumMainContainer>\n            {enableNoumContainer && (\n              <SelectNoumOptionsToLink\n                loading={loading}\n                infiniteState={infiniteState}\n                pageLoader={pageLoader}\n                optionState={optionState}\n                searchStr={searchStr}\n                updateOptionState={updateOptionState}\n                onSearchChange={onSearchChange}\n                fetchMore={fetchMore}\n              />\n            )}\n            {enablePreview ? (\n              <NoumPreview\n                visibility={visibilityLevelReverse[currentVisibilityLevel]}\n                options={previewOptions}\n                followers={followersCount}\n                connections={connectionsCount}\n                loading={linkedNoumsCalculatedLoading}\n                isDesktop={isDesktop}\n                unLinkedSelected={unLinkedSelected}\n              />\n            ) : null}\n          </NoumMainContainer>\n          <ActionWrapper>\n            {enableResult ? (\n              <ResultContainer\n                visibility={visibilityLevelReverse[currentVisibilityLevel]}\n                selectedNoums={checkedOptions.length}\n                followers={followersCount}\n                connections={connectionsCount}\n                loading={linkedNoumsCalculatedLoading}\n              />\n            ) : null}\n            <LinkNoumActionFooter\n              defaultOptions={defaultOptionState}\n              checkedOptions={previewOptions}\n              handleConfirmLinkNoums={handleConfirmLinkNoums}\n              handleGoBack={handleGoBack}\n              handleLinkNoums={handleLinkNoums}\n              loading={mutationLoading}\n              isConfirmScreen={isConfirmScreen}\n              isDesktop={isDesktop}\n              parentNoums={parentNoumsLength}\n              setConfirmScreen={setConfirmScreen}\n            />\n          </ActionWrapper>\n        </Container>\n      </MainContainer>\n      <LinkNoumCompletedModal\n        handleClose={handleGoBack}\n        handleGoBack={handleGoBack}\n        isOpen={showCompletedModal}\n      />\n      <LinkVisibilityModal\n        visibility={visibilityLevelReverse[currentVisibilityLevel]}\n        handleAccept={handleAcceptVisibilitySettings}\n        isOpen={showVisibilityModal}\n        handleClose={() => {\n          toggleShowVisibilityModal(!showVisibilityModal);\n        }}\n      />\n      <LinkExistingNoumModal\n        handleAccept={handleAcceptExtraLinking}\n        linkedNoums={existingLinkedNoum || ([] as OptionType[])}\n        selectedOption={selectedOption}\n        isOpen={showLinkExistingNoumModal}\n        handleClose={() => {\n          toggleShowLinkExistingNoumModal(false);\n        }}\n      />\n      <LinkConfirmationModal\n        loading={mutationLoading}\n        isOpen={showConfirmationModal}\n        handleConfirm={handleConfirmLinkNoums}\n        handleClose={() => {\n          setShowConfirmationModal(false);\n        }}\n        noumsCount={previewOptions.length}\n      />\n    </NoumProvider>\n  );\n};\n\nexport default LinkNoums;\n"],"names":["updateSubNoums","foundOptionIdx","inputOptions","incomingChecked","linkedNoums","newOptionState","spliceItems","subNoumIds","foundOption","checked","undefined","toBeAppended","length","newlyUpdated","map","noum","spaceId","disabled","isSubNoum","clonedOptionState","cloneDeep","splice","newState","filter","getUniqueItems","input","Map","item","values","getSubNoums","globalChecked","obj","flatten","Object","forEach","findParentNoum","optionState","findIndex","getLinkedNoumsOfNoum","response","subSpaceId","filterOutSubNoums","subNoums","reGroupNoums","defaultOptionState","verifyAndReturnInGlobalChecked","linkIdHash","filtered","value","isArray","firstNoum","linkId","find","calculateVisibilityLevel","checkedOptions","Math","max","visibilityLevel","visibility","visibilityDialogFlag","visibilityLevelSettings","acceptedWarning","count","useSelectNoumsToLink","getDefaultNoumLink","fetchOwnedNoums","getDefaultNoum","searchParams","useSearchParams","searchStr","setSearchStr","useState","selectedOption","setSelectedOption","existingLinkedNoum","setExistingLinkedNoum","setOptionState","setDefaultOptionState","pageLoader","setPageLoader","setGlobalChecked","setVisibilityLevelSettings","VisibiltiyType","Public","Private","Secret","setWarning","showCompletedModal","toggleShowCompletedModal","useToggle","showConfirmationModal","setShowConfirmationModal","showVisibilityModal","toggleShowVisibilityModal","showLinkExistingNoumModal","toggleShowLinkExistingNoumModal","previewOptions","useMemo","parentNoumsLength","option","currentVisibilityLevel","useEffect","handleSetPreSelectedNoum","useCallback","paramId","prevState","get","dOS","updateVisibilitySettings","handleSetPreSelectedMultipleNoums","noumID","dos","noumLinkID","optionsId","increment","prev","updateOption","newOption","linked","subNoumsLinked","linkedNoumsOfNoum","currentGlobal","newNoums","fetchAndToggleExistingLinkModal","updateOptionState","optionsLength","LinkNoumCompletedModal","isOpen","handleClose","handleGoBack","width","useWindowDimensions","isMobile","jsxs","Modal","ModalBody","alignItems","jsx","Stack","Icon","TSpan","marginTop","marginBottom","t","punctuation","ModalFooter","Button","LinkVisibilityModal","handleAccept","ModalSize","S","ModalHeader","Trans","b","ResultContainer","connections","followers","selectedNoums","loading","ResultStack","SpinnerContainer","Spinner","capitalize","NoumPreview","options","isDesktop","unLinkedSelected","NoumPreviewContainer","PreviewContainer","React","PreviewItem","Avatar","profileImage","marginLeft","marginRight","name","NoumOptionTag","type","IconMainContainer","IconDivider","IconContainer","key","LinkExistingNoumModal","breakpoints","MOBILE_MAX","LinkNoumOption","alignSelf","ExistingLinkContainer","idx","LinkConfirmationModal","noumsCount","handleConfirm","LinkNoumActionFooter","isConfirmScreen","setConfirmScreen","handleConfirmLinkNoums","handleLinkNoums","parentNoums","defaultOptions","defaultLength","disableLinkNoumButton","ButtonWrapper","ButtonWrapper1","ButtonWrapper2","linkNo","DEFAULT_DEBOUNCE_DELAY","LinkUnlinkNoumsSearch","onSearchChange","searchString","search","setSearch","debouncedSearch","useDebounce","SearchWrapper","SearchField","e","currentTarget","SelectNoumOptionsToLink","infiniteState","fetchMore","SelectNoumWrapper","SearchContainer","NoumContainer","OptionContainer","Infinite","StyledInner","CustomStyledSpinnerContainer","NoSearchResultsForNoums","LinkNoums","user","useAuth","navigate","useNavigate","LAPTOP","followersCount","setFollowersCount","connectionsCount","setConnectionsCount","noums","nextNoums","linkNoumsMutation","preCalculateNoumLinkData","linkedNoumsCalculatedData","linkedNoumsCalculatedLoading","mutationLoading","useLinkNoums","groupedNoums","prevData","arg","url","window","location","href","includes","URLSearchParams","ROUTES","NOUMS","debouncedOptions","variables","linkedNoumIDs","handleAcceptVisibilitySettings","handleAcceptExtraLinking","onCompleted","linkNoums","status","enablePreview","enableResult","enableNoumContainer","NoumProvider","MainContainer","Header","MainHeader","UserUtil","getProfilePicture","firstName","Container","TitleWrapper","LinkNoumDescription","NoumMainContainer","visibilityLevelReverse","ActionWrapper","LinkNoum"],"mappings":"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"}