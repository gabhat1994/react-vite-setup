{"version":3,"file":"helper-53a5becb.js","sources":["../../src/apollo/graphql/mutations/createPlaidToken.generated.tsx","../../src/screens/Plan/helper.ts"],"sourcesContent":["/* eslint-disable */\nimport * as Types from '../../generated/types';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions = {} as const;\nexport type CreatePlaidLinkMutationVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type CreatePlaidLinkMutation = { __typename?: 'Mutation', createPlaidLink?: { __typename?: 'CreatePlaidLinkOutput', link_token: string } | null };\n\n\nexport const CreatePlaidLinkDocument = gql`\n    mutation createPlaidLink {\n  createPlaidLink {\n    link_token\n  }\n}\n    `;\nexport type CreatePlaidLinkMutationFn = Apollo.MutationFunction<CreatePlaidLinkMutation, CreatePlaidLinkMutationVariables>;\n\n/**\n * __useCreatePlaidLinkMutation__\n *\n * To run a mutation, you first call `useCreatePlaidLinkMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreatePlaidLinkMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createPlaidLinkMutation, { data, loading, error }] = useCreatePlaidLinkMutation({\n *   variables: {\n *   },\n * });\n */\nexport function useCreatePlaidLinkMutation(baseOptions?: Apollo.MutationHookOptions<CreatePlaidLinkMutation, CreatePlaidLinkMutationVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useMutation<CreatePlaidLinkMutation, CreatePlaidLinkMutationVariables>(CreatePlaidLinkDocument, options);\n      }\nexport type CreatePlaidLinkMutationHookResult = ReturnType<typeof useCreatePlaidLinkMutation>;\nexport type CreatePlaidLinkMutationResult = Apollo.MutationResult<CreatePlaidLinkMutation>;\nexport type CreatePlaidLinkMutationOptions = Apollo.BaseMutationOptions<CreatePlaidLinkMutation, CreatePlaidLinkMutationVariables>;","import { add, differenceInCalendarDays } from 'date-fns';\nimport { t } from 'i18next';\nimport { type PlanData } from './types';\n\nfunction DateFormatter(date: string | null | undefined) {\n  if (!date) return '';\n  if (date) {\n    const res = date.split('T')[0];\n    const dateValue = res.split('-')[2];\n    const monthValue = new Date(res).toLocaleString('en-us', {\n      month: 'short',\n      year: 'numeric',\n    });\n    return `${dateValue} ${monthValue}`;\n  }\n}\n\nconst countDaysToExpire = (date: string | null | undefined): number | null => {\n  if (date) {\n    const now = new Date();\n    const diff = differenceInCalendarDays(new Date(date), now);\n    return diff;\n  }\n  return null;\n};\n\nfunction DateAfterOneYearFromGivenDate(date: string | null | undefined) {\n  if (date) {\n    const formattedDate = date!.split('T')[0];\n    const month = parseInt(formattedDate.split('-')[1], 10) - 1;\n    const year = parseInt(formattedDate.split('-')[0], 10);\n    const day = parseInt(formattedDate.split('-')[2], 10);\n    const res = add(new Date(year, month, day), {\n      days: 365,\n    })\n      .toString()\n      .split(' ');\n    return `${res[2]} ${res[1]} ${res[3]}`;\n  }\n  return '';\n}\n\nfunction DateAfterOneYear() {\n  const now = new Date();\n  const year = now.getFullYear() + 1;\n  const month = now.getMonth();\n  const day = now.getDate();\n  return `${day} ${MonthList[month]} ${year}`;\n}\n\nexport const MonthList: string[] = [\n  t(`noumena.viewTransactions.January`),\n  t(`noumena.viewTransactions.February`),\n  t(`noumena.viewTransactions.March`),\n  t(`noumena.viewTransactions.April`),\n  t(`noumena.viewTransactions.May`),\n  t(`noumena.viewTransactions.June`),\n  t(`noumena.viewTransactions.July`),\n  t(`noumena.viewTransactions.August`),\n  t(`noumena.viewTransactions.September`),\n  t(`noumena.viewTransactions.October`),\n  t(`noumena.viewTransactions.November`),\n  t(`noumena.viewTransactions.December`),\n];\n\nconst computeNoumRenewalPlanUsingPayAsYouGo = (\n  dataset: (PlanData | null | undefined)[],\n) => {\n  const resultArray: (PlanData | null | undefined)[] = [];\n  for (let i = 0; i < dataset.length; i += 1) {\n    const obj = dataset[i];\n    if (\n      obj?.max_count_noum_renewal === 1 &&\n      obj?.active_count_noum_renewal === 0\n    ) {\n      resultArray.push(obj);\n    }\n  }\n  return resultArray;\n};\n\nconst computeNoumSetupPlanUsingPayAsYouGo = (\n  dataset: (PlanData | null | undefined)[],\n) => {\n  const resultArray: (PlanData | null | undefined)[] = [];\n  for (let i = 0; i < dataset.length; i += 1) {\n    const obj = dataset[i];\n    if (obj?.max_count_noum_setup === 1 && obj?.active_count_noum_setup === 0) {\n      resultArray.push(obj);\n    }\n  }\n  return resultArray;\n};\nexport {\n  DateFormatter,\n  countDaysToExpire,\n  DateAfterOneYear,\n  computeNoumRenewalPlanUsingPayAsYouGo,\n  computeNoumSetupPlanUsingPayAsYouGo,\n  DateAfterOneYearFromGivenDate,\n};\n"],"names":["defaultOptions","CreatePlaidLinkDocument","gql","useCreatePlaidLinkMutation","baseOptions","options","Apollo","DateFormatter","date","res","split","dateValue","monthValue","Date","toLocaleString","month","year","countDaysToExpire","now","diff","differenceInCalendarDays","DateAfterOneYearFromGivenDate","formattedDate","parseInt","day","add","days","toString","DateAfterOneYear","getFullYear","getMonth","getDate","MonthList","t","computeNoumRenewalPlanUsingPayAsYouGo","dataset","resultArray","i","length","obj","max_count_noum_renewal","active_count_noum_renewal","push","computeNoumSetupPlanUsingPayAsYouGo","max_count_noum_setup","active_count_noum_setup"],"mappings":"kEAKA,MAAMA,EAAiB,CAAA,EAOVC,EAA0BC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,MAyBhC,SAASC,EAA2BC,EAAqG,CACxI,MAAMC,EAAU,CAAC,GAAGL,EAAgB,GAAGI,CAAAA,EAChCE,OAAAA,EAA8EL,EAAyBI,CAAO,CACvH,CCpCN,SAASE,EAAcC,EAAiC,CACtD,GAAI,CAACA,EAAa,MAAA,GAClB,GAAIA,EAAM,CACR,MAAMC,EAAMD,EAAKE,MAAM,GAAG,EAAE,CAAC,EACvBC,EAAYF,EAAIC,MAAM,GAAG,EAAE,CAAC,EAC5BE,EAAa,IAAIC,KAAKJ,CAAG,EAAEK,eAAe,QAAS,CACvDC,MAAO,QACPC,KAAM,SAAA,CACP,EACD,MAAQ,GAAEL,KAAaC,IAE3B,CAEMK,MAAAA,EAAqBT,GAAmD,CAC5E,GAAIA,EAAM,CACFU,MAAAA,MAAUL,KAETM,OADMC,EAAyB,IAAIP,KAAKL,CAAI,EAAGU,CAAG,EAGpD,OAAA,IACT,EAEA,SAASG,EAA8Bb,EAAiC,CACtE,GAAIA,EAAM,CACR,MAAMc,EAAgBd,EAAME,MAAM,GAAG,EAAE,CAAC,EAClCK,EAAQQ,SAASD,EAAcZ,MAAM,GAAG,EAAE,CAAC,EAAG,EAAE,EAAI,EACpDM,EAAOO,SAASD,EAAcZ,MAAM,GAAG,EAAE,CAAC,EAAG,EAAE,EAC/Cc,EAAMD,SAASD,EAAcZ,MAAM,GAAG,EAAE,CAAC,EAAG,EAAE,EAC9CD,EAAMgB,EAAI,IAAIZ,KAAKG,EAAMD,EAAOS,CAAG,EAAG,CAC1CE,KAAM,GACP,CAAA,EACEC,SAAQ,EACRjB,MAAM,GAAG,EACJ,MAAA,GAAED,EAAI,CAAC,KAAKA,EAAI,CAAC,KAAKA,EAAI,CAAC,IAE9B,MAAA,EACT,CAEA,SAASmB,GAAmB,CACpBV,MAAAA,MAAUL,KACVG,EAAOE,EAAIW,YAAAA,EAAgB,EAC3Bd,EAAQG,EAAIY,WAElB,MAAQ,GADIZ,EAAIa,aACCC,EAAUjB,CAAK,KAAKC,GACvC,CAEO,MAAMgB,EAAsB,CACjCC,EAAG,kCAAiC,EACpCA,EAAG,mCAAkC,EACrCA,EAAG,gCAA+B,EAClCA,EAAG,gCAA+B,EAClCA,EAAG,8BAA6B,EAChCA,EAAG,+BAA8B,EACjCA,EAAG,+BAA8B,EACjCA,EAAG,iCAAgC,EACnCA,EAAG,oCAAmC,EACtCA,EAAG,kCAAiC,EACpCA,EAAG,mCAAkC,EACrCA,EAAG,mCAAkC,CAAC,EAGlCC,EACJC,GACG,CACH,MAAMC,EAA+C,CAAA,EACrD,QAASC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,GAAK,EAAG,CACpCE,MAAAA,EAAMJ,EAAQE,CAAC,GAEnBE,GAAAA,YAAAA,EAAKC,0BAA2B,IAChCD,GAAAA,YAAAA,EAAKE,6BAA8B,GAEnCL,EAAYM,KAAKH,CAAG,EAGjBH,OAAAA,CACT,EAEMO,EACJR,GACG,CACH,MAAMC,EAA+C,CAAA,EACrD,QAASC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,GAAK,EAAG,CACpCE,MAAAA,EAAMJ,EAAQE,CAAC,GACjBE,GAAAA,YAAAA,EAAKK,wBAAyB,IAAKL,GAAAA,YAAAA,EAAKM,2BAA4B,GACtET,EAAYM,KAAKH,CAAG,EAGjBH,OAAAA,CACT"}