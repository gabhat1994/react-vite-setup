{"version":3,"file":"MultiselectField-a1e665cb.js","sources":["../../src/components/MultiselectField/styles.ts","../../src/components/MultiselectField/MultiselectField.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Stack } from '@/layout';\nimport { Icon } from '../Icon';\nimport { TextField as OriginalTextField } from '../TextField';\n\nconst Container = styled.div`\n  width: 100%;\n`;\n\nconst RightIcon = styled(Icon).attrs(() => ({\n  size: 16,\n  color: '--icon-button-neutral-default',\n}))<{ isOpen?: boolean }>`\n  transition: transform 0.3s;\n  ${({ isOpen }) => isOpen && 'transform: rotate(180deg)'};\n`;\n\nconst InputRightElements = styled(Stack).attrs(() => ({\n  gap: 16,\n  align: 'center',\n}))`\n  span {\n    visibility: visible;\n  }\n`;\n\nconst TextField = styled(OriginalTextField)`\n  cursor: pointer;\n`;\n\nexport default {\n  RightIcon,\n  Container,\n  InputRightElements,\n  TextField,\n};\n","import React, { useMemo, useRef, useState } from 'react';\nimport { intersection } from 'lodash';\nimport { MultiselectUtil } from '@/utils/multiselect';\nimport { useElementDimensions } from '@/hooks';\nimport { TickCheckbox } from '../Checkbox';\nimport {\n  Dropdown,\n  type DropdownProps,\n  type DropdownValueType,\n  isValueType,\n} from '../Dropdown';\nimport { type ITextField } from '../TextField/types';\nimport S from './styles';\n\nconst ALL_VALUE = 'ALL_VALUE';\ntype AllValueSelectionState = 'all' | 'some' | 'empty';\ntype AllValueSelectionStrategy = 'empty-means-all' | 'empty-means-none';\nexport type MultiselectValue<Key extends string> = Key[];\n\nexport type MultiselectFieldProps<\n  Key extends string,\n  Data extends unknown = Key,\n> = Omit<\n  DropdownProps<Data, HTMLInputElement, string, Key>,\n  'children' | 'options'\n> &\n  Pick<\n    ITextField,\n    'inputSize' | 'error' | 'helperText' | 'label' | 'disabledIconColor'\n  > & {\n    options: DropdownValueType<Data, Key>[];\n    value: MultiselectValue<Key>;\n    onChange: (selectedOptions: MultiselectValue<Key>) => void;\n    inputRightElement?: React.ReactNode;\n    allOptionLabel?: string;\n    allSelectionStrategy?: AllValueSelectionStrategy;\n  };\n\nexport function MultiselectField<\n  Key extends string = string,\n  Data extends unknown = Key,\n>({\n  options,\n  value,\n  onChange,\n  disabled,\n  inputRightElement,\n  allOptionLabel = 'All',\n  leftIcon,\n  hideIcons = true,\n  inputSize,\n  error,\n  helperText,\n  label,\n  disabledIconColor,\n  isLoading,\n  allSelectionStrategy = 'empty-means-none',\n  ...dropdownProps\n}: MultiselectFieldProps<Key, Data>) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    size: { width },\n  } = useElementDimensions(containerRef);\n\n  const valueOptions = useMemo(() => options.filter(isValueType), [options]);\n\n  const selectedValues = useMemo(() => {\n    const allValueOptionKeys = valueOptions.map((option) => option.key);\n\n    return allSelectionStrategy === 'empty-means-all' && value.length === 0\n      ? allValueOptionKeys\n      : // If we have more selected values than available, just get the intersection.\n        intersection(allValueOptionKeys, value);\n  }, [allSelectionStrategy, value, valueOptions]);\n  const allSelectionState: AllValueSelectionState =\n    selectedValues.length === 0\n      ? 'empty'\n      : selectedValues.length === valueOptions.length\n      ? 'all'\n      : 'some';\n\n  const selectedOptions = useMemo(\n    () => valueOptions.filter((option) => selectedValues.includes(option.key)),\n    [selectedValues, valueOptions],\n  );\n\n  const calculatedOptions = useMemo<DropdownValueType<Data, Key>[]>(\n    () => [\n      {\n        type: 'value',\n        key: ALL_VALUE as Key,\n        label: allOptionLabel,\n        value: ALL_VALUE as Data,\n        rightIcon: (\n          <TickCheckbox\n            isChecked={allSelectionState === 'all'}\n            isIndeterminate={allSelectionState === 'some'}\n            captureClickEvent={false}\n          />\n        ),\n        hideIconPlace: true,\n      },\n      ...options.map((option) => ({\n        ...option,\n        rightIcon: (\n          <TickCheckbox\n            isChecked={selectedOptions.includes(option)}\n            captureClickEvent={false}\n          />\n        ),\n      })),\n    ],\n    [allOptionLabel, allSelectionState, options, selectedOptions],\n  );\n\n  const handleChange = (item: DropdownValueType<Data, Key>) => {\n    let newValue: Key[] = [];\n    if (item.key === ALL_VALUE) {\n      newValue =\n        allSelectionState === 'all'\n          ? allSelectionStrategy === 'empty-means-all'\n            ? selectedValues\n            : []\n          : valueOptions.map((option) => option.key);\n    } else {\n      newValue = MultiselectUtil.toggleOne(selectedValues, item.key);\n    }\n    onChange(newValue);\n  };\n\n  return (\n    <S.Container ref={containerRef}>\n      <Dropdown\n        hideIcons={hideIcons}\n        inputValue={\n          allSelectionState === 'all'\n            ? allOptionLabel\n            : selectedOptions.map((option) => option.label).join(', ')\n        }\n        isLoading={isLoading}\n        options={isLoading ? [] : calculatedOptions}\n        usePortal={false}\n        containerWidth={`${width}px`}\n        disabled={disabled}\n        onSelectOption={handleChange}\n        onOpen={() => setIsOpen(true)}\n        onClose={() => setIsOpen(false)}\n        closeOnSelect={false}\n        {...dropdownProps}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <S.TextField\n            ref={inputRef}\n            {...inputProps}\n            readOnly\n            inputSize={inputSize}\n            disabled={disabled}\n            label={label}\n            leftIcon={leftIcon}\n            helperText={helperText}\n            error={!!error}\n            rightIcon={\n              <S.InputRightElements>\n                {inputRightElement}\n                {disabled ? null : (\n                  <S.RightIcon\n                    name=\"chevron_down_m\"\n                    isOpen={isOpen}\n                    onClick={toggle}\n                  />\n                )}\n              </S.InputRightElements>\n            }\n            disabledIconColor={disabledIconColor}\n          />\n        )}\n      </Dropdown>\n    </S.Container>\n  );\n}\n"],"names":["Container","styled","div","RightIcon","Icon","attrs","size","color","isOpen","InputRightElements","Stack","gap","align","TextField","OriginalTextField","S","ALL_VALUE","MultiselectField","options","value","onChange","disabled","inputRightElement","allOptionLabel","leftIcon","hideIcons","inputSize","error","helperText","label","disabledIconColor","isLoading","allSelectionStrategy","dropdownProps","setIsOpen","useState","containerRef","useRef","width","useElementDimensions","valueOptions","useMemo","filter","isValueType","selectedValues","allValueOptionKeys","map","option","key","length","intersection","allSelectionState","selectedOptions","includes","calculatedOptions","type","rightIcon","jsx","TickCheckbox","hideIconPlace","handleChange","item","newValue","MultiselectUtil","toggleOne","Dropdown","join","inputProps","inputRef","toggle","jsxs"],"mappings":"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"}