{"version":3,"file":"contract-546e6b09.js","sources":["../../src/features/contracts/services/LegalRegionService/constants.tsx","../../src/features/contracts/services/LegalRegionService/LegalRegionService.ts","../../src/features/contracts/utils/contractFormMapper.ts","../../src/features/contracts/hooks/contract.ts"],"sourcesContent":["// TODO: Import from the json when we add support for more countries.\n// import allCountries from '@/assets/json/countries.json';\n\nexport const countriesWithStates = ['us'];\n\nexport const countries = [\n  // TODO: Uncomment when we add support for more countries.\n  // { code: 'jp', label: 'Japan' },\n  // { code: 'pl', label: 'Poland' },\n  // { code: 'in', label: 'India' },\n  // { code: 'gb', label: 'UK' },\n  { code: 'us', label: 'US' },\n];\n\ninterface Region {\n  code: string;\n  label: string;\n}\n\n/**\n * When the array is empty, it means we know that this country has no regions,\n * so we won't display the region input.\n */\nexport const countryRegions: Record<string, Region[]> = {\n  us: [\n    { code: 'NY', label: 'New York' },\n    { code: 'AK', label: 'Alaska' },\n    { code: 'AL', label: 'Alabama' },\n    { code: 'AR', label: 'Arkansas' },\n    { code: 'AZ', label: 'Arizona' },\n    { code: 'CA', label: 'California' },\n    { code: 'CO', label: 'Colorado' },\n    { code: 'CT', label: 'Connecticut' },\n    { code: 'DE', label: 'Delaware' },\n    { code: 'FL', label: 'Florida' },\n    { code: 'GA', label: 'Georgia' },\n    { code: 'HI', label: 'Hawaii' },\n    { code: 'IA', label: 'Iowa' },\n    { code: 'ID', label: 'Idaho' },\n    { code: 'IL', label: 'Illinois' },\n    { code: 'IN', label: 'Indiana' },\n    { code: 'KS', label: 'Kansas' },\n    { code: 'KY', label: 'Kentucky' },\n    { code: 'LA', label: 'Louisiana' },\n    { code: 'MA', label: 'Massachusetts' },\n    { code: 'MD', label: 'Maryland' },\n    { code: 'ME', label: 'Maine' },\n    { code: 'MI', label: 'Michigan' },\n    { code: 'MN', label: 'Minnesota' },\n    { code: 'MO', label: 'Missouri' },\n    { code: 'MS', label: 'Mississippi' },\n    { code: 'MT', label: 'Montana' },\n    { code: 'NC', label: 'North Carolina' },\n    { code: 'ND', label: 'North Dakota' },\n    { code: 'NE', label: 'Nebraska' },\n    { code: 'NH', label: 'New Hampshire' },\n    { code: 'NJ', label: 'New Jersey' },\n    { code: 'NM', label: 'New Mexico' },\n    { code: 'NV', label: 'Nevada' },\n    { code: 'OH', label: 'Ohio' },\n    { code: 'OK', label: 'Oklahoma' },\n    { code: 'OR', label: 'Oregon' },\n    { code: 'PA', label: 'Pennsylvania' },\n    { code: 'RI', label: 'Rhode Island' },\n    { code: 'SC', label: 'South Carolina' },\n    { code: 'SD', label: 'South Dakota' },\n    { code: 'TN', label: 'Tennessee' },\n    { code: 'TX', label: 'Texas' },\n    { code: 'UT', label: 'Utah' },\n    { code: 'VA', label: 'Virginia' },\n    { code: 'VT', label: 'Vermont' },\n    { code: 'WA', label: 'Washington' },\n    { code: 'WI', label: 'Wisconsin' },\n    { code: 'WV', label: 'West Virginia' },\n    { code: 'WY', label: 'Wyoming' },\n  ],\n  gb: [\n    { code: 'EN', label: 'England' },\n    { code: 'NI', label: 'Northern Ireland' },\n    { code: 'SC', label: 'Scotland' },\n    { code: 'WA', label: 'Wales' },\n  ],\n  pl: [],\n  in: [],\n};\n","import { getCountryByCode } from '@/utils/country';\nimport { countries, countriesWithStates, countryRegions } from './constants';\n\nexport function hasPresetRegions(countryCode: string) {\n  return (\n    countryCode in countryRegions && countryRegions[countryCode].length > 0\n  );\n}\n\nexport function hasNoRegions(countryCode: string) {\n  return (\n    countryCode in countryRegions && countryRegions[countryCode].length === 0\n  );\n}\n\nexport function hasCustomRegion(countryCode: string) {\n  return !(countryCode in countryRegions);\n}\n\nexport function hasState(countryCode: string) {\n  return countriesWithStates.includes(countryCode);\n}\n\nexport function isValidCountryCode(\n  countryCode: string | null,\n): countryCode is string {\n  return (\n    !!countryCode && !!countries.find((country) => country.code === countryCode)\n  );\n}\n\nexport function isValidRegionCode(\n  countryCode: string | null,\n  regionCode: string | null,\n) {\n  return (\n    isValidCountryCode(countryCode) &&\n    !!regionCode &&\n    !!getRegionByCountryAndCode(countryCode, regionCode)\n  );\n}\n\nexport function getRegionByCountryAndCode(\n  countryCode: string,\n  regionCode: string,\n) {\n  return countryRegions[countryCode]?.find(\n    (region) => region.code === regionCode,\n  );\n}\n\nexport function formatLegalRegion(\n  countryCode: string,\n  regionCode: string | null,\n) {\n  const countryItem = getCountryByCode(countryCode);\n  const regionItem = regionCode\n    ? getRegionByCountryAndCode(countryCode, regionCode)\n    : undefined;\n\n  const formattedLegalRegion = [\n    countryItem?.name,\n    regionItem ? `(${regionItem.label})` : undefined,\n  ]\n    .filter(Boolean)\n    .join(' ');\n\n  return formattedLegalRegion;\n}\n\nexport function getAllCountries() {\n  return countries;\n}\n\nexport function getAllRegionsForCountryCode(countryCode: string) {\n  return countryRegions[countryCode];\n}\n","import { type DeepPartial } from 'react-hook-form';\nimport { orderBy } from 'lodash';\nimport {\n  type ContractInput,\n  type CreateNewContractInput,\n} from '@/apollo/generated/types';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { cleanList } from '@/utils/list';\nimport { convertDateToUtcNoon } from '@/utils/date';\nimport {\n  type ContractFormValues,\n  type DraftContractFormValues,\n} from '../hooks/contractForm';\nimport { type Contract, type StatementOfWorkBasic } from '../types';\nimport { StatementOfWorkUtils } from './statementOfWork';\n\nfunction toCreateNewContractInput(\n  values: DraftContractFormValues,\n): CreateNewContractInput {\n  return {\n    title: values.title ?? '',\n    linkedNoum: values.noumId,\n  };\n}\n\nfunction toUpdateContractInput(values: DraftContractFormValues): ContractInput {\n  const terminationNotice = parseInt(values.terminationNotice ?? '', 10);\n\n  return {\n    title: values.title,\n    linkedNoum: values.noumId,\n    buyer: values.buyerId || null,\n    seller: values.serviceProviderId || null,\n    effectiveDate: values.effectiveDate\n      ? convertDateToUtcNoon(values.effectiveDate)\n      : null,\n    legalJurisdiction: {\n      country: values.governingLaw?.country,\n      // TODO: Adjust once BE migrates to two-level approach.\n      state: values.governingLaw?.region,\n    },\n    arbitrationJurisdiction: {\n      country: values.arbitration?.country,\n      // TODO: Adjust once BE migrates to two-level approach.\n      state: values.arbitration?.region,\n    },\n    terminationNoticeInDays: Number.isInteger(terminationNotice)\n      ? terminationNotice\n      : null,\n    // TODO: Change after adding the logo uploader.\n    logo: undefined,\n    templateName: undefined,\n  };\n}\n\nfunction fromContract(contract: Contract): DeepPartial<ContractFormValues> {\n  if (!contract.linkedNoum._id) {\n    throw new Error('Invalid linkedNoum for provided contract.');\n  }\n\n  const defaultValues = getDefaultValues({ noumId: contract.linkedNoum._id });\n\n  return {\n    noumId: contract.linkedNoum._id,\n    title: contract.title ?? defaultValues.title,\n    buyerId: contract.buyer?._id ?? defaultValues.buyerId,\n    serviceProviderId: contract.seller?._id ?? defaultValues.serviceProviderId,\n    effectiveDate:\n      ApiPayloadParser.parseDateString(contract.effectiveDate) ??\n      defaultValues.effectiveDate,\n    terminationNotice: (\n      contract.terminationNoticeInDays || defaultValues.terminationNotice\n    )?.toString(),\n    arbitration: {\n      country:\n        contract.arbitrationJurisdiction?.country ??\n        defaultValues.arbitration?.country,\n      // TODO: Adjust once BE migrates to two-level approach.\n      region:\n        contract.arbitrationJurisdiction?.state ||\n        contract.arbitrationJurisdiction?.region ||\n        defaultValues.arbitration?.region,\n    },\n    governingLaw: {\n      country:\n        contract.legalJurisdiction?.country ??\n        defaultValues.governingLaw?.country,\n      // TODO: Adjust once BE migrates to two-level approach.\n      region:\n        contract.legalJurisdiction?.state ||\n        contract.legalJurisdiction?.region ||\n        defaultValues.governingLaw?.region,\n    },\n  };\n}\n\nfunction fromLinkedSows(\n  linkedSows: StatementOfWorkBasic[],\n): DeepPartial<ContractFormValues> {\n  return {\n    linkedStatementsOfWork: orderBy(\n      linkedSows,\n      [(item) => StatementOfWorkUtils.isDraft(item), 'title'],\n      ['asc', 'asc'],\n    ).map((statementOfWork) => ({\n      statementOfWorkId: statementOfWork._id,\n    })),\n  };\n}\n\ninterface GetDefaultValuesOptions {\n  noumId?: string;\n  linkedStatementsOfWork?: StatementOfWorkBasic[];\n}\nfunction getDefaultValues({\n  noumId,\n  linkedStatementsOfWork,\n}: GetDefaultValuesOptions): DeepPartial<ContractFormValues> {\n  return {\n    title: 'Service Agreement',\n    noumId: noumId ?? '',\n    effectiveDate: new Date(),\n    buyerId: '',\n    serviceProviderId: '',\n    terminationNotice: '',\n    governingLaw: {\n      country: 'us',\n      region: '',\n    },\n    arbitration: {\n      country: 'us',\n      region: '',\n    },\n    linkedStatementsOfWork: cleanList(linkedStatementsOfWork).map(\n      (statementOfWork) => ({\n        statementOfWorkId: statementOfWork._id,\n      }),\n    ),\n  };\n}\n\nexport const ContractFormMapper = {\n  toCreateNewContractInput,\n  toUpdateContractInput,\n  fromContract,\n  fromLinkedSows,\n  getDefaultValues,\n};\n","import {\n  GetSingleContractDocument,\n  type GetSingleContractQuery,\n  type GetSingleContractQueryVariables,\n  useCreateNewContractMutation,\n  useDeleteContractMutation,\n  useGetSingleContractQuery,\n  useUpdateContractMutation,\n} from '@/apollo/graphql';\nimport { ContractFormMapper } from '../utils/contractFormMapper';\nimport { type DraftContractFormValues } from './contractForm';\n\nexport function useContract({ id }: { id: string | undefined }) {\n  const [createNewContractMutation] = useCreateNewContractMutation();\n  const [updateContractMutation] = useUpdateContractMutation();\n  const [deleteContractMutation] = useDeleteContractMutation();\n\n  const { data, loading } = useGetSingleContractQuery({\n    variables: {\n      id: id!,\n    },\n    skip: !id,\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const contract = data?.getSingleContract ?? null;\n\n  async function createContract(values: DraftContractFormValues) {\n    const result = await createNewContractMutation({\n      variables: {\n        input: ContractFormMapper.toCreateNewContractInput(values),\n      },\n      update: (cache, res) => {\n        const resContract = res.data?.createNewContract;\n        if (!resContract) {\n          return;\n        }\n\n        cache.writeQuery<\n          GetSingleContractQuery,\n          GetSingleContractQueryVariables\n        >({\n          query: GetSingleContractDocument,\n          variables: {\n            id: resContract._id,\n          },\n          data: {\n            getSingleContract: resContract,\n          },\n        });\n      },\n    });\n\n    const newContract = result.data?.createNewContract;\n    if (!newContract) {\n      throw new Error('Unable to create a contract. Please try again later.');\n    }\n    return newContract;\n  }\n\n  async function updateContract(values: DraftContractFormValues) {\n    if (!id) {\n      return null;\n    }\n\n    const result = await updateContractMutation({\n      variables: {\n        id,\n        input: ContractFormMapper.toUpdateContractInput(values),\n      },\n    });\n\n    const updatedContract = result.data?.updateContract;\n    if (!updatedContract) {\n      throw new Error('Unable to update the contract. Please try again later.');\n    }\n\n    return updatedContract;\n  }\n\n  async function deleteContract(deletedId: string | undefined = id) {\n    if (!deletedId) {\n      return;\n    }\n\n    const success = await deleteContractMutation({\n      variables: {\n        id: deletedId,\n      },\n    });\n\n    if (!success) {\n      throw new Error('Unable to delete the contract. Please try again later.');\n    }\n  }\n\n  return {\n    contract,\n    isLoading: loading,\n    createContract,\n    updateContract,\n    deleteContract,\n  };\n}\n"],"names":["countriesWithStates","countries","code","label","countryRegions","us","gb","pl","in","hasPresetRegions","countryCode","length","hasNoRegions","hasCustomRegion","hasState","includes","isValidCountryCode","find","country","getRegionByCountryAndCode","regionCode","region","formatLegalRegion","countryItem","getCountryByCode","regionItem","undefined","formattedLegalRegion","name","filter","Boolean","join","getAllCountries","getAllRegionsForCountryCode","toCreateNewContractInput","values","title","linkedNoum","noumId","toUpdateContractInput","terminationNotice","parseInt","buyer","buyerId","seller","serviceProviderId","effectiveDate","convertDateToUtcNoon","legalJurisdiction","governingLaw","state","arbitrationJurisdiction","arbitration","terminationNoticeInDays","Number","isInteger","logo","templateName","fromContract","contract","_id","Error","defaultValues","getDefaultValues","ApiPayloadParser","parseDateString","toString","fromLinkedSows","linkedSows","linkedStatementsOfWork","orderBy","item","StatementOfWorkUtils","isDraft","map","statementOfWork","statementOfWorkId","Date","cleanList","ContractFormMapper","useContract","id","createNewContractMutation","useCreateNewContractMutation","updateContractMutation","useUpdateContractMutation","deleteContractMutation","useDeleteContractMutation","data","loading","useGetSingleContractQuery","variables","skip","fetchPolicy","getSingleContract","createContract","newContract","result","input","update","cache","res","resContract","createNewContract","writeQuery","query","GetSingleContractDocument","updateContract","updatedContract","deleteContract","deletedId","isLoading"],"mappings":"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"}