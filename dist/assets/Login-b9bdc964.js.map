{"version":3,"file":"Login-b9bdc964.js","sources":["../../src/hooks/screenDensity.ts","../../src/screens/Login/LoginForm/EmailLoginForm/index.tsx","../../src/screens/Login/LoginForm/PhoneLoginForm/index.tsx","../../src/screens/Login/LoginForm/styles.ts","../../src/screens/Login/LoginForm/constants.ts","../../src/screens/Login/LoginForm/index.tsx","../../src/screens/Login/OTPVerifyForm/styles.ts","../../src/screens/Login/OTPVerifyForm/index.tsx","../../src/screens/Login/types.ts","../../src/screens/Login/styles.ts","../../src/screens/Login/index.tsx"],"sourcesContent":["import { useState } from 'react';\n\nexport type ScreenDensity = {\n  density: number;\n};\n\nexport function useScreenDensity(): ScreenDensity {\n  const [screenDensity] = useState(window?.devicePixelRatio ?? 1);\n\n  return {\n    density: screenDensity,\n  };\n}\n","import { type FC, useCallback, useMemo, useState } from 'react';\nimport { type SubmitHandler, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer, Stack } from '@/layout';\nimport { TextField } from '@/components/TextField';\nimport { Button } from '@/components/Button';\nimport { EMAIL_REGEX } from '@/constants/regex';\nimport { type EmailLoginFormInputs, type EmailLoginFormProps } from './types';\n\nconst EmailLoginForm: FC<EmailLoginFormProps> = ({\n  recaptchaToken,\n  loading,\n  submitLoginData,\n}) => {\n  const { t } = useTranslation();\n\n  const [email, setEmail] = useState<string>('');\n\n  const validationSchema = useMemo(\n    () =>\n      yup\n        .object({\n          email: yup\n            .string()\n            .email(t('noumena.signup.error.incorrect_email'))\n            .required(t('noumena.signup.error.field_cannot_be_empty')),\n        })\n        .required(),\n    [t],\n  );\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<EmailLoginFormInputs>({\n    resolver: yupResolver(validationSchema),\n  });\n\n  const onSubmit: SubmitHandler<EmailLoginFormInputs> = useCallback(\n    async (data) => {\n      submitLoginData({\n        type: 'email',\n        value: data.email.trim(),\n      });\n    },\n    [submitLoginData],\n  );\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setEmail(e.currentTarget.value);\n    },\n    [setEmail],\n  );\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Stack vertical padding=\"16px 0\">\n        <TextField\n          {...register('email', {\n            required: {\n              value: true,\n              message: t('noumena.email_login_form.valid_email.field_empty'),\n            },\n            pattern: {\n              value: EMAIL_REGEX,\n              message: t('noumena.email_login_form.valid_email.error_message'),\n            },\n            onChange: handleChange,\n          })}\n          value={email}\n          label={t('noumena.email_login_form.email_address.label')}\n          error={!!errors.email}\n          helperText={errors.email?.message}\n          data-testid=\"testEmailLoginTextField\"\n        />\n        <Spacer height={29.5} />\n        <Button\n          id=\"email-login-btn\"\n          type=\"submit\"\n          primary\n          size=\"full\"\n          loading={loading}\n          disabled={loading || !recaptchaToken || email.trim() === ''}\n        >\n          {t('noumena.login_button.text')}\n        </Button>\n      </Stack>\n    </form>\n  );\n};\n\nexport default EmailLoginForm;\n","import {\n  type FC,\n  useCallback,\n  useEffect,\n  useState,\n  type KeyboardEvent,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Spacer, Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { PhoneInput } from '@/components/PhoneInput/PhoneInput';\nimport { isValidPhoneNumber } from '@/utils/phonenumber';\nimport { type PhoneLoginFormProps } from './types';\n\nconst PhoneLoginForm: FC<PhoneLoginFormProps> = ({\n  recaptchaToken,\n  loading,\n  submitLoginData,\n  errorMessage,\n}) => {\n  const { t } = useTranslation();\n\n  const [phone, setPhone] = useState<string>('');\n  const [phoneError, setPhoneError] = useState<string>('');\n\n  const handlePhoneChange = useCallback(\n    (value: string) => {\n      setPhone(value);\n    },\n    [setPhone],\n  );\n\n  const handleClick = useCallback(() => {\n    setPhoneError('');\n    if (!phone) {\n      setPhoneError(t('noumena.phone_login_form.valid_phone.field_empty'));\n      return;\n    }\n    if (phone.includes('-') || !isValidPhoneNumber(`+${phone}`)) {\n      setPhoneError(t('noumena.phone_login_form.valid_phone.error_message'));\n      return;\n    }\n\n    submitLoginData({ type: 'phone', value: phone.trim() });\n  }, [phone, submitLoginData, t]);\n\n  const handlePhoneInputKeyPress = useCallback(\n    (e: KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === 'Enter') {\n        handleClick();\n      }\n    },\n    [handleClick],\n  );\n\n  useEffect(() => {\n    if (isValidPhoneNumber(phone)) {\n      setPhoneError('');\n    }\n    if (errorMessage) {\n      setPhoneError(errorMessage);\n    }\n  }, [phone, setPhoneError, errorMessage]);\n\n  return (\n    <Stack vertical padding=\"16px 0\">\n      <PhoneInput\n        label={t('noumena.phone_login_form.phone.label')}\n        error={!!phoneError}\n        helperText={phoneError}\n        onPhoneChange={handlePhoneChange}\n        onKeyPress={handlePhoneInputKeyPress}\n        data-testid=\"testLoginPhoneInput\"\n      />\n      <Spacer height={29.5} />\n      <Button\n        id=\"phone-login-btn\"\n        primary\n        size=\"full\"\n        onClick={handleClick}\n        loading={loading}\n        softDisabled={!recaptchaToken || phone.trim() === '' || loading}\n        testId=\"testPhoneLoginButton\"\n      >\n        {t('noumena.login_button.text')}\n      </Button>\n    </Stack>\n  );\n};\n\nexport default PhoneLoginForm;\n","import styled from 'styled-components';\nimport { sizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\nimport { footnoteBold } from '@/components/Typography/Typography';\n\nexport const TabContainer = styled.div`\n  width: 100%;\n  padding-top: 36px;\n  padding-bottom: 16px;\n\n  @media (max-width: ${sizes.MOBILE_L}) {\n    padding-top: 28px;\n    padding-bottom: 8px;\n  }\n`;\n\nexport const Screen = styled.div`\n  font-family: var(--font-family);\n  max-width: 343px;\n  @media screen and (orientation: landscape) and (max-width: ${sizes.TABLET_L}) {\n    margin-top: 150px;\n  }\n`;\n\nexport const LinkContainer = styled(Stack)`\n  width: 100%;\n  margin-top: 15px;\n\n  div span {\n    cursor: pointer;\n    color: var(--text-button-brand-secondary-default);\n  }\n`;\n\nexport const RecaptchaNote = styled.div`\n  /* position: absolute; */\n  max-width: 20rem;\n  margin-top: 10px;\n  margin-bottom: 10px;\n  bottom: 0%;\n  width: 100%;\n  text-align: center;\n  color: var(--text-body-neutral-disabled);\n  ${footnoteBold}\n\n  @media screen and (orientation: landscape) and (max-width: ${sizes.TABLET_L}) {\n    position: relative;\n    margin-top: 20px;\n  }\n  @media (max-height: 600px) {\n    position: relative;\n    margin-top: 150px;\n  }\n`;\n\nexport const StyledTabPanel = styled.div`\n  width: 100%;\n  height: 100%;\n  font-family: var(--font-family);\n`;\n","import { type InputListTypes } from '@/components/Tabs/types';\n\nexport const listOfTabs: InputListTypes[] = [\n  {\n    name: 'test1',\n    image: 'terms_m',\n    text: 'Phone',\n    labelSize: 'large',\n  },\n  {\n    name: 'test1',\n    image: 'terms_m',\n    text: 'Email',\n    labelSize: 'large',\n  },\n];\n","import { type FC, useCallback, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { useTranslation } from 'react-i18next';\n\nimport { TSpan } from '@/components/Typography';\nimport BasicChipsTabsForm from '@/components/Tabs/TabsForm';\nimport { Spacer } from '@/layout';\nimport routes from '@/constants/routes';\nimport { IdentityServices } from '@/services/rest/identity';\nimport { useRecaptcha } from '@/hooks';\nimport { useWindowDimensions } from '@/hooks/dimensions';\n\nimport { useInitialSignUp } from '@/features/onboarding/hooks';\nimport EmailLoginForm from './EmailLoginForm';\nimport PhoneLoginForm from './PhoneLoginForm';\n\nimport { type LoginData } from '../types';\nimport { StyledTabPanel, Screen, LinkContainer, RecaptchaNote } from './styles';\nimport { type LoginFormProps } from './types';\nimport { listOfTabs } from './constants';\n\nconst LoginForm: FC<LoginFormProps> = ({\n  loading,\n  beforeSubmit,\n  onLoginFailed,\n  onLoginSuccess,\n  errorMessage,\n  clearInput,\n}) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { height } = useWindowDimensions();\n  const { recaptchaToken, returnNewReCaptcha } = useRecaptcha();\n  const { isLoggingingUpFromNextApp, quickSignUpNoumId, backUrl } =\n    useInitialSignUp();\n\n  const [activeTab, setActiveTab] = useState(1);\n\n  const onLogin = useCallback(\n    async (data: LoginData) => {\n      if (!recaptchaToken) {\n        return;\n      }\n      beforeSubmit(false);\n\n      const token = await returnNewReCaptcha();\n      const signInFunc =\n        data.type === 'phone'\n          ? IdentityServices.signInPhone\n          : IdentityServices.signInEmail;\n      const resp = await signInFunc(data.value, token);\n\n      if (resp?.errorMessage) {\n        onLoginFailed(data.type, resp.errorStatus, resp.errorMessage);\n        return;\n      }\n\n      onLoginSuccess(\n        resp.message,\n        resp.nextRequestAfterInSecond,\n        resp.remainingRequest,\n        data,\n        false,\n      );\n    },\n    [\n      recaptchaToken,\n      beforeSubmit,\n      returnNewReCaptcha,\n      onLoginSuccess,\n      onLoginFailed,\n    ],\n  );\n\n  const goToSignUp = useCallback(() => {\n    if (isLoggingingUpFromNextApp) {\n      navigate(\n        `${routes.QUICK_SIGN_UP}?quickNoumID=${quickSignUpNoumId}&backurl=${backUrl}`,\n      );\n    } else {\n      navigate(routes.SIGN_UP);\n    }\n  }, [isLoggingingUpFromNextApp, navigate, quickSignUpNoumId, backUrl]);\n\n  return (\n    <Screen data-testid=\"loginFormContainer\">\n      <div>\n        {height < 600 && <Spacer height={100} />}\n        <TSpan\n          font=\"heading-xl-bold\"\n          colorToken=\"--text-body-header-neutral-default\"\n          data-testid=\"heading\"\n        >\n          {t('noumena.login_in.heading')}\n        </TSpan>\n\n        <Spacer height={11} />\n\n        <TSpan font=\"body-l\" colorToken=\"--text-body-neutral-default\">\n          {t('noumena.phone_or_email.text')}\n        </TSpan>\n\n        <Spacer height={31} />\n\n        <BasicChipsTabsForm\n          onChange={(v: string) => {\n            setActiveTab(+v);\n            if (clearInput) {\n              clearInput();\n            }\n          }}\n          inputList={listOfTabs}\n          selectedId={activeTab.toString()}\n          mode=\"isUnderline\"\n          isWithoutImage\n          fullWidth\n          animateOnLoad={false}\n        />\n        {activeTab ? (\n          <StyledTabPanel>\n            <EmailLoginForm\n              recaptchaToken={recaptchaToken}\n              loading={loading}\n              submitLoginData={onLogin}\n            />\n          </StyledTabPanel>\n        ) : (\n          <StyledTabPanel>\n            <PhoneLoginForm\n              recaptchaToken={recaptchaToken}\n              submitLoginData={onLogin}\n              loading={loading}\n              errorMessage={errorMessage}\n            />\n          </StyledTabPanel>\n        )}\n\n        <LinkContainer align=\"center\" justify=\"center\">\n          <TSpan\n            colorToken=\"--text-input-neutral-default\"\n            style={{ paddingRight: '8px' }}\n          >\n            {t('noumena.no_account.text')}\n          </TSpan>\n          <div>\n            <TSpan\n              font=\"button-m\"\n              onClick={goToSignUp}\n              colorToken=\"--text-button-brand-secondary-default\"\n              data-testid=\"signUp\"\n            >\n              {t('noumena.sign_up.title')}\n            </TSpan>\n          </div>\n        </LinkContainer>\n      </div>\n      <RecaptchaNote data-testid=\"recaptcha\">\n        {t(`noumena.signup.foot_note`)}\n      </RecaptchaNote>\n    </Screen>\n  );\n};\n\nexport default LoginForm;\n","import styled from 'styled-components';\nimport { sizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\n\nexport const StyledSpacer = styled.div`\n  padding-top: 32px;\n\n  @media (max-width: ${sizes.MOBILE_L}) {\n    padding-top: 24px;\n  }\n`;\nexport const FullWidthStack = styled(Stack)`\n  width: 100%;\n`;\n","import { type FC, useCallback, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { IdentityServices } from '@/services/rest/identity';\nimport { Spacer } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { OtpInput } from '@/components/Otp/OtpInput';\nimport { Icon } from '@/components/Icon';\nimport { getDisplayPhoneNumber } from '@/utils/phonenumber';\n\nimport { handleBackendError } from '@/screens/Register/helpers';\nimport { useCountDownTimer } from '@/hooks/countDownTimer';\nimport errors from '@/constants/errors';\nimport { type LoginData, type OTPVerifyData, type VerifyResp } from '../types';\nimport { type OTPVerifyProps } from './types';\nimport { FullWidthStack, StyledSpacer } from './styles';\n\nconst OTPVerifyForm: FC<OTPVerifyProps> = ({\n  loginData,\n  loading,\n  isResendLoading,\n  errorMsg,\n  backStep,\n  beforeSubmit,\n  onVerifyFailed,\n  onVerifySuccess,\n  remainingRequests,\n  timeLeftForNextResend = 0,\n}) => {\n  const { t } = useTranslation();\n  const [otp, setOtp] = useState<string>();\n  const [seconds] = useCountDownTimer(timeLeftForNextResend);\n\n  const disabledSubmit = useCallback(\n    (\n      _otp: string | undefined,\n      _loginData?: LoginData | undefined,\n      _isResendLoading?: boolean | undefined,\n    ) =>\n      !_loginData ||\n      !_loginData.value ||\n      !_otp ||\n      _otp.length !== 4 ||\n      _isResendLoading,\n    [],\n  );\n\n  const onVerify = useCallback(async () => {\n    if (!otp || !loginData || disabledSubmit(otp, loginData, isResendLoading))\n      return;\n    beforeSubmit();\n\n    const data: OTPVerifyData = { ...loginData, otp };\n\n    const verifyFunc =\n      data.type === 'phone'\n        ? IdentityServices.signInPhoneVerification\n        : IdentityServices.signInEmailVerification;\n\n    const resp: VerifyResp = await verifyFunc(\n      data.type === 'phone' ? data.value.replace(/\\+/g, '') : data.value,\n      data.otp,\n    );\n\n    if (resp?.errorMessage) {\n      onVerifyFailed(\n        resp.errorStatus === 102\n          ? errors.BLOCKED_IP\n          : handleBackendError(resp) || resp.errorMessage,\n      );\n      return;\n    }\n    onVerifySuccess(resp);\n  }, [\n    beforeSubmit,\n    disabledSubmit,\n    isResendLoading,\n    loginData,\n    onVerifyFailed,\n    onVerifySuccess,\n    otp,\n  ]);\n\n  const handleBack = useCallback(() => {\n    setOtp(undefined);\n    backStep();\n  }, [backStep, setOtp]);\n\n  const onEnter = () => {\n    if (otp?.trim().length === 4 && otp.indexOf(' ') < 0) {\n      onVerify();\n    }\n  };\n\n  useEffect(() => {\n    if (errorMsg !== '') {\n      setOtp('');\n    }\n  }, [errorMsg]);\n\n  const disableBackBtn =\n    loading || isResendLoading || (remainingRequests === 3 && seconds !== 0);\n\n  return (\n    <>\n      <TSpan font=\"body-l-bold\" colorToken=\"--text-body-neutral-default\" $fill>\n        {t('noumena.login_in.heading')}\n      </TSpan>\n      <Spacer height={16} />\n      <TSpan\n        font=\"heading-m-bold\"\n        colorToken=\"--text-body-header-neutral-default\"\n        $fill\n      >\n        {t('noumena.verification.text')}{' '}\n        {loginData?.type === 'email' && t('noumena.otp_verify_form.email.text')}\n        {loginData?.type === 'phone' && t('noumena.otp_verify_form.phone.text')}\n      </TSpan>\n      <Spacer height={16} />\n      <div>\n        <TSpan font=\"body-l\" $fill colorToken=\"--text-body-neutral-default\">\n          {t('noumena.enter_otp_code.text')}\n        </TSpan>\n        <div />\n        <TSpan font=\"body-l\" $fill colorToken=\"--text-body-neutral-highlighted\">\n          {' '}\n          {loginData?.type === 'email' && loginData?.value}\n          {loginData?.type === 'phone' &&\n            getDisplayPhoneNumber(`+${loginData?.value}`)}\n        </TSpan>\n      </div>\n      <StyledSpacer />\n      <OtpInput\n        value={otp}\n        onChange={(val) => setOtp(val)}\n        isDisabled={isResendLoading}\n        onEnter={onEnter}\n      />\n      <StyledSpacer />\n      <FullWidthStack>\n        <Button\n          data-testid=\"otp-back-button\"\n          icon={\n            <Icon\n              color={\n                disableBackBtn\n                  ? '--icon-button-neutral-disabled'\n                  : '--icon-button-neutral-default'\n              }\n              name=\"arrow_left_m\"\n              size={24}\n            />\n          }\n          style={{ minWidth: '102px' }}\n          disabled={disableBackBtn}\n          onClick={handleBack}\n        >\n          {t('noumena.back.text')}\n        </Button>\n        <Spacer width={25} />\n        <Button\n          id={\n            loginData?.type === 'phone'\n              ? 'verify-phone-signin-next-btn'\n              : 'verify-email-signin-next-btn'\n          }\n          data-testid=\"otp-submit-button\"\n          primary\n          size=\"full\"\n          disabled={disabledSubmit(otp?.trim(), loginData) || loading}\n          loading={loading}\n          onClick={onVerify}\n        >\n          {t('noumena.next.text')}\n        </Button>\n      </FullWidthStack>\n      <StyledSpacer />\n    </>\n  );\n};\nexport default OTPVerifyForm;\n","import { type Maybe } from 'yup/es/types';\nimport { type UserOutput } from '@/apollo/generated/types';\n\nexport enum LoginStep {\n  LOGIN = 'LOGIN',\n  VERIFY = 'VERIFY',\n}\n\nexport type LoginData = {\n  type: 'phone' | 'email';\n  value: string;\n};\n\nexport type OTPVerifyData = LoginData & { otp: string };\n\nexport type OtpResendLCData = {\n  [key: string]: { count: number; expiry: Date };\n};\n\nexport interface VerifyResp {\n  errorMessage: Maybe<string>;\n  errorStatus: Maybe<number>;\n  user: UserOutput;\n  token: {\n    accessToken: string;\n    refreshToken: string;\n    expiresIn: string;\n  };\n}\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nconst Screen = styled(Stack)`\n  font-family: var(--font-family);\n  width: 343px;\n`;\n\nexport default Screen;\n","import { useCallback, useMemo, useState, useEffect } from 'react';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { t } from 'i18next';\n\nimport AuthScreenLayout from '@/layout/AuthScreenLayout';\nimport { useToast, useScreenDensity, useRecaptcha } from '@/hooks';\nimport { useAuth } from '@/features/auth/contexts';\n\nimport errors from '@/constants/errors';\nimport { setLocalStorage } from '@/utils/localStorage';\nimport accessLocalStorage from '@/constants/accessLocalStorage';\nimport { useInitialSignUp } from '@/features/onboarding/hooks';\nimport LoginForm from './LoginForm';\nimport OTPVerifyForm from './OTPVerifyForm';\nimport OTPResend from './OTPResend';\n\nimport { type LoginData, LoginStep, type VerifyResp } from './types';\nimport Screen from './styles';\n\ntype TLocationState = {\n  fromPath: string;\n};\n\nconst Login = () => {\n  const [searchParams] = useSearchParams();\n  const { recaptchaToken } = useRecaptcha();\n  const { addToast } = useToast();\n  const { density } = useScreenDensity();\n  const { signIn } = useAuth();\n  const { state: locationState } = useLocation() as { state: TLocationState };\n\n  const {\n    setIsSigningUpFromNextApp,\n    setQuickSignUpNoumID,\n    setIsLoggingingUpFromNextApp,\n    setBackUrl,\n    isLoggingingUpFromNextApp,\n    backUrl,\n  } = useInitialSignUp();\n\n  useEffect(() => {\n    const quickNoumID = searchParams.get('quickNoumID') ?? null;\n    const backurl = searchParams.get('backurl') ?? '';\n    if (quickNoumID && backurl) {\n      setIsSigningUpFromNextApp(false);\n      setIsLoggingingUpFromNextApp(true);\n      setQuickSignUpNoumID(quickNoumID);\n      setBackUrl(backurl);\n    } else {\n      setIsSigningUpFromNextApp(false);\n      setIsLoggingingUpFromNextApp(false);\n    }\n  }, [\n    searchParams,\n    setIsLoggingingUpFromNextApp,\n    setIsSigningUpFromNextApp,\n    setQuickSignUpNoumID,\n    setBackUrl,\n  ]);\n\n  const [step, setStep] = useState<LoginStep>(LoginStep.LOGIN);\n  const [loginData, setLoginData] = useState<LoginData>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [errorMsg, setErrorMsg] = useState<string>('');\n  const [remainingRequests, setRemainingCount] = useState<number>(3);\n  const [isResendLoading, setIsResendLoading] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>();\n  const [timeLeftForNextResend, setTimeLeftForNextResend] = useState<number>(0);\n\n  const utmParams: Record<string, string> = useMemo(() => {\n    const params: Record<string, string> = {};\n    searchParams.forEach((v, k) => {\n      if (k.startsWith('utm_')) {\n        params[k] = v;\n      }\n    });\n    return params;\n  }, [searchParams]);\n\n  const loginLogoType = useMemo(\n    () => (density >= 2 ? 'login2x' : 'login'),\n    [density],\n  );\n\n  useEffect(\n    () => () => {\n      setLoading(false);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (locationState?.fromPath) {\n      setLocalStorage(\n        accessLocalStorage.GUEST_REDIRECT_TO_URI,\n        locationState.fromPath,\n      );\n    }\n  }, [locationState?.fromPath]);\n\n  const onBeforeLogin = useCallback((isResend = false) => {\n    if (isResend) {\n      setIsResendLoading(true);\n    } else {\n      setLoading(true);\n    }\n  }, []);\n\n  const onLoginFailed = useCallback(\n    (type: 'phone' | 'email', errStatus: number, errMessage: string) => {\n      let errMsg = errMessage;\n      if (errStatus === 404) {\n        errMsg =\n          type === 'phone'\n            ? t('noumena.phone_login_form.phone_number.not_exist_error')\n            : t('noumena.email_login_form.email_address.not_exist_error');\n      } else if (errStatus === 102) {\n        errMsg = errors.BLOCKED_IP;\n      }\n\n      addToast(\n        'error',\n        'none',\n        type === 'email'\n          ? errMsg\n          : `${t('noumena.toast_error.text')}: ${errMsg}`,\n      );\n      setErrorMessage(errMsg);\n      setLoading(false);\n    },\n    [addToast],\n  );\n\n  const onLoginSuccess = useCallback(\n    (\n      msg: string,\n      nextRequestAfterInSecond: number,\n      remainingRequest: number,\n      data: LoginData,\n      isResend?: boolean,\n    ) => {\n      addToast(\n        'success',\n        'none',\n        t('noumena.verification_code_sent.text') || msg,\n      );\n      if (!remainingRequest) {\n        setTimeLeftForNextResend(0);\n        setRemainingCount(0);\n      } else {\n        setTimeLeftForNextResend(nextRequestAfterInSecond);\n        setRemainingCount(remainingRequest);\n      }\n      if (isResend) {\n        setIsResendLoading(false);\n      } else {\n        setLoading(false);\n      }\n      setLoginData(data);\n      setStep(LoginStep.VERIFY);\n    },\n    [addToast],\n  );\n\n  const onBeforeVerify = useCallback(() => {\n    setErrorMsg('');\n    setLoading(true);\n  }, []);\n\n  const onVerifyFailed = useCallback(\n    (msg: string) => {\n      setErrorMsg(msg);\n      addToast('error', 'none', `${msg}`, undefined, 400);\n      setLoading(false);\n    },\n    [addToast],\n  );\n  const onVerifySuccess = useCallback(\n    (resp: VerifyResp) => {\n      signIn(\n        {\n          accessToken: resp.token.accessToken,\n          refreshToken: resp.token.refreshToken,\n        },\n        utmParams,\n      );\n    },\n    [signIn, utmParams],\n  );\n\n  const clearInput = useCallback(() => {\n    setLoading(false);\n    setErrorMessage('');\n    setErrorMsg('');\n  }, []);\n\n  const handleBack = useCallback(() => {\n    if (step === LoginStep.LOGIN) {\n      window.location.href = `../noums/${backUrl}`;\n    } else {\n      setStep(LoginStep.LOGIN);\n    }\n  }, [backUrl, step]);\n\n  return (\n    <AuthScreenLayout\n      type={loginLogoType}\n      showBackButton={isLoggingingUpFromNextApp}\n      onBackClick={handleBack}\n    >\n      {step === LoginStep.LOGIN ? (\n        <LoginForm\n          data-testid=\"testLoginForm\"\n          recaptchaToken={recaptchaToken}\n          loading={loading}\n          beforeSubmit={onBeforeLogin}\n          onLoginFailed={onLoginFailed}\n          onLoginSuccess={onLoginSuccess}\n          errorMessage={errorMessage}\n          clearInput={clearInput}\n        />\n      ) : (\n        <Screen vertical>\n          <OTPVerifyForm\n            loginData={loginData}\n            loading={loading}\n            errorMsg={errorMsg}\n            backStep={() => setStep(LoginStep.LOGIN)}\n            beforeSubmit={onBeforeVerify}\n            onVerifyFailed={onVerifyFailed}\n            onVerifySuccess={onVerifySuccess}\n            isResendLoading={isResendLoading}\n            remainingRequests={remainingRequests}\n            timeLeftForNextResend={timeLeftForNextResend}\n          />\n          <OTPResend\n            loginData={loginData}\n            remainingRequests={remainingRequests}\n            timeLeftForNextResend={timeLeftForNextResend}\n            beforeSubmit={onBeforeLogin}\n            onLoginFailed={onLoginFailed}\n            onLoginSuccess={onLoginSuccess}\n            isResendLoading={isResendLoading}\n          />\n        </Screen>\n      )}\n    </AuthScreenLayout>\n  );\n};\n\nexport default Login;\n"],"names":["useScreenDensity","screenDensity","useState","window","devicePixelRatio","density","EmailLoginForm","recaptchaToken","loading","submitLoginData","t","useTranslation","email","setEmail","validationSchema","useMemo","yup","required","register","handleSubmit","formState","errors","useForm","resolver","yupResolver","onSubmit","useCallback","data","type","value","trim","handleChange","e","currentTarget","jsx","jsxs","Stack","TextField","message","pattern","EMAIL_REGEX","onChange","Spacer","Button","PhoneLoginForm","errorMessage","phone","setPhone","phoneError","setPhoneError","handlePhoneChange","handleClick","includes","isValidPhoneNumber","handlePhoneInputKeyPress","key","useEffect","PhoneInput","styled","div","sizes","MOBILE_L","Screen","TABLET_L","LinkContainer","RecaptchaNote","footnoteBold","StyledTabPanel","listOfTabs","name","image","text","labelSize","LoginForm","beforeSubmit","onLoginFailed","onLoginSuccess","clearInput","navigate","useNavigate","height","useWindowDimensions","returnNewReCaptcha","useRecaptcha","isLoggingingUpFromNextApp","quickSignUpNoumId","backUrl","useInitialSignUp","activeTab","setActiveTab","onLogin","token","resp","IdentityServices","signInPhone","signInEmail","errorStatus","nextRequestAfterInSecond","remainingRequest","goToSignUp","routes","QUICK_SIGN_UP","SIGN_UP","TSpan","BasicChipsTabsForm","v","toString","paddingRight","StyledSpacer","FullWidthStack","OTPVerifyForm","loginData","isResendLoading","errorMsg","backStep","onVerifyFailed","onVerifySuccess","remainingRequests","timeLeftForNextResend","otp","setOtp","seconds","useCountDownTimer","disabledSubmit","_otp","_loginData","_isResendLoading","length","onVerify","signInPhoneVerification","signInEmailVerification","replace","BLOCKED_IP","handleBackendError","handleBack","undefined","onEnter","indexOf","disableBackBtn","Fragment","getDisplayPhoneNumber","OtpInput","val","Icon","minWidth","LoginStep","LOGIN","VERIFY","Login","searchParams","useSearchParams","addToast","useToast","signIn","useAuth","state","locationState","useLocation","setIsSigningUpFromNextApp","setQuickSignUpNoumID","setIsLoggingingUpFromNextApp","setBackUrl","quickNoumID","get","backurl","step","setStep","setLoginData","setLoading","setErrorMsg","setRemainingCount","setIsResendLoading","setErrorMessage","setTimeLeftForNextResend","utmParams","params","forEach","k","startsWith","loginLogoType","fromPath","accessLocalStorage","GUEST_REDIRECT_TO_URI","onBeforeLogin","isResend","errStatus","errMessage","errMsg","msg","onBeforeVerify","accessToken","refreshToken","location","href","AuthScreenLayout","OTPResend","Login$1"],"mappings":"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"}