{"version":3,"file":"PdfPreviewThumbnail-3547d9fe.js","sources":["../../src/components/Tooltip/TooltipMessage.tsx","../../src/components/ApiEntityPickerField/ApiEntityPickerFieldWithRemoteSearch.tsx","../../src/features/contracts/components/ProjectNoumSelector/styles.ts","../../src/features/contracts/components/ProjectNoumSelector/ProjectNoumSelector.tsx","../../src/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent.tsx","../../src/hooks/fieldArrayWizard/useFieldArrayWizard.ts","../../src/components/PdfPreviewThumbnail/styles.ts","../../src/components/PdfPreviewThumbnail/PdfPreviewThumbnail.tsx"],"sourcesContent":["import { type ReactNode } from 'react';\nimport * as S from './styles';\n\ninterface TooltipMessageProps {\n  children: ReactNode;\n}\n\nexport function TooltipMessage({ children }: TooltipMessageProps) {\n  return (\n    <S.TooltipMessageContainer>\n      <S.TooltipMessage>{children}</S.TooltipMessage>\n    </S.TooltipMessageContainer>\n  );\n}\n","import { type PickRequired } from '@/utils/types';\nimport ApiEntityPickerField from './ApiEntityPickerField';\nimport { type ApiEntityPickerFieldProps } from './types';\n\nexport type ApiEntityPickerFieldWithRemoteSearchProps<\n  Key extends string,\n  Data extends unknown = Key,\n> = PickRequired<ApiEntityPickerFieldProps<Key, Data>, 'onInputChange'>;\n\nfunction ApiEntityPickerFieldWithRemoteSearch<\n  Key extends string,\n  Data extends unknown = Key,\n>({ ...rest }: ApiEntityPickerFieldWithRemoteSearchProps<Key, Data>) {\n  return <ApiEntityPickerField<Key, Data> {...rest} />;\n}\n\nexport default ApiEntityPickerFieldWithRemoteSearch;\n","import styled from 'styled-components';\n\nconst SpinnerContainer = styled.div`\n  padding-right: 16px;\n`;\n\nexport default {\n  SpinnerContainer,\n};\n","import { useMemo, useState } from 'react';\nimport {\n  type SpaceOutputFragment,\n  useGetOwnProjectChambersQuery,\n} from '@/apollo/graphql';\nimport { type DropdownItemType } from '@/components/Dropdown';\nimport { cleanList } from '@/utils/list';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport {\n  type ProjectChamberType,\n  SortOperator,\n  SpaceStatusEnum,\n} from '@/apollo/generated/types';\nimport {\n  ApiEntityPickerFieldWithRemoteSearch,\n  type ApiEntityPickerFieldProps,\n} from '@/components/ApiEntityPickerField';\nimport { Spinner } from '@/components/Spinner';\nimport { type Maybe } from '@/common/types';\nimport { TSpan } from '@/components/Typography';\nimport { projectTypeLabelMap } from '@/constants/projectTypeOptions';\nimport { Icon } from '@/components/Icon';\nimport S from './styles';\n\nexport type ProjectNoumSelectorProps = Omit<\n  ApiEntityPickerFieldProps<string>,\n  'options' | 'onChange' | 'children'\n> & {\n  onChange: (value: string | undefined) => void;\n  preselectedItem?: Maybe<\n    Pick<SpaceOutputFragment, 'name' | 'profileImage' | 'projectType' | '_id'>\n  >;\n};\n\nexport function ProjectNoumSelector({\n  onChange,\n  preselectedItem,\n  ...apiEntityPickerFieldProps\n}: ProjectNoumSelectorProps) {\n  const [search, setSearch] = useState<string>();\n\n  const { data, loading, fetchMore } = useGetOwnProjectChambersQuery({\n    variables: {\n      limit: 10,\n      offset: 0,\n      filter: {\n        status: SpaceStatusEnum.Published,\n        search,\n      },\n      sort: {\n        column: 'name',\n        operator: SortOperator.Asc,\n      },\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const selectedItem = [\n    ...(data?.getOwnProjectChambers?.data ?? []),\n    preselectedItem,\n  ].find((item) => item?._id === apiEntityPickerFieldProps.value);\n\n  const projectTypeLabel =\n    projectTypeLabelMap[selectedItem?.projectType as ProjectChamberType];\n\n  const options = useMemo<DropdownItemType<string>[]>(\n    () =>\n      cleanList(data?.getOwnProjectChambers?.data).map((noum) => ({\n        type: 'value',\n        value: noum._id ?? '',\n        key: noum._id ?? '',\n        label: (\n          <TSpan\n            font=\"body-m-bold\"\n            colorToken=\"--text-tablecell-header-neutral-highlighted\"\n          >\n            {noum.name ?? ''} ⋅{' '}\n            <TSpan\n              font=\"body-m\"\n              colorToken=\"--text-tablecell-header-neutral-default\"\n            >\n              {projectTypeLabelMap[noum?.projectType as ProjectChamberType]}\n            </TSpan>\n          </TSpan>\n        ),\n        icon: <Avatar url={noum.profileImage} size=\"M\" />,\n      })),\n\n    [data?.getOwnProjectChambers?.data],\n  );\n\n  const inputValue = selectedItem\n    ? `${selectedItem.name} ${projectTypeLabel ? `⋅ ${projectTypeLabel}` : ''} `\n    : '';\n\n  return (\n    <ApiEntityPickerFieldWithRemoteSearch\n      {...apiEntityPickerFieldProps}\n      onInputChange={setSearch}\n      options={options}\n      hideIcons={false}\n      isLoading={loading}\n      readOnly={!!apiEntityPickerFieldProps.value}\n      value={apiEntityPickerFieldProps.value || undefined}\n      maxContainerHeight=\"350px\"\n      onChange={(option) => onChange(option?.value)}\n      inputValue={inputValue}\n      leftIcon={\n        selectedItem ? (\n          <Avatar url={selectedItem.profileImage} size=\"M\" />\n        ) : undefined\n      }\n      onFetchMore={() =>\n        fetchMore({\n          variables: {\n            offset: data?.getOwnProjectChambers?.data?.length ?? 0,\n          },\n        })\n      }\n      rightIcon={\n        loading ? (\n          <S.SpinnerContainer>\n            <Spinner zIndex={50} />\n          </S.SpinnerContainer>\n        ) : apiEntityPickerFieldProps.value &&\n          !apiEntityPickerFieldProps.disabled ? (\n          <Icon\n            onClick={() => {\n              onChange(undefined);\n              setSearch('');\n            }}\n            name=\"close_s\"\n            size={24}\n            color=\"--icon-input-neutral-default\"\n          />\n        ) : (\n          <></>\n        )\n      }\n    />\n  );\n}\n","import { Icon } from '@/components/Icon';\nimport Tooltip, { TooltipMessage } from '../Tooltip';\nimport { TSpan } from '../Typography/Typography';\nimport {\n  SelectedItem,\n  SelectedItemHeader,\n  SelectedRightColumn,\n  StyledColumn,\n} from './styles';\nimport { type ApiEntitySelectionPreviewComponentProps } from './types';\n\nexport function ApiEntitySelectionPreviewComponent<\n  Key extends string,\n  Data extends unknown = Key,\n>({\n  selectedOption,\n  fullWidth,\n  selectedRightSideOption,\n  disabled,\n  inputSize,\n  softDisabled,\n  softDisabledReason,\n  bold = true,\n  clearButtonDisabled,\n  onClear,\n  onChange,\n}: ApiEntitySelectionPreviewComponentProps<Key, Data>) {\n  if (!selectedOption) {\n    return null;\n  }\n\n  const shouldDisplayRightIcon = !disabled || softDisabled;\n  const rightIconColor = softDisabled\n    ? '--icon-input-neutral-disabled'\n    : '--icon-input-neutral-default';\n\n  return (\n    <SelectedItem $fullWidth={fullWidth}>\n      <SelectedItemHeader $inputSize={inputSize}>\n        {selectedOption.icon}\n        <StyledColumn>\n          <TSpan\n            font={bold ? 'body-l-bold' : 'body-l'}\n            colorToken=\"--text-tablecell-header-neutral-highlighted\"\n          >\n            {selectedOption.label}\n          </TSpan>\n          <TSpan colorToken=\"--text-tablecell-body-neutral-default\">\n            {selectedOption.description}\n          </TSpan>\n        </StyledColumn>\n        <SelectedRightColumn>\n          {selectedRightSideOption}\n          {shouldDisplayRightIcon &&\n            (softDisabledReason ? (\n              <Tooltip\n                icon={inputSize === 'small' ? 'close_s' : 'close_m'}\n                iconSize={24}\n                iconColor={rightIconColor}\n                top={30}\n                left={20}\n                onClick={() => {}}\n              >\n                <TooltipMessage>{softDisabledReason}</TooltipMessage>\n              </Tooltip>\n            ) : !clearButtonDisabled ? (\n              <Icon\n                name={inputSize === 'small' ? 'close_s' : 'close_m'}\n                size={24}\n                onClick={() => {\n                  onChange(undefined);\n                  onClear?.();\n                }}\n                color={rightIconColor}\n              />\n            ) : null)}\n        </SelectedRightColumn>\n      </SelectedItemHeader>\n    </SelectedItem>\n  );\n}\n","import { useReducer } from 'react';\nimport {\n  type Control,\n  type FieldArray,\n  type FieldArrayPath,\n  type FieldValues,\n  useFieldArray,\n  type UseFieldArrayReturn,\n  useFormContext,\n} from 'react-hook-form';\n\nexport type WizardMode = 'preview' | 'edit' | 'create';\n\ninterface WizardState {\n  mode: WizardMode;\n  editedIndex: number | null;\n}\n\ntype WizardStateAction =\n  | {\n      mode: 'preview';\n    }\n  | {\n      mode: 'edit';\n      editedIndex: number;\n    }\n  | {\n      mode: 'create';\n    };\n\nfunction wizardStateReducer(\n  state: WizardState,\n  action: WizardStateAction,\n): WizardState {\n  switch (action.mode) {\n    case 'create':\n      return { mode: 'create', editedIndex: null };\n    case 'preview':\n      return { mode: 'preview', editedIndex: null };\n    case 'edit':\n      return { mode: 'edit', editedIndex: action.editedIndex };\n    default:\n      return state;\n  }\n}\n\ninterface UseFieldArrayWizardOptions<\n  Values extends FieldValues,\n  Name extends FieldArrayPath<Values>,\n> {\n  name: Name;\n  initialMode?: Exclude<WizardMode, 'edit'>;\n}\n\nexport interface FieldArrayWizardApi<\n  Values extends FieldValues,\n  Name extends FieldArrayPath<Values>,\n> {\n  mode: WizardMode;\n  editedIndex: number | null;\n  fields: UseFieldArrayReturn<Values, Name>['fields'];\n  control: Control<Values>;\n  showNewItemForm(): void;\n  hideNewItemForm(): void;\n  addNewItem(values: FieldArray<Values, Name>): void;\n  deleteItem(index: number): void;\n  cancelItemEditing(): void;\n  saveItem(index: number, values: FieldArray<Values, Name>): void;\n  editItem(index: number): void;\n  insertItemAt(index: number, values: FieldArray<Values, Name>): void;\n}\n\nexport function useFieldArrayWizard<\n  Values extends FieldValues,\n  Name extends FieldArrayPath<Values>,\n>({\n  name,\n  initialMode = 'preview',\n}: UseFieldArrayWizardOptions<Values, Name>): FieldArrayWizardApi<\n  Values,\n  Name\n> {\n  const [{ mode, editedIndex }, dispatch] = useReducer(wizardStateReducer, {\n    mode: initialMode,\n    editedIndex: null,\n  });\n\n  const { control } = useFormContext<Values>();\n\n  const { fields, append, update, remove, insert } = useFieldArray<\n    Values,\n    Name\n  >({\n    name,\n    control,\n  });\n\n  const showNewItemForm = () => {\n    dispatch({ mode: 'create' });\n  };\n\n  const hideNewItemForm = () => {\n    dispatch({ mode: 'preview' });\n  };\n\n  const addNewItem = (values: FieldArray<Values, Name>) => {\n    append(values);\n    dispatch({ mode: 'preview' });\n  };\n\n  const deleteItem = (index: number) => {\n    remove(index);\n    dispatch({ mode: 'preview' });\n  };\n\n  const cancelItemEditing = () => {\n    dispatch({ mode: 'preview' });\n  };\n\n  const saveItem = (index: number, values: FieldArray<Values, Name>) => {\n    update(index, values);\n    dispatch({ mode: 'preview' });\n  };\n\n  const editItem = (index: number) => {\n    dispatch({ mode: 'edit', editedIndex: index });\n  };\n\n  const insertItemAt = (index: number, values: FieldArray<Values, Name>) => {\n    insert(index, values);\n  };\n\n  return {\n    mode,\n    editedIndex,\n    fields,\n    control,\n    showNewItemForm,\n    hideNewItemForm,\n    addNewItem,\n    deleteItem,\n    cancelItemEditing,\n    saveItem,\n    editItem,\n    insertItemAt,\n  };\n}\n","import styled from 'styled-components';\nimport { rgba, cssVar } from 'polished';\nimport { Stack } from '@/layout';\n\nconst Content = styled(Stack).attrs(() => ({}))`\n  position: relative;\n`;\n\nconst Overlay = styled(Stack).attrs(() => ({\n  justify: 'center',\n  align: 'center',\n}))`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: ${rgba(cssVar('--bg-overlay-neutral-light'), 0.2)};\n`;\n\nconst LoadingOverlay = styled(Overlay)``;\n\nconst ClickOverlay = styled(Overlay)`\n  display: none;\n  cursor: pointer;\n`;\n\nconst PdfPreviewWrapper = styled(Stack)`\n  background-color: var(--bg-card-neutral-alt-default);\n\n  &:hover ${ClickOverlay} {\n    display: flex;\n  }\n`;\n\nexport default {\n  PdfPreviewWrapper,\n  Content,\n  Overlay,\n  ClickOverlay,\n  LoadingOverlay,\n};\n","import { type HTMLAttributes, useRef } from 'react';\nimport { Document, Page, pdfjs } from 'react-pdf';\nimport { Spinner } from '@/components/Spinner';\nimport { TSpan } from '@/components/Typography';\nimport useRefDimensions from '@/hooks/useRefDimensions';\nimport { Button } from '../Button';\nimport { Icon } from '../Icon';\nimport S from './styles';\n\npdfjs.GlobalWorkerOptions.workerSrc = `${window.location.origin}/pdf.worker.js`;\n\ninterface PdfPreviewProps extends HTMLAttributes<HTMLDivElement> {\n  data?: string;\n  isLoading?: boolean;\n  onClick(): void;\n  fitBy?: 'width' | 'height';\n}\n\nfunction PdfPreviewThumbnail({\n  children,\n  isLoading,\n  data,\n  fitBy = 'width',\n  onClick,\n  ...divProps\n}: PdfPreviewProps) {\n  const ref = useRef<HTMLDivElement>(null);\n  const { width, height } = useRefDimensions(ref);\n\n  return (\n    <S.PdfPreviewWrapper\n      ref={ref}\n      align=\"center\"\n      justify=\"center\"\n      {...divProps}\n    >\n      {data ? (\n        children ?? (\n          <S.Content>\n            <Document file={data} loading={isLoading ? <Spinner /> : undefined}>\n              <Page\n                width={fitBy === 'width' ? width : undefined}\n                height={fitBy === 'height' ? height : undefined}\n                pageNumber={1}\n              />\n            </Document>\n\n            {isLoading ? (\n              <S.LoadingOverlay>\n                <Button tertiary disabled>\n                  {' '}\n                  <Spinner />\n                </Button>\n              </S.LoadingOverlay>\n            ) : (\n              <S.ClickOverlay onClick={onClick}>\n                <Button\n                  tertiary\n                  onClick={onClick}\n                  icon={<Icon name=\"zoom_m\" size={24} />}\n                />\n              </S.ClickOverlay>\n            )}\n          </S.Content>\n        )\n      ) : (\n        <TSpan font=\"body-l-bold\" colorToken=\"--text-card-neutral-disabled\">\n          No PDF Available\n        </TSpan>\n      )}\n    </S.PdfPreviewWrapper>\n  );\n}\n\nexport default PdfPreviewThumbnail;\n"],"names":["TooltipMessage","children","jsx","S.TooltipMessageContainer","S.TooltipMessage","ApiEntityPickerFieldWithRemoteSearch","rest","ApiEntityPickerField","SpinnerContainer","styled","div","S$1","ProjectNoumSelector","onChange","preselectedItem","apiEntityPickerFieldProps","search","setSearch","useState","data","loading","fetchMore","useGetOwnProjectChambersQuery","variables","limit","offset","filter","status","SpaceStatusEnum","Published","sort","column","operator","SortOperator","Asc","fetchPolicy","selectedItem","getOwnProjectChambers","find","item","_id","value","projectTypeLabel","projectTypeLabelMap","projectType","options","useMemo","cleanList","map","noum","type","key","label","TSpan","name","icon","Avatar","profileImage","inputValue","undefined","option","length","S","Spinner","disabled","Icon","Fragment","ApiEntitySelectionPreviewComponent","selectedOption","fullWidth","selectedRightSideOption","inputSize","softDisabled","softDisabledReason","bold","clearButtonDisabled","onClear","shouldDisplayRightIcon","rightIconColor","SelectedItem","jsxs","SelectedItemHeader","StyledColumn","description","SelectedRightColumn","Tooltip","wizardStateReducer","state","action","mode","editedIndex","useFieldArrayWizard","initialMode","dispatch","useReducer","control","useFormContext","fields","append","update","remove","insert","useFieldArray","showNewItemForm","hideNewItemForm","addNewItem","values","deleteItem","index","cancelItemEditing","saveItem","editItem","insertItemAt","Content","Stack","attrs","Overlay","justify","align","rgba","cssVar","LoadingOverlay","ClickOverlay","PdfPreviewWrapper","pdfjs","workerSrc","window","location","origin","PdfPreviewThumbnail","isLoading","fitBy","onClick","divProps","ref","useRef","width","height","useRefDimensions","Document","Page","Button"],"mappings":"meAOO,SAASA,EAAe,CAAEC,SAAAA,CAA8B,EAAG,CAE9D,OAAAC,EAACC,EAAA,CACC,WAACC,EAAA,CAAkBH,SAAAA,EAAS,CAC9B,CAAA,CAEJ,CCJA,SAASI,GAGP,CAAE,GAAGC,CAA2D,EAAG,CACnE,OAAQJ,EAAAK,EAAA,CAAgC,GAAID,EAAQ,YAAA,sBAAA,CAAA,CACtD,CCZA,MAAME,GAAmBC,EAAOC;AAAAA;AAAAA,EAIjBC,GAAA,CACbH,iBAAAA,EACF,EC0BO,SAASI,GAAoB,CAClCC,SAAAA,EACAC,gBAAAA,EACA,GAAGC,CACqB,EAAG,SAC3B,KAAM,CAACC,EAAQC,CAAS,EAAIC,EAAkB,SAAA,EAExC,CAAEC,KAAAA,EAAMC,QAAAA,EAASC,UAAAA,GAAcC,EAA8B,CACjEC,UAAW,CACTC,MAAO,GACPC,OAAQ,EACRC,OAAQ,CACNC,OAAQC,EAAgBC,UACxBb,OAAAA,CACF,EACAc,KAAM,CACJC,OAAQ,OACRC,SAAUC,EAAaC,GACzB,CACF,EACAC,YAAa,mBAAA,CACd,EAEKC,EAAe,CACnB,KAAIjB,EAAAA,GAAAA,YAAAA,EAAMkB,wBAANlB,YAAAA,EAA6BA,OAAQ,CAAA,EACzCL,CAAe,EACfwB,KAAMC,IAASA,GAAAA,YAAAA,EAAMC,OAAQzB,EAA0B0B,KAAK,EAExDC,EACJC,EAAoBP,GAAAA,YAAAA,EAAcQ,WAAkC,EAEhEC,EAAUC,UACd,IAAA,OACEC,OAAAA,GAAU5B,EAAAA,GAAAA,YAAAA,EAAMkB,wBAANlB,YAAAA,EAA6BA,IAAI,EAAE6B,IAAeC,IAAA,CAC1DC,KAAM,QACNT,MAAOQ,EAAKT,KAAO,GACnBW,IAAKF,EAAKT,KAAO,GACjBY,QACGC,EACC,CAAA,KAAK,cACL,WAAW,8CAA6C,YAAA,gBAEvDJ,SAAAA,CAAAA,EAAKK,MAAQ,GAAG,KAAG,IACpBpD,EAACmD,EACC,CAAA,KAAK,SACL,WAAW,0CAAyC,YAAA,gBAEnDV,SAAAA,EAAoBM,GAAAA,YAAAA,EAAML,WAAkC,CAC/D,CAAA,CAAA,EACF,EAEFW,OAAOC,EAAO,CAAA,IAAKP,EAAKQ,aAAc,KAAK,IAAG,YAAA,gBAAA,CAAA,GAC9C,GAEJ,EAACtC,EAAAA,GAAAA,YAAAA,EAAMkB,wBAANlB,YAAAA,EAA6BA,IAAI,CAAC,EAG/BuC,EAAatB,EACd,GAAEA,EAAakB,QAAQZ,EAAoB,KAAIA,IAAqB,MACrE,GAGF,OAAAxC,EAACG,IACC,GAAIU,EACJ,cAAeE,EACf,QAAA4B,EACA,UAAW,GACX,UAAWzB,EACX,SAAU,CAAC,CAACL,EAA0B0B,MACtC,MAAO1B,EAA0B0B,OAASkB,OAC1C,mBAAmB,QACnB,SAAsB9C,GAAAA,EAAS+C,GAAAA,YAAAA,EAAQnB,KAAK,EAC5C,WAAAiB,EACA,SACEtB,IACGoB,EAAO,CAAA,IAAKpB,EAAaqB,aAAc,KAAK,IAAG,YAAA,SAAA,EAC9CE,OAEN,YAAa,IAAA,SACXtC,OAAAA,EAAU,CACRE,UAAW,CACTE,SAAQN,GAAAA,EAAAA,GAAAA,YAAAA,EAAMkB,wBAANlB,YAAAA,EAA6BA,OAA7BA,YAAAA,EAAmC0C,SAAU,CACvD,CACD,CAAA,GAEH,UACEzC,EACElB,EAAC4D,GAAE,iBAAF,CACC,SAAC5D,EAAA6D,EAAA,CAAQ,OAAQ,GAAG,YAAA,UAAA,CAAA,CACtB,EACEhD,EAA0B0B,OAC5B,CAAC1B,EAA0BiD,SAC3B9D,EAAC+D,EACC,CAAA,QAAS,IAAM,CACbpD,EAAS8C,MAAS,EAClB1C,EAAU,EAAE,CAAA,EAEd,KAAK,UACL,KAAM,GACN,MAAM,+BAA8B,YAAA,MAAA,CAAA,EAGpCf,EAAAgE,EAAA,CAAA,CAAA,EAGN,YAAA,sCAAA,CAAA,CAEN,CClIO,SAASC,GAGd,CACAC,eAAAA,EACAC,UAAAA,EACAC,wBAAAA,EACAN,SAAAA,EACAO,UAAAA,EACAC,aAAAA,EACAC,mBAAAA,EACAC,KAAAA,EAAO,GACPC,oBAAAA,EACAC,QAAAA,EACA/D,SAAAA,CACkD,EAAG,CACrD,GAAI,CAACuD,EACI,OAAA,KAGHS,MAAAA,EAAyB,CAACb,GAAYQ,EACtCM,EAAiBN,EACnB,gCACA,+BAGF,OAAAtE,EAAC6E,EAAa,CAAA,WAAYV,EAAU,YAAA,eAClC,SAAAW,EAACC,EAAmB,CAAA,WAAYV,EAAU,YAAA,qBACvCH,SAAAA,CAAeb,EAAAA,KAChByB,EAACE,EAAY,CAAA,YAAA,eACX,SAAA,CAAChF,EAAAmD,EAAA,CACC,KAAMqB,EAAO,cAAgB,SAC7B,WAAW,8CAA6C,YAAA,QAEvDN,SAAAA,EAAehB,KAClB,CAAA,IACCC,EAAM,CAAA,WAAW,wCAAuC,YAAA,QACtDe,WAAee,YAClB,CAAA,EACF,EACAH,EAACI,EAAmB,CAAA,YAAA,sBACjBd,SAAAA,CAAAA,EACAO,IACEJ,EACCvE,EAACmF,GACC,KAAMd,IAAc,QAAU,UAAY,UAC1C,SAAU,GACV,UAAWO,EACX,IAAK,GACL,KAAM,GACN,QAAS,IAAM,CAAC,EAAE,YAAA,UAElB,SAAA5E,EAACF,GAAc,YAAA,iBAAEyE,SAAmBA,CAAA,CAAA,CAAA,CACtC,EACGE,EAUD,KATDzE,EAAA+D,EAAA,CACC,KAAMM,IAAc,QAAU,UAAY,UAC1C,KAAM,GACN,QAAS,IAAM,CACb1D,EAAS8C,MAAS,EACPiB,GAAA,MAAAA,GAAA,EAEb,MAAOE,EAAe,YAAA,MAAA,CAAA,EAEtB,EACR,CAAA,CACF,CAAA,CACF,CAAA,CAEJ,CClDA,SAASQ,GACPC,EACAC,EACa,CACb,OAAQA,EAAOC,KAAI,CACjB,IAAK,SACI,MAAA,CAAEA,KAAM,SAAUC,YAAa,IAAA,EACxC,IAAK,UACI,MAAA,CAAED,KAAM,UAAWC,YAAa,IAAA,EACzC,IAAK,OACI,MAAA,CAAED,KAAM,OAAQC,YAAaF,EAAOE,WAAAA,EAC7C,QACSH,OAAAA,CAAM,CAEnB,CA4BO,SAASI,GAGd,CACArC,KAAAA,EACAsC,YAAAA,EAAc,SAC0B,EAGxC,CACA,KAAM,CAAC,CAAEH,KAAAA,EAAMC,YAAAA,CAAAA,EAAeG,CAAQ,EAAIC,EAAAA,WAAWR,GAAoB,CACvEG,KAAMG,EACNF,YAAa,IAAA,CACd,EAEK,CAAEK,QAAAA,GAAYC,EAAwB,EAEtC,CAAEC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,EAAQC,OAAAA,GAAWC,EAGjD,CACAhD,KAAAA,EACAyC,QAAAA,CAAAA,CACD,EAqCM,MAAA,CACLN,KAAAA,EACAC,YAAAA,EACAO,OAAAA,EACAF,QAAAA,EACAQ,gBAxCsBA,IAAM,CACnBV,EAAA,CAAEJ,KAAM,QAAA,CAAU,CAAA,EAwC3Be,gBArCsBA,IAAM,CACnBX,EAAA,CAAEJ,KAAM,SAAA,CAAW,CAAA,EAqC5BgB,WAlCkBC,GAAqC,CACvDR,EAAOQ,CAAM,EACJb,EAAA,CAAEJ,KAAM,SAAA,CAAW,CAAA,EAiC5BkB,WA9BkBC,GAAkB,CACpCR,EAAOQ,CAAK,EACHf,EAAA,CAAEJ,KAAM,SAAA,CAAW,CAAA,EA6B5BoB,kBA1BwBA,IAAM,CACrBhB,EAAA,CAAEJ,KAAM,SAAA,CAAW,CAAA,EA0B5BqB,SAvBeA,CAACF,EAAeF,IAAqC,CACpEP,EAAOS,EAAOF,CAAM,EACXb,EAAA,CAAEJ,KAAM,SAAA,CAAW,CAAA,EAsB5BsB,SAnBgBH,GAAkB,CACzBf,EAAA,CAAEJ,KAAM,OAAQC,YAAakB,CAAAA,CAAO,CAAA,EAmB7CI,aAhBmBA,CAACJ,EAAeF,IAAqC,CACxEL,EAAOO,EAAOF,CAAM,CAAA,CAepBM,CAEJ,CC9IA,MAAMC,GAAUxG,EAAOyG,CAAK,EAAEC,MAAM,KAAO,CAAG,EAAA;AAAA;AAAA,EAIxCC,EAAU3G,EAAOyG,CAAK,EAAEC,MAAM,KAAO,CACzCE,QAAS,SACTC,MAAO,QACT,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMoBC,EAAKC,EAAO,4BAA4B,EAAG,EAAG;AAAA,EAG9DC,GAAiBhH,EAAO2G,CAAO,IAE/BM,EAAejH,EAAO2G,CAAO;AAAA;AAAA;AAAA,EAK7BO,GAAoBlH,EAAOyG,CAAK;AAAA;AAAA;AAAA,YAG1BQ;AAAAA;AAAAA;AAAAA,EAKG5D,EAAA,CACb6D,kBAAAA,GACAV,QAAAA,GACAG,QAAAA,EACAM,aAAAA,EACAD,eAAAA,EACF,EChCAG,EAAAA,oBAA0BC,UAAa,GAAEC,OAAOC,SAASC,uBASzD,SAASC,GAAoB,CAC3BhI,SAAAA,EACAiI,UAAAA,EACA/G,KAAAA,EACAgH,MAAAA,EAAQ,QACRC,QAAAA,EACA,GAAGC,CACY,EAAG,CACZC,MAAAA,EAAMC,SAAuB,IAAI,EACjC,CAAEC,MAAAA,EAAOC,OAAAA,CAAAA,EAAWC,EAAiBJ,CAAG,EAE9C,SACGxE,EAAE,kBAAF,CACC,IAAAwE,EACA,MAAM,SACN,QAAQ,SACJD,GAAAA,EAEHlH,SACClB,EAAAA,GACG+E,EAAAlB,EAAE,QAAF,CACC,SAAA,CAAA5D,EAACyI,EAAS,CAAA,KAAMxH,EAAM,QAAS+G,EAAYhI,EAAC6D,EAAU,CAAA,YAAA,SAAA,CAAA,EAAGJ,OAAU,YAAA,WACjE,SAAAzD,EAAC0I,EACC,CAAA,MAAOT,IAAU,QAAUK,EAAQ7E,OACnC,OAAQwE,IAAU,SAAWM,EAAS9E,OACtC,WAAY,EAAE,YAAA,MAAA,CAAA,EAElB,EAECuE,EACChI,EAAC4D,EAAE,eAAF,CACC,SAAAkB,EAAC6D,EAAO,CAAA,SAAQ,GAAC,SAAQ,GAAA,YAAA,SACtB,SAAA,CAAA,IACD3I,EAAC6D,EAAO,CAAA,YAAA,SAAA,CAAA,CACV,CAAA,CAAA,CAAA,CACF,EAEA7D,EAAC4D,EAAE,aAAF,CAAe,QAAAsE,EACd,SAAAlI,EAAC2I,EACC,CAAA,SAAQ,GACR,QAAAT,EACA,KAAOlI,EAAA+D,EAAA,CAAK,KAAK,SAAS,KAAM,GAAG,YAAA,MAAA,CAAA,EAAI,YAAA,QAAA,CAAA,CAE3C,CAAA,CAEJ,CAAA,CAAA,EAGD/D,EAAAmD,EAAA,CAAM,KAAK,cAAc,WAAW,+BAA8B,YAAA,QAAA,SAAA,kBAEnE,CAAA,CAEJ,CAAA,CAEJ"}