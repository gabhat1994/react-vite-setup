{"version":3,"file":"index-873eb1eb.js","sources":["../../src/screens/NoumPosts/AllNoumPosts.tsx","../../src/screens/NoumPosts/FilterPosts.tsx","../../src/screens/NoumPosts/Modal.tsx","../../src/screens/NoumPosts/styles.ts","../../src/screens/NoumPosts/PostMobileActions.tsx","../../src/screens/NoumPosts/Posts.tsx","../../src/screens/NoumPosts/index.tsx"],"sourcesContent":["import { getBottomStatusFromQuery, Infinite } from '@/components/Infinite';\nimport PostItem from '@/screens/Chamber/components/elements/PostElement/components/PostItem';\n\nimport { type AllNoumPostsProps } from './types';\n\nconst AllNoumPosts = ({\n  totalCount,\n  posts,\n  fetchMore,\n  networkStatus,\n}: AllNoumPostsProps) => (\n  <Infinite\n    width=\"100%\"\n    onFetchMore={fetchMore}\n    status={getBottomStatusFromQuery({\n      networkStatus,\n      totalCount,\n      currentCount: posts.length,\n    })}\n    grow\n    style={{ gap: '16px' }}\n  >\n    {posts.map((post) => (\n      <PostItem key={`post-item-${post._id}`} data={post} />\n    ))}\n  </Infinite>\n);\n\nexport default AllNoumPosts;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { t } from 'i18next';\n\nimport { Icon } from '@/components/Icon';\nimport { Dropdown, type DropdownValueType } from '@/components/Dropdown';\nimport { TextField } from '@/components/TextField';\nimport {\n  PostVisibility,\n  SortOperator,\n  type UserOutput,\n} from '@/apollo/generated/types';\nimport { capitalizeAllWord } from '@/utils/strings';\nimport { Stack } from '@/layout';\nimport {\n  OrderOptions,\n  VisibilityOptions,\n} from '../Chamber/components/elements/PostElement/modals/FilterPost/constants';\nimport { type FilterType } from '../Chamber/components/elements/PostElement/types';\nimport { usePostElement } from '../Chamber/components/elements/PostElement/PostElementProvider';\nimport AuthorOptionsRenderer from '../Chamber/components/elements/PostElement/modals/FilterPost/AuthorOptionsRenderer';\nimport VisibilityoptionsRenderer from '../Chamber/components/elements/PostElement/modals/FilterPost/VisibilityOptionsRenderer';\n\nexport const FilterPosts = () => {\n  const {\n    setFilter: setPostFilter,\n    noumEditor2,\n    isMasterNoum,\n    authorFilterOptions: authorOptions,\n    setAuthorFilterKeyword: setKeyword,\n  } = usePostElement();\n\n  const [isOrderOpen, setIsOrderOpen] = useState(false);\n  const [isVisibilityOpen, setVisibilityOpen] = useState(false);\n  const [isAuthorFilterOpen, setAuthorFilterOpen] = useState(false);\n  const [order, setOrder] = useState<SortOperator>(SortOperator.Desc);\n  const [visibility, setVisibility] = useState<PostVisibility[]>([\n    PostVisibility.Connection,\n    PostVisibility.Follower,\n  ]);\n\n  const [filterAuthors, setFilterAuthors] = useState<\n    DropdownValueType<UserOutput>[]\n  >([]);\n\n  useEffect(() => {\n    if (authorOptions.length > 0)\n      setFilterAuthors(authorOptions as DropdownValueType<UserOutput>[]);\n  }, [authorOptions]);\n\n  const applyFilters = useCallback(\n    (\n      authorsArg: DropdownValueType<UserOutput | string>[],\n      PostAuthorVisibilty,\n    ) => {\n      const tmpFilter: FilterType = {\n        filter: { visibility: PostAuthorVisibilty },\n      };\n      if (authorsArg.length > 0) {\n        if (authorsArg.length !== authorOptions.length) {\n          tmpFilter.filter = {\n            ...tmpFilter.filter,\n            uids: authorsArg.map((item) => item.key),\n          };\n        }\n      } else {\n        tmpFilter.filter = {\n          ...tmpFilter.filter,\n          uids: [],\n        };\n      }\n      setPostFilter(tmpFilter);\n    },\n    [authorOptions.length, setPostFilter],\n  );\n\n  const onSelectOrder = useCallback(\n    (op) => {\n      setOrder(op.value);\n      const tmpFilter: FilterType = {};\n      tmpFilter.sort = {\n        column: 'createdAt',\n        operator: op.value,\n      };\n      setPostFilter(tmpFilter);\n    },\n    [setPostFilter],\n  );\n\n  const onSelectMember = useCallback(\n    (op) => {\n      const found = visibility.find((item) => item === op.value);\n      if (found) {\n        const filterMember = visibility.filter((item) => item !== op.value);\n        applyFilters(filterAuthors, filterMember);\n        setVisibility(filterMember);\n      } else {\n        const addMember = [...visibility, op.value];\n        applyFilters(filterAuthors, addMember);\n        setVisibility(addMember);\n      }\n    },\n    [applyFilters, filterAuthors, visibility],\n  );\n\n  const onSelectAuthor = useCallback(\n    (op) => {\n      const foundIndex = filterAuthors.findIndex(\n        (authorItem) => authorItem.value._id === op?.value?._id,\n      );\n\n      const newFilterAuthors = noumEditor2\n        ? foundIndex > -1\n          ? filterAuthors.filter(\n              (authorItem) => authorItem.value._id !== op?.value?._id,\n            )\n          : [...filterAuthors, op]\n        : [op];\n\n      setFilterAuthors(newFilterAuthors);\n      applyFilters(newFilterAuthors, visibility);\n    },\n    [applyFilters, filterAuthors, noumEditor2, visibility],\n  );\n\n  const orderValue = useMemo(\n    () => OrderOptions.find((od) => od.value === order)?.label?.toString(),\n    [order],\n  );\n\n  const visibilityValue = useMemo(() => {\n    if (visibility.length === 2) {\n      return 'All';\n    }\n    if (visibility.length === 0) {\n      return 'Members';\n    }\n    return `${capitalizeAllWord(visibility[0])}s`;\n  }, [visibility]);\n\n  const authorValue = useMemo(\n    () =>\n      filterAuthors.length > 0 && filterAuthors.length === authorOptions.length\n        ? t('noumena.search.filter_all')\n        : filterAuthors.map((faItem) => faItem.label).join(', '),\n    [authorOptions.length, filterAuthors],\n  );\n\n  const handleInputAuthor = useCallback(\n    (e) => {\n      setKeyword?.(e.target.value);\n    },\n    [setKeyword],\n  );\n\n  const handleAuthorFilterClose = () => {\n    setKeyword?.('');\n    setAuthorFilterOpen(false);\n  };\n\n  return (\n    <Stack gap={16}>\n      <Dropdown\n        hideIcons={true}\n        closeOnSelect\n        placement=\"bottom-end\"\n        options={OrderOptions}\n        onSelectOption={onSelectOrder}\n        onOpen={() => setIsOrderOpen(true)}\n        onClose={() => setIsOrderOpen(false)}\n        isAnimation={false}\n        observerMinHeight=\"0\"\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            readOnly\n            inputSize=\"normal\"\n            ref={inputRef}\n            {...inputProps}\n            value={orderValue}\n            label={t('noumena.post.filter.order_label')}\n            spellCheck=\"false\"\n            rightIcon={\n              isOrderOpen ? (\n                <Icon\n                  name=\"chevron_up_m\"\n                  size={16}\n                  color=\"--icon-input-neutral-default\"\n                  onClick={toggle}\n                />\n              ) : (\n                <Icon\n                  name=\"chevron_down_m\"\n                  color=\"--icon-input-neutral-default\"\n                  size={16}\n                  onClick={toggle}\n                />\n              )\n            }\n          />\n        )}\n      </Dropdown>\n      <Dropdown\n        multiselect\n        closeOnSelect={false}\n        hideIcons={true}\n        placement=\"bottom-end\"\n        options={VisibilityOptions}\n        onSelectOption={onSelectMember}\n        onOpen={() => setVisibilityOpen(true)}\n        onClose={() => setVisibilityOpen(false)}\n        isAnimation={false}\n        observerMinHeight=\"0\"\n        optionsRenderer={(options, handleSelectOption) => (\n          <VisibilityoptionsRenderer\n            handleSelectOption={handleSelectOption}\n            options={options}\n            activeItem={visibility}\n          />\n        )}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            inputSize=\"normal\"\n            readOnly\n            ref={inputRef}\n            {...inputProps}\n            value={visibilityValue}\n            label={t('noumena.post.filter.visibility_label')}\n            spellCheck=\"false\"\n            rightIcon={\n              isVisibilityOpen ? (\n                <Icon\n                  name=\"chevron_up_m\"\n                  color=\"--icon-input-neutral-default\"\n                  size={16}\n                  onClick={toggle}\n                />\n              ) : (\n                <Icon\n                  name=\"chevron_down_m\"\n                  color=\"--icon-input-neutral-default\"\n                  size={16}\n                  onClick={toggle}\n                />\n              )\n            }\n          />\n        )}\n      </Dropdown>\n      {!isMasterNoum && (\n        <Dropdown\n          multiselect={noumEditor2}\n          hideIcons={false}\n          closeOnSelect={!noumEditor2}\n          placement=\"bottom-end\"\n          onOpen={() => setAuthorFilterOpen(true)}\n          onClose={handleAuthorFilterClose}\n          options={authorOptions}\n          onSelectOption={onSelectAuthor}\n          isAnimation={false}\n          observerMinHeight=\"0\"\n          optionsRenderer={(options, handleSelectOption) => (\n            <AuthorOptionsRenderer\n              options={options}\n              handleSelectOption={handleSelectOption}\n              noumEditor2={noumEditor2}\n              activeItemKeys={filterAuthors.map((faItem) => faItem.key)}\n            />\n          )}\n        >\n          {({ inputProps, inputRef, toggle }) => (\n            <TextField\n              inputSize=\"normal\"\n              ref={inputRef}\n              {...inputProps}\n              value={authorValue}\n              onChange={handleInputAuthor}\n              label={t('noumena.post.filter.authors_label')}\n              spellCheck=\"false\"\n              rightIcon={\n                isAuthorFilterOpen ? (\n                  <Icon\n                    name=\"chevron_up_m\"\n                    size={16}\n                    color=\"--icon-input-neutral-default\"\n                    onClick={toggle}\n                  />\n                ) : (\n                  <Icon\n                    name=\"chevron_down_m\"\n                    color=\"--icon-input-neutral-default\"\n                    size={16}\n                    onClick={toggle}\n                  />\n                )\n              }\n            />\n          )}\n        </Dropdown>\n      )}\n    </Stack>\n  );\n};\n\nexport default FilterPosts;\n","import { Fragment, useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { Spacer, Stack } from '@/layout';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { Radiobox } from '@/components/Radiobox';\nimport { t } from 'i18next';\nimport {\n  PostVisibility,\n  SortOperator,\n  type UserOutput,\n} from '@/apollo/generated/types';\nimport { cleanList } from '@/utils/list';\nimport { capitalizeAllWord } from '@/utils/strings';\nimport { getFullName } from '@/utils/fullName';\n\nimport { Checkbox } from '@/components/Checkbox';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport {\n  OrderOptions,\n  VisibilityOptions,\n} from '../Chamber/components/elements/PostElement/modals/FilterPost/constants';\nimport { usePostElement } from '../Chamber/components/elements/PostElement/PostElementProvider';\nimport { type FilterType } from '../Chamber/components/elements/PostElement/types';\nimport { type PostMobileActionModalProps } from './types';\nimport { useLaunchDarkly } from '../../hooks';\n\nconst allOption: DropdownValueType<string> = {\n  type: 'value',\n  value: 'all',\n  key: 'all_authors',\n  label: 'All',\n};\n\nconst MobilePostFilter: React.FC<PostMobileActionModalProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const {\n    flags: { noumEditor2 },\n  } = useLaunchDarkly();\n  const {\n    setShowFilter,\n    setFilter: setPostFilter,\n    filter,\n    isMasterNoum,\n    authorFilterOptions: authorOptions,\n  } = usePostElement();\n  const [isChanged, setIsChanged] = useState(false);\n  const [changedView, setChangedView] = useState('');\n  const [order, setOrder] = useState<SortOperator>(SortOperator.Desc);\n  const [visibility, setVisibility] = useState<PostVisibility[]>([\n    PostVisibility.Connection,\n  ]);\n  const [filterAuthors, setFilterAuthors] = useState<\n    DropdownValueType<UserOutput>[]\n  >([]);\n  const [author, setAuthor] =\n    useState<DropdownValueType<UserOutput | string>>(allOption);\n\n  useEffect(() => {\n    if (authorOptions.length > 0) {\n      setFilterAuthors(authorOptions as DropdownValueType<UserOutput>[]);\n    }\n  }, [authorOptions]);\n\n  const closeModal = useCallback(() => {\n    setShowFilter(false);\n    setIsChanged(false);\n    setChangedView('');\n    onClose();\n  }, [onClose, setShowFilter]);\n\n  const onSelectOrder = useCallback(\n    (op) => {\n      if (!isChanged) setIsChanged(true);\n      setOrder(op.value);\n    },\n    [isChanged],\n  );\n\n  const onSelectMember = useCallback(\n    (op) => {\n      if (!isChanged) setIsChanged(true);\n      const found = visibility.find((item) => item === op.value);\n      if (found) {\n        setVisibility(visibility.filter((item) => item !== op.value));\n      } else {\n        setVisibility([...visibility, op.value]);\n      }\n    },\n    [isChanged, visibility],\n  );\n\n  const onSelectAuthor = useCallback(\n    (op) => {\n      if (!isChanged) setIsChanged(true);\n      const foundIndex = filterAuthors.findIndex(\n        (authorItem) => authorItem.value._id === op?.value?._id,\n      );\n\n      const newFilterAuthors = noumEditor2\n        ? foundIndex > -1\n          ? filterAuthors.filter(\n              (authorItem) => authorItem.value._id !== op?.value?._id,\n            )\n          : [...filterAuthors, op]\n        : [op];\n\n      setFilterAuthors(newFilterAuthors);\n    },\n    [filterAuthors, isChanged, noumEditor2],\n  );\n\n  const orderValue = useMemo(\n    () => OrderOptions.find((od) => od.value === order)?.label?.toString(),\n    [order],\n  );\n\n  const visibilityValue = useMemo(() => {\n    if (visibility.length === 2) {\n      return 'All';\n    }\n    if (visibility.length === 0) {\n      return 'Members';\n    }\n    return `${capitalizeAllWord(visibility[0])}s`;\n  }, [visibility]);\n\n  const authorValue = useMemo(() => {\n    if (noumEditor2) {\n      if (authorOptions.length === filterAuthors.length)\n        return t('noumena.search.filter_all');\n      return filterAuthors\n        .map((faItem) =>\n          getFullName(\n            faItem.value.firstName,\n            faItem.value.middleName,\n            faItem.value.lastName,\n          ),\n        )\n        .join(', ');\n    }\n    if (typeof author.value === 'string') {\n      return t('noumena.search.filter_all');\n    }\n    return getFullName(\n      author.value.firstName,\n      author.value.middleName,\n      author.value.lastName,\n    );\n  }, [author.value, authorOptions.length, filterAuthors, noumEditor2]);\n\n  const applyFilters = useCallback(() => {\n    const tmpFilter: FilterType = {};\n    if (authorOptions.length === filterAuthors.length) {\n      tmpFilter.filter = { visibility };\n    } else if (filterAuthors.length > 0) {\n      tmpFilter.filter = {\n        uids: filterAuthors.map((faItem) => faItem.key),\n        visibility,\n      };\n    } else {\n      tmpFilter.filter = {\n        uids: [],\n        visibility,\n      };\n    }\n\n    tmpFilter.sort = {\n      column: 'createdAt',\n      operator: order,\n    };\n\n    setPostFilter(tmpFilter);\n    setIsChanged(false);\n    setChangedView('');\n    onClose();\n  }, [filterAuthors, order, setPostFilter, onClose, authorOptions, visibility]);\n\n  useEffect(() => {\n    if (!filter) return;\n    // initialize Filter modal with Current Filter\n    if (filter.filter?.uid) {\n      const findAuthor = authorOptions.find((au) => {\n        if (typeof au.value !== 'string') {\n          return filter.filter?.uid === au.value._id;\n        }\n        return false;\n      });\n      setAuthor(findAuthor || allOption);\n    } else {\n      setAuthor(allOption);\n    }\n    setVisibility(\n      cleanList(filter.filter?.visibility) || [PostVisibility.Connection],\n    );\n    setOrder(filter.sort?.operator || SortOperator.Desc);\n  }, [filter, authorOptions]);\n\n  const isActive = (option: DropdownValueType<string | UserOutput, string>) =>\n    filterAuthors.some((faItem) => faItem.key === option.key);\n\n  return (\n    <Modal\n      open={isOpen}\n      isFullScreen\n      enableCloseButton\n      testId=\"chamber-filter\"\n      onClose={closeModal}\n      disableBackdropClick\n      customCloseButton={\n        <>\n          {changedView ? (\n            <Stack padding=\"0 16px\" onClick={() => setChangedView('')}>\n              <Icon name=\"arrow_left_m\" size={24} />\n            </Stack>\n          ) : (\n            <Stack padding=\"0 16px\" onClick={closeModal}>\n              <Icon name=\"close_m\" size={24} />\n            </Stack>\n          )}\n        </>\n      }\n    >\n      <ModalHeader isFullScreen justifyContent=\"flex-start\">\n        {changedView === 'Show Posts for'\n          ? t('noumena.editor.post_visibility')\n          : changedView === 'Show Posts for'\n          ? t('noumena.editor.post_author')\n          : t(`noumena.chambers.filter_modal_title`)}\n      </ModalHeader>\n      <ModalBody maxHeight=\"unset\">\n        {changedView === 'Show Posts for' ? (\n          <>\n            {VisibilityOptions.map((item) => (\n              <Fragment key={item.key}>\n                <Stack\n                  gap={16}\n                  onClick={() => onSelectMember(item)}\n                  padding=\"20px 0\"\n                  borderBottom\n                  fullWidth\n                  justify=\"space-between\"\n                >\n                  <TSpan\n                    font=\"body-l\"\n                    colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                  >\n                    {item.label?.toString()}\n                  </TSpan>\n                  <Checkbox\n                    onChange={() => onSelectMember(item)}\n                    icon={\n                      <Icon\n                        name=\"tick_m\"\n                        size={visibility.includes(item.value) ? 24 : 0}\n                        color=\"--icon-checkbox-neutral-alt-default\"\n                      />\n                    }\n                    isChecked={visibility.includes(item.value)}\n                  />\n                </Stack>\n              </Fragment>\n            ))}\n          </>\n        ) : changedView === 'Authors' ? (\n          <>\n            {authorOptions.map((item) => (\n              <Fragment key={item.key}>\n                <Stack\n                  gap={16}\n                  onClick={() => onSelectAuthor(item)}\n                  padding=\"20px 0\"\n                  borderBottom\n                  fullWidth\n                  justify=\"space-between\"\n                >\n                  <Stack gap={16}>\n                    {typeof item.value !== 'string' && (\n                      <Avatar\n                        url={\n                          item.value.profile?.profilePictureThumbnail ||\n                          undefined\n                        }\n                        size=\"M\"\n                      />\n                    )}\n                    <TSpan\n                      font=\"body-l\"\n                      colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                    >\n                      {item.label?.toString()}\n                    </TSpan>\n                  </Stack>\n                  <Checkbox\n                    onChange={() => onSelectAuthor(item)}\n                    icon={\n                      <Icon\n                        name=\"tick_m\"\n                        size={isActive(item) ? 24 : 0}\n                        color=\"--icon-checkbox-neutral-alt-default\"\n                      />\n                    }\n                    isChecked={isActive(item)}\n                  />\n                </Stack>\n              </Fragment>\n            ))}\n          </>\n        ) : (\n          <>\n            <TSpan\n              font=\"body-l-bold\"\n              colorToken=\"--text-body-header-neutral-default\"\n            >\n              {t('noumena.chambers.sorting')}\n            </TSpan>\n            <Spacer height={16} />\n            {OrderOptions.map((item) => (\n              <Stack fullWidth key={item.key}>\n                <Stack\n                  gap={16}\n                  onClick={() => onSelectOrder(item)}\n                  padding=\"13px 0\"\n                  borderBottom\n                  fullWidth\n                >\n                  <Radiobox\n                    isChecked={item.label === orderValue}\n                    icon={\n                      <Icon\n                        name=\"radio_btn_m\"\n                        size={item.label === orderValue ? 12 : 0}\n                        color={\n                          item.label === orderValue\n                            ? '--icon-radiobutton-brand-primary-default'\n                            : '--icon-radiobutton-inactive-default'\n                        }\n                      />\n                    }\n                  />\n                  <TSpan\n                    font=\"body-m-bold\"\n                    colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                  >\n                    {item.label?.toString()}\n                  </TSpan>\n                </Stack>\n              </Stack>\n            ))}\n            <Spacer height={24} />\n            <>\n              <TSpan\n                font=\"body-l-bold\"\n                colorToken=\"--text-body-header-neutral-default\"\n              >\n                {t('noumena.editor.post_filtering')}\n              </TSpan>\n              <Spacer height={16} />\n              <Stack\n                justify=\"space-between\"\n                fullWidth\n                borderBottom\n                padding=\"13px 0px\"\n                align=\"center\"\n                onClick={() => setChangedView('Show Posts for')}\n              >\n                <Stack vertical gap={4}>\n                  <TSpan\n                    font=\"body-m-bold\"\n                    colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                  >\n                    {t('noumena.editor.post_visibility')}\n                  </TSpan>\n                  <TSpan colorToken=\"--text-tablecell-body-neutral-default\">\n                    {visibilityValue}\n                  </TSpan>\n                </Stack>\n                <Icon name=\"chevron_right_m\" size={12} />\n              </Stack>\n              {!isMasterNoum && (\n                <Stack\n                  justify=\"space-between\"\n                  fullWidth\n                  borderBottom\n                  padding=\"13px 0px\"\n                  align=\"center\"\n                  onClick={() => setChangedView('Authors')}\n                >\n                  <Stack vertical gap={4}>\n                    <TSpan\n                      font=\"body-m-bold\"\n                      colorToken=\"--text-tablecell-header-neutral-highlighted\"\n                    >\n                      {t('noumena.editor.post_author')}\n                    </TSpan>\n                    <TSpan colorToken=\"--text-tablecell-body-neutral-default\">\n                      {authorValue}\n                    </TSpan>\n                  </Stack>\n                  <Icon name=\"chevron_right_m\" size={12} />\n                </Stack>\n              )}\n            </>\n          </>\n        )}\n      </ModalBody>\n      <ModalFooter justifyContent=\"center\">\n        {isChanged ? (\n          <Button\n            testId=\"chamber-filter-apply-button\"\n            onClick={() => applyFilters()}\n            primary\n            size=\"full\"\n          >\n            {t(`noumena.editor.post_filter_save`)}\n          </Button>\n        ) : (\n          <Button\n            testId=\"chamber-filter-cancel-button\"\n            size=\"full\"\n            primary\n            onClick={closeModal}\n          >\n            {t(`noumena.editor.post_filter_close`)}\n          </Button>\n        )}\n      </ModalFooter>\n    </Modal>\n  );\n};\n\nexport default MobilePostFilter;\n","import { Card } from '@/components/Card';\nimport { mediaSizes, sizes } from '@/constants/devices';\nimport styled from 'styled-components';\nimport { cssVar, rgba } from 'polished';\n\nexport const PostCardWrapper = styled(Card)`\n  width: 100%;\n  padding: 16px;\n`;\n\nexport const MobileBottomActionsContainer = styled.div`\n  box-sizing: border-box;\n  display: none;\n  button {\n    border-radius: 16px;\n    box-shadow: 0 2px 16px ${rgba(cssVar('--shadow-neutral-default'), 0.08)};\n  }\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    padding: 0 16px;\n  }\n\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    position: absolute;\n    width: 100%;\n    bottom: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n  }\n\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    position: fixed;\n    padding: 0 4%;\n    right: 0;\n  }\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    bottom: '24px';\n  }\n  z-index: 2;\n`;\n","import { type FC } from 'react';\nimport { Stack } from '@/layout';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport { MobileBottomActionsContainer } from './styles';\nimport { usePostElement } from '../Chamber/components/elements/PostElement/PostElementProvider';\nimport { type PostMobileActionProps } from './types';\n\nconst PostMobileActions: FC<PostMobileActionProps> = ({ setIsOpenFilter }) => {\n  const { setShowCreate } = usePostElement();\n  return (\n    <MobileBottomActionsContainer>\n      <Stack justify=\"end\" fullWidth gap={12}>\n        <Button\n          size=\"large\"\n          neutral\n          onClick={() => setIsOpenFilter(true)}\n          data-testid=\"chamber-filtering\"\n          rightIcon={\n            <Icon\n              name=\"align_center_m\"\n              size={24}\n              color=\"--icon-button-neutral-default\"\n            />\n          }\n        />\n        <Button\n          onClick={() => setShowCreate(true)}\n          size=\"large\"\n          primary\n          data-testid=\"create-chamber\"\n          leftIcon={<Icon name=\"plus_m\" size={24} />}\n        />\n      </Stack>\n    </MobileBottomActionsContainer>\n  );\n};\n\nexport default PostMobileActions;\n","import { UserStatus } from '@/apollo/generated/types';\nimport { Spinner } from '@/components/Spinner';\nimport { TSpan } from '@/components/Typography';\nimport { breakpoints } from '@/constants/devices';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useWindowDimensions } from '@/hooks';\nimport { Stack } from '@/layout';\nimport SinglePageLayout from '@/layout/SinglePageLayout';\nimport { t } from 'i18next';\nimport { useEffect, useMemo, useState } from 'react';\nimport { usePermissions } from '@/features/posts/hooks';\nimport CreateSection from '../Chamber/components/elements/PostElement/components/CreateSection';\nimport CreatePost from '../Chamber/components/elements/PostElement/modals/CreatePost';\nimport { usePostElement } from '../Chamber/components/elements/PostElement/PostElementProvider';\nimport AllNoumPosts from './AllNoumPosts';\nimport { FilterPosts } from './FilterPosts';\nimport MobilePostFilter from './Modal';\nimport PostMobileActions from './PostMobileActions';\nimport { PostCardWrapper } from './styles';\n\ntype PostsProps = {\n  loadingElement?: boolean;\n};\n\nexport const Posts = ({ loadingElement }: PostsProps) => {\n  const {\n    loading: loadingPostsData,\n    posts,\n    setShowCreate,\n    showCreate,\n    space,\n    isSpaceOwner,\n    refetchPosts,\n    networkStatus,\n    fetchMore,\n    totalCount,\n    filter,\n    setAllPostsLoading,\n    isMasterNoum,\n  } = usePostElement();\n  const loading = useMemo(\n    () => loadingElement || loadingPostsData,\n    [loadingElement, loadingPostsData],\n  );\n  const { user, isUnregistered } = useAuth();\n  const getUserPermission = usePermissions();\n  const { width } = useWindowDimensions();\n  const [isOpenFilter, setIsOpenFilter] = useState(false);\n  const isMobile = useMemo(() => width <= breakpoints.MOBILE_XL, [width]);\n  const isTablet = useMemo(() => width <= breakpoints.TABLET_L, [width]);\n\n  const isCreatable = useMemo(() => {\n    if (isMasterNoum && !isSpaceOwner) return false;\n    if (isUnregistered)\n      return getUserPermission('POST', 'CREATE', 'UNREGISTERED');\n    return (\n      (isSpaceOwner || space?.isConnected) &&\n      user?.userStatus === UserStatus.Active\n    );\n  }, [\n    isMasterNoum,\n    isSpaceOwner,\n    isUnregistered,\n    getUserPermission,\n    space?.isConnected,\n    user?.userStatus,\n  ]);\n\n  useEffect(() => {\n    if ((loading && posts.length > 0) || !loading) {\n      setAllPostsLoading(false);\n    }\n  }, [loading, posts.length, setAllPostsLoading]);\n\n  // TODO: Replace with a regular layout, e.g. ListLayout or similar.\n  return (\n    <SinglePageLayout showBackButton responsiveMain loading={loading}>\n      <Stack\n        gap={16}\n        vertical\n        fullWidth\n        maxHeight={isMobile ? 'calc(100% - 66px)' : 'unset'}\n        padding={isTablet ? '16px 0 0 0' : 'unset'}\n      >\n        {!isMobile && (\n          <PostCardWrapper>\n            <FilterPosts />\n          </PostCardWrapper>\n        )}\n        {loading ? (\n          <Spinner />\n        ) : posts.length > 0 ? (\n          <>\n            {!isMobile && isCreatable && !filter.filter?.uid && (\n              <PostCardWrapper>\n                <CreateSection\n                  onClick={() => setShowCreate(true)}\n                  isCreatable={isCreatable ?? false}\n                  isPostView\n                />\n              </PostCardWrapper>\n            )}\n            {showCreate && (\n              <CreatePost\n                spaceId={space?._id!}\n                onClose={() => setShowCreate(false)}\n                onSuccess={() => {\n                  setShowCreate(false);\n                  refetchPosts();\n                }}\n                isMasterNoum={isMasterNoum}\n              />\n            )}\n            <AllNoumPosts\n              totalCount={totalCount}\n              posts={posts}\n              fetchMore={fetchMore}\n              refetch={refetchPosts}\n              networkStatus={networkStatus}\n            />\n          </>\n        ) : (\n          <Stack fullWidth align=\"center\" vertical gap={16} padding=\"40px 0\">\n            <TSpan font=\"heading-xs-bold\">\n              {t('noumena.editor.no_posts_found')}\n            </TSpan>\n            <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n              {t('noumena.editor.no_posts_description')}\n            </TSpan>\n          </Stack>\n        )}\n        <PostMobileActions setIsOpenFilter={setIsOpenFilter} />\n        <MobilePostFilter\n          isOpen={isOpenFilter}\n          onClose={() => setIsOpenFilter(false)}\n        />\n      </Stack>\n    </SinglePageLayout>\n  );\n};\n","import { useParams } from 'react-router-dom';\nimport { useNoumDetails } from '@/features/noums/hooks/noums';\nimport { PostElementProvider } from '../Chamber/components/elements/PostElement/PostElementProvider';\nimport { Posts } from './Posts';\n\nexport const NoumPosts = (): JSX.Element => {\n  const { id } = useParams();\n  const { space, loadingSpace, loading } = useNoumDetails(id!);\n\n  return (\n    <PostElementProvider space={space}>\n      <Posts loadingElement={loadingSpace || loading} />\n    </PostElementProvider>\n  );\n};\n\nexport default NoumPosts;\n"],"names":["AllNoumPosts","totalCount","posts","fetchMore","networkStatus","Infinite","getBottomStatusFromQuery","currentCount","length","gap","map","jsx","PostItem","post","_id","FilterPosts","setFilter","setPostFilter","noumEditor2","isMasterNoum","authorFilterOptions","authorOptions","setAuthorFilterKeyword","setKeyword","usePostElement","isOrderOpen","setIsOrderOpen","useState","isVisibilityOpen","setVisibilityOpen","isAuthorFilterOpen","setAuthorFilterOpen","order","setOrder","SortOperator","Desc","visibility","setVisibility","PostVisibility","Connection","Follower","filterAuthors","setFilterAuthors","useEffect","applyFilters","useCallback","authorsArg","PostAuthorVisibilty","tmpFilter","filter","uids","item","key","onSelectOrder","op","value","sort","column","operator","onSelectMember","find","filterMember","addMember","onSelectAuthor","foundIndex","findIndex","authorItem","newFilterAuthors","orderValue","useMemo","OrderOptions","od","label","toString","visibilityValue","capitalizeAllWord","authorValue","t","faItem","join","handleInputAuthor","e","target","jsxs","Stack","Dropdown","inputProps","inputRef","toggle","TextField","Icon","VisibilityOptions","options","handleSelectOption","VisibilityoptionsRenderer","handleAuthorFilterClose","AuthorOptionsRenderer","allOption","type","MobilePostFilter","isOpen","onClose","flags","useLaunchDarkly","setShowFilter","isChanged","setIsChanged","changedView","setChangedView","author","setAuthor","closeModal","found","getFullName","firstName","middleName","lastName","uid","findAuthor","au","cleanList","isActive","option","some","Modal","ModalHeader","ModalBody","Fragment","TSpan","Checkbox","includes","Avatar","profile","profilePictureThumbnail","undefined","Spacer","Radiobox","ModalFooter","Button","PostCardWrapper","styled","Card","MobileBottomActionsContainer","div","rgba","cssVar","sizes","MOBILE_MAX","mediaSizes","MOBILE_L_MAX","TABLET_MAX","PostMobileActions","setIsOpenFilter","setShowCreate","Posts","loadingElement","loading","loadingPostsData","showCreate","space","isSpaceOwner","refetchPosts","setAllPostsLoading","user","isUnregistered","useAuth","getUserPermission","usePermissions","width","useWindowDimensions","isOpenFilter","isMobile","breakpoints","MOBILE_XL","isTablet","TABLET_L","isCreatable","isConnected","userStatus","UserStatus","Active","SinglePageLayout","Spinner","CreateSection","CreatePost","NoumPosts","id","useParams","loadingSpace","useNoumDetails","PostElementProvider"],"mappings":"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"}