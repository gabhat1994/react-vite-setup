{"version":3,"file":"index-59d02ab8.js","sources":["../../src/screens/Community/styles.tsx","../../src/screens/Community/CommunityTabs.tsx","../../src/components/InlineAvatars/styles.tsx","../../src/screens/Chamber/components/elements/FooterActions/FooterActions.tsx","../../src/screens/Community/components/Avatar/UserAvatar.tsx","../../src/screens/Community/AllPosts/SinglePost.tsx","../../src/screens/Community/AllPosts/index.tsx","../../src/screens/Community/index.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { sizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\n\ntype ElementWrapperProps = {\n  isMarginTop?: boolean;\n};\n\nexport const ElementWrapper = styled.div<ElementWrapperProps>`\n  border: 1px solid var(--border-card-neutral-highlighted);\n  padding: 16px;\n  gap: 10px;\n  background: var(--bg-card-neutral-alt-default);\n  display: grid;\n  grid-template-columns: 56px auto;\n  align-items: center;\n  margin-top: 16px;\n  box-sizing: border-box;\n\n  @media (min-width: ${sizes.TABLET}) {\n    margin-top: 16px;\n    border-radius: 16px;\n    grid-template-columns: 56px auto 48px;\n    width: 92%;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  @media (min-width: ${sizes.LAPTOP}) {\n    margin-top: ${({ isMarginTop }) => (isMarginTop ? '20px' : '0')};\n    width: unset;\n  }\n`;\n\nexport const StartDiscussion = styled.div`\n  background: var(--bg-input-neutral-default);\n  border-radius: 8px;\n  height: 52px;\n  color: var(--text-input-neutral-default);\n  font-size: 16px;\n  padding-left: 12px;\n  border: none;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n  font-family: var(--font-family);\n  width: calc(100% - 10px);\n\n  @media (min-width: ${sizes.TABLET}) {\n    width: 95%;\n  }\n\n  @media (min-width: ${sizes.DESKTOP}) {\n    width: 100%;\n  }\n`;\n\nexport const StyledImageLogo = styled.img`\n  width: 150px;\n  margin: 0 auto;\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n`;\n\nexport const TabContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  gap: 16px;\n  margin: 16px 12px 0;\n`;\n\nexport const TabButton = styled.div<{ isActive?: boolean }>`\n  background-color: transparent;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-content: center;\n  height: 40px;\n  padding: 9px 12px;\n  cursor: pointer;\n  border-radius: 8px;\n  box-sizing: border-box;\n  font-size: var(--font-body-medium-size);\n  color: var(--text-tab-chips-neutral-default);\n  ${({ isActive }) =>\n    isActive\n      ? 'color: var(--text-tab-chips-brand-primary-selected); background-color: var(--bg-tab-chips-brand-secondary-selected);'\n      : undefined}\n`;\n\nexport const StyledAvatar = styled.img<{ isClickable: boolean }>`\n  min-width: 52px;\n  width: 52px;\n  height: 52px;\n  border-radius: 12px;\n  ${({ isClickable }) => (isClickable ? 'cursor: pointer;' : undefined)}\n`;\n\nexport const RightSideBarContainer = styled.div`\n  @media (min-width: ${sizes.LAPTOP}) {\n    width: 288px;\n    margin-left: 0;\n  }\n`;\n\nexport const PageCnt = styled.div`\n  width: 100vw;\n`;\n\nexport const GridWrapper = styled.div`\n  display: grid;\n`;\n\nexport const Container = styled(Stack)<{ isAppUiV2: boolean }>`\n  width: 100%;\n\n  ${(props) =>\n    !props.isAppUiV2 &&\n    `\n  @media (min-width: ${sizes.TABLET_L}) and (max-width: ${sizes.LAPTOP_L}) {\n    width: calc(100vw - 512px);\n    max-width: 924px;\n  }\n  @media (min-width: ${sizes.TABLET}) and (max-width: ${sizes.TABLET_L}) {\n    width: calc(100vw - 32px);\n  }\n  @media (min-width: ${sizes.LAPTOP_L}) {\n    width: calc(100vw - 516px);\n    max-width: 924px;\n  }\n  @media (min-width: ${sizes.DESKTOP}) {\n    max-width: 924px;\n  }\n  @media (max-width: ${sizes.TABLET_L}) {\n    padding-bottom: 95px;\n  }\n  `}\n`;\n","import { useTranslation } from 'react-i18next';\nimport { type CommunityTabsProps } from '@/screens/Community/types';\nimport { TabButton, TabContainer } from '@/screens/Community/styles';\nimport { COMMUNITY_TABS } from '@/screens/Community/consts';\n\nconst CommunityTabs = ({ handleClick, tabName }: CommunityTabsProps) => {\n  const { t } = useTranslation();\n  return (\n    <TabContainer>\n      {COMMUNITY_TABS.map((item) => (\n        <TabButton\n          isActive={item === tabName}\n          key={item}\n          onClick={() => handleClick(item)}\n        >\n          {t(`${item}`)}\n        </TabButton>\n      ))}\n    </TabContainer>\n  );\n};\nexport default CommunityTabs;\n","import styled from 'styled-components';\n\ntype WrapperProps = {\n  size: number;\n  length: number;\n  leftPosition: number;\n};\n\ntype SingleItemProps = {\n  size: number;\n  leftPosition: number;\n  nr: number;\n};\n\nexport const Wrapper = styled.div<WrapperProps>`\n  display: flex;\n  position: relative;\n  width: ${({ size, length, leftPosition }) =>\n    size * length - leftPosition * (length - 1)}px;\n  height: calc(${({ size }) => size}px + 2px);\n  margin-right: calc(\n    ${({ length, leftPosition }) => (length === 1 ? 8 : leftPosition / 2)}px\n  );\n`;\n\nexport const SingleItem = styled.div<SingleItemProps>`\n  display: flex;\n  position: absolute;\n  padding: 2px;\n  background-color: var(--bg-card-neutral-alt-default);\n  border-radius: 8px;\n  width: ${({ size }) => size}px;\n  height: ${({ size }) => size}px;\n  top: 0;\n  left: ${({ leftPosition, nr }) => (nr > 0 ? leftPosition * nr : '0')}px;\n  z-index: ${({ nr }) => nr};\n`;\n","import { useTranslation } from 'react-i18next';\nimport Skeleton from 'react-loading-skeleton';\nimport { type FooterActionsProps } from '@/screens/Chamber/components/elements/FooterActions/types';\nimport {\n  ButtonWrap,\n  ItemFooter,\n} from '@/screens/Chamber/components/elements/PostElement/components/PostItem/styles';\nimport { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer } from '@/layout';\nimport { ICON_SIZE } from '@/screens/Chamber/components/elements/PostElement/components/PostItem/constants';\n\nconst FooterActions = ({\n  handleLike,\n  handleComment,\n  isLiked,\n  numberOfComments,\n  showComments,\n  isSkeletonVisible = false,\n}: FooterActionsProps) => {\n  const { t } = useTranslation();\n\n  return (\n    <ItemFooter>\n      <ButtonWrap onClick={handleLike}>\n        <Icon\n          name=\"thumb_up_m\"\n          size={ICON_SIZE}\n          color={\n            isLiked\n              ? '--icon-card-brand-primary-default'\n              : '--icon-card-neutral-default'\n          }\n        />\n        <TSpan\n          colorToken={\n            isLiked\n              ? '--button-card-brand-primary-default'\n              : '--button-card-neutral-default'\n          }\n          font=\"body-m-bold\"\n          style={{ marginLeft: 10 }}\n        >\n          {isSkeletonVisible ? (\n            <Skeleton width={62} height={24} />\n          ) : isLiked ? (\n            t('noumena.reaction.liked')\n          ) : (\n            t('noumena.reaction.like')\n          )}\n        </TSpan>\n      </ButtonWrap>\n\n      <Spacer width={ICON_SIZE} />\n\n      <ButtonWrap onClick={handleComment}>\n        <Icon\n          name=\"message_m\"\n          size={ICON_SIZE}\n          color={\n            showComments\n              ? '--icon-card-brand-primary-default'\n              : '--icon-card-neutral-default'\n          }\n        />\n        <TSpan\n          colorToken={\n            showComments\n              ? '--button-card-brand-primary-default'\n              : '--button-card-neutral-default'\n          }\n          font=\"body-m-bold\"\n          style={{ marginLeft: 10 }}\n        >\n          {isSkeletonVisible ? (\n            <Skeleton width={62} height={24} />\n          ) : numberOfComments && numberOfComments > 0 ? (\n            numberOfComments\n          ) : (\n            t('noumena.reaction.comment')\n          )}\n        </TSpan>\n      </ButtonWrap>\n    </ItemFooter>\n  );\n};\n\nexport default FooterActions;\n","import Skeleton from 'react-loading-skeleton';\nimport { useMemo } from 'react';\nimport { StyledAvatar } from '@/screens/Community/styles';\nimport defaultProfile from '@/assets/images/profile_default.png';\nimport { useAuth } from '@/features/auth/contexts';\nimport { UserUtil } from '@/utils/user';\nimport { type UserAvatarProps } from './types';\n\nconst UserAvatar = ({ user, onClick }: UserAvatarProps) => {\n  const { user: currentUser } = useAuth();\n  const isActive = useMemo(() => !UserUtil.isInactive(user), [user]);\n\n  const isUnregistered = useMemo(\n    () => UserUtil.isUnregistered(currentUser),\n    [currentUser],\n  );\n\n  return (\n    <>\n      {user ? (\n        <StyledAvatar\n          isClickable={isActive && !isUnregistered && Boolean(onClick)}\n          src={\n            isActive\n              ? user?.profile?.profilePicture || defaultProfile\n              : defaultProfile\n          }\n          alt=\"addingPostUserAvatar\"\n          onClick={isActive && !isUnregistered ? onClick : null || (() => {})}\n        />\n      ) : (\n        <Skeleton width=\"52px\" height=\"52px\" />\n      )}\n    </>\n  );\n};\nexport default UserAvatar;\n","import {\n  PostVisibility,\n  ReactionCategory,\n  UserStatus,\n  type Maybe,\n  type PostOutput,\n  type Reaction,\n} from '@/apollo/generated/types';\nimport {\n  useAddReactionMutation,\n  useDeletePostMutation,\n  usePinPostMutation,\n  useRemoveReactionMutation,\n} from '@/apollo/graphql';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport InlineAvatars from '@/components/InlineAvatars';\nimport { useSkeletonIsLoadingContext } from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { VideoPlayerView } from '@/components/VideoPlayer';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useNoumDetails } from '@/features/noums/hooks/noums';\nimport { PinDotsItem } from '@/features/posts/components';\nimport { useGetUserType, type UserType } from '@/features/posts/hooks';\nimport { useToast, useToggle } from '@/hooks';\nimport FooterActions from '@/screens/Chamber/components/elements/FooterActions/FooterActions';\nimport {\n  defaultCommunityPageOptions,\n  pinningOptions,\n} from '@/screens/Chamber/components/elements/PostElement/components/PostItem/data';\nimport { type PostActionType } from '@/screens/Chamber/components/elements/PostElement/components/PostItem/types';\nimport { CreatePost } from '@/screens/Chamber/components/elements/PostElement/modals/CreatePost/Modal';\nimport { DeletePost } from '@/screens/Chamber/components/elements/PostElement/modals/DeletePost';\nimport { ReportPostModal } from '@/screens/Chamber/components/elements/PostElement/modals/ReportPostModal';\nimport { distanceDate } from '@/utils/date';\nimport { getFileExtension, getVideoMimeType } from '@/utils/file';\nimport { getFullName } from '@/utils/fullName';\nimport { UserUtil } from '@/utils/user';\nimport { t } from 'i18next';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { useNavigate } from 'react-router';\nimport CommentsSection from '../Comments';\nimport ParsedContent from '../ParsedContent';\nimport { UserAvatar } from '../components/Avatar';\nimport {\n  ElementCnt,\n  IconCnt,\n  LikedWrapper,\n  PinTab,\n  PinTabText,\n  StyledImageView,\n  StyledLikedPostText,\n  StyledMediaWrapper,\n  StyledName,\n  TimeText,\n  Wrapper,\n  WrapperColumn,\n} from './styles';\nimport { type SinglePostProps } from './types';\n\nconst returnMediaType = (post?: PostOutput) => {\n  switch (post?.post?.category) {\n    case 'VIDEO': {\n      const fileExtension = getFileExtension(post?.post?.content || '');\n      const mimeType = getVideoMimeType(fileExtension);\n      return (\n        <VideoPlayerView url={post?.post?.content || ''} fileType={mimeType} />\n      );\n    }\n    case 'IMAGE': {\n      return <StyledImageView url={post?.post?.content || ''} />;\n    }\n    default:\n      return <></>;\n  }\n};\n\nconst SinglePost = ({ post, refetch }: SinglePostProps) => {\n  const { addToast } = useToast();\n  const [pinUnpinPost] = usePinPostMutation();\n  const getUserType = useGetUserType();\n  const navigate = useNavigate();\n  const { isOwner, space } = useNoumDetails(post?.chamberId ?? '');\n  const { user, isUnregistered } = useAuth();\n  const { isLoading } = useSkeletonIsLoadingContext();\n\n  const [isPinned, setIsPinned] = useState(post?.isPinned);\n  const [postAction, setPostAction] = useState<PostActionType>(undefined);\n  const [deletePostMutation, { loading: isDeleting }] = useDeletePostMutation();\n  const userType: UserType = useMemo(() => {\n    let result: UserType = 'GUEST';\n    if (user?.roles) {\n      const admin =\n        user.roles.find((role) => role?.roleType === 'ADMIN') ||\n        user.roles.length > 0;\n      const owner = post?.uid?._id === user?._id;\n\n      if (owner) result = 'OWNER';\n      if (admin) result = 'ADMIN';\n      if (owner && admin) result = 'ADMINOWNER';\n      if (result !== 'GUEST') return result;\n    }\n    if (isOwner || post?.uid?._id === user?._id) return 'OWNER';\n    const postUserType = getUserType({\n      feature: 'POST',\n      visibility: post?.visibility || PostVisibility.Follower,\n      isConnected: space?.isConnected ?? false,\n      isFollowing: space?.isFollowing ?? false,\n      isUnregistered,\n    });\n    return postUserType ?? 'GUEST';\n  }, [\n    isOwner,\n    post?.uid?._id,\n    post?.visibility,\n    user,\n    getUserType,\n    space?.isConnected,\n    space?.isFollowing,\n    isUnregistered,\n  ]);\n\n  const pinningOption = isPinned ? pinningOptions[1] : pinningOptions[0];\n\n  const options = [pinningOption, ...defaultCommunityPageOptions].filter(\n    (o) => {\n      if (\n        userType === 'ADMINOWNER' ||\n        userType === 'ADMIN' ||\n        userType === 'OWNER'\n      )\n        return true;\n      return o.key !== 'delete-post';\n    },\n  );\n\n  const onHandleSelect = useCallback((option: DropdownValueType<string>) => {\n    setPostAction(option.value as PostActionType);\n  }, []);\n\n  const handlePinUnpin = useCallback(async () => {\n    setPostAction(undefined);\n    await pinUnpinPost({\n      variables: {\n        postId: post?._id,\n      },\n    })\n      .then(({ data: postData }) => {\n        const pinned = postData?.pinPost?.isPinned;\n        setIsPinned(pinned);\n        addToast(\n          'success',\n          'icon',\n          t(\n            `noumena.chambers.element.posts.success.${\n              pinned ? 'pin' : 'unpin'\n            }`,\n          ),\n        );\n        refetch();\n      })\n      .catch(() => {\n        addToast(\n          'error',\n          'none',\n          t(\n            `noumena.chambers.element.posts.error.${\n              isPinned ? 'unpin' : 'pin'\n            }_failed`,\n          ),\n        );\n      });\n  }, [pinUnpinPost, post?._id, addToast, refetch, isPinned]);\n\n  const [reactions, setReactions] = useState<Maybe<Reaction>[]>(\n    post?.reactions || [],\n  );\n\n  const tabOfLikedAvatar = reactions.map(\n    (el: Maybe<Reaction>) => el?.uid?.profile?.profilePicture,\n  );\n\n  const [addReactionMutation] = useAddReactionMutation();\n  const [removeReactionMutation] = useRemoveReactionMutation();\n\n  const [isLiked, setIsLiked] = useState(\n    post?.userReaction === ReactionCategory.Like,\n  );\n  const [showComments, toggleShowComments] = useToggle(false);\n\n  const isActivePost = useMemo(\n    () => !UserUtil.isInactive(post?.uid) && !isUnregistered,\n    [post?.uid, isUnregistered],\n  );\n\n  const handleLike = useCallback(() => {\n    if (user?.userStatus !== UserStatus.Active) {\n      addToast('primary', 'none', t(`noumena.community.userIsNotActive.like`));\n      return;\n    }\n    if (!isActivePost) return;\n    if (isLiked) {\n      removeReactionMutation({\n        variables: {\n          _id: post?._id || '',\n          type: ReactionCategory.Like,\n        },\n      });\n      setIsLiked(false);\n      const newReactionsArr = reactions.filter(\n        (el) => el?.uid?._id !== user?._id,\n      );\n      setReactions(newReactionsArr);\n    } else {\n      setIsLiked(true);\n      addReactionMutation({\n        variables: {\n          _id: post?._id || '',\n          type: ReactionCategory.Like,\n        },\n      });\n      // @ts-ignore\n      setReactions((prev) => [...prev, { uid: user }]);\n    }\n  }, [\n    addReactionMutation,\n    addToast,\n    isLiked,\n    post?._id,\n    reactions,\n    removeReactionMutation,\n    user,\n    isActivePost,\n  ]);\n\n  const handleDelete = useCallback(async () => {\n    await deletePostMutation({\n      variables: {\n        _id: post?._id || '',\n      },\n    }).then(() => refetch());\n  }, [deletePostMutation, post?._id, refetch]);\n\n  useEffect(() => {\n    if (postAction === 'Pin' || postAction === 'Unpin') {\n      handlePinUnpin();\n    }\n  }, [handlePinUnpin, postAction]);\n\n  const handleNavigate = useCallback(() => {\n    if (isActivePost) navigate(`/noum/${post?.uid?.chamber?._id}`);\n  }, [navigate, isActivePost, post?.uid]);\n\n  return (\n    <ElementCnt\n      data-testid=\"SinglePostWrap\"\n      isMarginTop\n      isPinned={post?.isPinned}\n    >\n      {postAction === 'Delete' && (\n        <DeletePost\n          postId={post?._id || ''}\n          isDeleting={isDeleting}\n          onClose={() => setPostAction(undefined)}\n          onDelete={handleDelete}\n        />\n      )}\n      {postAction === 'Report' && (\n        <ReportPostModal\n          postId={post?._id || ''}\n          onClose={() => setPostAction(undefined)}\n        />\n      )}\n      {postAction === 'Edit' && (\n        <CreatePost\n          post={post}\n          isChamber={false}\n          onClose={() => setPostAction(undefined)}\n          onSuccess={() => {\n            setPostAction(undefined);\n            refetch();\n          }}\n        />\n      )}\n      <Wrapper>\n        <UserAvatar user={post?.uid} onClick={handleNavigate} />\n        <WrapperColumn>\n          <StyledName onClick={handleNavigate} isActive={isActivePost}>\n            {isActivePost ? (\n              getFullName(post?.uid?.firstName, null, post?.uid?.lastName)\n            ) : isLoading ? (\n              <Skeleton />\n            ) : (\n              t('noumena.inactive_user')\n            )}\n          </StyledName>\n          <Wrapper>\n            <TimeText>\n              {post ? (\n                distanceDate(post?.createdAt)\n              ) : (\n                <Skeleton height=\"10px\" width=\"120px\" />\n              )}\n            </TimeText>\n            {post?.isPinned && (\n              <PinTab>\n                <Icon\n                  name=\"pin_m\"\n                  size={16}\n                  color=\"--icon-tag-neutral-alt-default\"\n                />\n                <PinTabText>{t('noumena.post.pinned_post')}</PinTabText>\n              </PinTab>\n            )}\n          </Wrapper>\n        </WrapperColumn>\n        <IconCnt>\n          {post ? (\n            <PinDotsItem\n              userType={userType}\n              onHandleSelect={onHandleSelect}\n              options={options}\n            />\n          ) : (\n            <Skeleton\n              width=\"24px\"\n              height=\"16px\"\n              style={{\n                position: 'relative',\n                bottom: '10px',\n                marginLeft: '8px',\n              }}\n            />\n          )}\n        </IconCnt>\n      </Wrapper>\n      <Wrapper>\n        {post ? (\n          <ParsedContent item={post} isPost />\n        ) : (\n          <div style={{ display: 'block', flex: 1 }}>\n            <Skeleton count={3} />\n          </div>\n        )}\n      </Wrapper>\n      <StyledMediaWrapper>{returnMediaType(post)}</StyledMediaWrapper>\n      {Boolean(tabOfLikedAvatar?.length) && (\n        <LikedWrapper>\n          <InlineAvatars urls={tabOfLikedAvatar} leftPosition={16} size={24} />\n          <StyledLikedPostText>\n            {tabOfLikedAvatar.length} user\n            {tabOfLikedAvatar.length > 1 && 's'} liked this post\n          </StyledLikedPostText>\n        </LikedWrapper>\n      )}\n      <FooterActions\n        handleComment={toggleShowComments}\n        handleLike={handleLike}\n        showComments={showComments}\n        numberOfComments={post?.commentsCount ?? 0}\n        isLiked={isLiked}\n        isSkeletonVisible={!post}\n      />\n      {showComments && (\n        <CommentsSection\n          refetch={async () => {\n            await refetch();\n          }}\n          postId={post?._id || ''}\n          isActivePost={isActivePost}\n          comments={post?.comments || []}\n        />\n      )}\n    </ElementCnt>\n  );\n};\n\nexport const SinglePostSkeleton = () => (\n  <ElementCnt data-testid=\"SinglePostWrap\" isMarginTop>\n    <Wrapper>\n      <UserAvatar user={undefined} />\n      <WrapperColumn>\n        <StyledName isActive={false}>\n          <Skeleton />\n        </StyledName>\n        <Wrapper>\n          <TimeText>\n            <Skeleton height=\"10px\" width=\"120px\" />\n          </TimeText>\n        </Wrapper>\n      </WrapperColumn>\n      <IconCnt>\n        <Skeleton\n          width=\"24px\"\n          height=\"16px\"\n          style={{\n            position: 'relative',\n            bottom: '10px',\n            marginLeft: '8px',\n          }}\n        />\n      </IconCnt>\n    </Wrapper>\n    <Wrapper>\n      <div style={{ display: 'block', flex: 1 }}>\n        <Skeleton count={3} />\n      </div>\n    </Wrapper>\n    <FooterActions\n      handleComment={() => {}}\n      handleLike={() => {}}\n      isSkeletonVisible={true}\n    />\n  </ElementCnt>\n);\n\nexport default SinglePost;\n","import { getBottomStatusFromQuery, Infinite } from '@/components/Infinite';\nimport PostItem from '@/screens/Chamber/components/elements/PostElement/components/PostItem';\nimport { useWindowDimensions } from '@/hooks';\nimport { breakpoints } from '@/constants/devices';\nimport { type AllPostsProps } from './types';\n\nconst AllPosts = ({\n  totalCount,\n  posts,\n  fetchMore,\n  networkStatus,\n  refetch,\n  forceRender,\n  setForceRender,\n}: AllPostsProps) => (\n  <Infinite\n    onFetchMore={() => {\n      fetchMore({\n        variables: {\n          limit: 10,\n          offset: posts?.length,\n        },\n      });\n    }}\n    status={getBottomStatusFromQuery({\n      networkStatus,\n      totalCount,\n      currentCount: posts?.length ?? 0,\n    })}\n    grow\n    width=\"100%\"\n    style={\n      useWindowDimensions().width < breakpoints.LAPTOP\n        ? { padding: '16px', overflow: 'hidden' }\n        : undefined\n    }\n  >\n    {posts?.map((el) => (\n      <PostItem\n        data={el}\n        key={el?._id}\n        isPinningEnabled\n        isMarginTop\n        refetch={refetch}\n        isCommunity\n        forceRender={forceRender}\n        setForceRender={setForceRender}\n        size=\"XL\"\n      />\n    ))}\n  </Infinite>\n);\n\nexport default AllPosts;\n","import { useCallback, useLayoutEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NetworkStatus } from '@apollo/client';\nimport Skeleton from 'react-loading-skeleton';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useLaunchDarkly, useWindowDimensions } from '@/hooks';\nimport ListLayout from '@/layout/ListLayout';\nimport { Icon } from '@/components/Icon';\nimport { useMyFeedQuery } from '@/apollo/graphql/queries/myFeed.generated';\nimport CommunityTabs from '@/screens/Community/CommunityTabs';\nimport { COMMUNITY_TABS, TABS_USER_TYPES } from '@/screens/Community/consts';\nimport { type PostOutput } from '@/apollo/generated/types';\nimport {\n  NoPosts,\n  NoPostsContainer,\n} from '@/screens/Chamber/components/elements/PostElement/components/PostBody/styles';\nimport InviteFriendSideMenuSection from '@/components/SideMenu/InviteFriendSideMenuSection';\nimport { breakpoints } from '@/constants/devices';\nimport { SinglePostSkeleton } from '@/screens/Community/AllPosts/SinglePost';\nimport SkeletonLoaderProvider from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { UserAvatar } from './components/Avatar';\nimport { CreatePost } from '../Chamber/components/elements/PostElement/modals/CreatePost/Modal';\nimport AllPosts from './AllPosts';\nimport {\n  ElementWrapper,\n  PageCnt,\n  RightSideBarContainer,\n  StartDiscussion,\n  TabContainer,\n  Container,\n} from './styles';\nimport { AppStyled } from '../Chambers/styles';\n\nconst POSTS_LIMIT = 10;\n\nconst Community = () => {\n  const { flags } = useLaunchDarkly();\n  const { t } = useTranslation();\n  const [tabName, setTabName] = useState(COMMUNITY_TABS[0]);\n  const { data, fetchMore, networkStatus, refetch, loading } = useMyFeedQuery({\n    variables: {\n      limit: POSTS_LIMIT,\n      offset: 0,\n      filter: { usersType: [TABS_USER_TYPES[tabName]] },\n    },\n  });\n  const [forceRender, setForceRender] = useState(false);\n  const totalCount = data?.myFeed?.count || 0;\n  const posts = useMemo(\n    () =>\n      data?.myFeed?.data?.filter((p) =>\n        tabName === COMMUNITY_TABS[1] ? p?.isPinned : true,\n      ) || [],\n    [data?.myFeed?.data, tabName],\n  );\n  const { width } = useWindowDimensions();\n  const isDesktop = width > breakpoints.LAPTOP - 1;\n  const isTablet = width > breakpoints.TABLET - 1;\n  const rightContent = (\n    <RightSideBarContainer>\n      <InviteFriendSideMenuSection width=\"272px\" />\n    </RightSideBarContainer>\n  );\n  const { user } = useAuth();\n  const userId = useMemo(() => user?._id ?? '', [user]);\n  const [showCreate, setShowCreate] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(loading);\n  const refetchWithLoader = useCallback(() => {\n    setIsLoading(true);\n    refetch().finally(() => setIsLoading(false));\n  }, [refetch]);\n  useLayoutEffect(() => {\n    refetchWithLoader();\n  }, [refetch, tabName, refetchWithLoader]);\n  const handleTabChange = (name: string) => {\n    setTabName(name);\n  };\n  const handleCreatePostOnSuccess = useCallback(() => {\n    setShowCreate(false);\n    setTabName(COMMUNITY_TABS[0]);\n    refetch().then(() => {});\n    /* eslint-disable-next-line react-hooks/exhaustive-deps  */\n  }, []);\n  const handleShowCreate = useCallback(() => setShowCreate(true), []);\n  const handleHideCreate = useCallback(() => setShowCreate(false), []);\n  const isSkeletonVisible =\n    (!data?.myFeed?.data && loading) ||\n    isLoading ||\n    networkStatus === NetworkStatus.loading;\n\n  return (\n    <SkeletonLoaderProvider isLoading={isSkeletonVisible}>\n      <PageCnt>\n        {showCreate && (\n          <CreatePost\n            spaceId={userId}\n            onClose={handleHideCreate}\n            onSuccess={handleCreatePostOnSuccess}\n            isChamber={false}\n          />\n        )}\n        <ListLayout\n          type=\"Community\"\n          rightContent={isDesktop ? rightContent : undefined}\n        >\n          {!isDesktop && rightContent}\n          <Container gap={24} isAppUiV2={flags.newAppNavigation}>\n            <AppStyled style={{ marginLeft: isDesktop ? 12 : 0 }}>\n              <>\n                <ElementWrapper>\n                  <UserAvatar user={user} />\n                  <StartDiscussion onClick={handleShowCreate}>\n                    {t('noumena.post.start_discussion')}\n                  </StartDiscussion>\n                  {isTablet && (\n                    <Icon\n                      name=\"send_filled_m\"\n                      size={24}\n                      color=\"--icon-button-neutral-pressed\"\n                    />\n                  )}\n                </ElementWrapper>\n                <CommunityTabs\n                  handleClick={handleTabChange}\n                  tabName={tabName}\n                />\n                {isSkeletonVisible ? (\n                  <Skeleton count={5} wrapper={() => <SinglePostSkeleton />} />\n                ) : (\n                  <AllPosts\n                    totalCount={totalCount}\n                    posts={posts as unknown as PostOutput[]}\n                    fetchMore={fetchMore}\n                    refetch={refetch}\n                    networkStatus={networkStatus}\n                    setForceRender={setForceRender}\n                    forceRender={forceRender}\n                  />\n                )}\n                {!loading && !posts.length && (\n                  <TabContainer>\n                    <NoPostsContainer>\n                      <NoPosts\n                        font=\"body-m\"\n                        colorToken=\"--text-card-neutral-default\"\n                        style={{ position: 'relative', left: '200%' }}\n                      >\n                        {t('noumena.post.no_posts_yet')}\n                      </NoPosts>\n                    </NoPostsContainer>\n                  </TabContainer>\n                )}\n              </>\n            </AppStyled>\n          </Container>\n        </ListLayout>\n      </PageCnt>\n    </SkeletonLoaderProvider>\n  );\n};\n\nexport default Community;\n"],"names":["ElementWrapper","styled","div","sizes","TABLET","LAPTOP","isMarginTop","StartDiscussion","DESKTOP","img","TabContainer","TabButton","isActive","undefined","StyledAvatar","isClickable","RightSideBarContainer","PageCnt","Container","Stack","props","isAppUiV2","TABLET_L","LAPTOP_L","CommunityTabs","handleClick","tabName","t","useTranslation","jsx","COMMUNITY_TABS","map","item","`CommunityTabs-TabButton-${item}`","size","length","leftPosition","nr","FooterActions","handleLike","handleComment","isLiked","numberOfComments","showComments","isSkeletonVisible","jsxs","ItemFooter","ButtonWrap","Icon","ICON_SIZE","TSpan","marginLeft","Skeleton","Spacer","UserAvatar","user","onClick","currentUser","useAuth","useMemo","UserUtil","isInactive","isUnregistered","Fragment","Boolean","profile","profilePicture","defaultProfile","SinglePostSkeleton","ElementCnt","Wrapper","WrapperColumn","StyledName","TimeText","IconCnt","position","bottom","display","flex","AllPosts","totalCount","posts","fetchMore","networkStatus","refetch","forceRender","setForceRender","Infinite","variables","limit","offset","getBottomStatusFromQuery","currentCount","useWindowDimensions","width","breakpoints","padding","overflow","el","PostItem","_id","POSTS_LIMIT","Community","flags","useLaunchDarkly","setTabName","useState","data","loading","useMyFeedQuery","filter","usersType","TABS_USER_TYPES","myFeed","count","p","isPinned","isDesktop","isTablet","rightContent","InviteFriendSideMenuSection","userId","showCreate","setShowCreate","isLoading","setIsLoading","refetchWithLoader","useCallback","finally","useLayoutEffect","handleTabChange","name","handleCreatePostOnSuccess","then","handleShowCreate","handleHideCreate","NetworkStatus","SkeletonLoaderProvider","CreatePost","ListLayout","newAppNavigation","AppStyled","NoPostsContainer","NoPosts","left"],"mappings":"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"}