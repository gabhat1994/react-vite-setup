{"version":3,"file":"ContractManager-2f76b670.js","sources":["../../src/screens/Contracts/ContractManager/Filters/filterMapper.ts","../../src/screens/Contracts/ContractManager/Filters/filterOptionMapper.tsx","../../src/screens/Contracts/ContractManager/Filters/useContractManagerFiltersData.ts","../../src/screens/Contracts/ContractManager/ListHeader.tsx","../../src/screens/Contracts/ContractManager/Lists/ContractsList.tsx","../../src/screens/Contracts/ContractManager/Lists/styles.ts","../../src/screens/Contracts/ContractManager/Lists/StatementOfWorkTitleCell.tsx","../../src/screens/Contracts/ContractManager/Lists/StatementOfWorkList.tsx","../../src/screens/Contracts/ContractManager/styles.ts","../../src/screens/Contracts/ContractManager/useContractManagerSearchParams.ts","../../src/screens/Contracts/ContractManager/index.tsx"],"sourcesContent":["import {\n  type ContractFilter,\n  type ContractStatus,\n  type GetAllSowFilter,\n  type SowStatus,\n} from '@/apollo/generated/types';\nimport { DocumentType } from '@/features/contracts/types';\nimport { type ContractManagerSearchParams } from '@/features/contracts/utils/routes';\nimport { type Filters, ListPOV } from '../types';\n\nfunction nullOnEmpty<T extends string | string[]>(\n  array: T | undefined,\n): T | null {\n  return array && array.length > 0 ? array : null;\n}\n\nexport function mapToContractListFilters(\n  filters: Partial<Filters>,\n): ContractFilter {\n  return {\n    search: nullOnEmpty(filters?.search),\n    status: nullOnEmpty(filters?.statuses as ContractStatus[]),\n    noumIds: nullOnEmpty(filters?.noumIds),\n    consignors: nullOnEmpty(filters?.consignorIds),\n  };\n}\n\nexport function mapToStatementOfWorkListFilters(\n  filters: Partial<Filters>,\n): GetAllSowFilter {\n  return {\n    search: nullOnEmpty(filters?.search),\n    status: nullOnEmpty(filters?.statuses as SowStatus[]),\n    noumIds: nullOnEmpty(filters?.noumIds),\n    consignors: nullOnEmpty(filters?.consignorIds),\n  };\n}\n\nexport function getDefaultFilterValues(\n  searchParams: ContractManagerSearchParams,\n): Filters {\n  return {\n    perspective: searchParams.perspective ?? ListPOV.Owner,\n    search: '',\n    type: searchParams.type ?? DocumentType.Contract,\n    statuses: searchParams.status ? [searchParams.status] : undefined,\n    consignorIds: undefined,\n    noumIds: searchParams.noumId ? [searchParams.noumId] : undefined,\n  };\n}\n","import { snakeCase } from 'lodash';\nimport { type DefaultNamespace, type TFunction } from 'react-i18next';\nimport { ContractStatus, SowStatus } from '@/apollo/generated/types';\nimport {\n  type NoumContactBasicFragment,\n  type NoumContractLinkedNoumBasicFragment,\n} from '@/apollo/graphql';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { DocumentType } from '@/features/contracts/types';\nimport { ListPOV } from '../types';\n\nexport function mapSowStatusToOption(\n  status: SowStatus,\n  t: TFunction<DefaultNamespace, undefined>,\n): DropdownValueType<SowStatus, SowStatus> {\n  return {\n    type: 'value',\n    key: status,\n    value: status,\n    label: t(\n      `noumena.contract_manager.filters.status.contract.${snakeCase(status)}`,\n    ),\n  };\n}\n\nexport function mapContractStatusToOption(\n  status: ContractStatus,\n  t: TFunction<DefaultNamespace, undefined>,\n): DropdownValueType<ContractStatus, ContractStatus> {\n  return {\n    type: 'value',\n    key: status,\n    value: status,\n    label: t(\n      `noumena.contract_manager.filters.status.sow.${snakeCase(status)}`,\n    ),\n  };\n}\n\nexport function mapConsignorToOption(\n  contact: NoumContactBasicFragment,\n): DropdownValueType<string, string> {\n  return {\n    type: 'value',\n    key: contact._id,\n    value: contact._id,\n    label: contact.displayName,\n    icon: (\n      <Avatar url={contact.userId.profile?.profilePictureThumbnail} size=\"M\" />\n    ),\n  };\n}\n\nexport function mapNoumToOption(\n  noum: NoumContractLinkedNoumBasicFragment,\n): DropdownValueType<string, string> {\n  return {\n    type: 'value',\n    key: noum._id ?? '',\n    value: noum._id ?? '',\n    label: noum.name,\n    icon: <Avatar url={noum.profileImageThumbnail} size=\"M\" />,\n  };\n}\n\nexport function getAvailableStatuses(\n  documentType: DocumentType,\n  listPerspective: ListPOV,\n) {\n  if (documentType === DocumentType.Contract) {\n    return getAvailableContractStatuses(listPerspective);\n  }\n  return getAvailableStatementOfWorkStatuses(listPerspective);\n}\n\nexport function getAvailableContractStatuses(listPerspective: ListPOV) {\n  if (listPerspective === ListPOV.Owner) {\n    return [ContractStatus.Draft, ContractStatus.Issued, ContractStatus.Signed];\n  }\n  return [ContractStatus.Issued, ContractStatus.Signed];\n}\n\nexport function getAvailableStatementOfWorkStatuses(listPerspective: ListPOV) {\n  if (listPerspective === ListPOV.Owner) {\n    return [SowStatus.Draft, SowStatus.Issued, SowStatus.Signed];\n  }\n  return [SowStatus.Issued, SowStatus.Signed];\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { type ContractStatus, DocumentType } from '@/features/contracts/types';\nimport { type SowStatus } from '@/apollo/generated/types';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport {\n  useGetConsignorsQuery,\n  useGetNoumsLinkedToContractsQuery,\n  useGetNoumsLinkedToSoWsQuery,\n} from '@/apollo/graphql';\nimport { cleanList } from '@/utils/list';\nimport {\n  getAvailableContractStatuses,\n  getAvailableStatementOfWorkStatuses,\n  mapConsignorToOption,\n  mapContractStatusToOption,\n  mapNoumToOption,\n  mapSowStatusToOption,\n} from './filterOptionMapper';\nimport { type ListPOV } from '../types';\n\ninterface UseContractManagerFiltersDataOptions {\n  listPerspective: ListPOV;\n  documentType: DocumentType;\n}\n\nexport function useContractManagerFiltersData({\n  listPerspective,\n  documentType,\n}: UseContractManagerFiltersDataOptions) {\n  const { t } = useTranslation();\n\n  const { data: contractNoums, loading: contractNoumsLoading } =\n    useGetNoumsLinkedToContractsQuery({\n      variables: {\n        pov: listPerspective,\n      },\n      skip: documentType !== DocumentType.Contract,\n    });\n\n  const { data: statementOfWorkNoums, loading: statementOfWorkNoumsLoading } =\n    useGetNoumsLinkedToSoWsQuery({\n      variables: {\n        pov: listPerspective,\n      },\n      skip: documentType !== DocumentType.Sow,\n    });\n\n  const { data: consignorsData, loading: consignorLoading } =\n    useGetConsignorsQuery({\n      variables: {\n        pov: listPerspective,\n      },\n    });\n\n  const statusOptions = useMemo<\n    DropdownValueType<ContractStatus | SowStatus, ContractStatus | SowStatus>[]\n  >(\n    () =>\n      documentType === DocumentType.Contract\n        ? getAvailableContractStatuses(listPerspective).map((status) =>\n            mapContractStatusToOption(status, t),\n          )\n        : getAvailableStatementOfWorkStatuses(listPerspective).map((status) =>\n            mapSowStatusToOption(status, t),\n          ),\n    [documentType, listPerspective, t],\n  );\n\n  const consignorOptions = useMemo(\n    () => cleanList(consignorsData?.getConsignors).map(mapConsignorToOption),\n    [consignorsData?.getConsignors],\n  );\n  const noumOptions = useMemo(\n    () =>\n      cleanList(\n        documentType === DocumentType.Contract\n          ? contractNoums?.getNoumsLinkedToContracts\n          : statementOfWorkNoums?.getNoumsLinkedToSOWs,\n      ).map(mapNoumToOption),\n    [\n      contractNoums?.getNoumsLinkedToContracts,\n      documentType,\n      statementOfWorkNoums,\n    ],\n  );\n\n  return {\n    statuses: {\n      options: statusOptions,\n      allValues: useMemo(\n        () => statusOptions.map((option) => option.key),\n        [statusOptions],\n      ),\n      loading: false,\n    },\n    consignors: {\n      options: consignorOptions,\n      allValues: useMemo(\n        () => consignorOptions.map((option) => option.key),\n        [consignorOptions],\n      ),\n      loading: consignorLoading,\n    },\n    noums: {\n      options: noumOptions,\n      allValues: useMemo(\n        () => noumOptions.map((option) => option.key),\n        [noumOptions],\n      ),\n      loading: contractNoumsLoading || statementOfWorkNoumsLoading,\n    },\n  };\n}\n","import { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useEffect } from 'react';\nimport { Button } from '@/components/Button';\nimport { DataGrid } from '@/components/DataGrid';\nimport { Icon } from '@/components/Icon';\nimport { MultiselectField } from '@/components/MultiselectField';\nimport TabsForm from '@/components/Tabs/TabsForm';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { DocumentTypeFilterField } from '@/features/contracts/components/DocumentTypeFilterField/DocumentTypeFilterField';\nimport { Stack, StackItem } from '@/layout';\nimport { usePrevious } from '@/hooks/previous';\nimport { useContractManagerFiltersData } from './Filters/useContractManagerFiltersData';\nimport { type Filters, ListPOV } from './types';\n\ninterface ListHeaderProps {\n  onCreateContract: () => void;\n  onCreateStatementOfWork: () => void;\n}\n\nexport function ListHeader({\n  onCreateContract,\n  onCreateStatementOfWork,\n}: ListHeaderProps) {\n  const { t } = useTranslation();\n\n  const { watch, setValue } = useFormContext<Filters>();\n\n  const [type, listPerspective] = watch(['type', 'perspective']);\n  const prevListPerspective = usePrevious(listPerspective);\n\n  const { statuses, consignors, noums } = useContractManagerFiltersData({\n    listPerspective,\n    documentType: type,\n  });\n\n  useEffect(() => {\n    if (listPerspective !== prevListPerspective) {\n      setValue('consignorIds', undefined);\n      setValue('noumIds', undefined);\n    }\n  }, [listPerspective, prevListPerspective, setValue]);\n\n  return (\n    <>\n      <Stack gap={24} vertical align=\"stretch\">\n        <Stack gap={24} justify=\"space-between\" align=\"center\">\n          <StackItem grow>\n            <TSpan font=\"heading-xs-bold\">\n              {t('noumena.contract_manager.contract_manager')}\n            </TSpan>\n          </StackItem>\n          <Stack gap={8} justify=\"flex-end\" align=\"center\">\n            <Button\n              secondary\n              size=\"small\"\n              leftIcon={<Icon name=\"add_m\" size={24} />}\n              onClick={onCreateStatementOfWork}\n            >\n              {t('noumena.contract_manager.cta.new_statement_of_work')}\n            </Button>\n            <Button\n              primary\n              size=\"small\"\n              leftIcon={<Icon name=\"add_m\" size={24} />}\n              onClick={onCreateContract}\n            >\n              {t('noumena.contract_manager.cta.new_contract')}\n            </Button>\n          </Stack>\n        </Stack>\n        <Stack gap={8} justify=\"stretch\" align=\"center\">\n          <StackItem grow>\n            <DataGrid.FilterInput<Filters, 'type'>\n              name=\"type\"\n              render={({ field: { value, onChange } }) => (\n                <DocumentTypeFilterField value={value} onChange={onChange} />\n              )}\n            />\n          </StackItem>\n          <StackItem basis=\"150px\">\n            <DataGrid.FilterInput<Filters, 'statuses'>\n              name=\"statuses\"\n              render={({ field: { value, onChange } }) => (\n                <MultiselectField\n                  inputSize=\"small\"\n                  label={t('noumena.contract_manager.filters.status.label')}\n                  options={statuses.options}\n                  isLoading={statuses.loading}\n                  value={value ?? statuses.allValues}\n                  onChange={onChange}\n                  maxContainerHeight=\"500px\"\n                />\n              )}\n            />\n          </StackItem>\n          <StackItem grow>\n            <DataGrid.FilterInput<Filters, 'consignorIds'>\n              name=\"consignorIds\"\n              render={({ field: { value, onChange } }) => (\n                <MultiselectField\n                  inputSize=\"small\"\n                  hideIcons={false}\n                  label={t('noumena.contract_manager.filters.consignor.label')}\n                  allOptionLabel=\"All Consignors\"\n                  options={consignors.options}\n                  isLoading={consignors.loading}\n                  value={value ?? consignors.allValues}\n                  onChange={onChange}\n                  maxContainerHeight=\"500px\"\n                />\n              )}\n            />\n          </StackItem>\n          <StackItem grow>\n            <DataGrid.FilterInput<Filters, 'noumIds'>\n              name=\"noumIds\"\n              render={({ field: { value, onChange } }) => (\n                <MultiselectField\n                  inputSize=\"small\"\n                  hideIcons={false}\n                  label={t('noumena.contract_manager.filters.noum.label')}\n                  allOptionLabel={\n                    listPerspective === ListPOV.Owner\n                      ? 'All Owned Noums'\n                      : 'All Noums'\n                  }\n                  options={noums.options}\n                  isLoading={noums.loading}\n                  value={value ?? noums.allValues}\n                  onChange={onChange}\n                  maxContainerHeight=\"500px\"\n                />\n              )}\n            />\n          </StackItem>\n          <StackItem grow>\n            <DataGrid.FilterInput<Filters, 'search'>\n              name=\"search\"\n              render={({ field: { value, onChange } }) => (\n                <TextField\n                  inputSize=\"small\"\n                  value={value}\n                  onChange={onChange}\n                  placeholder={t('noumena.contract_manager.search.placeholder')}\n                  leftIcon={\n                    <Icon\n                      name=\"search_m\"\n                      size={24}\n                      color=\"--icon-input-neutral-default\"\n                    />\n                  }\n                  rightIcon={\n                    <Icon\n                      name=\"clear_m\"\n                      size={24}\n                      color={\n                        value\n                          ? '--icon-input-brand-primary-default'\n                          : '--color-base-transparent'\n                      }\n                      onClick={() => onChange('')}\n                    />\n                  }\n                />\n              )}\n            />\n          </StackItem>\n        </Stack>\n      </Stack>\n      <StackItem>\n        <DataGrid.FilterInput<Filters, 'perspective'>\n          name=\"perspective\"\n          render={({ field: { value, onChange } }) => (\n            <TabsForm\n              selectedId={value}\n              mode=\"isUnderline\"\n              isWithoutImage\n              fontSize=\"--font-body-medium-bold-size\"\n              onChange={(newTab) => onChange(newTab as ListPOV)}\n              inputList={[\n                {\n                  id: ListPOV.Owner,\n                  name: 'mine',\n                  text: 'Created by me',\n                  labelSize: 'small',\n                },\n                {\n                  id: ListPOV.CounterParty,\n                  name: 'received',\n                  text: 'Received',\n                  labelSize: 'small',\n                },\n              ]}\n            />\n          )}\n        />\n      </StackItem>\n    </>\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath } from 'react-router';\nimport {\n  useDeleteContractMutation,\n  useGetContractsQuery,\n} from '@/apollo/graphql';\nimport { DataGrid } from '@/components/DataGrid';\nimport { type PaginationProps } from '@/components/DataGrid/Pagination';\nimport { type TableColumn } from '@/components/DataGrid/Table/Table';\nimport { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport routes from '@/constants/routes';\nimport { DeleteDocumentConfirmationModal } from '@/features/contracts/components/DeleteDocumentConfirmationModal/DeleteDocumentConfirmationModal';\nimport { DocumentStatusTag } from '@/features/contracts/components/DocumentStatusTag/DocumentStatusTag';\nimport { DocumentTypeTag } from '@/features/contracts/components/DocumentTypeTag/DocumentTypeTag';\nimport { type ContractBasic, DocumentType } from '@/features/contracts/types';\nimport { ContactDetailsUtils } from '@/features/noumContacts/utils/contactDetails';\nimport { useError, useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { Stack } from '@/layout';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\nimport { cleanList } from '@/utils/list';\nimport { useContractPermissions } from '@/features/contracts/hooks/contractPermissions';\nimport { ContractUtils } from '@/features/contracts/utils/contract';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { useDownloadContractPdfLazy } from '@/features/contracts/hooks/contractPdf';\nimport { type Filters, type ListPOV } from '../types';\nimport { mapToContractListFilters } from '../Filters/filterMapper';\n\ntype ModalType = 'delete';\n\nenum RowAction {\n  View = 'VIEW',\n  DownloadPdf = 'DOWNLOAD_PDF',\n  Amend = 'AMEND',\n  Edit = 'EDIT',\n  Delete = 'DELETE',\n}\n\ninterface ContractsListProps {\n  offset: number;\n  filters: Partial<Filters>;\n  listPerspective: ListPOV;\n  enableBulkDownload: boolean;\n  onPaginationChange: PaginationProps['onChange'];\n}\n\nexport function ContractsList({\n  offset,\n  filters,\n  listPerspective,\n  enableBulkDownload,\n  onPaginationChange,\n}: ContractsListProps) {\n  const { addPrimaryIconToast, addToast } = useToast();\n  const { t } = useTranslation();\n  const { logError } = useError();\n\n  const { navigateAndSetOrigin } = useNavigateWithOrigin();\n\n  const ContractPermissions = useContractPermissions();\n\n  const { data, loading, refetch } = useGetContractsQuery({\n    variables: {\n      limit: 5,\n      offset,\n      filter: mapToContractListFilters(filters),\n      viewingAs: listPerspective,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const downloadContractPdf = useDownloadContractPdfLazy();\n\n  const documents = data?.getContractList.data;\n  const totalCount = data?.getContractList.count ?? 0;\n\n  const [deleteContract] = useDeleteContractMutation();\n\n  const { modalType, contextData, openModal, closeModal } = useModalManager<\n    ModalType,\n    ContractBasic\n  >();\n  const deleteDocument = async () => {\n    if (contextData) {\n      try {\n        await deleteContract({\n          variables: {\n            id: contextData._id,\n          },\n        });\n        refetch();\n        addToast(\n          'primary',\n          'none',\n          t('noumena.contract_manager.toast.draft_deleted'),\n        );\n      } catch (err) {\n        logError(err, 'contract-manager-delete-contract', true);\n      }\n    }\n    closeModal();\n  };\n\n  const handleRowActionClick = useCallback(\n    (document: ContractBasic, action: RowAction) => {\n      switch (action) {\n        case RowAction.View: {\n          navigateAndSetOrigin(\n            generatePath(routes.CONTRACT_PREVIEW, { id: document._id }),\n          );\n          break;\n        }\n        case RowAction.Edit: {\n          navigateAndSetOrigin(\n            generatePath(routes.CONTRACT_EDIT, { id: document._id }),\n          );\n          break;\n        }\n        case RowAction.Delete:\n          openModal('delete', document);\n          break;\n        case RowAction.DownloadPdf:\n          downloadContractPdf(\n            document._id,\n            ContractUtils.formatPdfFileName(document),\n          );\n          break;\n        default: {\n          // eslint-disable-next-line no-console\n          console.log('Unsupported action', action, 'on document', document);\n        }\n      }\n    },\n    [downloadContractPdf, navigateAndSetOrigin, openModal],\n  );\n\n  const columns = useMemo<TableColumn<ContractBasic>[]>(\n    () => [\n      {\n        id: 'title',\n        title: t('noumena.contracts.title'),\n        renderValue: (item) => (\n          <>\n            <DocumentTypeTag\n              type={DocumentType.Contract}\n              style={{ marginRight: 8 }}\n            />\n            <TSpan font=\"footnote-bold\" color=\"--text-card-neutral-highlighted\">\n              {item.title}\n            </TSpan>\n          </>\n        ),\n        wordWrap: false,\n      },\n      {\n        id: 'status',\n        title: t('noumena.contracts.status'),\n        renderValue: (item) => (\n          <DocumentStatusTag\n            status={item.status}\n            size=\"small\"\n            contentFont=\"footnote-bold\"\n          />\n        ),\n        width: '10%',\n      },\n      {\n        id: 'buyer',\n        title: t('noumena.contracts.buyer'),\n        renderValue: (item) =>\n          item.buyer\n            ? ContactDetailsUtils.formatCompanyAndName(item.buyer)\n            : '',\n        width: '20%',\n        wordWrap: false,\n      },\n      {\n        id: 'serviceProvider',\n        title: t('noumena.contracts.service_provider'),\n        renderValue: (item) =>\n          item.seller\n            ? ContactDetailsUtils.formatCompanyAndName(item.seller)\n            : '',\n        width: '20%',\n        wordWrap: false,\n      },\n      {\n        id: 'effectiveDate',\n        title: t('noumena.contracts.effective_date'),\n        renderValue: (item) =>\n          item.effectiveDate\n            ? formatDateString(\n                ApiPayloadParser.parseDateString(item.effectiveDate),\n              )\n            : '--',\n        width: '10%',\n      },\n      {\n        id: 'actions',\n        title: '',\n        renderValue: (item) => (\n          <DataGrid.ActionsMenu<RowAction>\n            onClick={(value) => handleRowActionClick(item, value)}\n            menuOptions={cleanList([\n              ContractPermissions.canSeeSummary(item)\n                ? {\n                    key: 'view',\n                    label: t('noumena.contract_manager.action.view'),\n                    value: RowAction.View,\n                    iconName: 'eye_on_m',\n                  }\n                : undefined,\n              ContractPermissions.canDownloadPdf(item)\n                ? {\n                    key: 'download_pdf',\n                    label: t('noumena.contract_manager.action.download_pdf'),\n                    value: RowAction.DownloadPdf,\n                    iconName: 'download_m',\n                  }\n                : undefined,\n              ContractPermissions.canAmend(item)\n                ? {\n                    key: 'amend',\n                    label: t('noumena.contract_manager.action.amend'),\n                    value: RowAction.Amend,\n                    iconName: 'repeat_xs',\n                  }\n                : undefined,\n              ContractPermissions.canEdit(item)\n                ? {\n                    key: 'edit',\n                    label: t('noumena.contract_manager.action.edit'),\n                    value: RowAction.Edit,\n                    iconName: 'edit_m',\n                  }\n                : undefined,\n              ContractPermissions.canDelete(item)\n                ? {\n                    key: 'delete',\n                    label: t('noumena.contract_manager.action.delete'),\n                    value: RowAction.Delete,\n                    iconName: 'delete_m',\n                    intent: 'danger',\n                  }\n                : undefined,\n            ])}\n          />\n        ),\n        width: '10%',\n      },\n    ],\n    [ContractPermissions, handleRowActionClick, t],\n  );\n\n  return (\n    <Stack gap={24} vertical align=\"stretch\">\n      <DataGrid.Table<ContractBasic>\n        keyExtractor={(item) => item._id}\n        data={cleanList(documents)}\n        columns={columns}\n        rowsPerPage={5}\n        loading={loading}\n        enableRowSelection={enableBulkDownload}\n        wordWrap\n      />\n      <DataGrid.Footer\n        leftElement={\n          <DataGrid.Pagination\n            totalCount={totalCount}\n            itemsPerPage={5}\n            currentOffset={offset}\n            onChange={onPaginationChange}\n          />\n        }\n        rightElement={\n          enableBulkDownload && (\n            <DataGrid.BulkAction\n              label={t('noumena.contracts.cta.download')}\n              rightIcon={<Icon name=\"download_m\" size={24} />}\n              onClick={(selectedItems) =>\n                addPrimaryIconToast(\n                  `QA Note: Not implemented. Would download ${selectedItems.length} items.`,\n                )\n              }\n            />\n          )\n        }\n      />\n      <DeleteDocumentConfirmationModal\n        isOpen={modalType === 'delete'}\n        isDraft={ContractUtils.isDraft(contextData)}\n        documentName={contextData?.title ?? ''}\n        documentType={DocumentType.Contract}\n        onCancel={closeModal}\n        onDelete={deleteDocument}\n      />\n    </Stack>\n  );\n}\n","import styled from 'styled-components';\nimport { ellipsisText } from '@/common/globalStyles';\nimport { Stack, StackItem } from '@/layout';\nimport { footnoteTypography, TSpan } from '@/components/Typography';\n\nconst StatementOfWorkItemTitleContainer = styled(Stack).attrs(() => ({\n  vertical: true,\n  align: 'stretch',\n}))`\n  ${ellipsisText}\n`;\n\nconst StatementOfWorkItemTitle = styled(TSpan).attrs(() => ({\n  font: 'body-m-bold',\n  color: '--text-card-neutral-highlighted',\n}))`\n  ${ellipsisText}\n`;\n\nconst StatementOfWorkItemContractContainer = styled(Stack).attrs(() => ({\n  gap: 2,\n  justify: 'stretch',\n}))`\n  cursor: pointer;\n  color: var(--text-card-neutral-highlighted);\n  ${footnoteTypography.footnote};\n`;\n\nconst StatementOfWorkItemContractTitle = styled(StackItem).attrs(() => ({\n  shrink: 1,\n}))`\n  ${ellipsisText}\n`;\nconst StatementOfWorkItemContractNumber = styled(StackItem).attrs(() => ({\n  shrink: 0,\n}))``;\n\nexport default {\n  StatementOfWorkItemTitleContainer,\n  StatementOfWorkItemTitle,\n  StatementOfWorkItemContractContainer,\n  StatementOfWorkItemContractTitle,\n  StatementOfWorkItemContractNumber,\n};\n","import { RouterLink } from '@/components/Link';\nimport { DocumentTypeTag } from '@/features/contracts/components/DocumentTypeTag/DocumentTypeTag';\nimport {\n  DocumentType,\n  type StatementOfWorkBasic,\n} from '@/features/contracts/types';\nimport { ContractUtils } from '@/features/contracts/utils/contract';\nimport { ContractToolRoutes } from '@/features/contracts/utils/routes';\nimport { Stack } from '@/layout';\nimport S from './styles';\n\ninterface StatementOfWorkTitleCellProps {\n  statementOfWork: StatementOfWorkBasic;\n}\n\nexport function StatementOfWorkTitleCell({\n  statementOfWork,\n}: StatementOfWorkTitleCellProps) {\n  return (\n    <Stack gap={8} align=\"center\" justify=\"stretch\">\n      <DocumentTypeTag type={DocumentType.Sow} />\n      <S.StatementOfWorkItemTitleContainer>\n        <S.StatementOfWorkItemTitle>\n          {statementOfWork.title}\n        </S.StatementOfWorkItemTitle>\n        {statementOfWork.linkedContract?.title && (\n          <RouterLink\n            // TODO: Decide where to go based on status and isCompleted flag.\n            to={ContractToolRoutes.viewContract({\n              id: statementOfWork.linkedContract._id,\n            })}\n          >\n            <S.StatementOfWorkItemContractContainer>\n              <S.StatementOfWorkItemContractTitle>\n                {statementOfWork.linkedContract?.title}\n              </S.StatementOfWorkItemContractTitle>\n              <S.StatementOfWorkItemContractNumber shrink={0}>\n                (\n                {ContractUtils.formatDocumentNumber(\n                  statementOfWork.linkedContract.contractNumber,\n                )}\n                )\n              </S.StatementOfWorkItemContractNumber>\n            </S.StatementOfWorkItemContractContainer>\n          </RouterLink>\n        )}\n      </S.StatementOfWorkItemTitleContainer>\n    </Stack>\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath } from 'react-router';\nimport {\n  useDeleteSowMutation,\n  useGetStatementsOfWorkQuery,\n} from '@/apollo/graphql';\nimport { DataGrid } from '@/components/DataGrid';\nimport { type PaginationProps } from '@/components/DataGrid/Pagination';\nimport { type TableColumn } from '@/components/DataGrid/Table/Table';\nimport { Icon } from '@/components/Icon';\nimport routes from '@/constants/routes';\nimport { DeleteDocumentConfirmationModal } from '@/features/contracts/components/DeleteDocumentConfirmationModal/DeleteDocumentConfirmationModal';\nimport { DocumentStatusTag } from '@/features/contracts/components/DocumentStatusTag/DocumentStatusTag';\nimport { useStatementOfWorkPermissions } from '@/features/contracts/hooks/statementOfWorkPermissions';\nimport {\n  DocumentType,\n  type StatementOfWorkBasic,\n} from '@/features/contracts/types';\nimport { StatementOfWorkUtils } from '@/features/contracts/utils/statementOfWork';\nimport { ContactDetailsUtils } from '@/features/noumContacts/utils/contactDetails';\nimport { useError, useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { Stack } from '@/layout';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\nimport { cleanList } from '@/utils/list';\nimport { useDownloadStatementOfWorkPdfLazy } from '@/features/contracts/hooks/statementOfWorkPdf';\nimport { mapToStatementOfWorkListFilters } from '../Filters/filterMapper';\nimport { type Filters, type ListPOV } from '../types';\nimport { StatementOfWorkTitleCell } from './StatementOfWorkTitleCell';\n\ntype ModalType = 'delete';\n\nenum RowAction {\n  View = 'VIEW',\n  DownloadPdf = 'DOWNLOAD_PDF',\n  Amend = 'AMEND',\n  Edit = 'EDIT',\n  Delete = 'DELETE',\n}\n\ninterface StatementOfWorkListProps {\n  offset: number;\n  filters: Partial<Filters>;\n  listPerspective: ListPOV;\n  enableBulkDownload: boolean;\n  onPaginationChange: PaginationProps['onChange'];\n}\n\nexport function StatementOfWorkList({\n  offset,\n  filters,\n  listPerspective,\n  enableBulkDownload,\n  onPaginationChange,\n}: StatementOfWorkListProps) {\n  const { navigateAndSetOrigin } = useNavigateWithOrigin();\n  const { addPrimaryIconToast, addToast } = useToast();\n  const { t } = useTranslation();\n  const { logError } = useError();\n  const { modalType, contextData, openModal, closeModal } = useModalManager<\n    ModalType,\n    StatementOfWorkBasic\n  >();\n\n  const StatementOfWorkPermissions = useStatementOfWorkPermissions();\n\n  const { data, loading, refetch } = useGetStatementsOfWorkQuery({\n    variables: {\n      limit: 5,\n      offset,\n      filter: mapToStatementOfWorkListFilters(filters),\n      viewingAs: listPerspective,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const documents = data?.getAllSOW.data;\n  const totalCount = data?.getAllSOW.count ?? 0;\n\n  const downloadStatementOfWorkPdf = useDownloadStatementOfWorkPdfLazy();\n\n  const [deleteStatementOfWork] = useDeleteSowMutation();\n\n  const deleteDocument = async () => {\n    if (contextData) {\n      try {\n        await deleteStatementOfWork({\n          variables: {\n            id: contextData._id,\n          },\n        });\n        refetch();\n        addToast(\n          'primary',\n          'none',\n          t('noumena.contract_manager.toast.draft_deleted'),\n        );\n      } catch (err) {\n        logError(err, 'contract-manager-delete-sow', true);\n      }\n    }\n    closeModal();\n  };\n\n  const handleRowActionClick = useCallback(\n    (document: StatementOfWorkBasic, action: RowAction) => {\n      switch (action) {\n        case RowAction.View: {\n          navigateAndSetOrigin(\n            generatePath(routes.STATEMENT_OF_WORK_PREVIEW, {\n              id: document._id,\n            }),\n          );\n          break;\n        }\n        case RowAction.Edit: {\n          navigateAndSetOrigin(\n            generatePath(routes.STATEMENT_OF_WORK_EDIT, { id: document._id }),\n          );\n          break;\n        }\n        case RowAction.Delete:\n          openModal('delete', document);\n          break;\n        case RowAction.DownloadPdf:\n          downloadStatementOfWorkPdf(\n            document._id,\n            StatementOfWorkUtils.formatPdfFileName(document),\n          );\n          break;\n        default: {\n          // eslint-disable-next-line no-console\n          console.log('Unsupported action', action, 'on document', document);\n        }\n      }\n    },\n    [downloadStatementOfWorkPdf, navigateAndSetOrigin, openModal],\n  );\n\n  const columns = useMemo<TableColumn<StatementOfWorkBasic>[]>(\n    () => [\n      {\n        id: 'title',\n        title: t('noumena.contracts.title'),\n        renderValue: (item) => (\n          <StatementOfWorkTitleCell statementOfWork={item} />\n        ),\n        wordWrap: false,\n      },\n      {\n        id: 'status',\n        title: t('noumena.contracts.status'),\n        renderValue: (item) => (\n          <DocumentStatusTag\n            status={item.status}\n            size=\"small\"\n            contentFont=\"footnote-bold\"\n          />\n        ),\n        width: '10%',\n      },\n      {\n        id: 'buyer',\n        title: t('noumena.contracts.buyer'),\n        renderValue: (item) =>\n          item.linkedContract?.buyer\n            ? ContactDetailsUtils.formatCompanyAndName(\n                item.linkedContract?.buyer,\n              )\n            : '',\n        width: '20%',\n        wordWrap: false,\n      },\n      {\n        id: 'serviceProvider',\n        title: t('noumena.contracts.service_provider'),\n        renderValue: (item) =>\n          item.linkedContract?.seller\n            ? ContactDetailsUtils.formatCompanyAndName(\n                item.linkedContract?.seller,\n              )\n            : '',\n        width: '20%',\n        wordWrap: false,\n      },\n      {\n        id: 'effectiveDate',\n        title: t('noumena.contracts.effective_date'),\n        renderValue: (item) =>\n          item.linkedContract?.effectiveDate\n            ? formatDateString(\n                ApiPayloadParser.parseDateString(\n                  item.linkedContract?.effectiveDate,\n                ),\n              )\n            : '--',\n        width: '10%',\n      },\n      {\n        id: 'actions',\n        title: '',\n        renderValue: (item) => (\n          <DataGrid.ActionsMenu<RowAction>\n            onClick={(value) => handleRowActionClick(item, value)}\n            menuOptions={cleanList([\n              StatementOfWorkPermissions.canSeeSummary(item)\n                ? {\n                    key: 'view',\n                    label: t('noumena.contract_manager.action.view'),\n                    value: RowAction.View,\n                    iconName: 'eye_on_m',\n                  }\n                : undefined,\n              StatementOfWorkPermissions.canDownloadPdf(item)\n                ? {\n                    key: 'download_pdf',\n                    label: t('noumena.contract_manager.action.download_pdf'),\n                    value: RowAction.DownloadPdf,\n                    iconName: 'download_m',\n                  }\n                : undefined,\n              StatementOfWorkPermissions.canAmend(item)\n                ? {\n                    key: 'amend',\n                    label: t('noumena.contract_manager.action.amend'),\n                    value: RowAction.Amend,\n                    iconName: 'repeat_xs',\n                  }\n                : undefined,\n              StatementOfWorkPermissions.canEdit(item)\n                ? {\n                    key: 'edit',\n                    label: t('noumena.contract_manager.action.edit'),\n                    value: RowAction.Edit,\n                    iconName: 'edit_m',\n                  }\n                : undefined,\n              StatementOfWorkPermissions.canDelete(item)\n                ? {\n                    key: 'delete',\n                    label: t('noumena.contract_manager.action.delete'),\n                    value: RowAction.Delete,\n                    iconName: 'delete_m',\n                    intent: 'danger',\n                  }\n                : undefined,\n            ])}\n          />\n        ),\n        width: '10%',\n      },\n    ],\n    [StatementOfWorkPermissions, handleRowActionClick, t],\n  );\n\n  return (\n    <Stack gap={24} vertical align=\"stretch\">\n      <DataGrid.Table<StatementOfWorkBasic>\n        keyExtractor={(item) => item._id}\n        data={cleanList(documents)}\n        columns={columns}\n        rowsPerPage={5}\n        loading={loading}\n        enableRowSelection={enableBulkDownload}\n        wordWrap\n      />\n      <DataGrid.Footer\n        leftElement={\n          <DataGrid.Pagination\n            totalCount={totalCount}\n            itemsPerPage={5}\n            currentOffset={offset}\n            onChange={onPaginationChange}\n          />\n        }\n        rightElement={\n          enableBulkDownload && (\n            <DataGrid.BulkAction\n              label={t('noumena.contracts.cta.download')}\n              rightIcon={<Icon name=\"download_m\" size={24} />}\n              onClick={(selectedItems) =>\n                addPrimaryIconToast(\n                  `QA Note: Not implemented. Would download ${selectedItems.length} items.`,\n                )\n              }\n            />\n          )\n        }\n      />\n      <DeleteDocumentConfirmationModal\n        isOpen={modalType === 'delete'}\n        isDraft={StatementOfWorkUtils.isDraft(contextData)}\n        documentName={contextData?.title ?? ''}\n        documentType={DocumentType.Sow}\n        onCancel={closeModal}\n        onDelete={deleteDocument}\n      />\n    </Stack>\n  );\n}\n","import styled from 'styled-components';\nimport { Card } from '@/components/Card';\n\nconst PageCard = styled(Card)`\n  width: 100%;\n  padding: 24px;\n  overflow: visible;\n`;\n\nexport default {\n  PageCard,\n};\n","import { useCallback } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { pickBy } from 'lodash';\nimport { type ContractStatus, type SowStatus } from '@/apollo/generated/types';\nimport { type DocumentType } from '@/features/contracts/types';\nimport { type ContractManagerSearchParams } from '@/features/contracts/utils/routes';\nimport { type ListPOV } from './types';\n\nexport function useContractManagerSearchParams() {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const parsedParams: ContractManagerSearchParams = {\n    noumId: searchParams.get('noumId') ?? undefined,\n    type: (searchParams.get('type') as DocumentType) ?? undefined,\n    status:\n      (searchParams.get('status') as ContractStatus | SowStatus) ?? undefined,\n    perspective: (searchParams.get('perspective') as ListPOV) ?? undefined,\n  };\n\n  const updateSearchParams = useCallback(\n    ({ type, perspective }: ContractManagerSearchParams) => {\n      setSearchParams(\n        pickBy({ type, perspective }, Boolean) as Record<string, string>,\n        { replace: true },\n      );\n    },\n    [setSearchParams],\n  );\n\n  return {\n    searchParams: parsedParams,\n    updateSearchParams,\n  };\n}\n","import { debounce } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router';\nimport { DataGrid } from '@/components/DataGrid';\nimport routes from '@/constants/routes';\nimport {\n  type Contract,\n  DocumentType,\n  type StatementOfWork,\n} from '@/features/contracts/types';\nimport { Stack } from '@/layout';\nimport ListLayout from '@/layout/ListLayout';\nimport { getDefaultFilterValues } from './Filters/filterMapper';\nimport { ListHeader } from './ListHeader';\nimport { ContractsList } from './Lists/ContractsList';\nimport { StatementOfWorkList } from './Lists/StatementOfWorkList';\nimport S from './styles';\nimport { type Filters } from './types';\nimport { useContractManagerSearchParams } from './useContractManagerSearchParams';\n\nexport function ContractManager() {\n  const navigate = useNavigate();\n\n  const { searchParams, updateSearchParams } = useContractManagerSearchParams();\n\n  const [filters, setFilters] = useState<Filters>(\n    getDefaultFilterValues(searchParams),\n  );\n  const [offset, setOffset] = useState(0);\n\n  const submitFilters = useMemo(\n    () =>\n      debounce((newFilters: Filters) => {\n        setOffset(0);\n        setFilters(newFilters);\n        updateSearchParams(newFilters);\n      }, 500),\n    [updateSearchParams],\n  );\n\n  const navigateToCreateContract = () => {\n    navigate(routes.CONTRACT_CREATE);\n  };\n  const navigateToCreateStatementOfWork = () => {\n    navigate(routes.STATEMENT_OF_WORK_CREATE);\n  };\n\n  return (\n    <ListLayout type=\"Contracts\" onGoBack={() => navigate(-1)}>\n      <Stack gap={24}>\n        <S.PageCard>\n          <DataGrid.Provider<Contract | StatementOfWork> data={[]}>\n            <Stack vertical align=\"stretch\">\n              <DataGrid.Filters<Filters>\n                defaultValues={filters}\n                onSubmit={submitFilters}\n                clearRowSelectionOnSubmit\n              >\n                <Stack gap={24} vertical align=\"stretch\">\n                  <ListHeader\n                    onCreateContract={navigateToCreateContract}\n                    onCreateStatementOfWork={navigateToCreateStatementOfWork}\n                  />\n                </Stack>\n              </DataGrid.Filters>\n\n              {filters.type === DocumentType.Contract ? (\n                <ContractsList\n                  offset={offset}\n                  filters={filters}\n                  listPerspective={filters.perspective}\n                  onPaginationChange={(state) => setOffset(state.offset)}\n                  enableBulkDownload={false}\n                />\n              ) : (\n                <StatementOfWorkList\n                  offset={offset}\n                  filters={filters}\n                  listPerspective={filters.perspective}\n                  onPaginationChange={(state) => setOffset(state.offset)}\n                  enableBulkDownload={false}\n                />\n              )}\n            </Stack>\n          </DataGrid.Provider>\n        </S.PageCard>\n      </Stack>\n    </ListLayout>\n  );\n}\n"],"names":["nullOnEmpty","array","length","mapToContractListFilters","filters","search","status","statuses","noumIds","consignors","consignorIds","mapToStatementOfWorkListFilters","getDefaultFilterValues","searchParams","perspective","ListPOV","Owner","type","DocumentType","Contract","undefined","noumId","mapSowStatusToOption","t","key","value","label","snakeCase","mapContractStatusToOption","mapConsignorToOption","contact","_id","displayName","icon","jsx","Avatar","userId","profile","profilePictureThumbnail","mapNoumToOption","noum","name","profileImageThumbnail","getAvailableContractStatuses","listPerspective","ContractStatus","Draft","Issued","Signed","getAvailableStatementOfWorkStatuses","SowStatus","useContractManagerFiltersData","documentType","useTranslation","data","contractNoums","loading","contractNoumsLoading","useGetNoumsLinkedToContractsQuery","variables","pov","skip","statementOfWorkNoums","statementOfWorkNoumsLoading","useGetNoumsLinkedToSoWsQuery","Sow","consignorsData","consignorLoading","useGetConsignorsQuery","statusOptions","useMemo","map","consignorOptions","cleanList","getConsignors","noumOptions","getNoumsLinkedToContracts","getNoumsLinkedToSOWs","options","allValues","option","noums","ListHeader","onCreateContract","onCreateStatementOfWork","watch","setValue","useFormContext","prevListPerspective","usePrevious","useEffect","jsxs","Fragment","Stack","StackItem","TSpan","Button","Icon","DataGrid","field","onChange","DocumentTypeFilterField","MultiselectField","TextField","TabsForm","newTab","id","text","labelSize","CounterParty","ContractsList","offset","enableBulkDownload","onPaginationChange","addPrimaryIconToast","addToast","useToast","logError","useError","navigateAndSetOrigin","useNavigateWithOrigin","ContractPermissions","useContractPermissions","refetch","useGetContractsQuery","limit","filter","viewingAs","fetchPolicy","downloadContractPdf","useDownloadContractPdfLazy","documents","getContractList","totalCount","count","deleteContract","useDeleteContractMutation","modalType","contextData","openModal","closeModal","useModalManager","deleteDocument","err","handleRowActionClick","useCallback","document","action","RowAction","generatePath","routes","CONTRACT_PREVIEW","CONTRACT_EDIT","ContractUtils","formatPdfFileName","console","log","columns","title","renderValue","DocumentTypeTag","marginRight","item","wordWrap","DocumentStatusTag","width","buyer","ContactDetailsUtils","formatCompanyAndName","seller","effectiveDate","formatDateString","ApiPayloadParser","parseDateString","canSeeSummary","iconName","canDownloadPdf","canAmend","canEdit","canDelete","intent","selectedItems","DeleteDocumentConfirmationModal","isDraft","StatementOfWorkItemTitleContainer","styled","attrs","vertical","align","ellipsisText","StatementOfWorkItemTitle","font","color","StatementOfWorkItemContractContainer","gap","justify","footnoteTypography","footnote","StatementOfWorkItemContractTitle","shrink","StatementOfWorkItemContractNumber","S$1","StatementOfWorkTitleCell","statementOfWork","S","linkedContract","RouterLink","ContractToolRoutes","viewContract","formatDocumentNumber","contractNumber","StatementOfWorkList","StatementOfWorkPermissions","useStatementOfWorkPermissions","useGetStatementsOfWorkQuery","getAllSOW","downloadStatementOfWorkPdf","useDownloadStatementOfWorkPdfLazy","deleteStatementOfWork","useDeleteSowMutation","STATEMENT_OF_WORK_PREVIEW","STATEMENT_OF_WORK_EDIT","StatementOfWorkUtils","PageCard","Card","useContractManagerSearchParams","setSearchParams","useSearchParams","parsedParams","get","updateSearchParams","pickBy","Boolean","replace","ContractManager","navigate","useNavigate","setFilters","useState","setOffset","submitFilters","debounce","newFilters","navigateToCreateContract","CONTRACT_CREATE","navigateToCreateStatementOfWork","STATEMENT_OF_WORK_CREATE","ListLayout","state"],"mappings":"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"}