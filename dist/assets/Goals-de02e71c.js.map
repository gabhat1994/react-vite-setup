{"version":3,"file":"Goals-de02e71c.js","sources":["../../src/screens/Campaigns/CampaignOffer/CampaignOfferSummary.tsx","../../node_modules/recharts/es6/chart/BarChart.js","../../src/screens/Campaigns/CampaignOffer/Chart.tsx","../../src/screens/Campaigns/CampaignOffer/types.ts","../../src/screens/Campaigns/CampaignOffer/Goals.tsx"],"sourcesContent":["import { Stack, Spacer } from '@/layout';\nimport DefaultImage from '@/assets/images/chamber_default.png';\nimport { Tag } from '@/components/Tag';\n\nimport {\n  type CampaignOfferBasicFragment,\n  type CampaignOfferFragment,\n} from '@/apollo/graphql';\nimport { TSpan } from '@/components/Typography';\nimport { Layout } from '../components/Layout/Layout';\nimport { Card } from '../components/Card/Card';\nimport { NOUMCard } from '../components/NoumCard';\nimport { Utils } from '../utils';\nimport { CountryCard } from '../components/CountryCard';\n\ntype CampaignOfferSummaryProps = {\n  targetLocation: string;\n  category: string;\n  targetLanguage: string;\n  isMobile?: boolean;\n  estimatedDuration: number;\n} & Required<Pick<CampaignOfferBasicFragment, 'adId' | 'title' | 'noumId'>> &\n  Required<\n    Pick<\n      CampaignOfferFragment,\n      | 'clicksWeekly'\n      | 'costTotal'\n      | 'costWeekly'\n      | 'cpc'\n      | 'reachTotal'\n      | 'endAt'\n      | 'startAt'\n      | 'createdAt'\n    >\n  >;\n\nexport function CampaignOfferSummary({\n  adId,\n  title,\n  createdAt,\n  startAt,\n  endAt,\n  targetLanguage,\n  category,\n  targetLocation,\n  costTotal,\n  clicksWeekly,\n  costWeekly,\n  reachTotal,\n  cpc,\n  noumId,\n  isMobile,\n  estimatedDuration,\n}: CampaignOfferSummaryProps) {\n  const flag = targetLocation.split('-')[0];\n\n  let country = targetLocation.split('-')[1];\n\n  country = country || flag;\n\n  return (\n    <Layout.Card>\n      <Stack align=\"center\" justify=\"space-between\">\n        <Card.Title>Summary</Card.Title>\n        <Stack gap={8} align=\"center\">\n          <Card.Label>{createdAt && Utils.formatDate(createdAt)}</Card.Label>{' '}\n          <Card.Label>\n            ID:{' '}\n            <TSpan colorToken=\"--text-card-neutral-highlighted\">\n              {Utils.appendAdPrefix(adId ?? '')}\n            </TSpan>\n          </Card.Label>\n        </Stack>\n      </Stack>\n\n      <Card.Label>\n        Campaign: <Card.ValueBold>{title}</Card.ValueBold>\n      </Card.Label>\n      <Card.Divider />\n\n      {!isMobile && (\n        <Stack align=\"center\" gap={32} wrap=\"wrap\">\n          <Card.CampaignMetrics label=\"Start Date:\">\n            {startAt}\n          </Card.CampaignMetrics>\n          <Card.CampaignMetrics label=\"Estimated End Date:\">\n            {endAt}\n          </Card.CampaignMetrics>\n          <Card.CampaignMetrics label=\"Estimated Duration:\">\n            {estimatedDuration} days\n          </Card.CampaignMetrics>\n          <Card.CampaignMetrics label=\"Noum:\">\n            <NOUMCard\n              name={noumId?.name ?? ''}\n              image={noumId?.profileImage ?? DefaultImage}\n            />\n          </Card.CampaignMetrics>\n        </Stack>\n      )}\n\n      {isMobile && (\n        <>\n          <Stack align=\"start\" justify=\"space-between\">\n            <Card.CampaignMetrics minWidth={false} label=\"Start Date:\">\n              {startAt}\n            </Card.CampaignMetrics>\n            <Card.CampaignMetrics\n              minWidth={false}\n              label={\n                <>\n                  Estimated <br /> End Date:\n                </>\n              }\n            >\n              {endAt}\n            </Card.CampaignMetrics>\n            <Card.CampaignMetrics\n              minWidth={false}\n              label={\n                <>\n                  Estimated <br /> Duration:\n                </>\n              }\n            >\n              {estimatedDuration} days\n            </Card.CampaignMetrics>\n          </Stack>\n          <Spacer height={16} />\n          <Card.CampaignMetrics label=\"Noum:\">\n            <NOUMCard\n              name={noumId?.name ?? ''}\n              image={noumId?.profileImage ?? DefaultImage}\n            />\n          </Card.CampaignMetrics>\n        </>\n      )}\n\n      <Card.Divider />\n\n      <Stack\n        vertical={isMobile}\n        align=\"stretch\"\n        gap={isMobile ? 13 : 32}\n        wrap=\"wrap\"\n      >\n        <Card.CampaignMetrics\n          label=\"Estimated Total Cost:\"\n          vertical={!isMobile}\n        >\n          <Tag secondary>{Utils.numberWithCommas(costTotal ?? 0)} USD</Tag>\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Weekly Cost:\" vertical={!isMobile}>\n          {Utils.numberWithCommas(costWeekly ?? 0)} USD\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Est. Weekly Clicks:\" vertical={!isMobile}>\n          {Utils.numberWithCommas(clicksWeekly ?? 0)}\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Avg. cost per click:\" vertical={!isMobile}>\n          {Utils.numberWithCommas(cpc ?? 0)} USD\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Reach\" vertical={!isMobile}>\n          {Utils.numberWithCommas(reachTotal ?? 0)}\n        </Card.CampaignMetrics>\n      </Stack>\n\n      <Card.Divider />\n\n      <Stack\n        vertical={isMobile}\n        align=\"stretch\"\n        gap={isMobile ? 13 : 21}\n        wrap=\"wrap\"\n      >\n        <Card.CampaignMetrics label=\"Audience\" isBold={false}>\n          {category}\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Location:\" isBold={false}>\n          <CountryCard flag={flag} country={country} />\n        </Card.CampaignMetrics>\n        <Card.CampaignMetrics label=\"Language:\" isBold={false}>\n          {targetLanguage}\n        </Card.CampaignMetrics>\n      </Stack>\n    </Layout.Card>\n  );\n}\n","/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import {\n  BarChart,\n  CartesianGrid,\n  YAxis,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n} from 'recharts';\n\ntype TCharts = {\n  currentMetricsLabel: string;\n  predictedMetricsLabel: string;\n  chartData: { uv: number; pv: number }[];\n  barSize?: number;\n  barGap?: number;\n  updateColor?: boolean;\n};\n\nconst renderColorfulLegendText = (value: string) => (\n  <span style={{ color: 'var(--text-card-neutral-default)' }}>{value}</span>\n);\n\nexport function Chart({\n  currentMetricsLabel,\n  predictedMetricsLabel,\n  chartData,\n  barGap = 58,\n  barSize = 118,\n  updateColor = false,\n}: TCharts) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={295}>\n      <BarChart\n        barGap={barGap}\n        barSize={barSize}\n        data={chartData}\n        margin={{\n          top: 30,\n          right: 4,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" vertical={false} />\n        <YAxis fontSize=\"var(--font-footnote-regular-size)\" />\n        <Legend\n          formatter={renderColorfulLegendText}\n          wrapperStyle={{\n            fontSize: 'var(--font-body-medium-size)',\n            fontFamily: 'var(--font-family)',\n            paddingTop: '12px',\n          }}\n        />\n        <Bar\n          radius={[8, 8, 0, 0]}\n          legendType=\"plainline\"\n          name={currentMetricsLabel}\n          dataKey=\"uv\"\n          fill={updateColor ? '#554D66' : '#663FBA'}\n        />\n        <Bar\n          radius={[8, 8, 0, 0]}\n          legendType=\"plainline\"\n          name={predictedMetricsLabel}\n          dataKey=\"pv\"\n          fill={updateColor ? '#B6B3BD' : '#00CA7A'}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n","export type Action = 'accept' | 'reject' | 'pay';\n\nexport enum ChartFilterFrequency {\n  Daily = 'Daily',\n  Total = 'Total',\n}\n","import { Spacer, Stack } from '@/layout/Stack';\n\nimport { type CampaignOfferFragment } from '@/apollo/graphql';\nimport {\n  Dropdown,\n  type DropdownTargetProps,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport { useMemo, useState } from 'react';\nimport { Layout } from '../components/Layout/Layout';\nimport { Card } from '../components/Card/Card';\nimport { Chart } from './Chart';\nimport S from './styles';\nimport { Utils } from '../utils';\nimport { ChartFilterFrequency } from './types';\n\ntype TGoals = {\n  isMobile: boolean;\n  isTablet: boolean;\n  estimatedDuration: number;\n} & Required<\n  Pick<\n    CampaignOfferFragment,\n    'goalConnectedUsers' | 'goalNoumVisibility' | 'status'\n  >\n>;\n\nconst ChartFilterOptions = (): DropdownValueType<string>[] => [\n  {\n    label: ChartFilterFrequency.Daily,\n    key: ChartFilterFrequency.Daily,\n    type: 'value',\n    value: ChartFilterFrequency.Daily,\n  },\n  {\n    label: ChartFilterFrequency.Total,\n    key: ChartFilterFrequency.Total,\n    type: 'value',\n    value: ChartFilterFrequency.Total,\n  },\n];\nexport function Goals({\n  isMobile,\n  isTablet,\n  goalConnectedUsers,\n  goalNoumVisibility,\n  status,\n  estimatedDuration,\n}: TGoals) {\n  const updateAppearance = Utils.updateOfferAppearance(status);\n  const [sortInfo, setSortInfo] = useState<string>(ChartFilterFrequency.Daily);\n\n  const onChange = (option: DropdownValueType<string>) => {\n    setSortInfo(option?.value);\n  };\n\n  const filtredCurrentViews = useMemo(\n    () =>\n      sortInfo === ChartFilterFrequency.Daily &&\n      goalNoumVisibility?.currentViews\n        ? Math.ceil(\n            Number(goalNoumVisibility?.currentViews) / estimatedDuration,\n          )\n        : goalNoumVisibility?.currentViews,\n    [estimatedDuration, goalNoumVisibility?.currentViews, sortInfo],\n  );\n\n  const filtredPredictedViews = useMemo(\n    () =>\n      sortInfo === ChartFilterFrequency.Daily &&\n      goalNoumVisibility?.predictedViews\n        ? Math.ceil(\n            Number(goalNoumVisibility?.predictedViews) / estimatedDuration,\n          )\n        : goalNoumVisibility?.predictedViews,\n    [estimatedDuration, goalNoumVisibility?.predictedViews, sortInfo],\n  );\n  return (\n    <Layout.Card>\n      <Card.Title>Goals</Card.Title>\n      <Card.Divider />\n\n      {/* Noum Visibility */}\n      <Card.TitleWithBG>1. Increase my Noum Visibility</Card.TitleWithBG>\n      <Spacer height={16} />\n      <Stack vertical align=\"center\" justify=\"center\" fullWidth>\n        <Stack\n          align=\"center\"\n          justify={isMobile ? 'center' : undefined}\n          wrap=\"wrap\"\n          gap={isMobile ? 13 : 48}\n          style={{\n            marginLeft: isMobile || isTablet ? '3rem' : '18.75rem',\n          }}\n        >\n          <Card.CampaignMetrics\n            label=\"Current Views (Avg.)\"\n            minWidth={!isMobile}\n          >\n            {Utils.numberWithCommas(filtredCurrentViews ?? 0)}\n          </Card.CampaignMetrics>\n          <Card.CampaignMetrics label=\"Predicted\" minWidth={!isMobile}>\n            {Utils.numberWithCommas(filtredPredictedViews ?? 0)}\n          </Card.CampaignMetrics>\n          {!isMobile && (\n            <Card.CampaignMetrics label=\"\" minWidth={!isMobile}>\n              <Dropdown\n                hideIcons\n                placement=\"right-start\"\n                options={ChartFilterOptions()}\n                onSelectOption={onChange}\n                isAnimation={false}\n              >\n                {({\n                  targetRef,\n                  toggle,\n                  active,\n                }: DropdownTargetProps<HTMLButtonElement>) => (\n                  <S.Filter\n                    ref={targetRef}\n                    size=\"small\"\n                    rightIcon={\n                      <>\n                        <Spacer isFlex height={5} />\n                        <Icon\n                          name={active ? 'chevron_up_m' : 'chevron_down_m'}\n                          color=\"--icon-input-neutral-default\"\n                          size={16}\n                        />\n                      </>\n                    }\n                    softDisabled\n                    onClick={toggle}\n                  >\n                    {ChartFilterOptions().filter(\n                      (sort) => sort.value === sortInfo,\n                    )[0]?.label || ''}\n                  </S.Filter>\n                )}\n              </Dropdown>\n            </Card.CampaignMetrics>\n          )}\n        </Stack>\n        {isMobile && (\n          <Stack\n            style={{ marginLeft: '55px', marginTop: '10px' }}\n            align=\"center\"\n            justify={isMobile ? 'center' : undefined}\n            wrap=\"wrap\"\n          >\n            <Card.CampaignMetrics label=\"\" minWidth={!isMobile}>\n              <Dropdown\n                hideIcons\n                placement=\"right-start\"\n                options={ChartFilterOptions()}\n                onSelectOption={onChange}\n                isAnimation={false}\n              >\n                {({\n                  targetRef,\n                  toggle,\n                  active,\n                }: DropdownTargetProps<HTMLButtonElement>) => (\n                  <S.Filter\n                    ref={targetRef}\n                    size=\"full\"\n                    rightIcon={\n                      <>\n                        <Spacer isFlex height={5} />\n                        <Icon\n                          name={active ? 'chevron_up_m' : 'chevron_down_m'}\n                          color=\"--icon-input-neutral-default\"\n                          size={16}\n                        />\n                      </>\n                    }\n                    softDisabled\n                    onClick={toggle}\n                  >\n                    {ChartFilterOptions().filter(\n                      (sort) => sort.value === sortInfo,\n                    )[0]?.label || ''}{' '}\n                  </S.Filter>\n                )}\n              </Dropdown>\n            </Card.CampaignMetrics>\n          </Stack>\n        )}\n        <Chart\n          currentMetricsLabel=\"Current Views (Avg.)\"\n          predictedMetricsLabel=\"Predicted\"\n          updateColor={updateAppearance}\n          barGap={isMobile ? 20 : undefined}\n          barSize={isMobile ? 110 : undefined}\n          chartData={[\n            {\n              uv: filtredCurrentViews ?? 0,\n              pv: filtredPredictedViews ?? 0,\n            },\n          ]}\n        />\n      </Stack>\n      <Spacer height={16} />\n\n      {/* Users and Followers */}\n      <Card.TitleWithBG>2. Gain Connected Users and Followers</Card.TitleWithBG>\n      <Spacer height={16} />\n      <Stack\n        align=\"center\"\n        justify=\"center\"\n        gap={32}\n        vertical={isMobile}\n        fullWidth\n      >\n        <Stack vertical align=\"center\" justify=\"center\" fullWidth>\n          <Stack align=\"center\" justify=\"center\" gap={25} fullWidth>\n            <div style={{ marginLeft: '115px' }}>\n              <Card.CampaignMetrics minWidth={false} label=\"Current Users\">\n                {Utils.numberWithCommas(goalConnectedUsers?.currentUsers ?? 0)}\n              </Card.CampaignMetrics>\n            </div>\n            <Card.CampaignMetrics label=\"Predicted\">\n              {Utils.numberWithCommas(goalConnectedUsers?.predictedUsers ?? 0)}\n            </Card.CampaignMetrics>\n          </Stack>\n          <Chart\n            barGap={25}\n            barSize={96}\n            currentMetricsLabel=\"Current Users\"\n            predictedMetricsLabel=\"Predicted\"\n            updateColor={updateAppearance}\n            chartData={[\n              {\n                uv: goalConnectedUsers?.currentUsers ?? 0,\n                pv: goalConnectedUsers?.predictedUsers ?? 0,\n              },\n            ]}\n          />\n        </Stack>\n        <Stack vertical align=\"center\" justify=\"center\" fullWidth>\n          <Stack align=\"center\" justify=\"center\" gap={25} fullWidth>\n            <div style={{ marginLeft: '115px' }}>\n              <Card.CampaignMetrics minWidth={false} label=\"Current Followers\">\n                {Utils.numberWithCommas(\n                  goalConnectedUsers?.currentFollowers ?? 0,\n                )}\n              </Card.CampaignMetrics>\n            </div>\n            <Card.CampaignMetrics label=\"Predicted\">\n              {Utils.numberWithCommas(\n                goalConnectedUsers?.predictedFollowers ?? 0,\n              )}\n            </Card.CampaignMetrics>\n          </Stack>\n          <Chart\n            barGap={25}\n            barSize={96}\n            currentMetricsLabel=\"Current Followers\"\n            predictedMetricsLabel=\"Predicted\"\n            updateColor={updateAppearance}\n            chartData={[\n              {\n                uv: goalConnectedUsers?.currentFollowers ?? 0,\n                pv: goalConnectedUsers?.predictedFollowers ?? 0,\n              },\n            ]}\n          />\n        </Stack>\n      </Stack>\n      <Spacer height={16} />\n\n      {/* Ops portal and BE support is not available to show below chart. Uncomment when support is there */}\n\n      {/* <Card.TitleWithBG>3. Get answers to Quick Questions</Card.TitleWithBG>\n      <Spacer height={16} />\n      <Stack vertical align=\"center\" justify=\"center\">\n        <Stack align=\"center\" gap={48}>\n          <Card.CampaignMetrics label=\"Current Answers (Avg.)\">\n            5\n          </Card.CampaignMetrics>\n          <Card.CampaignMetrics label=\"Predicted\">16</Card.CampaignMetrics>\n        </Stack>\n        <Chart\n          currentMetricsLabel=\"Current Answers (Avg.)\"\n          predictedMetricsLabel=\"Predicted\"\n          updateColor={updateAppearance}\n          chartData={[\n            {\n              uv: 5,\n              pv: 16,\n            },\n          ]}\n        />\n      </Stack>\n      <Spacer height={16} />\n\n      <Card.TitleWithBG>4. Custom Goal</Card.TitleWithBG>\n      <Spacer height={16} />\n      <Stack gap={8} vertical={isMobile}>\n        <S.CustomGoal>\n          <Card.CampaignMetrics label=\"Goal:\" isBold={false}>\n            “Our goal is to reach 500,000 potential customers and convert 10% of\n            them into paying customers within the next 6 months, resulting in a\n            50% increase in online sales revenue compared to the previous\n            year.&quot;\n          </Card.CampaignMetrics>\n        </S.CustomGoal>\n        <S.CustomGoal>\n          <Card.CampaignMetrics label=\"Predicted:\" isBold={false}>\n            With our comprehensive SEO services, we will optimize your website\n            to rank higher in search engine results, attract more relevant\n            traffic, and convert that traffic into paying customers. Our\n            services include keyword research, on-page optimization, technical\n            SEO, content marketing, link building, and local SEO. We will work\n            closely with you to understand your business goals and tailor our\n            services to meet your specific needs. Our team will track and\n            analyze your website&apos;s performance, and we will make\n            adjustments as needed to ensure that we are on track to achieve your\n            target of 10% conversion and 50% increase in online sales revenue.\n          </Card.CampaignMetrics>\n        </S.CustomGoal>\n      </Stack> */}\n    </Layout.Card>\n  );\n}\n"],"names":["CampaignOfferSummary","adId","title","createdAt","startAt","endAt","targetLanguage","category","targetLocation","costTotal","clicksWeekly","costWeekly","reachTotal","cpc","noumId","isMobile","estimatedDuration","flag","split","country","jsxs","Layout","Stack","jsx","Card","Utils","formatDate","TSpan","appendAdPrefix","NOUMCard","name","profileImage","DefaultImage","Fragment","Spacer","Tag","numberWithCommas","CountryCard","BarChart","generateCategoricalChart","Bar","XAxis","YAxis","formatAxisMap","renderColorfulLegendText","value","color","Chart","currentMetricsLabel","predictedMetricsLabel","chartData","barGap","barSize","updateColor","ResponsiveContainer","top","right","CartesianGrid","Legend","fontSize","fontFamily","paddingTop","ChartFilterFrequency","Daily","Total","ChartFilterOptions","label","key","type","Goals","isTablet","goalConnectedUsers","goalNoumVisibility","status","updateAppearance","updateOfferAppearance","sortInfo","setSortInfo","useState","onChange","option","filtredCurrentViews","useMemo","currentViews","Math","ceil","Number","filtredPredictedViews","predictedViews","undefined","marginLeft","Dropdown","targetRef","toggle","active","S","Icon","filter","sort","marginTop","_a","uv","pv","currentUsers","predictedUsers","currentFollowers","predictedFollowers"],"mappings":"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","x_google_ignoreList":[1]}