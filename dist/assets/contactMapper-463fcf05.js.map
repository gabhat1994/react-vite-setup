{"version":3,"file":"contactMapper-463fcf05.js","sources":["../../src/features/noumContacts/components/ContactDetails/Section.tsx","../../src/features/noumContacts/components/ContactDetails/ContactDetails.tsx","../../src/features/noumContacts/components/ContactSelector/constants.ts","../../src/features/noumContacts/components/ContactSelector/mapper.tsx","../../src/features/noumContacts/components/ContactSelector/hooks/useContactSelectorHandlers.ts","../../src/features/noumContacts/components/ContactSelector/hooks/useContactSelector.ts","../../src/features/noumContacts/components/ContactSelector/hooks/useContactSelectorOptions.tsx","../../src/features/noumContacts/components/ContactSelector/hooks/useContactSelectorValidation.ts","../../src/features/noumContacts/components/ContactSelector/ContactSelector.tsx","../../src/features/noumContacts/utils/contactMapper.ts"],"sourcesContent":["import { type ReactNode } from 'react';\nimport S from './styles';\n\ninterface SectionProps {\n  children: ReactNode;\n  title: string;\n  hasErrors: boolean;\n}\n\nexport function Section({ title, children, hasErrors }: SectionProps) {\n  return (\n    <S.Section>\n      <S.Header>\n        {hasErrors && <S.ErrorIcon />}\n        <S.Title>{title}</S.Title>\n      </S.Header>\n      <S.Content>{children}</S.Content>\n    </S.Section>\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { getCountryByCode } from '@/utils/country';\nimport { type SearchableNoumContact } from '../../types';\nimport { ContactDetailsUtils } from '../../utils/contactDetails';\nimport S from './styles';\nimport { type ValidationErrors } from '../ContactSelector/types';\nimport { Section } from './Section';\n\ninterface ContactDetailsProps {\n  contact: SearchableNoumContact;\n  errors: ValidationErrors;\n}\nexport function ContactDetails({ contact, errors }: ContactDetailsProps) {\n  const { t } = useTranslation();\n  const formattedTitle = ContactDetailsUtils.formatCompanyAndTitle(contact);\n\n  return (\n    <S.Container>\n      <S.SectionsContainer>\n        <Section\n          title={t(\n            'noumena.noum_contacts.contact_details.account_information.title',\n          )}\n          hasErrors={!!errors.accountInformation}\n        >\n          {contact.displayName ? (\n            <S.TextHighlighted>\n              {`${t(\n                'noumena.noum_contacts.contact_form.fields.contact_name',\n              )}: ${contact.displayName}`}\n            </S.TextHighlighted>\n          ) : null}\n          {errors.title ? (\n            <S.MissingInfo>{errors.title}</S.MissingInfo>\n          ) : formattedTitle ? (\n            <S.TextHighlighted>{formattedTitle}</S.TextHighlighted>\n          ) : (\n            <S.MissingInfo>\n              {t('noumena.noum_contacts.contact_form.missing_title')}\n            </S.MissingInfo>\n          )}\n        </Section>\n\n        <Section\n          title={t(\n            'noumena.noum_contacts.contact_details.billing_details.title',\n          )}\n          hasErrors={!!errors.billingDetails}\n        >\n          {errors.billingDetails ? (\n            <S.MissingInfo>{errors.billingDetails}</S.MissingInfo>\n          ) : (\n            <>\n              <S.Text>\n                {errors.streetApartment ? (\n                  <S.MissingInfo>{errors.streetApartment}</S.MissingInfo>\n                ) : (\n                  <>\n                    {contact.apartmentNo} {contact.street}\n                  </>\n                )}\n              </S.Text>\n              <S.Text>\n                {errors.city ? (\n                  <S.MissingInfo>{errors.city}</S.MissingInfo>\n                ) : (\n                  contact.city\n                )}\n              </S.Text>\n              <S.Text>\n                {errors.stateZipCode ? (\n                  <S.MissingInfo>{errors.stateZipCode}</S.MissingInfo>\n                ) : (\n                  <>\n                    {contact.state}, {contact.zipCode}\n                  </>\n                )}\n              </S.Text>\n              <S.Text>\n                {errors.country ? (\n                  <S.MissingInfo>{errors.country}</S.MissingInfo>\n                ) : (\n                  getCountryByCode(contact.country)?.name ?? '--'\n                )}\n              </S.Text>\n            </>\n          )}\n        </Section>\n      </S.SectionsContainer>\n\n      {/* {!contact.isConnectedWithNoum && (\n        <Infobox type=\"secondary\">\n          This member is not connected to selected Noum. After you publish this\n          document, they will be invited to connect.\n        </Infobox>\n      )} */}\n    </S.Container>\n  );\n}\n","export const ADD_OPTION_VALUE = 'CONTACT_SELECTOR_ADD';\n","import { type UserStatus } from '@/apollo/generated/types';\nimport { type NoumContactFragment } from '@/apollo/graphql';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { type SearchableNoumContact, type SelectedContact } from '../../types';\n\nexport function mapToDropdownValue(\n  contact: SearchableNoumContact,\n): DropdownValueType<SearchableNoumContact, string> {\n  return {\n    key: contact._id,\n    type: 'value',\n    value: contact,\n    label: contact.isCurrentUser\n      ? `${contact.displayName} (You)`\n      : contact.displayName,\n    description: contact.user.email ?? undefined,\n    icon: (\n      <Avatar url={contact.user.profile?.profilePictureThumbnail} size=\"M\" />\n    ),\n  };\n}\n\nfunction isNoumContact(\n  contact: NoumContactFragment | SearchableNoumContact,\n): contact is NoumContactFragment {\n  return contact.__typename === 'NoumContactOutput';\n}\n\nexport function mapToSelectedContact(\n  contact: NoumContactFragment | SearchableNoumContact,\n): SelectedContact;\nexport function mapToSelectedContact(\n  contact: NoumContactFragment | SearchableNoumContact,\n): SelectedContact {\n  if (isNoumContact(contact)) {\n    return {\n      name: contact.displayName ?? '',\n      email: contact.userId.email ?? undefined,\n      country: contact.country ?? undefined,\n      city: contact.city ?? undefined,\n      state: contact.state ?? undefined,\n      street: contact.street ?? undefined,\n      apartmentNo: contact.apartmentNo ?? undefined,\n      zipCode: contact.zipCode ?? undefined,\n      title: contact.title ?? undefined,\n      isConnectedWithNoum: contact.isConnectedWithNoum ?? false,\n      userStatus: (contact.userId.userStatus as UserStatus) ?? undefined,\n    };\n  }\n\n  return {\n    name: contact.displayName ?? '',\n    email: contact.user.email ?? undefined,\n    country: contact.country ?? undefined,\n    city: contact.city ?? undefined,\n    state: contact.state ?? undefined,\n    street: contact.street ?? undefined,\n    apartmentNo: contact.apartmentNo ?? undefined,\n    zipCode: contact.zipCode ?? undefined,\n    title: contact.title ?? undefined,\n    isConnectedWithNoum: contact.isConnectedWithNoum ?? false,\n    userStatus: (contact.user.userStatus as UserStatus) ?? undefined,\n  };\n}\n","import { type DropdownValueType } from '@/components/Dropdown';\nimport { type NoumContactFormValues } from '@/features/noumContacts/hooks/contactForm';\nimport {\n  type SearchableNoumContact,\n  type SelectedContact,\n} from '@/features/noumContacts/types';\nimport { useError } from '@/hooks';\nimport { ADD_OPTION_VALUE } from '../constants';\nimport { mapToSelectedContact } from '../mapper';\nimport { useAddNewNoumContact } from './useAddNewNoumContact';\nimport { useUpdateNoumContact } from './useUpdateNoumContact';\n\ninterface UseContactSelectorHandlersOptions {\n  noumId: string | undefined;\n  onChange: (\n    value: string | null | undefined,\n    item: SelectedContact | null,\n  ) => void;\n  onCreateNew: () => void;\n  onAddSuccess: (contact: SelectedContact) => void;\n  onEditSuccess: (contact: SelectedContact) => void;\n}\n\nexport function useContactSelectorHandlers({\n  noumId,\n  onChange,\n  onCreateNew,\n  onAddSuccess,\n  onEditSuccess,\n}: UseContactSelectorHandlersOptions) {\n  const { logError } = useError();\n\n  const [addNewNoumContact] = useAddNewNoumContact();\n  const [updateNoumContact] = useUpdateNoumContact();\n\n  const handleChange = (\n    dropdownValue:\n      | DropdownValueType<SearchableNoumContact | string, string>\n      | undefined,\n  ) => {\n    if (!dropdownValue) {\n      onChange('', null);\n      return;\n    }\n\n    if (dropdownValue.key === ADD_OPTION_VALUE) {\n      onCreateNew();\n      return;\n    }\n\n    if (typeof dropdownValue.value !== 'string') {\n      onChange(dropdownValue.key, mapToSelectedContact(dropdownValue.value));\n    }\n  };\n\n  const handleAddFormSubmit = async (values: NoumContactFormValues) => {\n    if (!noumId) {\n      return;\n    }\n\n    try {\n      const result = await addNewNoumContact(values);\n      const newContact = result.data?.addNewNoumContact;\n      if (!newContact) {\n        return;\n      }\n\n      const newContactMapped = mapToSelectedContact(newContact);\n      onChange(newContact._id, newContactMapped);\n      onAddSuccess(newContactMapped);\n    } catch (err) {\n      logError(err, 'add_new_contact', true);\n    }\n  };\n\n  const handleEditFormSubmit = async (\n    id: string | undefined,\n    values: NoumContactFormValues,\n  ) => {\n    if (!id) {\n      return;\n    }\n\n    try {\n      const result = await updateNoumContact(id, values);\n      const updatedContact = result.data?.updateNoumContact;\n      if (!updatedContact) {\n        return;\n      }\n\n      const updatedContactMapped = mapToSelectedContact(updatedContact);\n      onChange(updatedContact._id, updatedContactMapped);\n      onEditSuccess(updatedContactMapped);\n    } catch (err) {\n      logError(err, 'edit_contact', true);\n      throw err;\n    }\n  };\n  return { handleChange, handleAddFormSubmit, handleEditFormSubmit };\n}\n","import { debounce } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { NoumContactStatus } from '@/apollo/generated/types';\nimport { useAllNoumsContactsQuery } from '@/apollo/graphql';\nimport { type SelectedContact } from '@/features/noumContacts/types';\nimport { useToast } from '@/hooks';\nimport { mergeListsForCache } from '@/utils/apollo';\nimport { useContactSelectorHandlers } from './useContactSelectorHandlers';\n\ninterface UseContactSelectorOptions {\n  noumId?: string;\n  onChange: (\n    value: string | null | undefined,\n    item: SelectedContact | null,\n  ) => void;\n  onCreateNew: () => void;\n  onAddSuccess: (contact: SelectedContact) => void;\n  onEditSuccess: (contact: SelectedContact) => void;\n}\n\nexport function useContactSelector({\n  noumId,\n  onChange,\n  onCreateNew,\n  onAddSuccess,\n  onEditSuccess,\n}: UseContactSelectorOptions) {\n  const { t } = useTranslation();\n  const { addSuccessIconToast } = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data, loading, refetch, fetchMore, variables } =\n    useAllNoumsContactsQuery({\n      variables: {\n        offset: 0,\n        limit: 20,\n        status: NoumContactStatus.Active,\n        query: searchTerm || null,\n      },\n      skip: !noumId,\n      fetchPolicy: 'cache-and-network',\n    });\n\n  const currentCount = data?.allNoumsContacts.data.length ?? 0;\n  const totalCount = data?.allNoumsContacts.count ?? 0;\n\n  const debouncedSearch = useMemo(\n    () =>\n      debounce((newSearchTerm: string) => {\n        setSearchTerm(newSearchTerm);\n      }, 500),\n    [],\n  );\n\n  const handleFetchMore = () => {\n    if (currentCount >= totalCount) {\n      return;\n    }\n    fetchMore({\n      variables: {\n        ...variables,\n        offset: currentCount,\n      },\n      updateQuery(prevResult, { fetchMoreResult }) {\n        // Handle infinite scroll explicitly, because this query has type policy configured for possible pagination.\n        return {\n          ...prevResult,\n          allNoumsContacts: {\n            ...prevResult.allNoumsContacts,\n            count: fetchMoreResult.allNoumsContacts.count,\n            data: mergeListsForCache(\n              prevResult.allNoumsContacts.data,\n              fetchMoreResult.allNoumsContacts.data,\n              currentCount,\n            ),\n          },\n        };\n      },\n    });\n  };\n\n  const refreshList = () => {\n    // From the user perspective, it won't matter when it happens.\n    // From our perspective, we want to eventually update cache with real data instead of relying on optimistic UI from cache.\n    setTimeout(() => refetch(), 5000);\n  };\n\n  const { handleChange, handleAddFormSubmit, handleEditFormSubmit } =\n    useContactSelectorHandlers({\n      noumId,\n      onChange: (value, item) => {\n        onChange(value, item);\n      },\n      onCreateNew,\n      onAddSuccess: (contact) => {\n        refreshList();\n        addSuccessIconToast(\n          t('noumena.noum_contacts.contact_selector.toast.contact_added'),\n        );\n        onAddSuccess(contact);\n      },\n      onEditSuccess: (contact) => {\n        refreshList();\n        addSuccessIconToast(\n          t('noumena.noum_contacts.contact_selector.toast.contact_updated'),\n        );\n        onEditSuccess(contact);\n      },\n    });\n\n  return {\n    data: data?.allNoumsContacts.data,\n    loading,\n    searchTerm,\n    debouncedSearch,\n    handleFetchMore,\n    handleChange,\n    handleAddFormSubmit,\n    handleEditFormSubmit,\n    setSearchTerm,\n  };\n}\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  type DropdownHeaderType,\n  type DropdownItemType,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport { type SearchableNoumContact } from '@/features/noumContacts/types';\nimport { useAuth } from '@/features/auth/contexts';\nimport { cleanList } from '@/utils/list';\nimport { ADD_OPTION_VALUE } from '../constants';\nimport { mapToDropdownValue } from '../mapper';\n\ninterface UseContactSelectorOptionsProps {\n  data: SearchableNoumContact[] | undefined;\n  excludedIds: string[] | undefined;\n  excludeCurrentUser?: boolean;\n  addContactDisabled?: boolean;\n}\n\nexport function useContactSelectorOptions({\n  data,\n  excludedIds,\n  excludeCurrentUser,\n  addContactDisabled,\n}: UseContactSelectorOptionsProps) {\n  const { t } = useTranslation();\n  const { user: currentUser } = useAuth();\n  const contacts = useMemo(() => {\n    const cleanContacts = cleanList(data).map((c) => ({\n      ...c,\n      // TODO: Remove when backend adds this flag.\n      isRecent: false,\n    }));\n\n    const cleanExcludedIds = cleanList(excludedIds);\n\n    return cleanContacts.filter((c) => !cleanExcludedIds.includes(c._id));\n  }, [data, excludedIds]);\n\n  const headerOptions = useMemo<\n    DropdownValueType<SearchableNoumContact | string, string>[]\n  >(\n    () =>\n      cleanList([\n        !addContactDisabled\n          ? {\n              type: 'value',\n              value: ADD_OPTION_VALUE,\n              key: ADD_OPTION_VALUE,\n              label: t('noumena.noum_contacts.contact_selector.add_new'),\n              icon: <Icon name=\"add_m\" size={24} />,\n            }\n          : undefined,\n      ]),\n    [addContactDisabled, t],\n  );\n\n  const options = useMemo<\n    DropdownItemType<SearchableNoumContact, string>[]\n  >(() => {\n    if (contacts.length === 0) {\n      return [];\n    }\n\n    // TODO: Remove once BE sends isCurrentUser in the response.\n    const contactsWithIsCurrentUser: SearchableNoumContact[] = contacts\n      .map((contact) => ({\n        ...contact,\n        isCurrentUser: contact.user._id === currentUser?._id,\n      }))\n      .filter((contact) => !excludeCurrentUser || !contact.isCurrentUser);\n\n    // TODO: Update logic here when we add Co-Manager role.\n    const noumOwner = contactsWithIsCurrentUser.find(\n      (contact) => contact.isCurrentUser,\n    );\n\n    const contactsWithoutCurrentUser = contactsWithIsCurrentUser.filter(\n      (contact) => contact._id !== noumOwner?._id,\n    );\n    const contactsByRecent = groupBy(contactsWithoutCurrentUser, 'isRecent');\n    const recentContacts = contactsByRecent.true;\n    const otherContacts = contactsByRecent.false;\n\n    const results: DropdownItemType<SearchableNoumContact, string>[] = [];\n\n    if (noumOwner) {\n      results.push({\n        key: 'noum_owner',\n        type: 'header',\n        label: t('noumena.noum_contacts.contact_selector.noum_owner'),\n      } as DropdownHeaderType);\n\n      results.push(mapToDropdownValue(noumOwner));\n    }\n\n    if (recentContacts && recentContacts.length > 0) {\n      results.push({\n        key: 'recent',\n        type: 'header',\n        label: t('noumena.noum_contacts.contact_selector.recent_contacts'),\n      } as DropdownHeaderType);\n\n      results.push(...recentContacts.map(mapToDropdownValue));\n    }\n\n    if (otherContacts && otherContacts.length > 0) {\n      results.push({\n        key: 'saved',\n        type: 'header',\n        label: t('noumena.noum_contacts.contact_selector.saved_contacts'),\n      } as DropdownHeaderType);\n\n      results.push(...otherContacts.map(mapToDropdownValue));\n    }\n\n    return results;\n  }, [contacts, currentUser?._id, excludeCurrentUser, t]);\n\n  return {\n    contacts,\n    options,\n    headerOptions,\n  };\n}\n","import { useEffect } from 'react';\nimport { type SearchableNoumContactFragment } from '@/apollo/graphql';\nimport { type ValidationErrors } from '../types';\n\ninterface ContactValidatorOptions {\n  contact?: SearchableNoumContactFragment;\n}\n\nexport function contactValidator({ contact }: ContactValidatorOptions) {\n  if (!contact) {\n    return {\n      isValid: true,\n      errors: {},\n    };\n  }\n\n  const errors: ValidationErrors = {};\n  if (!contact.title) {\n    errors.title = 'Title not provided';\n  }\n  if (!contact.street) {\n    errors.streetApartment = 'Street not provided';\n  }\n  if (!contact.city) {\n    errors.city = 'City not provided';\n  }\n  if (!contact.state || !contact.zipCode) {\n    errors.stateZipCode = 'State or Zip Code not provided';\n  }\n  if (!contact.country) {\n    errors.country = 'Country not provided';\n  }\n\n  if (\n    errors.city &&\n    errors.streetApartment &&\n    errors.stateZipCode &&\n    errors.country\n  ) {\n    errors.billingDetails = 'Not provided';\n  }\n  if (errors.title) {\n    errors.accountInformation = 'Incomplete';\n  }\n\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors,\n  };\n}\n\ninterface UseContactSelectorValidationOptions {\n  selectedContact: SearchableNoumContactFragment | undefined;\n  onContactInfoValidation?: (isValid: boolean) => void;\n}\n\nexport function useContactSelectorValidation({\n  selectedContact,\n  onContactInfoValidation,\n}: UseContactSelectorValidationOptions) {\n  const contactValidation = contactValidator({\n    contact: selectedContact,\n  });\n\n  useEffect(() => {\n    onContactInfoValidation?.(contactValidation.isValid);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [contactValidation.isValid]);\n\n  return contactValidation;\n}\n","import { type Maybe } from '@/apollo/generated/types';\nimport { type SearchableNoumContactFragment } from '@/apollo/graphql';\nimport {\n  ApiEntityPickerFieldWithRemoteSearch,\n  type ApiEntityPickerFieldProps,\n} from '@/components/ApiEntityPickerField';\nimport { ApiEntitySelectionPreviewComponent } from '@/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent';\nimport { type ApiEntitySelectionPreviewComponentProps } from '@/components/ApiEntityPickerField/types';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { cleanList } from '@/utils/list';\nimport { type SearchableNoumContact, type SelectedContact } from '../../types';\nimport { ContactDetails } from '../ContactDetails/ContactDetails';\nimport { ContactFormModal } from '../ContactFormModal';\nimport { useContactSelector } from './hooks/useContactSelector';\nimport { useContactSelectorOptions } from './hooks/useContactSelectorOptions';\nimport { useContactSelectorValidation } from './hooks/useContactSelectorValidation';\nimport { mapToDropdownValue } from './mapper';\n\nexport type ContactSelectorProps = Omit<\n  ApiEntityPickerFieldProps<string, SearchableNoumContact | string>,\n  'options' | 'onChange' | 'children' | 'preselectedOption'\n> &\n  Pick<\n    ApiEntitySelectionPreviewComponentProps<string>,\n    'clearButtonDisabled'\n  > & {\n    noumId?: string;\n    preselectedContact?: Maybe<SearchableNoumContactFragment>;\n    excludedIds?: string[];\n    excludeCurrentUser?: boolean;\n    addContactDisabled?: boolean;\n    onChange: (\n      value: string | null | undefined,\n      item: SelectedContact | null,\n    ) => void;\n    onContactInfoValidation?(isValid: boolean): void;\n    onContactDetailsUpdate?(contact: SelectedContact): void;\n  };\n\ntype ModalType = 'create' | 'edit';\n\nexport function ContactSelector({\n  noumId,\n  disabled,\n  value,\n  excludedIds,\n  excludeCurrentUser,\n  preselectedContact,\n  onChange,\n  onContactInfoValidation,\n  onContactDetailsUpdate,\n  clearButtonDisabled,\n  addContactDisabled,\n  ...apiEntityPickerProps\n}: ContactSelectorProps) {\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const {\n    data,\n    loading,\n    searchTerm,\n    debouncedSearch,\n    handleChange,\n    handleAddFormSubmit,\n    handleEditFormSubmit,\n    handleFetchMore,\n    setSearchTerm,\n  } = useContactSelector({\n    noumId,\n    onChange,\n    onCreateNew: () => openModal('create'),\n    onAddSuccess: (contact) => {\n      onContactDetailsUpdate?.(contact);\n      closeModal();\n    },\n    onEditSuccess: (contact) => {\n      onContactDetailsUpdate?.(contact);\n      closeModal();\n    },\n  });\n\n  const { contacts, options, headerOptions } = useContactSelectorOptions({\n    data,\n    excludedIds,\n    excludeCurrentUser,\n    addContactDisabled,\n  });\n\n  const selectedContact = cleanList([...contacts, preselectedContact]).find(\n    (c) => c._id === value,\n  );\n\n  const contactValidation = useContactSelectorValidation({\n    selectedContact,\n    onContactInfoValidation,\n  });\n\n  return (\n    <>\n      <ApiEntityPickerFieldWithRemoteSearch<\n        string,\n        SearchableNoumContact | string\n      >\n        {...apiEntityPickerProps}\n        options={options}\n        maxContainerHeight=\"350px\"\n        stickyHeaderOptions={headerOptions}\n        renderStickyHeader={() => {}}\n        hideIcons={false}\n        isLoading={loading}\n        disabled={disabled || !noumId}\n        calRefTop={false}\n        inputValue={searchTerm}\n        onInputChange={debouncedSearch}\n        onFetchMore={handleFetchMore}\n        renderSelectionPreviewComponent={(renderProps) => (\n          <ApiEntitySelectionPreviewComponent\n            {...renderProps}\n            inputSize=\"normal\"\n            clearButtonDisabled={clearButtonDisabled}\n            onClear={() => setSearchTerm('')}\n            selectedRightSideOption={\n              disabled ? null : contactValidation.isValid ? (\n                <Icon\n                  name=\"edit_m\"\n                  size={24}\n                  onClick={() => openModal('edit')}\n                  color=\"--icon-input-neutral-default\"\n                />\n              ) : (\n                <Button primary size=\"small\" onClick={() => openModal('edit')}>\n                  Add Missing Details\n                </Button>\n              )\n            }\n          />\n        )}\n        preselectedOption={\n          value && preselectedContact\n            ? mapToDropdownValue(preselectedContact)\n            : undefined\n        }\n        value={selectedContact?._id ?? ''}\n        leftIcon={\n          <Icon\n            name=\"search_m\"\n            color=\"--icon-input-neutral-default\"\n            size={20}\n          />\n        }\n        onChange={handleChange}\n      />\n\n      {selectedContact && (\n        <ContactDetails\n          contact={selectedContact}\n          errors={contactValidation.errors}\n        />\n      )}\n\n      {modalType === 'create' && (\n        <ContactFormModal\n          isOpenModal\n          onClose={closeModal}\n          onConfirm={handleAddFormSubmit}\n        />\n      )}\n\n      {modalType === 'edit' && (\n        <ContactFormModal\n          isOpenModal\n          contact={selectedContact}\n          onClose={closeModal}\n          onConfirm={(values) =>\n            handleEditFormSubmit(selectedContact?._id, values)\n          }\n        />\n      )}\n    </>\n  );\n}\n","import { type Maybe } from '@/apollo/generated/types';\nimport {\n  type NoumContactFragment,\n  type SearchableNoumContactFragment,\n} from '@/apollo/graphql';\n\nexport function mapNoumContactToSearchableNoumContact(\n  noumContact: Maybe<NoumContactFragment> | undefined,\n): SearchableNoumContactFragment | undefined {\n  if (!noumContact) {\n    return undefined;\n  }\n\n  return {\n    ...noumContact,\n    __typename: 'SearchableNoumContact',\n    user: noumContact.userId,\n    fullName: noumContact.displayName,\n    email: noumContact.userId.email,\n  };\n}\n"],"names":["Section","title","children","hasErrors","jsxs","S","jsx","ContactDetails","contact","errors","t","useTranslation","formattedTitle","ContactDetailsUtils","formatCompanyAndTitle","accountInformation","displayName","billingDetails","Fragment","streetApartment","apartmentNo","street","city","stateZipCode","state","zipCode","country","getCountryByCode","name","ADD_OPTION_VALUE","mapToDropdownValue","key","_id","type","value","label","isCurrentUser","description","user","email","undefined","icon","Avatar","profile","profilePictureThumbnail","isNoumContact","__typename","mapToSelectedContact","userId","isConnectedWithNoum","userStatus","useContactSelectorHandlers","noumId","onChange","onCreateNew","onAddSuccess","onEditSuccess","logError","useError","addNewNoumContact","useAddNewNoumContact","updateNoumContact","useUpdateNoumContact","handleChange","dropdownValue","handleAddFormSubmit","values","newContact","result","data","newContactMapped","err","handleEditFormSubmit","id","updatedContact","updatedContactMapped","useContactSelector","addSuccessIconToast","useToast","searchTerm","setSearchTerm","useState","loading","refetch","fetchMore","variables","useAllNoumsContactsQuery","offset","limit","status","NoumContactStatus","Active","query","skip","fetchPolicy","currentCount","allNoumsContacts","length","totalCount","count","debouncedSearch","useMemo","debounce","newSearchTerm","handleFetchMore","updateQuery","prevResult","fetchMoreResult","mergeListsForCache","refreshList","item","useContactSelectorOptions","excludedIds","excludeCurrentUser","addContactDisabled","currentUser","useAuth","contacts","cleanContacts","cleanList","map","c","isRecent","cleanExcludedIds","filter","includes","headerOptions","Icon","options","contactsWithIsCurrentUser","noumOwner","find","contactsWithoutCurrentUser","contactsByRecent","groupBy","recentContacts","true","otherContacts","false","results","push","contactValidator","isValid","Object","keys","useContactSelectorValidation","selectedContact","onContactInfoValidation","contactValidation","useEffect","ContactSelector","disabled","preselectedContact","onContactDetailsUpdate","clearButtonDisabled","apiEntityPickerProps","modalType","openModal","closeModal","useModalManager","ApiEntityPickerFieldWithRemoteSearch","renderProps","ApiEntitySelectionPreviewComponent","Button","ContactFormModal","mapNoumContactToSearchableNoumContact","noumContact","fullName"],"mappings":"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"}