{"version":3,"file":"ContactsManager-b2463b9e.js","sources":["../../src/screens/Contacts/ContactsManager/types.ts","../../src/screens/Contacts/ContactsManager/utils.ts","../../src/screens/Contacts/ContactsManager/hooks/useContactsManager.ts","../../src/screens/Contacts/ContactsManager/ActionMenu.tsx","../../src/screens/Contacts/ContactsManager/styles.ts","../../src/screens/Contacts/ContactsManager/ContactsCollapsibleList.tsx","../../src/screens/Contacts/ContactsManager/ContactsList.tsx","../../src/screens/Contacts/ContactsManager/ListHeader.tsx","../../src/screens/Contacts/ContactsManager/ContactsManager.tsx"],"sourcesContent":["export type Filters = {\n  search: string;\n  limit: number;\n  perspective: ListPOV;\n};\n\nexport enum ListPOV {\n  ACTIVE = 'ACTIVE',\n  ACHIVED = 'ACHIVED',\n}\n","import { type ApolloCache } from '@apollo/client';\nimport { type NoumContactStatus } from '@/apollo/generated/types';\nimport {\n  type SearchableNoumContactFragment,\n  SearchableNoumContactFragmentDoc,\n} from '@/apollo/graphql';\nimport { type Filters, ListPOV } from './types';\n\nconst getDefaultFilterValues = (): Filters => ({\n  search: '',\n  limit: 10,\n  perspective: ListPOV.ACTIVE,\n});\n\nconst updateSearchableNoumContactCacheFragment = ({\n  status,\n  id,\n  cache,\n}: {\n  cache: ApolloCache<unknown>;\n  id: string;\n  status: NoumContactStatus;\n}) => {\n  cache.updateFragment<SearchableNoumContactFragment>(\n    {\n      fragment: SearchableNoumContactFragmentDoc,\n      id: cache.identify({\n        __typename: 'SearchableNoumContact',\n        _id: id,\n      }),\n      fragmentName: 'SearchableNoumContact',\n    },\n    (data) => ({\n      ...data,\n      __typename: 'SearchableNoumContact',\n      _id: data?._id!,\n      displayName: data?.displayName!,\n      createdAt: data?.createdAt,\n      isConnectedWithNoum: data?.isConnectedWithNoum ?? false,\n      user: data?.user!,\n      status,\n    }),\n  );\n};\n\nexport const ContactsManagerUtils = {\n  getDefaultFilterValues,\n  updateSearchableNoumContactCacheFragment,\n};\n","import { useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  type SearchableNoumContactFragment,\n  useArchiveNoumContactsMutation,\n  useUnarchiveNoumContactsMutation,\n} from '@/apollo/graphql';\nimport {\n  useAddNewNoumContact,\n  useUpdateNoumContact,\n} from '@/features/noumContacts/components/ContactSelector';\nimport { type NoumContactFormValues } from '@/features/noumContacts/hooks/contactForm';\nimport { useError, useToast } from '@/hooks';\nimport { NoumContactStatus } from '@/apollo/generated/types';\nimport { ContactsManagerUtils } from '../utils';\n\ntype UseContactsManagerOptions = {\n  contact?: SearchableNoumContactFragment | null;\n  onSuccess: () => void;\n};\nexport function useContactsManager({\n  contact,\n  onSuccess,\n}: UseContactsManagerOptions) {\n  const { t } = useTranslation();\n\n  const [archiveContactsMutation] = useArchiveNoumContactsMutation();\n  const [unarchiveContactsMutation] = useUnarchiveNoumContactsMutation();\n  const [addNewNoumContact] = useAddNewNoumContact();\n  const [updateNoumContact] = useUpdateNoumContact();\n\n  const { addSuccessIconToast } = useToast();\n  const { logError } = useError();\n\n  const handleEditContact = useCallback(\n    async (values: NoumContactFormValues) => {\n      if (!contact) {\n        return;\n      }\n\n      try {\n        const result = await updateNoumContact(contact._id, values);\n        const updatedContact = result.data?.updateNoumContact;\n        if (!updatedContact) {\n          return;\n        }\n\n        addSuccessIconToast(\n          t('noumena.noum_contacts.contact_selector.toast.contact_updated'),\n        );\n        onSuccess();\n      } catch (err) {\n        logError(err, 'edit_contact', true);\n      }\n    },\n    [addSuccessIconToast, contact, logError, onSuccess, t, updateNoumContact],\n  );\n\n  const handleAddContact = useCallback(\n    async (values: NoumContactFormValues) => {\n      try {\n        const result = await addNewNoumContact(values);\n        const newContact = result.data?.addNewNoumContact;\n        if (!newContact) {\n          return;\n        }\n\n        addSuccessIconToast(\n          t('noumena.noum_contacts.contact_selector.toast.contact_added'),\n        );\n        onSuccess();\n      } catch (err) {\n        logError(err, 'add_new_contact', true);\n      }\n    },\n    [addNewNoumContact, addSuccessIconToast, logError, onSuccess, t],\n  );\n\n  const handleArchiveContacts = useCallback(\n    async (ids: string[]) => {\n      try {\n        await archiveContactsMutation({\n          variables: {\n            contactIDs: ids,\n          },\n          update: (cache, result) => {\n            ids.forEach((id) => {\n              ContactsManagerUtils.updateSearchableNoumContactCacheFragment({\n                cache,\n                id,\n                status: result.data?.archiveNoumContacts\n                  ? NoumContactStatus.Archived\n                  : NoumContactStatus.Active,\n              });\n            });\n          },\n        });\n        addSuccessIconToast('Contact archived successfully');\n      } catch (error) {\n        logError(error, 'handleArchiveContact');\n      }\n    },\n    [addSuccessIconToast, archiveContactsMutation, logError],\n  );\n\n  const handleUnarchiveContacts = useCallback(\n    async (ids: string[]) => {\n      try {\n        await unarchiveContactsMutation({\n          variables: {\n            contactIDs: ids,\n          },\n          update: (cache, result) => {\n            ids.forEach((id) => {\n              ContactsManagerUtils.updateSearchableNoumContactCacheFragment({\n                cache,\n                id,\n                status: result.data?.unarchiveNoumContacts\n                  ? NoumContactStatus.Active\n                  : NoumContactStatus.Archived,\n              });\n            });\n          },\n        });\n        addSuccessIconToast('Contact unarchived successfully');\n      } catch (error) {\n        logError(error, 'handleArchiveContact');\n      }\n    },\n    [addSuccessIconToast, logError, unarchiveContactsMutation],\n  );\n\n  return {\n    handleEditContact,\n    handleAddContact,\n    handleArchiveContacts,\n    handleUnarchiveContacts,\n  };\n}\n","import { useCallback } from 'react';\nimport { type SearchableNoumContactFragment } from '@/apollo/graphql';\nimport { DataGrid } from '@/components/DataGrid';\nimport { cleanList } from '@/utils/list';\nimport { NoumContactStatus } from '@/apollo/generated/types';\n\ntype ActionMenuProps = {\n  contact: SearchableNoumContactFragment;\n  onEdit: (contact: SearchableNoumContactFragment) => void;\n  onArchive: (id: string) => void;\n  onUnarchive: (id: string) => void;\n};\n\nenum RowAction {\n  EDIT = 'EDIT',\n  ARCHIVE = 'ARCHIVE',\n  UNARCHIVE = 'UNARCHIVE',\n}\n\nexport function ActionMenu({\n  contact,\n  onEdit,\n  onArchive,\n  onUnarchive,\n}: ActionMenuProps) {\n  const handleRowActionClick = useCallback(\n    (action: RowAction) => {\n      switch (action) {\n        case RowAction.EDIT: {\n          onEdit(contact);\n          break;\n        }\n        case RowAction.ARCHIVE: {\n          onArchive(contact._id);\n          break;\n        }\n        case RowAction.UNARCHIVE: {\n          onUnarchive(contact._id);\n          break;\n        }\n        default: {\n          // eslint-disable-next-line no-console\n          console.log('Unsupported action', action, 'no contact', contact);\n        }\n      }\n    },\n    [contact, onArchive, onEdit, onUnarchive],\n  );\n\n  return (\n    <DataGrid.ActionsMenu<RowAction>\n      onClick={(value) => handleRowActionClick(value)}\n      menuOptions={cleanList([\n        {\n          label: 'Edit',\n          key: RowAction.EDIT,\n          value: RowAction.EDIT,\n          iconName: 'edit_m',\n        },\n        contact.status === NoumContactStatus.Active\n          ? {\n              label: 'Archive',\n              key: RowAction.ARCHIVE,\n              value: RowAction.ARCHIVE,\n              iconName: 'delete_m',\n              intent: 'danger',\n            }\n          : {\n              label: 'Unarchive',\n              key: RowAction.UNARCHIVE,\n              value: RowAction.UNARCHIVE,\n              iconName: 'revert_m',\n            },\n      ])}\n    />\n  );\n}\n","import styled from 'styled-components';\nimport { Card } from '@/components/Card';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\n\nconst PageCard = styled(Card)`\n  width: 100%;\n  padding: 24px;\n  overflow: visible;\n`;\n\nconst KeyText = styled(TSpan).attrs({\n  colorToken: '--text-card-neutral-default',\n  font: 'footnote',\n})``;\n\nconst ValueText = styled(TSpan).attrs({\n  colorToken: '--text-card-neutral-highlighted',\n  font: 'footnote',\n})``;\n\nconst ItemRow = styled(Stack).attrs({\n  justify: 'space-between',\n  fullWidth: true,\n})``;\n\nexport default {\n  PageCard,\n  KeyText,\n  ValueText,\n  ItemRow,\n};\n","import { type SearchableNoumContactFragment } from '@/apollo/graphql';\nimport { DataGrid } from '@/components/DataGrid';\nimport { TSpan } from '@/components/Typography';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { Stack } from '@/layout';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { ContactDetailsUtils } from '@/features/noumContacts/utils/contactDetails';\nimport S from './styles';\nimport { ActionMenu } from './ActionMenu';\n\ninterface InvoicesCollapsibleListProps {\n  contacts: SearchableNoumContactFragment[];\n  loading?: boolean;\n  onEdit: (contact: SearchableNoumContactFragment) => void;\n  onArchive: (id: string) => void;\n  onUnarchive: (id: string) => void;\n}\n\nexport function ContactsCollapsibleList({\n  contacts,\n  loading,\n  onEdit,\n  onArchive,\n  onUnarchive,\n}: InvoicesCollapsibleListProps) {\n  return (\n    <>\n      <DataGrid.CollapsibleList<SearchableNoumContactFragment>\n        data={contacts}\n        loading={loading}\n        renderLeft={(item) => (\n          <Stack align=\"center\" gap={8}>\n            <Avatar size=\"M\" url={item.user.profile?.profilePictureThumbnail} />\n            <TSpan\n              font=\"body-m-bold\"\n              colorToken=\"--text-card-neutral-highlighted\"\n            >\n              {item.displayName}\n            </TSpan>\n          </Stack>\n        )}\n        renderRight={(item) => (\n          <ActionMenu\n            contact={item}\n            onEdit={onEdit}\n            onArchive={onArchive}\n            onUnarchive={onUnarchive}\n          />\n        )}\n        keyExtractor={(item) => item._id ?? ''}\n        enableRowSelection\n        renderContent={(item) => (\n          <Stack gap={8} vertical fullWidth padding=\"0 0 8px 0\">\n            <S.ItemRow>\n              <S.KeyText>Email Address</S.KeyText>\n              <S.ValueText>{item.email}</S.ValueText>\n            </S.ItemRow>\n            <S.ItemRow>\n              <S.KeyText>Title</S.KeyText>\n              <S.ValueText>{item.title}</S.ValueText>\n            </S.ItemRow>\n            <S.ItemRow>\n              <S.KeyText>Company</S.KeyText>\n              <S.ValueText>{item.companyName}</S.ValueText>\n            </S.ItemRow>\n            <S.ItemRow>\n              <S.KeyText>Contact / Billing Details</S.KeyText>\n              <S.ValueText>\n                {ContactDetailsUtils.formatAddress(item)}\n              </S.ValueText>\n            </S.ItemRow>\n            <S.ItemRow>\n              <S.KeyText>Added</S.KeyText>\n              <S.ValueText>\n                {item.createdAt\n                  ? formatDateString(\n                      ApiPayloadParser.parseDateString(item.createdAt),\n                    )\n                  : '--'}\n              </S.ValueText>\n            </S.ItemRow>\n          </Stack>\n        )}\n      />\n    </>\n  );\n}\n","import { useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { type SearchableNoumContactFragment } from '@/apollo/graphql';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { DataGrid } from '@/components/DataGrid';\nimport { type PaginationProps } from '@/components/DataGrid/Pagination';\nimport { type TableColumn } from '@/components/DataGrid/Table/Table';\nimport { TSpan } from '@/components/Typography';\nimport { ContactDetailsUtils } from '@/features/noumContacts/utils/contactDetails';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack } from '@/layout';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\nimport { ActionMenu } from './ActionMenu';\nimport { ContactsCollapsibleList } from './ContactsCollapsibleList';\nimport { type Filters, ListPOV } from './types';\n\ninterface ContactsListProps {\n  contacts: SearchableNoumContactFragment[];\n  totalCount: number;\n  offset: number;\n  filters: Filters;\n  listPerspective: ListPOV;\n  loading?: boolean;\n  onPaginationChange: PaginationProps['onChange'];\n  onEdit: (contact: SearchableNoumContactFragment) => void;\n  onArchive: (ids: string[]) => void;\n  onUnarchive: (ids: string[]) => void;\n}\n\nexport function ContactsList({\n  contacts,\n  totalCount,\n  offset,\n  filters,\n  listPerspective,\n  loading,\n  onPaginationChange,\n  onEdit,\n  onArchive,\n  onUnarchive,\n}: ContactsListProps) {\n  const { t } = useTranslation();\n  const { isMobile } = useBreakpoints();\n\n  const columns = useMemo<TableColumn<SearchableNoumContactFragment>[]>(\n    () => [\n      {\n        id: 'name',\n        title: 'Name',\n        width: '25%',\n        renderValue: (item) => (\n          <Stack align=\"center\" gap={8}>\n            <Avatar size=\"M\" url={item.user.profile?.profilePictureThumbnail} />\n            <Stack vertical>\n              <TSpan\n                font=\"body-m-bold\"\n                color=\"--text-tablecell-header-neutral-highlighted\"\n              >\n                {item.displayName}\n              </TSpan>\n              <TSpan\n                font=\"body-m\"\n                colorToken=\"--text-tablecell-header-neutral-default\"\n              >\n                {item.user.email}\n              </TSpan>\n            </Stack>\n          </Stack>\n        ),\n      },\n      {\n        id: 'title',\n        title: 'Title',\n        renderValue: (item) => item.title ?? '-',\n        width: '15%',\n      },\n      {\n        id: 'company',\n        title: 'Company',\n        renderValue: (item) => item.companyName ?? '-',\n        width: '15%',\n      },\n      {\n        id: 'billingDetails',\n        title: 'Contact / Billing Details',\n        renderValue: (item) => ContactDetailsUtils.formatAddress(item),\n        width: '25%',\n      },\n      {\n        id: 'added',\n        title: 'Added',\n        renderValue: (item) =>\n          formatDateString(ApiPayloadParser.parseDateString(item.createdAt)),\n        width: '15%',\n        wordWrap: false,\n      },\n\n      {\n        id: 'actions',\n        title: '',\n        renderValue: (item) => (\n          <Stack justify=\"end\">\n            <ActionMenu\n              contact={item}\n              onEdit={onEdit}\n              onArchive={(id) => onArchive([id])}\n              onUnarchive={(id) => onUnarchive([id])}\n            />\n          </Stack>\n        ),\n        width: '5%',\n      },\n    ],\n    [onEdit, onArchive, onUnarchive],\n  );\n\n  return (\n    <>\n      <Stack gap={24} vertical fullWidth align=\"stretch\" padding=\"0 0 64px 0\">\n        {isMobile ? (\n          <ContactsCollapsibleList\n            onArchive={(id) => onArchive([id])}\n            onUnarchive={(id) => onUnarchive([id])}\n            onEdit={onEdit}\n            contacts={contacts}\n            loading={loading}\n          />\n        ) : (\n          <DataGrid.Table<SearchableNoumContactFragment>\n            keyExtractor={(item) => item._id ?? ''}\n            data={contacts}\n            columns={columns}\n            rowsPerPage={5}\n            loading={loading}\n            enableRowSelection\n            wordWrap\n          />\n        )}\n        <DataGrid.Footer\n          leftElement={\n            <DataGrid.Pagination\n              totalCount={totalCount}\n              itemsPerPage={filters.limit}\n              currentOffset={offset}\n              onChange={onPaginationChange}\n            />\n          }\n          rightElement={\n            <DataGrid.BulkAction\n              intent=\"negative\"\n              label={\n                listPerspective === ListPOV.ACHIVED ? 'Unarchive' : 'Archive'\n              }\n              onClick={(selectedItems) =>\n                listPerspective === ListPOV.ACHIVED\n                  ? onUnarchive(selectedItems)\n                  : onArchive(selectedItems)\n              }\n              renderCounterLabel={(selectedItemsCount) =>\n                t('noumena.contact_manager.rows_selected', {\n                  count: selectedItemsCount,\n                  postProcess: 'interval',\n                })\n              }\n            />\n          }\n        />\n      </Stack>\n    </>\n  );\n}\n","import { Button } from '@/components/Button';\nimport { DataGrid } from '@/components/DataGrid';\nimport { Icon } from '@/components/Icon';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport TabsForm from '@/components/Tabs/TabsForm';\nimport { type Filters, ListPOV } from './types';\n\ntype ListHeaderProps = {\n  handelCreateNew: () => void;\n};\n\nexport function ListHeader({ handelCreateNew }: ListHeaderProps) {\n  const { isMobile } = useBreakpoints();\n\n  return (\n    <Stack gap={24} vertical align=\"stretch\">\n      <Stack gap={24} justify=\"space-between\" align=\"center\">\n        <Stack fullWidth>\n          <TSpan font=\"heading-xs-bold\">Contacts</TSpan>\n        </Stack>\n        <Stack gap={8} justify=\"flex-end\" align=\"center\" fullWidth>\n          <Stack fullWidth={isMobile}>\n            <DataGrid.FilterInput<Filters, 'search'>\n              name=\"search\"\n              render={({ field: { value, onChange } }) => (\n                <TextField\n                  inputSize=\"small\"\n                  value={value}\n                  onChange={onChange}\n                  placeholder=\"Search...\"\n                  leftIcon={\n                    <Icon\n                      name=\"search_m\"\n                      size={24}\n                      color=\"--icon-input-neutral-default\"\n                    />\n                  }\n                  rightIcon={\n                    !!value && (\n                      <Icon\n                        name=\"clear_m\"\n                        size={24}\n                        color=\"--icon-input-brand-primary-default\"\n                        onClick={() => onChange('')}\n                      />\n                    )\n                  }\n                />\n              )}\n            />\n          </Stack>\n          {!isMobile && (\n            <Button\n              primary\n              size=\"small\"\n              leftIcon={<Icon name=\"add_m\" size={24} />}\n              onClick={handelCreateNew}\n            >\n              Add a Contact\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n\n      <DataGrid.FilterInput<Filters, 'perspective'>\n        name=\"perspective\"\n        render={({ field: { value, onChange } }) => (\n          <TabsForm\n            selectedId={value}\n            mode=\"isUnderline\"\n            isWithoutImage\n            fontSize=\"--font-body-medium-bold-size\"\n            onChange={(newTab) => onChange(newTab as ListPOV)}\n            inputList={[\n              {\n                id: ListPOV.ACTIVE,\n                name: 'active',\n                text: 'Active',\n                labelSize: 'small',\n              },\n              {\n                id: ListPOV.ACHIVED,\n                name: 'archived',\n                text: 'Archived',\n                labelSize: 'small',\n              },\n            ]}\n          />\n        )}\n      />\n    </Stack>\n  );\n}\n","import { debounce } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { DataGrid } from '@/components/DataGrid';\nimport { Stack } from '@/layout';\nimport ListLayout from '@/layout/ListLayout';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { ContactFormModal } from '@/features/noumContacts/components/ContactFormModal';\nimport {\n  type SearchableNoumContactFragment,\n  useAllNoumsContactsQuery,\n} from '@/apollo/graphql';\nimport { NoumContactStatus } from '@/apollo/generated/types';\nimport { type PaginationState } from '@/components/DataGrid/Pagination';\nimport { cleanList } from '@/utils/list';\nimport { type NoumContactFormValues } from '@/features/noumContacts/hooks/contactForm';\nimport { useContactsManager } from './hooks/useContactsManager';\nimport { ContactsList } from './ContactsList';\nimport { ContactsManagerUtils } from './utils';\nimport { type Filters, ListPOV } from './types';\nimport S from './styles';\nimport { ListHeader } from './ListHeader';\n\ntype ModalType = 'create' | 'edit';\n\nexport function ContactsManager() {\n  const [filters, setFilters] = useState<Filters>(\n    ContactsManagerUtils.getDefaultFilterValues(),\n  );\n  const [offset, setOffset] = useState(0);\n\n  const { modalType, openModal, closeModal, contextData } = useModalManager<\n    ModalType,\n    SearchableNoumContactFragment\n  >();\n\n  const { data, loading, fetchMore, refetch } = useAllNoumsContactsQuery({\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      limit: filters.limit,\n      offset,\n      query: filters.search,\n      status:\n        filters.perspective === ListPOV.ACTIVE\n          ? NoumContactStatus.Active\n          : NoumContactStatus.Archived,\n    },\n  });\n\n  const {\n    handleAddContact,\n    handleEditContact,\n    handleArchiveContacts,\n    handleUnarchiveContacts,\n  } = useContactsManager({\n    contact: contextData,\n    onSuccess: () => {\n      closeModal();\n      setTimeout(refetch, 3000);\n    },\n  });\n\n  const contacts = useMemo(\n    () =>\n      // temporary solution to not refetch a backend as it returns not up to date data.\n      // remove this once BE is refactored to search engine.\n      cleanList(data?.allNoumsContacts.data).filter((contact) => {\n        if (filters.perspective === ListPOV.ACTIVE) {\n          return contact.status === NoumContactStatus.Active;\n        }\n        return contact.status === NoumContactStatus.Archived;\n      }),\n    [data?.allNoumsContacts.data, filters.perspective],\n  );\n  const totalCount = data?.allNoumsContacts.count ?? 0;\n\n  const submitFilters = useMemo(\n    () =>\n      debounce((newFilters: Filters) => {\n        setOffset(0);\n        setFilters(newFilters);\n      }, 1000),\n    [],\n  );\n\n  const handelCreateNew = () => {\n    openModal('create');\n  };\n\n  const handleEdit = (contact: SearchableNoumContactFragment) => {\n    openModal('edit', contact);\n  };\n\n  const handleAdd = async (contact: NoumContactFormValues) => {\n    await handleAddContact(contact);\n    // BE data seems to be synced after a while.\n    setTimeout(() => refetch(), 2000);\n  };\n\n  const handlePaginationChange = (state: PaginationState) => {\n    fetchMore({\n      variables: {\n        offset: state.offset,\n      },\n    });\n    setOffset(state.offset);\n  };\n\n  const handleArchive = useCallback(\n    (ids: string[]) => {\n      handleArchiveContacts(ids);\n    },\n    [handleArchiveContacts],\n  );\n\n  const handleUnarchive = useCallback(\n    (ids: string[]) => {\n      handleUnarchiveContacts(ids);\n    },\n    [handleUnarchiveContacts],\n  );\n\n  return (\n    <>\n      <ListLayout type=\"Contacts\">\n        <Stack gap={24}>\n          <S.PageCard>\n            <DataGrid.Provider<SearchableNoumContactFragment> data={contacts}>\n              <Stack vertical align=\"stretch\">\n                <DataGrid.Filters<Filters>\n                  defaultValues={filters}\n                  onSubmit={submitFilters}\n                  clearRowSelectionOnSubmit\n                >\n                  <ListHeader handelCreateNew={handelCreateNew} />\n                </DataGrid.Filters>\n\n                <ContactsList\n                  offset={offset}\n                  filters={filters}\n                  listPerspective={filters.perspective}\n                  loading={loading}\n                  contacts={contacts}\n                  totalCount={totalCount}\n                  onPaginationChange={handlePaginationChange}\n                  onEdit={handleEdit}\n                  onArchive={handleArchive}\n                  onUnarchive={handleUnarchive}\n                />\n              </Stack>\n            </DataGrid.Provider>\n          </S.PageCard>\n        </Stack>\n      </ListLayout>\n\n      {modalType === 'create' && (\n        <ContactFormModal\n          isOpenModal\n          onClose={closeModal}\n          onConfirm={handleAdd}\n        />\n      )}\n\n      {modalType === 'edit' && contextData && (\n        <ContactFormModal\n          isOpenModal\n          contact={contextData}\n          onClose={closeModal}\n          onConfirm={handleEditContact}\n        />\n      )}\n    </>\n  );\n}\n"],"names":["ListPOV","ACTIVE","ACHIVED","getDefaultFilterValues","search","limit","perspective","updateSearchableNoumContactCacheFragment","status","id","cache","updateFragment","fragment","SearchableNoumContactFragmentDoc","identify","__typename","_id","fragmentName","data","displayName","createdAt","isConnectedWithNoum","user","ContactsManagerUtils","useContactsManager","contact","onSuccess","t","useTranslation","archiveContactsMutation","useArchiveNoumContactsMutation","unarchiveContactsMutation","useUnarchiveNoumContactsMutation","addNewNoumContact","useAddNewNoumContact","updateNoumContact","useUpdateNoumContact","addSuccessIconToast","useToast","logError","useError","handleEditContact","useCallback","values","result","err","handleAddContact","handleArchiveContacts","ids","variables","contactIDs","update","forEach","archiveNoumContacts","NoumContactStatus","Archived","Active","error","handleUnarchiveContacts","unarchiveNoumContacts","ActionMenu","onEdit","onArchive","onUnarchive","handleRowActionClick","action","RowAction","console","log","jsx","DataGrid","value","cleanList","label","key","iconName","intent","PageCard","styled","Card","KeyText","TSpan","attrs","colorToken","font","ValueText","ItemRow","Stack","justify","fullWidth","S","ContactsCollapsibleList","contacts","loading","item","Avatar","profile","profilePictureThumbnail","jsxs","email","title","companyName","ContactDetailsUtils","formatAddress","formatDateString","ApiPayloadParser","parseDateString","ContactsList","totalCount","offset","filters","listPerspective","onPaginationChange","isMobile","useBreakpoints","columns","useMemo","width","renderValue","wordWrap","Fragment","selectedItems","count","selectedItemsCount","postProcess","ListHeader","handelCreateNew","field","onChange","TextField","Icon","Button","TabsForm","newTab","name","text","labelSize","ContactsManager","setFilters","useState","setOffset","modalType","openModal","closeModal","contextData","useModalManager","fetchMore","refetch","useAllNoumsContactsQuery","notifyOnNetworkStatusChange","fetchPolicy","query","setTimeout","allNoumsContacts","filter","submitFilters","debounce","newFilters","handleEdit","handleAdd","handlePaginationChange","state","handleArchive","handleUnarchive","ListLayout","ContactFormModal"],"mappings":"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"}