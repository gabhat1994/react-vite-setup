{"version":3,"file":"InvoiceCreate-876b1150.js","sources":["../../src/features/invoices/hooks/useCurrentUserContact.ts","../../src/features/invoices/hooks/useInvoiceContext.ts","../../src/features/invoices/components/InvoiceItemsWizard/styles.ts","../../src/features/invoices/components/InvoiceItemForm/FormTextField.tsx","../../src/features/invoices/components/InvoiceItemForm/InvoiceItemFormModal.tsx","../../src/features/invoices/components/InvoiceItemForm/styles.ts","../../src/features/invoices/components/InvoiceItemForm/InvoiceItemForm.tsx","../../src/features/invoices/components/InvoiceItemsWizard/EditMode.tsx","../../src/features/invoices/components/DeleteLineItemModal/DeleteLineItemModal.tsx","../../src/features/invoices/components/InvoiceItemsWizard/utils.tsx","../../src/features/invoices/components/InvoiceItemsWizard/PreviewMode.tsx","../../src/features/invoices/hooks/useInvoiceItemsWizard.ts","../../src/features/invoices/components/SavedItemsModalWizard/EditModal.tsx","../../src/features/invoices/components/SavedItemsModalWizard/DeleteModal.tsx","../../src/features/invoices/components/SavedItemsModalWizard/styles.ts","../../src/features/invoices/components/SavedItemsModalWizard/ListModal.tsx","../../src/features/invoices/components/SavedItemsModalWizard/SavedItemsModalWizard.tsx","../../src/features/invoices/components/InvoiceItemsWizard/constants.ts","../../src/features/invoices/components/InvoiceItemsWizard/CreateMode.tsx","../../src/features/invoices/components/InvoiceItemsWizard/InvoiceItemsWizard.tsx","../../src/features/invoices/components/InvoiceLateFeeField/InvoiceLateFeeField.tsx","../../src/features/invoices/components/InvoiceLogoUpload/styles.ts","../../src/features/invoices/components/InvoiceLogoUpload/InvoiceLogoUpload.tsx","../../src/features/invoices/components/InvoiceNumberField/styles.ts","../../src/features/invoices/components/InvoiceNumberField/hooks/useInvoiceNumber.ts","../../src/features/invoices/components/InvoiceNumberField/InvoiceNumberField.tsx","../../src/features/invoices/utils/preview.tsx","../../src/features/invoices/hooks/useInvoicePDFPreview.ts","../../src/features/invoices/components/InvoicePreview/styles.ts","../../src/features/invoices/components/InvoicePreview/InvoicePreview.tsx","../../src/features/invoices/components/InvoiceTextAreaFormField/styles.ts","../../src/features/invoices/components/InvoiceTextAreaFormField/InvoiceTextAreaFormField.tsx","../../src/features/invoices/components/InvoiceForm/styles.ts","../../src/features/invoices/components/InvoiceForm/InvoiceForm.tsx","../../src/hooks/useLoadingCallback.ts","../../src/features/invoices/components/InvoiceFormHeaders/InvoiceFormDraftHeader.tsx","../../src/features/invoices/components/UpdateInvoiceModal/UpdateInvoiceModal.tsx","../../src/features/invoices/components/InvoiceFormHeaders/InvoiceFormEditHeader.tsx","../../src/screens/InvoiceTool/InvoiceCreateScreen/InvoicePreviewModal.tsx","../../src/screens/InvoiceTool/InvoiceCreateScreen/useInvoiceCreateScreen.ts","../../src/screens/InvoiceTool/InvoiceCreateScreen/useRestrictInvoiceCreateRouteAccess.ts","../../src/screens/InvoiceTool/InvoiceCreateScreen/InvoiceCreateScreen.tsx"],"sourcesContent":["import { useGetUserOwnedContactsQuery } from '@/apollo/graphql';\nimport { useAuth } from '@/features/auth/contexts';\n\nexport default function useCurrentUserContact() {\n  const { user } = useAuth();\n\n  const { data } = useGetUserOwnedContactsQuery({\n    variables: {\n      filter: {\n        userIds: [user?._id ?? ''],\n      },\n    },\n    skip: !user?._id,\n  });\n\n  return data?.getUserOwnedContacts?.data?.find(\n    (contact) => contact?.userId._id === user?._id,\n  );\n}\n","import { useContext } from 'react';\nimport { InvoiceContext } from '../providers/InvoiceProvider';\n\nexport function useInvoiceContext() {\n  const context = useContext(InvoiceContext);\n\n  return context;\n}\n","import styled from 'styled-components';\nimport { TSpan } from '@/components/Typography';\nimport { mediaSizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n`;\n\nconst TableBody = styled.tbody``;\n\nconst TableRow = styled.tr`\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    border-bottom: solid 1px var(--border-card-neutral-default);\n  }\n`;\n\nconst TableCell = styled.td<{ fitContents?: boolean }>`\n  padding: 12px;\n  text-align: left;\n  border-bottom: 1px solid var(--border-card-neutral-default);\n  ${(props) => (props.fitContents ? 'width: 1px' : '')};\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    padding: 12px 4px;\n  }\n\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    padding: 8px 0 16px;\n  }\n`;\n\nconst SummaryText = styled(TSpan)`\n  color: var(--text-card-neutral-highlighted);\n`;\n\nconst ItemDetailsRowText = styled(TSpan).attrs({\n  font: 'footnote',\n  colorToken: '--text-card-neutral-default',\n})``;\n\nconst ItemDetailsRow = styled(Stack).attrs({\n  fullWidth: true,\n  justify: 'space-between',\n  align: 'center',\n  padding: '4px 12px 4px 0',\n})``;\n\nconst SelectFieldWrapper = styled.div<{ fullSize?: boolean }>`\n  width: ${(props) => (props.fullSize ? '100%' : '50%')};\n`;\nexport default {\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  SummaryText,\n  ItemDetailsRow,\n  ItemDetailsRowText,\n  SelectFieldWrapper,\n};\n","import React from 'react';\nimport { type Control, Controller, type FieldPath } from 'react-hook-form';\nimport { TextField } from '@/components/TextField';\nimport { type ITextField } from '@/components/TextField/types';\nimport { getErrorProps, numberTransformer } from '@/utils/forms';\nimport { type InvoiceItemFormValues } from './types';\n\ntype FormTextFieldProps<T> = {\n  name: T;\n  label: string;\n  control: Control<InvoiceItemFormValues, unknown>;\n  withValidation?: boolean;\n} & ITextField;\n\nconst FormTextField = <T extends FieldPath<InvoiceItemFormValues>>({\n  name,\n  label,\n  control,\n  numberOnly,\n  withValidation,\n  ...rest\n}: FormTextFieldProps<T>) => (\n  <Controller\n    name={name}\n    control={control}\n    render={({ field, fieldState }) => (\n      <TextField\n        fullWidth\n        inputSize=\"small\"\n        label={label}\n        error={!!fieldState.error}\n        numberOnly={numberOnly}\n        {...(numberOnly\n          ? numberTransformer.fieldProps(field)\n          : {\n              value: field.value,\n              onChange: field.onChange,\n            })}\n        {...(withValidation ? { ...getErrorProps(fieldState) } : {})}\n        {...rest}\n      />\n    )}\n  />\n);\n\nexport default FormTextField;\n","import React from 'react';\nimport { type Control } from 'react-hook-form';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\n\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from '@/components/ExtendedModal';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\nimport getCurrencySymbol from '@/utils/getCurrencySymbol';\nimport { type InvoiceItemFormValues } from './types';\nimport FormTextField from './FormTextField';\n\ntype InvoiceItemFormModalProps = {\n  totalValue: number;\n  isValid: boolean;\n  control: Control<InvoiceItemFormValues, unknown>;\n  currency?: AllCurrencyEnum;\n  onSave(createAnother: boolean): void;\n  onCancel(): void;\n};\n\nconst InvoiceItemFormModal: React.FC<InvoiceItemFormModalProps> = ({\n  onSave,\n  onCancel,\n  totalValue,\n  control,\n  isValid,\n  currency,\n}) => (\n  <Modal open isFullScreen onClose={onCancel} disableBackdropClick>\n    <ModalHeader isFullScreen>Add item</ModalHeader>\n    <ModalBody isFullScreen>\n      <TSpan font=\"body-m-bold\" colorToken=\"--text-card-neutral-highlighted\">\n        Item Details\n      </TSpan>\n      <Stack gap={12} padding=\"16px 0\" vertical fullWidth>\n        <FormTextField\n          control={control}\n          name=\"description\"\n          label=\"Description\"\n        />\n\n        <FormTextField control={control} name=\"quantity\" label=\"Quantity\" />\n\n        <FormTextField\n          name=\"unitPrice\"\n          label=\"Unit Price\"\n          isCurrency\n          numberOnly\n          control={control}\n          prefix={getCurrencySymbol(currency)}\n          hideLeftIconPlace\n        />\n\n        <FormTextField\n          name=\"taxRate\"\n          label=\"Tax\"\n          numberOnly\n          control={control}\n          suffix=\"%\"\n          hideLeftIconPlace\n        />\n      </Stack>\n      <Stack padding=\"16px 0 0\">\n        <TSpan font=\"body-l-bold\">\n          {convertToCurrency(totalValue, currency, 2)}\n        </TSpan>\n      </Stack>\n    </ModalBody>\n    <ModalFooter isFullScreen>\n      <Stack gap={16} fullWidth>\n        <Button\n          softDisabled={!isValid}\n          size=\"full\"\n          tertiary\n          onClick={() => onSave(true)}\n        >\n          Save & Add Another\n        </Button>\n        <Button\n          softDisabled={!isValid}\n          size=\"full\"\n          primary\n          onClick={() => onSave(false)}\n        >\n          Save\n        </Button>\n      </Stack>\n    </ModalFooter>\n  </Modal>\n);\n\nexport default InvoiceItemFormModal;\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nconst Container = styled(Stack)<{ hasError?: boolean }>`\n  border-radius: 8px;\n  padding: 16px;\n  border: solid 1px\n    ${(props) =>\n      props.hasError\n        ? 'var(--border-input-danger-primary-default)'\n        : 'var(--border-input-neutral-default)'};\n`;\n\nexport default {\n  Container,\n};\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { reach } from 'yup';\nimport { isNumber } from 'lodash';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { type WizardMode } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { Icon } from '@/components/Icon';\nimport getCurrencySymbol from '@/utils/getCurrencySymbol';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\nimport InvoiceItemFormModal from './InvoiceItemFormModal';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport { type InvoiceItemFormValues } from './types';\nimport FormTextField from './FormTextField';\nimport { invoiceFormSchema } from '../../hooks/useInvoiceForm';\nimport FormSection from '../FormSection/FormSection';\nimport S from './styles';\n\ntype InvoiceItemFormProps = {\n  values?: InvoiceItemFormValues;\n  mode: WizardMode;\n  currency?: AllCurrencyEnum;\n  onSave({\n    item,\n    createAnother,\n  }: {\n    item: InvoiceItemFormValues;\n    createAnother?: boolean;\n  }): void;\n  onCancel(): void;\n  onDelete?(): void;\n};\n\nconst InvoiceItemForm: React.FC<InvoiceItemFormProps> = ({\n  onSave,\n  onCancel,\n  onDelete,\n  values,\n  currency,\n  mode,\n}) => {\n  const [isTaxExpanded, setIsTaxExpanded] = useState(isNumber(values?.taxRate));\n  const {\n    watch,\n    handleSubmit,\n    formState: { isValid, errors },\n    resetField,\n    control,\n  } = useForm<InvoiceItemFormValues>({\n    defaultValues: values,\n    mode: 'all',\n    resolver: yupResolver(reach(invoiceFormSchema, 'lineItems.0')),\n  });\n\n  const { isMobile } = useBreakpoints();\n  const hasError = Object.keys(errors).length > 0;\n\n  const handleSave = (createAnother: boolean) => {\n    handleSubmit((data) => {\n      onSave({\n        item: {\n          ...data,\n          taxName:\n            data.taxName && isNumber(data.taxRate) ? data.taxName : undefined,\n          taxRate:\n            data.taxName && isNumber(data.taxRate) ? data.taxRate : undefined,\n        },\n        createAnother,\n      });\n    })();\n  };\n\n  const quantity = watch('quantity');\n  const unitPrice = watch('unitPrice');\n  const taxRate = watch('taxRate');\n  const taxName = watch('taxName');\n\n  const totalValue = InvoiceUtils.getItemTotalValue(\n    quantity,\n    unitPrice,\n    taxRate,\n  );\n\n  return isMobile ? (\n    <InvoiceItemFormModal\n      totalValue={totalValue}\n      control={control}\n      isValid={isValid}\n      onCancel={onCancel}\n      onSave={handleSave}\n      currency={currency}\n    />\n  ) : (\n    <S.Container fullWidth hasError={hasError}>\n      <FormSection\n        title=\"Item details\"\n        font=\"body-l-bold\"\n        sectionSeparator={false}\n        fullSize\n        rightIcon={\n          <TSpan font=\"body-l\" color=\"--text-card-neutral-highlighted\">\n            {convertToCurrency(\n              Number.isNaN(totalValue) ? 0 : totalValue,\n              currency,\n              2,\n            )}\n          </TSpan>\n        }\n      >\n        <Stack fullWidth vertical gap={16} padding=\"12px 0 0\">\n          <Stack vertical padding=\"0 0 16px\" fullWidth>\n            <Stack gap={12} fullWidth>\n              <Stack vertical gap={12} fullWidth>\n                <FormTextField\n                  control={control}\n                  name=\"description\"\n                  label=\"Description\"\n                />\n                {isTaxExpanded ? (\n                  <Stack gap={12} fullWidth>\n                    <FormTextField\n                      name=\"taxName\"\n                      label=\"Tax Name\"\n                      control={control}\n                    />\n                    <FormTextField\n                      name=\"taxRate\"\n                      label=\"Tax Rate\"\n                      isCurrency\n                      numberOnly\n                      control={control}\n                      suffix=\"%\"\n                      disabled={!taxName}\n                    />\n                    <Button\n                      size=\"small\"\n                      intent=\"negative\"\n                      secondary\n                      onClick={() => {\n                        resetField('taxRate', {\n                          defaultValue: null,\n                          keepError: false,\n                          keepDirty: false,\n                        });\n                        resetField('taxName', {\n                          defaultValue: null,\n                          keepError: false,\n                          keepDirty: false,\n                        });\n\n                        setIsTaxExpanded(false);\n                      }}\n                      icon={<Icon name=\"delete_m\" size={24} />}\n                    />\n                  </Stack>\n                ) : (\n                  <Button\n                    size=\"small\"\n                    neutral\n                    onClick={() => setIsTaxExpanded(true)}\n                    leftIcon={\n                      <Icon\n                        name=\"add_m\"\n                        size={24}\n                        color=\"--text-button-brand-primary-default\"\n                      />\n                    }\n                  >\n                    <TSpan\n                      font=\"button-m\"\n                      colorToken=\"--text-button-brand-primary-default\"\n                    >\n                      Add tax\n                    </TSpan>\n                  </Button>\n                )}\n              </Stack>\n\n              <Stack gap={12} align=\"center\">\n                <FormTextField\n                  control={control}\n                  name=\"quantity\"\n                  numberOnly\n                  integerOnly\n                  label=\"Quantity\"\n                />\n\n                <FormTextField\n                  name=\"unitPrice\"\n                  label=\"Unit Price\"\n                  isCurrency\n                  numberOnly\n                  prefix={getCurrencySymbol(currency)}\n                  control={control}\n                />\n              </Stack>\n            </Stack>\n\n            {hasError && (\n              <Stack padding=\"0 0 0 8px\">\n                <TSpan\n                  font=\"footnote\"\n                  colorToken=\"--text-input-danger-primary-default\"\n                >\n                  Please provide missing information.\n                </TSpan>\n              </Stack>\n            )}\n          </Stack>\n\n          <Stack justify=\"flex-end\" fullWidth gap={12}>\n            <Button size=\"small\" neutral onClick={onCancel}>\n              Cancel\n            </Button>\n            {mode === 'edit' ? (\n              <Button\n                size=\"small\"\n                intent=\"negative\"\n                secondary\n                onClick={onDelete}\n              >\n                Delete\n              </Button>\n            ) : (\n              <Button\n                softDisabled={!isValid}\n                size=\"small\"\n                tertiary\n                onClick={() => handleSave(true)}\n              >\n                Save & Add Another\n              </Button>\n            )}\n            <Button\n              softDisabled={!isValid}\n              size=\"small\"\n              primary\n              onClick={() => handleSave(false)}\n            >\n              Save\n            </Button>\n          </Stack>\n        </Stack>\n      </FormSection>\n    </S.Container>\n  );\n};\n\nexport default InvoiceItemForm;\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\nimport S from './styles';\n\nimport InvoiceItemForm from '../InvoiceItemForm/InvoiceItemForm';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\n\ntype Values = FieldArrayWithId<InvoiceFormValues, 'lineItems', 'id'>;\ntype EditModeProps = {\n  index: number;\n  data: Values;\n  currency?: AllCurrencyEnum;\n  onDelete(index: number): void;\n  onCancel(): void;\n  onSave(index: number, values: Values): void;\n};\n\nconst EditMode: React.FC<EditModeProps> = ({\n  data,\n  index,\n  currency,\n  onSave,\n  onCancel,\n  onDelete,\n}) => {\n  const handleSave = ({ item }: { item: Values; createAnother?: boolean }) => {\n    onSave(index, item);\n  };\n\n  const handleDelete = () => {\n    onDelete(index);\n  };\n\n  return (\n    <S.TableRow>\n      <td colSpan={4}>\n        <InvoiceItemForm\n          mode=\"edit\"\n          values={data}\n          onCancel={onCancel}\n          onDelete={handleDelete}\n          onSave={handleSave}\n          currency={currency}\n        />\n      </td>\n    </S.TableRow>\n  );\n};\nexport default EditMode;\n","import React from 'react';\nimport { Modal } from '@/components/ExtendedModal/Modal';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\n\ntype DeleteLineItemModalProps = {\n  isOpenModal: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n};\nconst DeleteLineItemModal: React.FC<DeleteLineItemModalProps> = ({\n  isOpenModal,\n  onClose,\n  onConfirm,\n}) => (\n  <Modal\n    isFullScreen={false}\n    open={isOpenModal}\n    testId=\"delete_line_item_modal\"\n    onClose={onClose}\n    disableBackdropClick\n  >\n    <Stack\n      gap={16}\n      padding={14}\n      vertical\n      maxWidth={327}\n      align=\"center\"\n      justify=\"center\"\n    >\n      <TSpan\n        font=\"heading-s-bold\"\n        colorToken=\"--text-modal-header-neutral-default\"\n      >\n        Delete Item\n      </TSpan>\n      <TSpan\n        data-testid=\"confirm_text\"\n        font=\"body-l\"\n        textAlign=\"center\"\n        colorToken=\"--text-modal-neutral-default\"\n      >\n        Are you sure you want to permanently delete this item?\n        <br /> <br />\n        This cannot be undone.\n      </TSpan>\n\n      <Stack vertical gap={16} fullWidth padding=\"12px 0 0\">\n        <Button\n          primary\n          size=\"full\"\n          testId=\"confirm_btn\"\n          intent=\"negative\"\n          grow\n          onClick={onConfirm}\n        >\n          Delete Item\n        </Button>\n        <Button tertiary onClick={onClose} size=\"full\" testId=\"cancel_btn\">\n          Close\n        </Button>\n      </Stack>\n    </Stack>\n  </Modal>\n);\n\nexport default DeleteLineItemModal;\n","import { type DropdownValueType } from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\n\nexport const tableItemContextMenuOptions: DropdownValueType<string>[] = [\n  {\n    key: 'edit',\n    value: 'edit',\n    label: 'Edit Item',\n    type: 'value',\n    icon: <Icon name=\"edit_m\" size={16} />,\n  },\n  {\n    key: 'delete',\n    value: 'delete',\n    label: 'Delete Item',\n    type: 'value',\n    icon: (\n      <Icon\n        name=\"delete_m\"\n        color=\"--icon-tablecell-danger-primary-default\"\n        size={16}\n      />\n    ),\n    intent: 'danger',\n  },\n];\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { isNumber } from 'lodash';\nimport { TSpan } from '@/components/Typography';\nimport EllipsisMenu from '@/screens/Chambers/EllipsisMenu';\nimport { Tag } from '@/components/Tag';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack } from '@/layout';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\nimport DeleteLineItemModal from '../DeleteLineItemModal/DeleteLineItemModal';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport { tableItemContextMenuOptions } from './utils';\nimport S from './styles';\n\ntype ModalType = 'deleteItem';\n\ntype EditModeProps = {\n  index: number;\n  data: FieldArrayWithId<InvoiceFormValues, 'lineItems', 'id'>;\n  currency?: AllCurrencyEnum;\n  onEdit(index: number): void;\n  onDelete(index: number): void;\n};\n\nconst PreviewMode: React.FC<EditModeProps> = ({\n  data,\n  onDelete,\n  onEdit,\n  index,\n  currency,\n}) => {\n  const { isMobile } = useBreakpoints();\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n\n  const handleClickContextMenu = (value: string) => {\n    switch (value) {\n      case 'edit':\n        onEdit(index);\n        break;\n      case 'delete':\n        openModal('deleteItem');\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      {isMobile ? (\n        <S.TableRow>\n          <S.TableCell>\n            <Stack fullWidth justify=\"space-between\" align=\"center\">\n              <TSpan\n                font=\"body-m-bold\"\n                colorToken=\"--text-card-neutral-highlighted\"\n              >\n                {data.description}\n              </TSpan>\n              <EllipsisMenu\n                neutral\n                onClick={(value) => handleClickContextMenu(value)}\n                menuOptions={tableItemContextMenuOptions}\n              />\n            </Stack>\n\n            <S.ItemDetailsRow>\n              <S.ItemDetailsRowText>Quantity:</S.ItemDetailsRowText>\n              <S.ItemDetailsRowText>{data.quantity}</S.ItemDetailsRowText>\n            </S.ItemDetailsRow>\n\n            <S.ItemDetailsRow>\n              <S.ItemDetailsRowText>Unit Price:</S.ItemDetailsRowText>\n              <S.ItemDetailsRowText>{data.unitPrice}</S.ItemDetailsRowText>\n            </S.ItemDetailsRow>\n\n            <S.ItemDetailsRow>\n              <S.ItemDetailsRowText>Tax Rate:</S.ItemDetailsRowText>\n              <S.ItemDetailsRowText>\n                {isNumber(data.taxRate) ? data.taxRate : '-'}\n              </S.ItemDetailsRowText>\n            </S.ItemDetailsRow>\n\n            <S.ItemDetailsRow>\n              <S.ItemDetailsRowText>Amount:</S.ItemDetailsRowText>\n              <S.ItemDetailsRowText>\n                {InvoiceUtils.getItemTotalValueWithCurrency(\n                  data.quantity,\n                  data.unitPrice,\n                  data.taxRate,\n                  currency,\n                )}\n              </S.ItemDetailsRowText>\n            </S.ItemDetailsRow>\n          </S.TableCell>\n        </S.TableRow>\n      ) : (\n        <S.TableRow>\n          <S.TableCell fitContents={false}>\n            <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-highlighted\">\n              {data.description} x {data.quantity}\n            </TSpan>\n          </S.TableCell>\n\n          <S.TableCell fitContents={true}>\n            {isNumber(data.taxRate) ? (\n              <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-highlighted\">\n                <Tag tertiary size=\"small\">\n                  {data.taxRate}% tax\n                </Tag>\n              </TSpan>\n            ) : null}\n          </S.TableCell>\n\n          <S.TableCell fitContents={true}>\n            <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-highlighted\">\n              {convertToCurrency(data.unitPrice, currency, 2)}\n            </TSpan>\n          </S.TableCell>\n\n          <S.TableCell fitContents={true}>\n            <EllipsisMenu\n              neutral\n              onClick={(value) => handleClickContextMenu(value)}\n              menuOptions={tableItemContextMenuOptions}\n            />\n          </S.TableCell>\n        </S.TableRow>\n      )}\n      <DeleteLineItemModal\n        isOpenModal={modalType === 'deleteItem'}\n        onConfirm={() => onDelete(index)}\n        onClose={() => closeModal()}\n      />\n    </>\n  );\n};\n\nexport default PreviewMode;\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { useApolloClient } from '@apollo/client';\nimport { useError } from '@/hooks';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { useCreateUserInvoiceLineItemMutation } from '@/apollo/graphql';\nimport { type InvoiceFormValues } from './useInvoiceForm';\n\nexport function useInvoiceItemsWizard() {\n  const {\n    fields,\n    addNewItem: addNewItemOriginal,\n    cancelItemEditing,\n    deleteItem,\n    editItem,\n    editedIndex,\n    hideNewItemForm,\n    mode,\n    saveItem,\n    showNewItemForm,\n  } = useFieldArrayWizard<InvoiceFormValues, 'lineItems'>({\n    name: 'lineItems',\n  });\n  const apolloClient = useApolloClient();\n\n  const [createInvoiceLineItemMutation] = useCreateUserInvoiceLineItemMutation({\n    onCompleted: () => {\n      apolloClient.refetchQueries({\n        include: ['getUserInvoiceLineItemList'],\n      });\n    },\n  });\n  const { logError } = useError();\n\n  const addNewItem = async (\n    values: FieldArrayWithId<InvoiceFormValues, 'lineItems', 'id'>,\n    shouldSaveNewItem?: boolean,\n  ) => {\n    if (!shouldSaveNewItem) {\n      addNewItemOriginal(values);\n\n      return;\n    }\n\n    try {\n      await createInvoiceLineItemMutation({\n        variables: {\n          input: {\n            description: values.description,\n            quantity: values.quantity,\n            currency: values.currency,\n            unitPrice: values.unitPrice,\n            taxRate: values.taxRate,\n            taxLabel: values.taxName,\n          },\n        },\n      });\n      addNewItemOriginal(values);\n    } catch (error) {\n      logError(error, 'useInvoiceItemsWizard');\n    }\n  };\n\n  return {\n    mode,\n    editedIndex,\n    fields,\n    showNewItemForm,\n    hideNewItemForm,\n    addNewItem,\n    deleteItem,\n    cancelItemEditing,\n    saveItem,\n    editItem,\n  };\n}\n","import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { reach } from 'yup';\nimport { isNumber } from 'lodash';\nimport { Modal } from '@/components/ExtendedModal/Modal';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport {\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { type InvoiceLineItem } from '@/apollo/generated/types';\nimport { Icon } from '@/components/Icon';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { TSpan } from '@/components/Typography';\nimport FormTextField from '../InvoiceItemForm/FormTextField';\nimport { invoiceFormSchema } from '../../hooks/useInvoiceForm';\nimport { type InvoiceItemFormValues } from '../InvoiceItemForm/types';\n\ntype EditModalProps = {\n  isOpenModal: boolean;\n  item?: InvoiceLineItem;\n  onClose: () => void;\n  onConfirm: (values: InvoiceItemFormValues) => void;\n};\nexport const EditModal: React.FC<EditModalProps> = ({\n  isOpenModal,\n  item,\n  onClose,\n  onConfirm,\n}) => {\n  const { isMobile } = useBreakpoints();\n  const { handleSubmit, control, watch, resetField } =\n    useForm<InvoiceItemFormValues>({\n      defaultValues: {\n        id: item?.id,\n        description: item?.description,\n        unitPrice: item?.unitPrice,\n        taxRate: item?.taxRate ?? 0,\n        quantity: item?.quantity,\n        currency: item?.currency,\n        taxName: item?.taxLabel ?? undefined,\n      },\n      mode: 'all',\n      resolver: yupResolver(reach(invoiceFormSchema, 'lineItems.0')),\n    });\n\n  const [isTaxExpanded, setIsTaxExpanded] = useState(() =>\n    isNumber(item?.taxRate),\n  );\n\n  const onSubmit = () => {\n    handleSubmit((data) => {\n      onConfirm(data);\n    })();\n  };\n\n  return (\n    <Modal\n      isFullScreen={isMobile}\n      open={isOpenModal}\n      testId=\"add_new_customer_modal\"\n      size={ModalSize.L}\n      onClose={onClose}\n      isScrollableContent\n      disableBackdropClick\n    >\n      <ModalHeader\n        action={\n          <Button\n            tertiary\n            onClick={onClose}\n            size=\"small\"\n            icon={<Icon name=\"arrow_left_m\" size={24} />}\n          />\n        }\n      >\n        Edit Item\n      </ModalHeader>\n      <ModalBody hasScrollBar>\n        <Stack gap={16} padding=\"8px 0 0\" vertical fullWidth>\n          <FormTextField\n            control={control}\n            label=\"Description\"\n            name=\"description\"\n            inputSize=\"small\"\n            withValidation\n          />\n\n          <FormTextField\n            control={control}\n            label=\"Unit Price\"\n            name=\"unitPrice\"\n            numberOnly\n            isCurrency\n            hideLeftIconPlace\n            inputSize=\"small\"\n            withValidation\n          />\n\n          {isTaxExpanded ? (\n            <Stack fullWidth gap={8}>\n              <Stack fullWidth>\n                <FormTextField\n                  label=\"Tax Name\"\n                  control={control}\n                  inputSize=\"small\"\n                  name=\"taxName\"\n                  withValidation\n                  helperText=\"Enter tax type (e.g. VAT)\"\n                />\n              </Stack>\n\n              <Stack gap={8}>\n                <FormTextField\n                  label=\"Tax\"\n                  control={control}\n                  inputSize=\"small\"\n                  name=\"taxRate\"\n                  numberOnly\n                  isCurrency\n                  suffix=\"%\"\n                  disabled={!watch('taxName')}\n                  withValidation\n                />\n                <Button\n                  size=\"small\"\n                  intent=\"negative\"\n                  secondary\n                  onClick={() => {\n                    resetField('taxRate', {\n                      defaultValue: null,\n                      keepError: false,\n                      keepDirty: false,\n                    });\n                    resetField('taxName', {\n                      defaultValue: null,\n                      keepError: false,\n                      keepDirty: false,\n                    });\n\n                    setIsTaxExpanded(false);\n                  }}\n                  icon={<Icon name=\"delete_m\" size={24} />}\n                />\n              </Stack>\n            </Stack>\n          ) : (\n            <Button\n              size=\"small\"\n              neutral\n              onClick={() => setIsTaxExpanded(true)}\n              leftIcon={\n                <Icon\n                  name=\"add_m\"\n                  size={24}\n                  color=\"--text-button-brand-primary-default\"\n                />\n              }\n            >\n              <TSpan\n                font=\"button-m\"\n                colorToken=\"--text-button-brand-primary-default\"\n              >\n                Add tax\n              </TSpan>\n            </Button>\n          )}\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Stack fullWidth gap={16}>\n          <Button\n            primary\n            size=\"full\"\n            testId=\"confirm_btn\"\n            tertiary\n            grow\n            loading={false}\n            onClick={onClose}\n          >\n            Cancel\n          </Button>\n          <Button primary size=\"full\" onClick={onSubmit}>\n            Save Changes\n          </Button>\n        </Stack>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport { Modal } from '@/components/ExtendedModal/Modal';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\n\nimport { ModalSize } from '@/components/ExtendedModal';\n\ntype DeleteModalProps = {\n  isOpenModal: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n};\nexport const DeleteModal: React.FC<DeleteModalProps> = ({\n  isOpenModal,\n  onClose,\n  onConfirm,\n}) => (\n  <Modal\n    open={isOpenModal}\n    testId=\"saved_items_delete_modal\"\n    onClose={onClose}\n    size={ModalSize.S}\n    disableBackdropClick\n  >\n    <Stack gap={32} padding={14} vertical align=\"center\" justify=\"center\">\n      <TSpan\n        font=\"heading-s-bold\"\n        colorToken=\"--text-modal-header-neutral-default\"\n      >\n        Delete Item\n      </TSpan>\n      <TSpan\n        data-testid=\"confirm_text\"\n        font=\"body-l\"\n        textAlign=\"center\"\n        colorToken=\"--text-modal-neutral-default\"\n      >\n        Are you sure you want to permanently delete this item?\n        <br />\n        <br />\n        This cannot be undone.\n      </TSpan>\n\n      <Stack vertical fullWidth gap={16}>\n        <Button\n          primary\n          size=\"full\"\n          testId=\"confirm_btn\"\n          intent=\"negative\"\n          grow\n          onClick={onConfirm}\n        >\n          Delete Item\n        </Button>\n        <Button tertiary onClick={onClose} size=\"full\" testId=\"cancel_btn\">\n          Cancel\n        </Button>\n      </Stack>\n    </Stack>\n  </Modal>\n);\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nconst ListItem = styled(Stack)`\n  border-bottom: solid 1px var(--border-card-neutral-default);\n  padding: 8px 0;\n`;\n\nexport default {\n  ListItem,\n};\n","import React from 'react';\nimport { Modal } from '@/components/ExtendedModal/Modal';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\nimport {\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { Icon } from '@/components/Icon';\nimport { type InvoiceLineItem } from '@/apollo/generated/types';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport S from './styles';\nimport { InvoiceUtils } from '../../utils/invoice';\n\ntype ListModalProps = {\n  isOpenModal: boolean;\n  onClose: () => void;\n  onDelete: (id: string) => void;\n  onEdit: (id: string) => void;\n  items: InvoiceLineItem[];\n};\n\nexport const ListModal: React.FC<ListModalProps> = ({\n  isOpenModal,\n  items = [],\n  onDelete,\n  onEdit,\n  onClose,\n}) => {\n  const { isMobile } = useBreakpoints();\n\n  return (\n    <Modal\n      isFullScreen={isMobile}\n      open={isOpenModal}\n      testId=\"saved_items_list_modal\"\n      size={ModalSize.L}\n      onClose={onClose}\n      enableCloseButton\n      isScrollableContent\n      disableBackdropClick\n    >\n      <ModalHeader>Saved Products & Services</ModalHeader>\n      <ModalBody hasScrollBar>\n        <Stack gap={16} padding={14} vertical fullWidth>\n          {items.map((item) => (\n            <S.ListItem align=\"center\" fullWidth justify=\"space-between\">\n              <TSpan\n                colorToken=\"--text-card-neutral-highlighted\"\n                font=\"body-m-bold\"\n              >\n                {item.description}\n              </TSpan>\n\n              <Stack align=\"center\" gap={4}>\n                <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n                  {InvoiceUtils.formatAmount(item.unitPrice.toFixed(2))}\n                </TSpan>\n                <Button\n                  neutral\n                  onClick={() => onEdit(item.id)}\n                  size=\"small\"\n                  icon={\n                    <Icon\n                      name=\"edit_m\"\n                      color=\"--icon-button-brand-primary-default\"\n                      size={16}\n                    />\n                  }\n                />\n                <Button\n                  neutral\n                  onClick={() => onDelete(item.id)}\n                  size=\"small\"\n                  icon={\n                    <Icon\n                      name=\"delete_m\"\n                      size={16}\n                      color=\"--icon-tablecell-danger-primary-default\"\n                    />\n                  }\n                />\n              </Stack>\n            </S.ListItem>\n          ))}\n        </Stack>\n      </ModalBody>\n      <ModalFooter>\n        <Stack fullWidth gap={16}>\n          <Button size=\"full\" tertiary loading={false} onClick={onClose}>\n            Close\n          </Button>\n        </Stack>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import React, { useReducer } from 'react';\nimport { useApolloClient } from '@apollo/client';\nimport { type InvoiceLineItem } from '@/apollo/generated/types';\nimport { useError, useToast } from '@/hooks';\nimport {\n  useDeleteUserInvoiceLineItemMutation,\n  useUpdateUserInvoiceLineItemMutation,\n} from '@/apollo/graphql';\nimport { EditModal } from './EditModal';\nimport { DeleteModal } from './DeleteModal';\nimport { ListModal } from './ListModal';\nimport { type InvoiceItemFormValues } from '../InvoiceItemForm/types';\n\ntype SavedItemsModalWizardProps = {\n  isOpenModal: boolean;\n  onClose: () => void;\n  items: InvoiceLineItem[];\n};\n\nexport type WizardMode = 'preview' | 'edit' | 'delete';\n\ninterface WizardState {\n  mode: WizardMode;\n  editedId: string | null;\n}\n\ntype WizardStateAction =\n  | {\n      mode: 'preview';\n    }\n  | {\n      mode: 'edit';\n      editedId: string;\n    }\n  | {\n      mode: 'delete';\n      editedId: string;\n    };\n\nfunction wizardStateReducer(\n  state: WizardState,\n  action: WizardStateAction,\n): WizardState {\n  switch (action.mode) {\n    case 'delete':\n      return { mode: 'delete', editedId: action.editedId };\n    case 'preview':\n      return { mode: 'preview', editedId: null };\n    case 'edit':\n      return { mode: 'edit', editedId: action.editedId };\n    default:\n      return state;\n  }\n}\n\nexport const SavedItemsModalWizard: React.FC<SavedItemsModalWizardProps> = ({\n  isOpenModal,\n  items,\n  onClose,\n}) => {\n  const [{ mode, editedId }, dispatch] = useReducer(wizardStateReducer, {\n    mode: 'preview',\n    editedId: null,\n  });\n  const apolloClient = useApolloClient();\n  const editedItem = items.find((item) => item.id === editedId);\n  const { addPrimaryIconToast, addSuccessIconToast } = useToast();\n  const [updateItemMutation] = useUpdateUserInvoiceLineItemMutation({\n    onCompleted: () => {\n      apolloClient.refetchQueries({\n        include: ['getUserInvoiceLineItemList'],\n      });\n    },\n  });\n  const [deleteMutation] = useDeleteUserInvoiceLineItemMutation({\n    onCompleted: () => {\n      apolloClient.refetchQueries({\n        include: ['getUserInvoiceLineItemList'],\n      });\n    },\n  });\n\n  const { logError } = useError();\n\n  const editItem = (id: string) => {\n    dispatch({ mode: 'edit', editedId: id });\n  };\n\n  const deleteItem = (id: string) => {\n    dispatch({ mode: 'delete', editedId: id });\n  };\n\n  const cancelAction = () => {\n    dispatch({ mode: 'preview' });\n  };\n\n  const confirmDelete = async () => {\n    if (!editedItem) {\n      return;\n    }\n    try {\n      await deleteMutation({\n        variables: {\n          _id: editedItem.id,\n        },\n      });\n      addPrimaryIconToast('Item has been deleted.');\n    } catch (error) {\n      logError(error, 'SavedItemsModalWizard');\n    }\n\n    cancelAction();\n  };\n\n  const confirmEdit = async (values: InvoiceItemFormValues) => {\n    if (!editedItem) {\n      throw Error('No edited item found.');\n    }\n    try {\n      await updateItemMutation({\n        variables: {\n          _id: editedItem.id,\n          input: {\n            currency: values.currency,\n            description: values.description,\n            quantity: values.quantity,\n            taxRate: values.taxRate,\n            unitPrice: values.unitPrice,\n            taxLabel: values.taxName,\n          },\n        },\n      });\n      addSuccessIconToast('Item has been edited.');\n    } catch (error) {\n      logError(error, 'SavedItemsModalWizard');\n    }\n    cancelAction();\n  };\n\n  return mode === 'edit' ? (\n    <EditModal\n      isOpenModal\n      onClose={cancelAction}\n      onConfirm={confirmEdit}\n      item={editedItem}\n    />\n  ) : mode === 'delete' ? (\n    <DeleteModal isOpenModal onClose={cancelAction} onConfirm={confirmDelete} />\n  ) : isOpenModal && mode === 'preview' ? (\n    <ListModal\n      isOpenModal\n      onDelete={deleteItem}\n      onEdit={editItem}\n      onClose={onClose}\n      items={items}\n    />\n  ) : null;\n};\n","export const ADD_ONE_TIME_ITEM = 'ADD_ONE_TIME_ITEM';\nexport const CREATE_SERVICE_OR_PRODUCT = 'CREATE_SERVICE_OR_PRODUCT';\n","import { useMemo, useState } from 'react';\nimport { useFormContext, type FieldArrayWithId } from 'react-hook-form';\n\nimport { useGetUserInvoiceLineItemListQuery } from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport {\n  type DropdownItemType,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport { SelectField } from '@/components/SelectField';\nimport { TSpan } from '@/components/Typography';\nimport { cleanList } from '@/utils/list';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport InvoiceItemForm from '../InvoiceItemForm/InvoiceItemForm';\nimport { SavedItemsModalWizard } from '../SavedItemsModalWizard/SavedItemsModalWizard';\nimport { ADD_ONE_TIME_ITEM, CREATE_SERVICE_OR_PRODUCT } from './constants';\nimport S from './styles';\n\ntype CreateModeProps = {\n  onAdd(\n    values: FieldArrayWithId<InvoiceFormValues, 'lineItems', 'id'>,\n    shouldSaveNewItem?: boolean,\n  ): Promise<void>;\n  onShowNewItemForm(): void;\n  onCancel(): void;\n};\n\nconst CreateMode: React.FC<CreateModeProps> = ({\n  onAdd,\n  onCancel,\n  onShowNewItemForm,\n}) => {\n  const [selectedOption, setSelectedOption] = useState<string>();\n  const {\n    watch,\n    formState: { errors },\n  } = useFormContext<InvoiceFormValues>();\n  const [showSavedItemsModal, setShowSavedItemsModal] = useState(false);\n  const [currency] = watch(['currency']);\n\n  const { data, loading } = useGetUserInvoiceLineItemListQuery({\n    variables: {\n      filter: {\n        limit: 10,\n        offset: 0,\n        search: '',\n      },\n    },\n  });\n\n  const list = cleanList(data?.getUserInvoiceLineItemList?.data);\n\n  const lineItemsOptions = useMemo<DropdownItemType<string>[]>(\n    () =>\n      list.map((item) => ({\n        key: item.id,\n        label: item.description,\n        type: 'value',\n        value: item.id,\n      })),\n    [list],\n  );\n\n  const stickyHeaderOptions = useMemo<DropdownValueType<string>[]>(\n    () => [\n      {\n        type: 'value',\n        value: ADD_ONE_TIME_ITEM,\n        key: ADD_ONE_TIME_ITEM,\n        label: 'Add One-Time Item',\n        icon: <Icon name=\"add_m\" size={24} />,\n      },\n      {\n        type: 'value',\n        value: CREATE_SERVICE_OR_PRODUCT,\n        key: CREATE_SERVICE_OR_PRODUCT,\n        label: 'Create New Product or Service',\n        icon: <Icon name=\"add_m\" size={24} />,\n      },\n    ],\n    [],\n  );\n\n  const options: DropdownItemType<string>[] = lineItemsOptions.length\n    ? [\n        {\n          type: 'header',\n          label: 'Your Products & Services',\n          childLabels: ['Add One-Time Item', 'Create New Product or Service'],\n          rightIcon: (\n            <Button\n              size=\"small\"\n              neutral\n              textOnly\n              onClick={() => setShowSavedItemsModal(true)}\n              leftIcon={<Icon name=\"edit_m\" size={16} />}\n            >\n              <TSpan font=\"footnote-bold\">Edit</TSpan>\n            </Button>\n          ),\n        },\n        ...lineItemsOptions,\n      ]\n    : [];\n\n  return (\n    <>\n      {selectedOption !== ADD_ONE_TIME_ITEM &&\n        selectedOption !== CREATE_SERVICE_OR_PRODUCT && (\n          <S.SelectFieldWrapper fullSize>\n            <SelectField\n              key={String(showSavedItemsModal)}\n              inputSize=\"small\"\n              label=\"Find or add an item...\"\n              value={selectedOption}\n              stickyHeaderOptions={stickyHeaderOptions}\n              error={!!errors.lineItems}\n              calRefTop={false}\n              forceListFromBottom\n              helperText=\"You have to add at least one item\"\n              leftIcon={\n                <Icon\n                  name=\"search_m\"\n                  color=\"--icon-input-neutral-default\"\n                  size={20}\n                />\n              }\n              isLoading={loading}\n              onChange={(option) => {\n                if (\n                  option.value === ADD_ONE_TIME_ITEM ||\n                  option.value === CREATE_SERVICE_OR_PRODUCT\n                ) {\n                  setSelectedOption(option.value);\n                  return;\n                }\n\n                const foundItem = list.find((item) => item.id === option.value);\n\n                if (foundItem) {\n                  onAdd({\n                    id: foundItem.id,\n                    description: foundItem.description,\n                    quantity: foundItem.quantity,\n                    taxRate: foundItem.taxRate ?? undefined,\n                    unitPrice: foundItem.unitPrice,\n                    currency: foundItem.currency,\n                    taxName: foundItem.taxLabel ?? undefined,\n                  });\n                  setSelectedOption(option.value);\n                }\n              }}\n              usePortal\n              options={options}\n            />\n          </S.SelectFieldWrapper>\n        )}\n\n      {(selectedOption === ADD_ONE_TIME_ITEM ||\n        selectedOption === CREATE_SERVICE_OR_PRODUCT) && (\n        <InvoiceItemForm\n          onCancel={() => {\n            onCancel();\n            setSelectedOption(undefined);\n          }}\n          values={{\n            id: 'NEW',\n            quantity: 0,\n            description: '',\n            taxRate: undefined,\n            unitPrice: 0,\n            currency,\n            taxName: '',\n          }}\n          mode=\"create\"\n          currency={currency}\n          onSave={async ({ item, createAnother }) => {\n            await onAdd(item, selectedOption === CREATE_SERVICE_OR_PRODUCT);\n            onCancel();\n\n            if (createAnother) {\n              onShowNewItemForm();\n            }\n          }}\n        />\n      )}\n      <SavedItemsModalWizard\n        items={list}\n        isOpenModal={showSavedItemsModal}\n        onClose={() => setShowSavedItemsModal(false)}\n      />\n    </>\n  );\n};\nexport default CreateMode;\n","import { useFormContext } from 'react-hook-form';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport S from './styles';\nimport InvoiceSummaryTable from '../InvoiceTableSummary/InvoiceTableSummary';\nimport EditMode from './EditMode';\nimport PreviewMode from './PreviewMode';\nimport { useInvoiceItemsWizard } from '../../hooks/useInvoiceItemsWizard';\n\nimport CreateMode from './CreateMode';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\n\ntype InvoiceItemsActionTableProps = {};\n\nconst InvoiceItemsWizard: React.FC<InvoiceItemsActionTableProps> = () => {\n  const { watch } = useFormContext<InvoiceFormValues>();\n  const {\n    fields,\n    addNewItem,\n    cancelItemEditing,\n    deleteItem,\n    editItem,\n    editedIndex,\n    hideNewItemForm,\n    mode,\n    saveItem,\n    showNewItemForm,\n  } = useInvoiceItemsWizard();\n  const { isMobile } = useBreakpoints();\n\n  const [currency, lineItems, defaultTaxRate, defaultTaxName] = watch([\n    'currency',\n    'lineItems',\n    'defaultTaxRate',\n    'defaultTaxName',\n  ]);\n\n  return (\n    <>\n      <S.Table>\n        <S.TableBody>\n          {fields.map((field, index) =>\n            mode === 'edit' && editedIndex === index ? (\n              <EditMode\n                key={field.id}\n                index={index}\n                data={field}\n                onCancel={cancelItemEditing}\n                onDelete={deleteItem}\n                onSave={saveItem}\n                currency={currency}\n              />\n            ) : (\n              <PreviewMode\n                key={field.id}\n                index={index}\n                data={field}\n                onEdit={editItem}\n                onDelete={deleteItem}\n                currency={currency}\n              />\n            ),\n          )}\n        </S.TableBody>\n      </S.Table>\n\n      {(mode === 'create' || !fields.length) && (\n        <CreateMode\n          onAdd={addNewItem}\n          onCancel={hideNewItemForm}\n          onShowNewItemForm={showNewItemForm}\n        />\n      )}\n\n      {!!fields.length && (\n        <>\n          <Stack\n            padding=\"12px 0 0 0\"\n            align=\"start\"\n            justify=\"space-between\"\n            fullWidth\n            vertical={isMobile}\n            gap={isMobile ? 16 : 0}\n          >\n            <Stack fullWidth>\n              <Button\n                size=\"small\"\n                neutral\n                onClick={() => showNewItemForm()}\n                disabled={mode === 'create'}\n                leftIcon={\n                  <Icon\n                    name=\"add_m\"\n                    size={24}\n                    color=\"--text-button-brand-primary-default\"\n                  />\n                }\n              >\n                <TSpan\n                  font=\"button-m\"\n                  colorToken=\"--text-button-brand-primary-default\"\n                >\n                  Add New Item\n                </TSpan>\n              </Button>\n            </Stack>\n\n            <InvoiceSummaryTable\n              lineItems={lineItems}\n              defaultTaxRate={defaultTaxRate}\n              defaultTaxName={defaultTaxName}\n              currency={currency}\n            />\n          </Stack>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default InvoiceItemsWizard;\n","import { Controller, useFormContext } from 'react-hook-form';\nimport { TextField } from '@/components/TextField';\nimport { Stack } from '@/layout';\n\nimport { SelectField } from '@/components/SelectField';\nimport { getErrorProps, numberTransformer } from '@/utils/forms';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport { LateFeeOption } from '../../types';\n\ntype InvoiceLateFeeFieldProps = {\n  disabled?: boolean;\n};\n\nconst InvoiceLateFeeField: React.FC<InvoiceLateFeeFieldProps> = ({\n  disabled,\n}) => {\n  const { control, setValue, watch } = useFormContext<InvoiceFormValues>();\n  const { isTablet } = useBreakpoints();\n\n  return (\n    <Stack gap={8} vertical={isTablet}>\n      <Controller\n        control={control}\n        name=\"lateFeeType\"\n        render={({ field }) => (\n          <SelectField\n            inputSize=\"small\"\n            onChange={(option) => {\n              field.onChange(option.value);\n\n              setValue('lateFeeValue', undefined, {\n                shouldValidate: option.value === LateFeeOption.NO_LATE_FEE,\n              });\n            }}\n            value={field.value}\n            disabled={disabled}\n            options={InvoiceUtils.lateFeeOptions}\n            usePortal\n            renderContainerFromBottom\n          />\n        )}\n      />\n\n      {watch('lateFeeType') !== LateFeeOption.NO_LATE_FEE && (\n        <Controller\n          control={control}\n          name=\"lateFeeValue\"\n          render={({ field, fieldState }) => (\n            <TextField\n              inputSize=\"small\"\n              label={\n                watch('lateFeeType') === LateFeeOption.FIXED_AMOUNT\n                  ? 'Fixed Fee'\n                  : 'Late Fee in %'\n              }\n              numberOnly\n              {...numberTransformer.fieldProps(field)}\n              {...getErrorProps(fieldState)}\n            />\n          )}\n        />\n      )}\n    </Stack>\n  );\n};\n\nexport default InvoiceLateFeeField;\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nconst Container = styled(Stack)<{ isUploaded?: boolean }>`\n  border: ${(props) =>\n    props.isUploaded\n      ? ' 1px solid var(--border-card-neutral-highlighted)'\n      : 'none'};\n  width: 100%;\n  border-radius: 8px;\n  padding: ${(props) => (props.isUploaded ? '16px' : '0')};\n`;\n\nconst ImagePreview = styled.img`\n  width: 100%;\n  height: 100%;\n  max-width: 160px;\n  max-height: 56px;\n  object-fit: contain;\n`;\n\nconst SpinnerContainer = styled.div`\n  padding: 16px;\n  position: relative;\n`;\n\nexport default {\n  ImagePreview,\n  Container,\n  SpinnerContainer,\n};\n","import { useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { UploadMedia } from '@/features/upload/components';\nimport { imageTypes } from '@/constants/fileTypes';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport { bytesToMegabytes } from '@/screens/Chamber/components/modals/FileUploadModal/utils';\nimport { Spinner } from '@/components/Spinner';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport S from './styles';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\n\ntype InvoiceLogoUploadProps = {};\n\nconst InvoiceLogoUpload: React.FC<InvoiceLogoUploadProps> = () => {\n  const {\n    setValue,\n    control,\n    formState: { isSubmitting },\n    watch,\n  } = useFormContext<InvoiceFormValues>();\n\n  const [uploadError, setUploadError] = useState(false);\n\n  const [mediaDetail, setMediaDetail] = useState({\n    name: '',\n    type: '',\n    size: 0,\n    extension: '',\n  });\n\n  const handleSetMediaDetails = (e: File) => {\n    setMediaDetail({\n      name: e.name,\n      type: e.type,\n      size: e.size,\n      extension: e.name.substring(e.name.lastIndexOf('.') + 1),\n    });\n  };\n\n  const handleClearMedia = () => {\n    setValue('logo', '', { shouldDirty: true });\n    setUploadError(false);\n    setMediaDetail({ name: '', type: '', size: 0, extension: '' });\n  };\n\n  const hasValue = !!mediaDetail.name || !!watch('logo');\n\n  return (\n    <S.Container isUploaded={hasValue && !uploadError}>\n      <Controller\n        control={control}\n        name=\"logo\"\n        defaultValue={undefined}\n        render={({ field: { value } }) => (\n          <>\n            <UploadMedia\n              onUploading={() => {}}\n              acceptedFileTypes={imageTypes}\n              maxSize={1}\n              setMediaDetail={handleSetMediaDetails}\n              onContentChange={(url) => {\n                setValue('logo', url, {\n                  shouldDirty: true,\n                });\n              }}\n              onError={(error) => {\n                if (mediaDetail.name && error) {\n                  setMediaDetail({\n                    name: '',\n                    type: '',\n                    size: 0,\n                    extension: '',\n                  });\n                }\n                setUploadError(error);\n              }}\n              isHidden={hasValue && !uploadError}\n              error={uploadError}\n              marginTop={0}\n              keepOriginalName\n            />\n            {!uploadError && hasValue ? (\n              <Stack fullWidth gap={16} align=\"center\">\n                {value ? (\n                  <S.ImagePreview src={value ?? ''} alt=\"\" />\n                ) : (\n                  <S.SpinnerContainer>\n                    <Spinner />\n                  </S.SpinnerContainer>\n                )}\n                <Stack vertical fullWidth>\n                  <TSpan\n                    font=\"body-m\"\n                    colorToken=\"--text-card-header-neutral-highlighted\"\n                  >\n                    {mediaDetail?.name}\n                  </TSpan>\n                  <TSpan colorToken=\"--text-card-neutral-default\">\n                    {bytesToMegabytes(mediaDetail?.size)} MB\n                  </TSpan>\n                </Stack>\n                <Button\n                  size=\"small\"\n                  tertiary\n                  disabled={(!!mediaDetail?.name && !value) || isSubmitting}\n                  icon={\n                    <Icon\n                      name=\"delete_m\"\n                      size={20}\n                      color=\"--button-card-neutral-default\"\n                    />\n                  }\n                  onClick={handleClearMedia}\n                  neutral\n                />\n              </Stack>\n            ) : null}\n          </>\n        )}\n      />\n    </S.Container>\n  );\n};\n\nexport default InvoiceLogoUpload;\n","import styled from 'styled-components';\nimport { TSpan } from '@/components/Typography';\nimport { TextField } from '@/components/TextField';\n\nconst InvoiceNumberLabel = styled(TSpan)`\n  white-space: nowrap;\n`;\n\nconst TextFieldInput = styled(TextField).attrs({\n  style: {\n    backgroundColor: 'var(--bg-card-neutral-alt-default)',\n    border: '1px solid var(--border-card-neutral-highlighted)',\n  },\n})``;\n\nconst SpinnerContainer = styled.div`\n  padding-right: 8px;\n`;\n\nexport default {\n  InvoiceNumberLabel,\n  TextFieldInput,\n  SpinnerContainer,\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { usePrevious } from '@/hooks/previous';\nimport {\n  useGetInvoiceSequenceQuery,\n  useValidateInvoiceSequenceQuery,\n} from '@/apollo/graphql';\nimport { type InvoiceFormValues } from '@/features/invoices/hooks/useInvoiceForm';\nimport useDebounce from '@/hooks/useDebounce';\n\ntype UseInvoiceNumberOptions = {\n  disabled?: boolean;\n};\n\nexport function useInvoiceNumber({ disabled }: UseInvoiceNumberOptions) {\n  const { setValue, watch, setError, clearErrors, resetField } =\n    useFormContext<InvoiceFormValues>();\n\n  const [invoiceId, noumId, currentNumber] = watch([\n    'id',\n    'noumId',\n    'invoiceNumber',\n  ]);\n\n  const prevNoumId = usePrevious(noumId);\n\n  const [\n    noumChangedAfterLastInvoiceNumberChange,\n    setNoumChangedAfterLastInvoiceNumberChange,\n  ] = useState(false);\n\n  useEffect(() => {\n    if (prevNoumId && noumId && prevNoumId !== noumId) {\n      setNoumChangedAfterLastInvoiceNumberChange(true);\n    }\n  }, [noumId, prevNoumId]);\n\n  const { data, refetch, loading } = useGetInvoiceSequenceQuery({\n    variables: {\n      noumId,\n    },\n    onCompleted(res) {\n      const number = String(res.getInvoiceSequence.sequence ?? '');\n      if (!currentNumber || noumChangedAfterLastInvoiceNumberChange) {\n        setValue('invoiceNumber', number);\n        setNoumChangedAfterLastInvoiceNumberChange(false);\n      }\n    },\n    skip: !noumId || disabled,\n    fetchPolicy: 'network-only',\n  });\n\n  const debouncedInvoiceNumber = useDebounce(currentNumber, 1000);\n\n  const { loading: validationLoading } = useValidateInvoiceSequenceQuery({\n    fetchPolicy: 'network-only',\n    onCompleted(query) {\n      const validationData = query?.validateInvoiceSequence;\n\n      if (!validationData?.success && validationData?.message) {\n        setError('invoiceNumber', {\n          message: validationData.message,\n          type: 'pattern',\n        });\n      } else {\n        clearErrors('invoiceNumber');\n      }\n    },\n    variables: {\n      noumId,\n      sequence: debouncedInvoiceNumber || '',\n      invoiceId: invoiceId || '',\n    },\n    skip: !debouncedInvoiceNumber || disabled,\n  });\n\n  const resetInvoiceNumber = useCallback(async () => {\n    const res = await refetch();\n    resetField('invoiceNumber');\n    setValue('invoiceNumber', String(res.data.getInvoiceSequence.sequence), {\n      shouldDirty: true,\n    });\n  }, [refetch, resetField, setValue]);\n\n  const suggestedSequenceNumber = String(\n    data?.getInvoiceSequence?.sequence ?? '',\n  );\n\n  return {\n    suggestedSequenceNumber,\n    refetch,\n    loading: loading || validationLoading,\n    resetInvoiceNumber,\n  };\n}\n","import { Controller, useFormContext } from 'react-hook-form';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\n\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Spinner } from '@/components/Spinner';\nimport InvoiceStatusBadge from '../InvoiceStatusBadge/InvoiceStatusBadge';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport S from './styles';\nimport { useInvoiceNumber } from './hooks/useInvoiceNumber';\n\ntype InvoiceNumberFieldProps = {\n  disabled?: boolean;\n};\n\nconst InvoiceNumberField: React.FC<InvoiceNumberFieldProps> = ({\n  disabled,\n}) => {\n  const {\n    control,\n    formState: { errors },\n    watch,\n  } = useFormContext<InvoiceFormValues>();\n\n  const { loading, resetInvoiceNumber, suggestedSequenceNumber } =\n    useInvoiceNumber({ disabled });\n\n  const { isTablet, isMobile } = useBreakpoints();\n  const hasError = !!errors.invoiceNumber && !loading;\n  const [currentNumber, status] = watch(['invoiceNumber', 'status']);\n\n  return (\n    <Stack\n      gap={16}\n      align=\"center\"\n      fullWidth\n      padding={hasError ? '0 0 16px 0' : '0'}\n    >\n      <S.InvoiceNumberLabel font={isMobile ? 'body-l-bold' : 'body-xl-bold'}>\n        Invoice No.\n      </S.InvoiceNumberLabel>\n\n      <Stack align=\"center\" gap={4}>\n        <Controller\n          control={control}\n          defaultValue=\"\"\n          name=\"invoiceNumber\"\n          render={({ field: { value, onChange }, fieldState: { error } }) => (\n            <S.TextFieldInput\n              value={value}\n              onChange={onChange}\n              disabled={disabled}\n              inputSize=\"small\"\n              error={hasError}\n              helperText={hasError ? error?.message : ''}\n              label={disabled && !value ? '—' : undefined}\n              helperTextAbsolute\n              maxLength={8}\n              onlyAlphanumeric\n              hideLengthHelperText\n              rightIcon={\n                loading ? (\n                  <S.SpinnerContainer>\n                    <Spinner />\n                  </S.SpinnerContainer>\n                ) : undefined\n              }\n            />\n          )}\n        />\n        {!loading && !disabled && currentNumber !== suggestedSequenceNumber && (\n          <Button\n            size=\"small\"\n            icon={<Icon name=\"revert_m\" size={24} />}\n            neutral\n            onClick={resetInvoiceNumber}\n            tooltipText=\"Reset invoice number to auto-generated\"\n            tooltipPosition={isTablet ? 'bottom-left' : 'bottom-right'}\n          />\n        )}\n      </Stack>\n      <InvoiceStatusBadge status={status} />\n    </Stack>\n  );\n};\n\nexport default InvoiceNumberField;\n","import { format } from 'date-fns';\nimport { isNumber, sumBy } from 'lodash';\nimport { type DeepPartialSkipArrayKey } from 'react-hook-form';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport {\n  type InvoiceLineItemInput,\n  type InvoicePdfInput,\n} from '@/apollo/generated/types';\nimport { type SelectedContact } from '@/features/noumContacts/types';\nimport { base64ToDataString } from '@/utils/base64ToBlob';\nimport { getCountryByCode } from '@/utils/country';\nimport { InvoiceFormMapper } from './invoiceFormMapper';\nimport { InvoiceUtils } from './invoice';\nimport { type InvoiceFormValues } from '../hooks/useInvoiceForm';\nimport { type InvoiceItemFormValues } from '../components/InvoiceItemForm/types';\n\nconst toBase64Data = (base64?: string | null | undefined) =>\n  base64 ? base64ToDataString(base64, 'application/pdf') : undefined;\n\nconst toInvoicePDFPreview = (\n  values: DeepPartialSkipArrayKey<InvoiceFormValues>,\n  buyer?: SelectedContact | null,\n  serviceProvider?: SelectedContact | null,\n): InvoicePdfInput => ({\n  receiver: {\n    address: buyer\n      ? [\n          buyer.apartmentNo || buyer.street\n            ? `${buyer.apartmentNo ?? ''} ${buyer.street ?? ''}`\n            : '',\n          buyer.city ?? '',\n          `${buyer.state}, ${buyer.zipCode}`,\n          getCountryByCode(buyer.country)?.name ?? '',\n        ]\n      : [],\n    email: null,\n    name: buyer?.name,\n  },\n  sender: {\n    address: serviceProvider\n      ? [\n          `${serviceProvider.apartmentNo} ${serviceProvider.street}`,\n          serviceProvider.city ?? '',\n          `${serviceProvider.state}, ${serviceProvider.zipCode}`,\n          getCountryByCode(serviceProvider.country)?.name ?? '',\n        ]\n      : [],\n    email: null,\n    name: serviceProvider?.name,\n  },\n  invoiceDetails: {\n    currency: values.currency,\n    due: values\n      ? format(\n          new Date(InvoiceFormMapper.serializeDueDate(values)!),\n          'dd MMM yyyy',\n        )\n      : '',\n    latefee: InvoiceUtils.getLateFeeText(\n      InvoiceFormMapper.mapFromLateFeeOption(values.lateFeeType),\n      values.lateFeeValue,\n      values.currency,\n    ),\n    date: values.issueDate ? format(values.issueDate, 'dd MMM yyyy') : '',\n    number: values.invoiceNumber,\n    terms: values.paymentTerms\n      ? InvoiceUtils.paymentTermsMap[values.paymentTerms]\n      : '',\n    title: '',\n  },\n  items: values.lineItems?.map((item) => ({\n    amount: convertToCurrency(\n      InvoiceUtils.getItemTotalValue(\n        item.quantity ?? 0,\n        item.unitPrice ?? 0,\n        item.taxRate,\n      ),\n      values.currency,\n    ),\n    description: item.description,\n    price: convertToCurrency(item.unitPrice || 0, values.currency),\n    quantity: String(item.quantity),\n    tax: isNumber(item.taxRate) ? `${item.taxRate}%` : '',\n  })),\n  summary: {\n    subTotal: convertToCurrency(\n      sumBy(values.lineItems, (item) =>\n        InvoiceUtils.getItemSubtotalValue(\n          item.quantity ?? 0,\n          item.unitPrice ?? 0,\n        ),\n      ),\n      values.currency,\n    ),\n    taxes: InvoiceUtils.getTaxItems(\n      (values.lineItems as InvoiceLineItemInput[]) || [],\n    )?.map((item) => ({\n      title: `${item.taxName} (${item.taxRate || 0}%)`,\n      value: convertToCurrency(item.taxSum ?? 0, values.currency),\n    })),\n    total: convertToCurrency(\n      InvoiceUtils.getAllItemsTotalValue(\n        values.lineItems as InvoiceItemFormValues[],\n      ),\n      values.currency,\n    ),\n  },\n  footer: {\n    text: values.notes,\n  },\n  logo: values.logo\n    ? {\n        image: values.logo,\n      }\n    : undefined,\n  subject: values.summary,\n  title: 'Invoice',\n});\n\nexport const InvoicePreviewUtils = {\n  toBase64Data,\n  toInvoicePDFPreview,\n};\n","import { type DeepPartialSkipArrayKey } from 'react-hook-form';\nimport { useEffect, useMemo } from 'react';\nimport { isEmpty, isEqual, xorWith } from 'lodash';\nimport { useInvoicePdfPreviewLazyQuery } from '@/apollo/graphql';\nimport { usePrevious } from '@/hooks/previous';\nimport useDebounce from '@/hooks/useDebounce';\nimport { type InvoiceFormValues } from './useInvoiceForm';\nimport { useInvoiceContext } from './useInvoiceContext';\nimport { InvoicePreviewUtils } from '../utils/preview';\n\ntype UseInvoicePreviewOptions = {\n  values?: DeepPartialSkipArrayKey<InvoiceFormValues>;\n  disabled?: boolean;\n};\n\nconst isArrayEqual = (x: unknown[], y: unknown[]) =>\n  isEmpty(xorWith(x, y, isEqual));\n\nfunction useInvoicePDFPreview({ values, disabled }: UseInvoicePreviewOptions) {\n  const { selectedBuyer, selectedServiceProvider } = useInvoiceContext();\n\n  const debouncedValues = useDebounce(values, 4000);\n  const prevValues = usePrevious(debouncedValues);\n\n  const shouldUpdatePreview = useMemo(() => {\n    const { lineItems = [], ...valuesDataWithoutArrays } =\n      debouncedValues ?? {};\n\n    const { lineItems: prevLineItems = [], ...prevDataWithoutArrays } =\n      prevValues ?? {};\n\n    return (\n      !isEqual(valuesDataWithoutArrays, prevDataWithoutArrays) ||\n      !isArrayEqual(lineItems, prevLineItems)\n    );\n  }, [prevValues, debouncedValues]);\n\n  const [fetchInvoicePreview, { data, loading }] =\n    useInvoicePdfPreviewLazyQuery();\n\n  useEffect(() => {\n    if (\n      (shouldUpdatePreview || !data?.invoicePDFPreview) &&\n      !loading &&\n      !disabled &&\n      !!values?.noumId\n    ) {\n      fetchInvoicePreview({\n        variables: {\n          data: InvoicePreviewUtils.toInvoicePDFPreview(\n            values,\n            selectedBuyer,\n            selectedServiceProvider,\n          ),\n        },\n      });\n    }\n  }, [\n    data?.invoicePDFPreview,\n    disabled,\n    fetchInvoicePreview,\n    selectedBuyer,\n    loading,\n    selectedServiceProvider,\n    shouldUpdatePreview,\n    values,\n  ]);\n\n  const base64 = InvoicePreviewUtils.toBase64Data(\n    data?.invoicePDFPreview.base64,\n  );\n  const prev = usePrevious(base64);\n\n  return { data: base64 || prev, loading };\n}\n\nexport default useInvoicePDFPreview;\n","import styled from 'styled-components';\nimport { PdfPreviewThumbnail } from '@/components/PdfPreviewThumbnail';\n\nconst InvoicePdfPreview = styled(PdfPreviewThumbnail)<{ $isEmpty?: boolean }>`\n  width: 100%;\n  height: 100%;\n  min-width: ${({ $isEmpty }) => ($isEmpty ? '540px' : 'auto')};\n`;\n\nexport default {\n  InvoicePdfPreview,\n};\n","import { useFormContext, useWatch } from 'react-hook-form';\nimport { useInvoiceContext } from '../../hooks/useInvoiceContext';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport useInvoicePDFPreview from '../../hooks/useInvoicePDFPreview';\nimport S from './styles';\n\nconst InvoicePreview = () => {\n  const { setShowInvoicePreview } = useInvoiceContext();\n  const { control } = useFormContext<InvoiceFormValues>();\n\n  const values = useWatch({ control });\n  const { data, loading } = useInvoicePDFPreview({ values });\n\n  return (\n    <S.InvoicePdfPreview\n      data={data}\n      fitBy=\"height\"\n      isLoading={loading}\n      $isEmpty={!data}\n      onClick={() => setShowInvoicePreview(true)}\n    />\n  );\n};\n\nexport default InvoicePreview;\n","import styled from 'styled-components';\nimport FormSection from '../FormSection/FormSection';\n\nconst FormSectionStyled = styled(FormSection).attrs({\n  headerStyle: {\n    minHeight: 40,\n  },\n})``;\n\nexport default {\n  FormSectionStyled,\n};\n","import { useEffect, useState } from 'react';\nimport {\n  Controller,\n  type FieldPath,\n  useFormContext,\n  useWatch,\n} from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { TextArea } from '@/components/TextArea';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport S from './styles';\n\ntype InvoiceTextAreaFormFieldProps = {\n  name: FieldPath<Pick<InvoiceFormValues, 'notes' | 'summary'>>;\n  title: string;\n  disabled?: boolean;\n};\n\nconst InvoiceTextAreaFormField: React.FC<InvoiceTextAreaFormFieldProps> = ({\n  name,\n  title,\n  disabled,\n  children,\n}) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const { control, setValue, watch } = useFormContext<InvoiceFormValues>();\n  const fieldValue = useWatch({ control, name });\n\n  useEffect(() => {\n    if (fieldValue) {\n      setIsExpanded(true);\n    }\n  }, [name, fieldValue, watch]);\n\n  return (\n    <Stack vertical fullWidth gap={16}>\n      <S.FormSectionStyled\n        title={title}\n        optional\n        fullSize\n        rightIcon={\n          isExpanded ? (\n            <Button\n              neutral\n              primary\n              size=\"small\"\n              onClick={() => {\n                setValue(name, '', {\n                  shouldDirty: true,\n                });\n                setIsExpanded(false);\n              }}\n              leftIcon={\n                <Icon\n                  name=\"close_m\"\n                  size={24}\n                  color=\"--text-button-brand-primary-default\"\n                />\n              }\n            >\n              Remove\n            </Button>\n          ) : null\n        }\n      >\n        <Stack vertical gap={16} fullWidth align=\"stretch\">\n          {children}\n          <Stack fullWidth vertical>\n            {isExpanded ? (\n              <Controller\n                control={control}\n                name={name}\n                render={({ field: { value, onChange } }) => (\n                  <TextArea\n                    label=\"Your additional information\"\n                    value={value ?? ''}\n                    onChange={onChange}\n                    maxLength={200}\n                    disabled={disabled}\n                  />\n                )}\n              />\n            ) : (\n              <Button\n                neutral\n                primary\n                size=\"small\"\n                onClick={() => setIsExpanded(true)}\n                disabled={disabled}\n                leftIcon={\n                  <Icon\n                    name=\"edit_m\"\n                    size={24}\n                    color=\"--text-button-brand-primary-default\"\n                  />\n                }\n              >\n                <TSpan\n                  font=\"button-m\"\n                  colorToken=\"--text-button-brand-primary-default\"\n                >\n                  Edit {title}\n                </TSpan>\n              </Button>\n            )}\n          </Stack>\n        </Stack>\n      </S.FormSectionStyled>\n    </Stack>\n  );\n};\n\nexport default InvoiceTextAreaFormField;\n","import { devices, mediaSizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\nimport styled from 'styled-components';\n\nconst PageCard = styled(Stack).attrs({\n  vertical: true,\n})`\n  width: 100%;\n  padding: 48px 24px 0;\n  gap: 24px;\n\n  @media ${devices.TABLET} {\n    gap: 40px;\n  }\n`;\n\nconst Separator = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: var(--bg-separator-neutral-default);\n`;\n\nconst LeftContainer = styled(Stack)`\n  width: 50%;\n  height: 100%;\n  background: var(--bg-body-neutral-alt-default);\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    width: 100%;\n  }\n`;\n\nconst PreviewContainer = styled(Stack)`\n  width: 50%;\n  background-color: var(--bg-card-neutral-default);\n  padding: 40px;\n  justify-content: center;\n`;\n\nconst PreviewStickyContainer = styled(Stack)`\n  max-width: 100%;\n\n  @media ${devices.TABLET} {\n    top: 115px;\n    position: fixed;\n    height: calc(100vh - 165px); // 100vh minus header and paddings\n  }\n`;\n\nconst FormContent = styled(Stack).attrs({\n  vertical: true,\n})`\n  gap: 40px;\n  max-width: 580px;\n  margin: 0 auto;\n  padding: 40px 24px;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    max-width: 100%;\n    width: 100%;\n  }\n`;\n\nconst Container = styled(Stack)`\n  width: 100%;\n  align-items: stretch;\n`;\n\nexport default {\n  PageCard,\n  Separator,\n  PreviewContainer,\n  LeftContainer,\n  PreviewStickyContainer,\n  Container,\n  FormContent,\n};\n","import { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport { type Maybe } from '@/common/types';\nimport { ApiEntityPickerFieldWithLocalSearch } from '@/components/ApiEntityPickerField';\nimport { DatePicker } from '@/components/DatePicker';\nimport { Infobox } from '@/components/Infobox';\nimport { SelectField } from '@/components/SelectField';\nimport { TSpan } from '@/components/Typography';\nimport { ProjectNoumSelector } from '@/features/contracts/components/ProjectNoumSelector/ProjectNoumSelector';\nimport { ContactSelector } from '@/features/noumContacts/components/ContactSelector';\nimport { mapNoumContactToSearchableNoumContact } from '@/features/noumContacts/utils/contactMapper';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport { subDays } from 'date-fns';\nimport { useRef } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport useCurrentUserContact from '../../hooks/useCurrentUserContact';\nimport { useInvoiceContext } from '../../hooks/useInvoiceContext';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport { DueDateOption } from '../../types';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport FormSection from '../FormSection/FormSection';\nimport InvoiceItemsWizard from '../InvoiceItemsWizard/InvoiceItemsWizard';\nimport InvoiceLateFeeField from '../InvoiceLateFeeField/InvoiceLateFeeField';\nimport InvoiceLogoUpload from '../InvoiceLogoUpload/InvoiceLogoUpload';\nimport InvoiceNumberField from '../InvoiceNumberField/InvoiceNumberField';\nimport InvoicePreview from '../InvoicePreview/InvoicePreview';\nimport InvoiceTextAreaFormField from '../InvoiceTextAreaFormField/InvoiceTextAreaFormField';\nimport S from './styles';\n\ntype InvoiceFormProps = {\n  predefinedNoumId?: string;\n  invoice: Maybe<InvoiceOutputFragment>;\n};\n\nconst InvoiceForm: React.FC<InvoiceFormProps> = ({\n  predefinedNoumId,\n  invoice,\n}) => {\n  const { control, watch, getValues, setValue } =\n    useFormContext<InvoiceFormValues>();\n  const { isTablet, isDesktop } = useBreakpoints();\n  const today = useRef(new Date());\n\n  const [noumId, invoiceStatus, serviceProviderId, dueDate] = watch([\n    'noumId',\n    'status',\n    'serviceProviderId',\n    'dueDate',\n  ]);\n\n  const { setSelectedBuyer, setSelectedServiceProvider } = useInvoiceContext();\n  const currentUserContact = useCurrentUserContact();\n\n  return (\n    <S.Container>\n      <S.LeftContainer>\n        <S.FormContent>\n          <Stack vertical gap={16} fullWidth>\n            <FormSection\n              fullSize\n              title=\"Noum Assignment\"\n              sectionSeparator={false}\n            >\n              <Controller\n                control={control}\n                name=\"noumId\"\n                render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                  <ProjectNoumSelector\n                    label={fieldProps.value ? '' : 'Find a Noum...'}\n                    inputSize=\"small\"\n                    preselectedItem={invoice?.noumId}\n                    {...fieldProps}\n                    disabled={\n                      !!predefinedNoumId ||\n                      !InvoiceUtils.canEditField(invoiceStatus, 'noumId')\n                    }\n                    onChange={(newValue) => {\n                      fieldProps.onChange(newValue);\n\n                      if (getValues('buyerId')) {\n                        setValue('buyerId', '', {\n                          shouldValidate: true,\n                          shouldDirty: true,\n                          shouldTouch: true,\n                        });\n                      }\n                    }}\n                    {...getErrorProps(fieldState)}\n                  />\n                )}\n              />\n            </FormSection>\n            <Stack\n              gap={isTablet ? 16 : 24}\n              align=\"start\"\n              vertical={isTablet}\n              fullWidth\n            >\n              <InvoiceNumberField\n                disabled={\n                  !noumId ||\n                  !InvoiceUtils.canEditField(invoiceStatus, 'invoiceNumber')\n                }\n              />\n              <Stack fullWidth={!isDesktop}>\n                <Controller\n                  control={control}\n                  name=\"issueDate\"\n                  render={({\n                    field: { value, onChange },\n                    fieldState: { error },\n                  }) => (\n                    <DatePicker\n                      required\n                      fullSize\n                      placement=\"bottom-end\"\n                      dateFormat=\"MMM dd, yyyy\"\n                      size=\"small\"\n                      showIcon\n                      minDate={subDays(today.current, 1)}\n                      value={value ? new Date(value) : undefined}\n                      onChange={onChange}\n                      label=\"Invoice Issue Date\"\n                      error={!!error?.message}\n                      disabled={{\n                        before: today.current,\n                      }}\n                    />\n                  )}\n                />\n              </Stack>\n            </Stack>\n          </Stack>\n\n          <S.Separator />\n\n          <FormSection title=\"Recipient\" fullSize>\n            <Controller\n              control={control}\n              name=\"buyerId\"\n              render={({ field: { value, onChange }, fieldState }) => (\n                <>\n                  <ContactSelector\n                    noumId={noumId}\n                    inputSize=\"small\"\n                    excludedIds={[serviceProviderId]}\n                    label=\"Find or Add a Buyer...\"\n                    value={value}\n                    excludeCurrentUser\n                    preselectedContact={mapNoumContactToSearchableNoumContact(\n                      invoice?.invoiceTo,\n                    )}\n                    disabled={\n                      !InvoiceUtils.canEditField(invoiceStatus, 'buyerId')\n                    }\n                    onChange={(selected, item) => {\n                      setSelectedBuyer(item);\n                      onChange(selected);\n                    }}\n                    usePortal\n                    renderContainerFromBottom\n                    onContactInfoValidation={(isValid) => {\n                      setValue('buyerDetailsComplete', isValid, {\n                        shouldDirty: true,\n                        shouldValidate: true,\n                      });\n                    }}\n                    {...getErrorProps(fieldState)}\n                  />\n                </>\n              )}\n            />\n          </FormSection>\n\n          <S.Separator />\n\n          <FormSection title=\"Service Provider\" fullSize>\n            <Controller\n              control={control}\n              name=\"serviceProviderId\"\n              render={({ field: { onChange, value }, fieldState }) => (\n                <ContactSelector\n                  noumId={noumId!}\n                  inputSize=\"small\"\n                  addContactDisabled\n                  label=\"Find or add a Service Provider...\"\n                  preselectedContact={\n                    mapNoumContactToSearchableNoumContact(\n                      invoice?.invoiceFrom,\n                    ) ??\n                    mapNoumContactToSearchableNoumContact(currentUserContact)\n                  }\n                  value={value}\n                  disabled={\n                    !InvoiceUtils.canEditField(\n                      invoiceStatus,\n                      'serviceProviderId',\n                    )\n                  }\n                  onChange={(selected, item) => {\n                    setSelectedServiceProvider(item);\n                    onChange(selected);\n                  }}\n                  clearButtonDisabled\n                  usePortal\n                  renderContainerFromBottom\n                  onContactInfoValidation={(isValid) => {\n                    setValue('serviceProviderDetailsComplete', isValid, {\n                      shouldDirty: true,\n                      shouldValidate: true,\n                    });\n                  }}\n                  {...getErrorProps(fieldState)}\n                />\n              )}\n            />\n          </FormSection>\n\n          <S.Separator />\n\n          <FormSection fullSize sectionSeparator={false}>\n            <InvoiceTextAreaFormField\n              disabled={!InvoiceUtils.canEditField(invoiceStatus, 'summary')}\n              name=\"summary\"\n              title=\"Attention\"\n            />\n          </FormSection>\n\n          <S.Separator />\n\n          <FormSection title=\"Items\" fullSize>\n            <InvoiceItemsWizard />\n          </FormSection>\n\n          <S.Separator />\n\n          <Stack fullWidth vertical gap={16}>\n            <FormSection fullSize title=\"Payment\" sectionSeparator={false}>\n              <TSpan font=\"body-m-bold\">Currency</TSpan>\n              <Controller\n                control={control}\n                name=\"currency\"\n                render={({ field: { value, onChange } }) => (\n                  <ApiEntityPickerFieldWithLocalSearch\n                    inputSize=\"small\"\n                    hideIcons\n                    hideLeftIconPlace\n                    maxContainerHeight=\"250px\"\n                    disabled={\n                      !InvoiceUtils.canEditField(invoiceStatus, 'currency')\n                    }\n                    onChange={(option) => onChange(option?.value)}\n                    inputValue={\n                      InvoiceUtils.getCurrencyByCode(value)?.label as string\n                    }\n                    value={value}\n                    leftIcon={<></>}\n                    usePortal\n                    renderContainerFromBottom\n                    rightIcon={<></>}\n                    options={InvoiceUtils.currencyOptions}\n                  />\n                )}\n              />\n            </FormSection>\n\n            <FormSection\n              fullSize\n              title=\"Due Date\"\n              font=\"body-m-bold\"\n              sectionSeparator={false}\n            >\n              <Stack gap={8} vertical={isTablet}>\n                <Controller\n                  control={control}\n                  name=\"dueDate\"\n                  render={({ field: { value, onChange } }) => (\n                    <SelectField\n                      inputSize=\"small\"\n                      onChange={(option) => {\n                        if (option.value === DueDateOption.CUSTOM_DATE) {\n                          setValue('customDueDate', new Date(), {\n                            shouldDirty: true,\n                            shouldValidate: true,\n                          });\n                        } else {\n                          setValue('customDueDate', undefined);\n                        }\n                        onChange(option.value);\n                      }}\n                      value={value}\n                      disabled={\n                        !InvoiceUtils.canEditField(invoiceStatus, 'dueDate')\n                      }\n                      options={InvoiceUtils.dueDateOptions}\n                      usePortal\n                      renderContainerFromBottom\n                    />\n                  )}\n                />\n                {dueDate === DueDateOption.CUSTOM_DATE && (\n                  <Controller\n                    control={control}\n                    name=\"customDueDate\"\n                    render={({\n                      field: { value, onChange },\n                      fieldState: { error },\n                    }) => (\n                      <DatePicker\n                        required\n                        fullSize\n                        placement=\"bottom-end\"\n                        dateFormat=\"MMM dd, yyyy\"\n                        size=\"small\"\n                        showIcon\n                        value={value ? new Date(value) : undefined}\n                        onChange={onChange}\n                        label=\"Due date\"\n                        error={!!error?.message}\n                        minDate={subDays(today.current, 1)}\n                        disabled={{\n                          before: today.current,\n                        }}\n                      />\n                    )}\n                  />\n                )}\n              </Stack>\n            </FormSection>\n\n            <FormSection\n              title=\"Payment Terms\"\n              font=\"body-m-bold\"\n              sectionSeparator={false}\n              fullSize\n            >\n              <Controller\n                control={control}\n                name=\"paymentTerms\"\n                render={({ field: { value, onChange } }) => (\n                  <SelectField\n                    inputSize=\"small\"\n                    onChange={(option) => onChange(option.value)}\n                    value={value}\n                    disabled={\n                      !InvoiceUtils.canEditField(invoiceStatus, 'paymentTerms')\n                    }\n                    options={InvoiceUtils.paymentTermsOptions}\n                    usePortal\n                    renderContainerFromBottom\n                  />\n                )}\n              />\n            </FormSection>\n\n            <FormSection\n              fullSize\n              font=\"body-m-bold\"\n              title=\"Late Fee\"\n              sectionSeparator={false}\n            >\n              <InvoiceLateFeeField\n                disabled={\n                  !InvoiceUtils.canEditField(invoiceStatus, 'lateFeeType')\n                }\n              />\n            </FormSection>\n          </Stack>\n\n          <S.Separator />\n\n          <FormSection title=\"Upload your own logo\" optional fullSize>\n            <InvoiceLogoUpload />\n          </FormSection>\n\n          <S.Separator />\n\n          <InvoiceTextAreaFormField\n            disabled={!InvoiceUtils.canEditField(invoiceStatus, 'notes')}\n            name=\"notes\"\n            title=\"Notes\"\n          >\n            <Infobox type=\"tertiary\">\n              You may provide important information such as: bank account\n              details, VAT number, or other relevant information\n            </Infobox>\n          </InvoiceTextAreaFormField>\n\n          <S.Separator />\n        </S.FormContent>\n\n        {/* Hidden until backend support it */}\n        {/* <S.PageCard>\n          <FormSection\n            title=\"Statement of Work\"\n            optional\n            fullSize\n            titleSeparator\n            sectionSeparator={false}\n          >\n            <StatementOfWorkPicker />\n          </FormSection>\n        </S.PageCard> */}\n      </S.LeftContainer>\n\n      {isDesktop && (\n        <S.PreviewContainer>\n          <S.PreviewStickyContainer>\n            <InvoicePreview />\n          </S.PreviewStickyContainer>\n        </S.PreviewContainer>\n      )}\n    </S.Container>\n  );\n};\n\nexport default InvoiceForm;\n","import { useCallback, useState } from 'react';\n\nfunction useLoadingCallback<Args extends unknown[], Returns extends unknown>(\n  callback?: (...args: Args) => Promise<Returns>,\n) {\n  const [loading, setLoading] = useState(false);\n\n  const wrappedCallback = useCallback(\n    async (...args: Args): Promise<Returns | void> => {\n      setLoading(true);\n      try {\n        return await callback?.(...args);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [callback],\n  );\n\n  return [wrappedCallback, loading] as const;\n}\n\nexport default useLoadingCallback;\n","import { type ComponentProps, useEffect, useState } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { useNavigate } from 'react-router';\nimport { Button } from '@/components/Button';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { Icon } from '@/components/Icon';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport EllipsisMenu from '@/screens/Chambers/EllipsisMenu';\nimport routes from '@/constants/routes';\nimport { useError } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport useLoadingCallback from '@/hooks/useLoadingCallback';\nimport { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport DeleteDraftModal from '../DeleteDraftModal/DeleteDraftModal';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\n\ntype ModalType = 'deleteDraft';\n\ntype InvoiceFormDraftHeaderProps = Pick<\n  ComponentProps<typeof StickyFormHeader>,\n  'title' | 'hasUnsavedChanges' | 'onGoBack' | 'badgeText' | 'isFullScreenMode'\n> & {\n  onSave?(): Promise<void>;\n  onDelete(): Promise<void>;\n  onSend?(): Promise<void>;\n  onDuplicate?(): void;\n  isValid?: boolean;\n  draftId?: string;\n  invoice?: InvoiceOutputFragment | null;\n};\n\nconst InvoiceFormDraftHeader = ({\n  onSave,\n  onDelete,\n  isValid,\n  draftId,\n  onSend,\n  invoice,\n  onDuplicate,\n  ...formHeaderProps\n}: InvoiceFormDraftHeaderProps) => {\n  const { isMobile } = useBreakpoints();\n  const { control } = useFormContext<InvoiceFormValues>();\n  const formValues = useWatch({ control });\n  const [updatedAt, setUpdatedAt] = useState<string>();\n  const navigate = useNavigate();\n  const { logError } = useError();\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n  const [handleSaveDraft, isLoadingSave] = useLoadingCallback(onSave);\n  const [handleSend, isLoadingSend] = useLoadingCallback(onSend);\n  const invoiceUtils = useInvoicePermissions();\n\n  useEffect(() => {\n    setUpdatedAt(new Date().toISOString());\n  }, [formValues]);\n\n  const handleDelete = async () => {\n    try {\n      await onDelete();\n\n      navigate({\n        pathname: routes.INVOICE_MANAGER,\n      });\n    } catch {\n      logError(\n        new Error('Unable to delete an invoice draft. Please try again later.'),\n        'onDeleteDraft',\n      );\n    }\n  };\n\n  const DeleteDraftButton = (\n    <Button\n      size=\"small\"\n      intent=\"negative\"\n      secondary\n      disabled={!draftId}\n      leftIcon={<Icon name=\"delete_m\" size={16} />}\n      onClick={() => openModal('deleteDraft')}\n    >\n      Delete draft\n    </Button>\n  );\n\n  const DuplicateInvoiceButton = (\n    <Button\n      size=\"small\"\n      tertiary\n      disabled={!draftId || !invoiceUtils.canDuplicate(invoice)}\n      leftIcon={<Icon name=\"copy_m\" size={16} />}\n      onClick={onDuplicate}\n    >\n      Duplicate\n    </Button>\n  );\n\n  const SaveDraftButton = (\n    <Button\n      size=\"small\"\n      secondary\n      loading={isLoadingSave}\n      disabled={!formHeaderProps.hasUnsavedChanges && !!draftId}\n      onClick={handleSaveDraft}\n    >\n      Save draft\n    </Button>\n  );\n\n  const ReviewAndSendButton = (\n    <Button\n      size=\"small\"\n      intent=\"positive\"\n      softDisabled={!isValid}\n      disabled={!draftId}\n      loading={isLoadingSend}\n      onClick={handleSend}\n    >\n      Review & Send\n    </Button>\n  );\n\n  const DraftButtons = !isMobile ? (\n    <>\n      {DuplicateInvoiceButton}\n      {DeleteDraftButton}\n      {SaveDraftButton}\n      {ReviewAndSendButton}\n    </>\n  ) : (\n    <>\n      {ReviewAndSendButton}\n      <EllipsisMenu\n        containerWidth=\"125px\"\n        neutral\n        onClick={() => {}}\n        menuOptions={[\n          {\n            key: 'save-draft',\n            label: 'Save draft',\n            type: 'value',\n            value: 'save-draft',\n            disabled: !formHeaderProps.hasUnsavedChanges,\n            onClick: onSave,\n          },\n          {\n            key: 'delete-draft',\n            label: 'Delete draft',\n            type: 'value',\n            value: 'delete-draft',\n            intent: 'danger',\n            disabled: !draftId,\n            onClick: () => openModal('deleteDraft'),\n          },\n        ]}\n        iconColorToken=\"--button-card-neutral-default\"\n      />\n    </>\n  );\n\n  return (\n    <>\n      <StickyFormHeader\n        {...formHeaderProps}\n        updatedAt={updatedAt}\n        buttons={DraftButtons}\n      />\n      <DeleteDraftModal\n        isOpenModal={modalType === 'deleteDraft'}\n        onConfirm={handleDelete}\n        onClose={() => closeModal()}\n      />\n    </>\n  );\n};\n\nexport default InvoiceFormDraftHeader;\n","import React from 'react';\nimport { Modal } from '@/components/ExtendedModal/Modal';\nimport { Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\n\ntype DeleteDraftModalProps = {\n  isOpenModal: boolean;\n  amount: number;\n  currency: AllCurrencyEnum;\n  customerName: string;\n  loading: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n};\nconst UpdateInvoiceModal: React.FC<DeleteDraftModalProps> = ({\n  isOpenModal,\n  amount,\n  currency,\n  customerName,\n  loading,\n  onClose,\n  onConfirm,\n}) => (\n  <Modal\n    isFullScreen={false}\n    open={isOpenModal}\n    testId=\"update_invoice_modal\"\n    onClose={onClose}\n    disableBackdropClick\n  >\n    <Stack\n      gap={16}\n      padding={14}\n      vertical\n      maxWidth={327}\n      align=\"center\"\n      justify=\"center\"\n    >\n      <TSpan\n        font=\"heading-s-bold\"\n        colorToken=\"--text-modal-header-neutral-default\"\n      >\n        Update Invoice\n      </TSpan>\n      <TSpan\n        data-testid=\"confirm_text\"\n        font=\"body-l\"\n        textAlign=\"center\"\n        colorToken=\"--text-modal-neutral-default\"\n      >\n        Do you want to update the invoice for{' '}\n        {convertToCurrency(amount, currency)} to {customerName}?\n      </TSpan>\n\n      <Stack vertical gap={16} fullWidth padding=\"12px 0 0\">\n        <Button\n          primary\n          size=\"full\"\n          testId=\"confirm_btn\"\n          grow\n          onClick={onConfirm}\n          loading={loading}\n        >\n          Update Invoice\n        </Button>\n        <Button tertiary onClick={onClose} size=\"full\" testId=\"cancel_btn\">\n          Continue Editing\n        </Button>\n      </Stack>\n    </Stack>\n  </Modal>\n);\n\nexport default UpdateInvoiceModal;\n","import { Button } from '@/components/Button';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { Icon } from '@/components/Icon';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport useLoadingCallback from '@/hooks/useLoadingCallback';\nimport { useEffect, useState, type ComponentProps } from 'react';\nimport { useFormContext, useWatch } from 'react-hook-form';\nimport { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport { useInvoiceContext } from '../../hooks/useInvoiceContext';\nimport { type InvoiceFormValues } from '../../hooks/useInvoiceForm';\nimport { InvoiceUtils } from '../../utils/invoice';\nimport UpdateInvoiceModal from '../UpdateInvoiceModal/UpdateInvoiceModal';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\n\ntype ModalType = 'updateInvoice';\ntype InvoiceFormEditHeaderProps = Pick<\n  ComponentProps<typeof StickyFormHeader>,\n  'title' | 'hasUnsavedChanges' | 'onGoBack' | 'badgeText' | 'isFullScreenMode'\n> & {\n  onSave?(): Promise<void>;\n  onSend?(): Promise<void>;\n  onDuplicate?(): void;\n  isValid?: boolean;\n  values: InvoiceFormValues;\n  isDraft?: boolean;\n  invoice?: InvoiceOutputFragment | null;\n};\n\nconst InvoiceFormEditHeader = ({\n  onSave,\n  isValid,\n  onSend,\n  onDuplicate,\n  invoice,\n  values,\n  isDraft,\n  hasUnsavedChanges,\n  ...formHeaderProps\n}: InvoiceFormEditHeaderProps) => {\n  const { control } = useFormContext<InvoiceFormValues>();\n  const formValues = useWatch({ control });\n  const [updatedAt, setUpdatedAt] = useState<string>();\n  const [handleSaveDraft, isLoading] = useLoadingCallback(onSave);\n  const [handleSend, isSendLoading] = useLoadingCallback(onSend);\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n  const { selectedBuyer } = useInvoiceContext();\n  const invoiceUtils = useInvoicePermissions();\n\n  useEffect(() => {\n    setUpdatedAt(new Date().toISOString());\n  }, [formValues]);\n\n  const handleSaveChanges = async () => {\n    if (isDraft) {\n      handleSaveDraft();\n    } else {\n      openModal('updateInvoice');\n    }\n  };\n\n  const DuplicateInvoiceButton =\n    invoice && invoiceUtils.canDuplicate(invoice) ? (\n      <Button\n        size=\"small\"\n        tertiary\n        leftIcon={<Icon name=\"copy_m\" size={16} />}\n        onClick={onDuplicate}\n      >\n        Duplicate\n      </Button>\n    ) : null;\n\n  const SaveAndResendButton = (\n    <Button\n      size=\"small\"\n      softDisabled={!isValid}\n      disabled={!hasUnsavedChanges}\n      onClick={handleSaveChanges}\n      loading={isLoading}\n      primary\n    >\n      Save & Resend\n    </Button>\n  );\n\n  const OtherButtons = (\n    <>\n      {DuplicateInvoiceButton}\n      {SaveAndResendButton}\n    </>\n  );\n\n  const DraftButtons = (\n    <>\n      {DuplicateInvoiceButton}\n      <Button\n        size=\"small\"\n        disabled={!hasUnsavedChanges}\n        onClick={handleSaveChanges}\n        loading={isLoading}\n        primary\n      >\n        Save Changes\n      </Button>\n      <Button\n        size=\"small\"\n        softDisabled={!isValid}\n        onClick={handleSend}\n        loading={isSendLoading}\n        intent=\"positive\"\n        primary\n      >\n        Review & Send\n      </Button>\n    </>\n  );\n\n  const totalAmount = InvoiceUtils.getAllItemsTotalValue(values.lineItems);\n\n  return (\n    <>\n      <StickyFormHeader\n        {...formHeaderProps}\n        updatedAt={updatedAt}\n        buttons={isDraft ? DraftButtons : OtherButtons}\n      />\n\n      <UpdateInvoiceModal\n        isOpenModal={modalType === 'updateInvoice'}\n        onConfirm={async () => {\n          await handleSaveDraft();\n          closeModal();\n        }}\n        loading={isLoading}\n        onClose={closeModal}\n        amount={totalAmount}\n        currency={values.currency}\n        customerName={selectedBuyer?.name ?? ''}\n      />\n    </>\n  );\n};\n\nexport default InvoiceFormEditHeader;\n","import { type DeepPartialSkipArrayKey } from 'react-hook-form';\nimport { useInvoiceContext } from '@/features/invoices/hooks/useInvoiceContext';\nimport { type InvoiceFormValues } from '@/features/invoices/hooks/useInvoiceForm';\nimport { DocViewer } from '@/components/LightBox/DocViewer';\nimport { useInvoicePdfPreviewQuery } from '@/apollo/graphql';\nimport { InvoicePreviewUtils } from '@/features/invoices/utils/preview';\nimport useInvoicePdfDownload from '@/features/invoices/hooks/useInvoicePdfDownload';\n\ntype InvoicePreviewModalProps = {\n  values?: DeepPartialSkipArrayKey<InvoiceFormValues>;\n};\n\nconst InvoicePreviewModal: React.FC<InvoicePreviewModalProps> = ({\n  values,\n}) => {\n  const {\n    shouldShowInvoicePreview,\n    setShowInvoicePreview,\n    selectedServiceProvider,\n    selectedBuyer,\n  } = useInvoiceContext();\n\n  const { data } = useInvoicePdfPreviewQuery({\n    variables: {\n      data:\n        values && shouldShowInvoicePreview\n          ? InvoicePreviewUtils.toInvoicePDFPreview(\n              values,\n              selectedBuyer,\n              selectedServiceProvider,\n            )\n          : undefined,\n    },\n    skip: !shouldShowInvoicePreview || !values,\n  });\n\n  const { download } = useInvoicePdfDownload();\n\n  const handleDownload = () => {\n    if (values?.id && values.invoiceNumber) {\n      download(values.id, values.invoiceNumber);\n    }\n  };\n\n  const base64Data = InvoicePreviewUtils.toBase64Data(\n    data?.invoicePDFPreview.base64,\n  );\n\n  return base64Data && shouldShowInvoicePreview ? (\n    <DocViewer\n      isOpen={shouldShowInvoicePreview}\n      handleClose={() => setShowInvoicePreview(false)}\n      handleDownload={values?.id ? handleDownload : undefined}\n      setDocError={() => {}}\n      url={base64Data || ''}\n    />\n  ) : null;\n};\n\nexport default InvoicePreviewModal;\n","import { generatePath, useNavigate } from 'react-router';\nimport { useCallback, useEffect, useState } from 'react';\nimport { InvoiceFormMapper } from '@/features/invoices/utils/invoiceFormMapper';\nimport { InvoiceUtils } from '@/features/invoices/utils/invoice';\nimport { useInvoiceForm } from '@/features/invoices/hooks/useInvoiceForm';\nimport routes from '@/constants/routes';\nimport useInvoice from '@/features/invoices/hooks/useInvoice';\nimport { type InvoiceOutput } from '@/apollo/generated/types';\nimport { useInvoiceContext } from '@/features/invoices/hooks/useInvoiceContext';\nimport { mapToSelectedContact } from '@/features/noumContacts/components/ContactSelector/mapper';\nimport useCurrentUserContact from '@/features/invoices/hooks/useCurrentUserContact';\nimport { useToast } from '@/hooks';\nimport { useSearchParams } from 'react-router-dom';\n\ntype UseInvoiceCreateScreenOptions = {\n  id?: string;\n  noumId?: string;\n};\n\nexport default function useInvoiceCreateScreen({\n  id,\n  noumId,\n}: UseInvoiceCreateScreenOptions) {\n  const navigate = useNavigate();\n  const [isLoading, setIsLoading] = useState(!!id);\n  const { setSelectedBuyer, setSelectedServiceProvider } = useInvoiceContext();\n  const currentUserContact = useCurrentUserContact();\n  const { addErrorToast, addSuccessIconToast } = useToast();\n  const [searchParams] = useSearchParams();\n  const isDuplicated = Boolean(searchParams.get('duplicate')) ?? false;\n\n  const form = useInvoiceForm({\n    defaultValues: InvoiceFormMapper.getDefaultValues({\n      id,\n      noumId,\n    }),\n  });\n\n  const serviceProviderId = form.watch('serviceProviderId');\n\n  useEffect(() => {\n    if (currentUserContact && !serviceProviderId) {\n      form.setValue('serviceProviderId', currentUserContact._id);\n      setSelectedServiceProvider(mapToSelectedContact(currentUserContact));\n    }\n  }, [currentUserContact, form, serviceProviderId, setSelectedServiceProvider]);\n\n  const onDraftCreated = useCallback(\n    (data: InvoiceOutput) => {\n      if (data.id) {\n        navigate(\n          {\n            pathname: generatePath(routes.INVOICE_EDIT, { id: data.id }),\n            search: `?draft=true`,\n          },\n          {\n            replace: true,\n          },\n        );\n      }\n    },\n    [navigate],\n  );\n\n  const { saveDraft, deleteInvoice, duplicateInvoice, invoiceId, invoice } =\n    useInvoice({\n      invoiceId: id,\n      onCreated: onDraftCreated,\n      onLoad: (data) => {\n        if (!InvoiceUtils.isInvoiceEditable(data?.status)) {\n          navigate(routes.INVOICE_MANAGER);\n        }\n        if (data) {\n          form.reset(InvoiceFormMapper.fromInvoice(data));\n\n          setSelectedServiceProvider(\n            data.invoiceFrom ? mapToSelectedContact(data.invoiceFrom) : null,\n          );\n          setSelectedBuyer(\n            data.invoiceTo ? mapToSelectedContact(data.invoiceTo) : null,\n          );\n\n          if (isDuplicated && !!data.duplicatedFromInvoiceId) {\n            addSuccessIconToast('Your invoice has been duplicated.');\n          }\n\n          setIsLoading(false);\n        }\n      },\n    });\n\n  const handleDuplicate = useCallback(async () => {\n    try {\n      const duplicated = await duplicateInvoice();\n      if (duplicated?.id) {\n        window.open(\n          InvoiceUtils.createInvoicePath.duplicateInvoice(duplicated.id),\n          '_blank',\n        );\n      }\n    } catch {\n      addErrorToast('Failed to duplicate invoice');\n    }\n  }, [addErrorToast, duplicateInvoice]);\n\n  return {\n    form,\n    isLoading,\n    invoiceId,\n    invoice,\n    duplicateInvoice,\n    saveDraft,\n    deleteInvoice,\n    handleDuplicate,\n  };\n}\n","import { generatePath, useNavigate, useParams } from 'react-router';\nimport { useSearchParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { InvoiceStatusEnum } from '@/apollo/generated/types';\nimport routes from '@/constants/routes';\nimport { type InvoiceCreateScreenParams } from './types';\n\nexport const useRestrictInvoiceCreateRouteAccess = ({\n  status,\n}: {\n  status?: InvoiceStatusEnum | null;\n}) => {\n  const navigate = useNavigate();\n  const { id } = useParams<InvoiceCreateScreenParams>();\n  const [searchParams] = useSearchParams();\n\n  useEffect(() => {\n    if (\n      id &&\n      status &&\n      status !== InvoiceStatusEnum.Draft &&\n      searchParams.get('draft')\n    ) {\n      navigate(generatePath(routes.INVOICE_EDIT, { id }), { replace: true });\n    }\n  }, [id, navigate, searchParams, status]);\n};\n","import { InvoiceStatusEnum } from '@/apollo/generated/types';\nimport SkeletonLoaderProvider from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { Spinner } from '@/components/Spinner';\nimport routes from '@/constants/routes';\nimport DuplicateInvoiceModal from '@/features/invoices/components/DuplicateInvoiceModal/DuplicateInvoiceModal';\nimport InvoiceForm from '@/features/invoices/components/InvoiceForm/InvoiceForm';\nimport InvoiceFormDraftHeader from '@/features/invoices/components/InvoiceFormHeaders/InvoiceFormDraftHeader';\nimport InvoiceFormEditHeader from '@/features/invoices/components/InvoiceFormHeaders/InvoiceFormEditHeader';\nimport InvoiceSecretNoumAlertModal from '@/features/invoices/components/InvoiceSecretNoumAlertModal/InvoiceSecretNoumAlertModal';\nimport { useInvoiceContext } from '@/features/invoices/hooks/useInvoiceContext';\nimport { type InvoiceFormValues } from '@/features/invoices/hooks/useInvoiceForm';\nimport useInvoicePermissions from '@/features/invoices/hooks/useInvoicePermissions';\nimport { InvoiceProvider } from '@/features/invoices/providers/InvoiceProvider';\nimport useContactNoumConnection from '@/features/noumContacts/hooks/contactNoumConnection';\nimport { useError, useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { FullScreenLayout } from '@/layout/FullScreenLayout';\nimport { UserUtil } from '@/utils/user';\nimport { useCallback } from 'react';\nimport { FormProvider, useWatch } from 'react-hook-form';\nimport { generatePath, useNavigate, useParams } from 'react-router';\nimport { useSearchParams } from 'react-router-dom';\nimport S from '../styles';\nimport InvoicePreviewModal from './InvoicePreviewModal';\nimport { type InvoiceCreateScreenParams } from './types';\nimport useInvoiceCreateScreen from './useInvoiceCreateScreen';\nimport { useRestrictInvoiceCreateRouteAccess } from './useRestrictInvoiceCreateRouteAccess';\n\ntype ModalTypes = 'secretNoumAlert' | 'duplicate-invoice';\n\nconst InvoiceCreateScreen = () => {\n  const navigate = useNavigate();\n\n  const { id } = useParams<InvoiceCreateScreenParams>();\n  const { logError } = useError();\n  const [searchParams] = useSearchParams();\n  const predefinedNoumId = searchParams.get('noumId') ?? id ?? undefined;\n  const editMode = !!id && !searchParams.get('draft');\n  const { addSuccessIconToast, addPrimaryIconToast, addToast } = useToast();\n  const { closeModal, openModal, modalType, contextData } = useModalManager<\n    ModalTypes,\n    boolean\n  >();\n  const { selectedBuyer } = useInvoiceContext();\n  const { isNoumOwner } = useInvoicePermissions();\n\n  const {\n    form,\n    isLoading,\n    saveDraft,\n    deleteInvoice,\n    handleDuplicate,\n    invoiceId,\n    invoice,\n  } = useInvoiceCreateScreen({\n    id,\n    noumId: predefinedNoumId,\n  });\n  const noumId = form.watch('noumId');\n  const formValues = useWatch({ control: form.control });\n\n  const [checkConnectionWithSecretNoum] = useContactNoumConnection();\n\n  useRestrictInvoiceCreateRouteAccess({ status: invoice?.status });\n  const { goBackToOrigin } = useNavigateWithOrigin();\n\n  const handleSaveDraft = useCallback(async () => {\n    const values = form.getValues();\n    if (!noumId) {\n      addPrimaryIconToast(\n        'Please assign the Noum first in order to save your draft.',\n      );\n      return;\n    }\n    try {\n      await saveDraft(values);\n\n      form.reset(undefined, {\n        keepValues: true,\n        keepIsValid: true,\n        keepErrors: true,\n        keepDirty: false,\n        keepDirtyValues: false,\n      });\n\n      if (editMode) {\n        addSuccessIconToast('Your invoice has been updated.');\n      } else {\n        addSuccessIconToast('Your draft has been saved.');\n      }\n    } catch {\n      const error = new Error(\n        'Unable to create a draft invoice. Please try again later.',\n      );\n      logError(error, 'InvoiceCreateScreen');\n    }\n  }, [\n    addPrimaryIconToast,\n    addSuccessIconToast,\n    editMode,\n    form,\n    logError,\n    noumId,\n    saveDraft,\n  ]);\n\n  const { handleSubmit } = form;\n\n  const submit = useCallback(\n    async (values: InvoiceFormValues) => {\n      try {\n        await saveDraft(values);\n        const { isConnected, isSecretNoum } =\n          await checkConnectionWithSecretNoum(values.noumId, values.buyerId);\n\n        if (isSecretNoum && !isConnected) {\n          openModal(\n            'secretNoumAlert',\n            UserUtil.isUnauthenticated(selectedBuyer),\n          );\n          return;\n        }\n\n        if (invoiceId) {\n          navigate(generatePath(routes.INVOICE_PREVIEW, { id: invoiceId }));\n        }\n      } catch (error) {\n        logError(\n          new Error(\n            'Unable to update an invoice draft. Please try again later.',\n          ),\n          'updateDraft',\n        );\n      }\n    },\n    [\n      saveDraft,\n      checkConnectionWithSecretNoum,\n      invoiceId,\n      openModal,\n      selectedBuyer,\n      navigate,\n      logError,\n    ],\n  );\n\n  const handleGoBack = () => {\n    goBackToOrigin({ fallbackUrl: routes.INVOICE_MANAGER });\n  };\n\n  const onSubmitError = () => {\n    addToast(\n      'error',\n      'icon',\n      'Please check all the required fields to continue.',\n    );\n  };\n\n  const duplicatedFromBadgeText =\n    invoice?.duplicatedFromInvoiceNumber && isNoumOwner(invoice)\n      ? `Duplicated from ${invoice.duplicatedFromInvoiceNumber}`\n      : null;\n\n  return (\n    <FullScreenLayout>\n      <S.Container>\n        <SkeletonLoaderProvider isLoading={false}>\n          <FormProvider {...form}>\n            {!invoice && isLoading ? (\n              <Spinner />\n            ) : (\n              <>\n                <S.FormHeaderContainer>\n                  {editMode ? (\n                    <InvoiceFormEditHeader\n                      title=\"Edit invoice\"\n                      onSave={handleSaveDraft}\n                      onSend={handleSubmit(submit, onSubmitError)}\n                      hasUnsavedChanges={form.formState.isDirty}\n                      isValid={form.formState.isValid}\n                      invoice={invoice}\n                      values={formValues as InvoiceFormValues}\n                      isDraft={invoice?.status === InvoiceStatusEnum.Draft}\n                      onGoBack={handleGoBack}\n                      onDuplicate={() => openModal('duplicate-invoice')}\n                      badgeText={duplicatedFromBadgeText}\n                      isFullScreenMode\n                    />\n                  ) : (\n                    <InvoiceFormDraftHeader\n                      title=\"New invoice\"\n                      draftId={invoiceId}\n                      onDelete={deleteInvoice}\n                      onSave={handleSaveDraft}\n                      invoice={invoice}\n                      onSend={handleSubmit(submit, onSubmitError)}\n                      hasUnsavedChanges={form.formState.isDirty}\n                      isValid={form.formState.isValid}\n                      onGoBack={handleGoBack}\n                      onDuplicate={() => openModal('duplicate-invoice')}\n                      badgeText={duplicatedFromBadgeText}\n                      isFullScreenMode\n                    />\n                  )}\n                </S.FormHeaderContainer>\n\n                <InvoiceForm\n                  key={predefinedNoumId}\n                  predefinedNoumId={predefinedNoumId}\n                  invoice={invoice}\n                />\n              </>\n            )}\n            <InvoicePreviewModal values={formValues} />\n            <InvoiceSecretNoumAlertModal\n              isOpenModal={modalType === 'secretNoumAlert'}\n              onClose={closeModal}\n              isUnauthenticated={!!contextData}\n            />\n            <DuplicateInvoiceModal\n              isOpenModal={modalType === 'duplicate-invoice'}\n              onClose={closeModal}\n              onConfirm={() => {\n                handleDuplicate();\n                closeModal();\n              }}\n            />\n          </FormProvider>\n        </SkeletonLoaderProvider>\n      </S.Container>\n    </FullScreenLayout>\n  );\n};\n\nexport default () => (\n  <InvoiceProvider>\n    <InvoiceCreateScreen />\n  </InvoiceProvider>\n);\n"],"names":["useCurrentUserContact","user","useAuth","data","useGetUserOwnedContactsQuery","variables","filter","userIds","_id","skip","getUserOwnedContacts","find","contact","userId","useInvoiceContext","context","useContext","InvoiceContext","Table","styled","table","TableBody","tbody","TableRow","tr","mediaSizes","MOBILE_L_MAX","TableCell","td","props","fitContents","TABLET_MAX","SummaryText","TSpan","ItemDetailsRowText","attrs","font","colorToken","ItemDetailsRow","Stack","fullWidth","justify","align","padding","SelectFieldWrapper","div","fullSize","S$7","FormTextField","name","label","control","numberOnly","withValidation","rest","jsx","Controller","field","fieldState","TextField","error","numberTransformer","fieldProps","value","onChange","getErrorProps","InvoiceItemFormModal","onSave","onCancel","totalValue","isValid","currency","jsxs","Modal","ModalHeader","ModalBody","getCurrencySymbol","convertToCurrency","ModalFooter","Button","Container","hasError","S$6","InvoiceItemForm","onDelete","values","mode","isTaxExpanded","setIsTaxExpanded","useState","isNumber","taxRate","watch","handleSubmit","formState","errors","resetField","useForm","defaultValues","resolver","yupResolver","reach","invoiceFormSchema","isMobile","useBreakpoints","Object","keys","length","handleSave","createAnother","item","taxName","undefined","quantity","unitPrice","InvoiceUtils","getItemTotalValue","S","FormSection","Number","isNaN","defaultValue","keepError","keepDirty","Icon","EditMode","index","handleDelete","DeleteLineItemModal","isOpenModal","onClose","onConfirm","tableItemContextMenuOptions","key","type","icon","intent","PreviewMode","onEdit","openModal","closeModal","modalType","useModalManager","handleClickContextMenu","description","EllipsisMenu","getItemTotalValueWithCurrency","Tag","useInvoiceItemsWizard","fields","addNewItem","addNewItemOriginal","cancelItemEditing","deleteItem","editItem","editedIndex","hideNewItemForm","saveItem","showNewItemForm","useFieldArrayWizard","apolloClient","useApolloClient","createInvoiceLineItemMutation","useCreateUserInvoiceLineItemMutation","onCompleted","refetchQueries","include","logError","useError","shouldSaveNewItem","input","taxLabel","EditModal","id","onSubmit","ModalSize","L","DeleteModal","ListItem","S$5","ListModal","items","map","formatAmount","toFixed","wizardStateReducer","state","action","editedId","SavedItemsModalWizard","dispatch","useReducer","editedItem","addPrimaryIconToast","addSuccessIconToast","useToast","updateItemMutation","useUpdateUserInvoiceLineItemMutation","deleteMutation","useDeleteUserInvoiceLineItemMutation","cancelAction","Error","ADD_ONE_TIME_ITEM","CREATE_SERVICE_OR_PRODUCT","CreateMode","onAdd","onShowNewItemForm","selectedOption","setSelectedOption","useFormContext","showSavedItemsModal","setShowSavedItemsModal","loading","useGetUserInvoiceLineItemListQuery","limit","offset","search","list","cleanList","getUserInvoiceLineItemList","lineItemsOptions","useMemo","stickyHeaderOptions","options","childLabels","rightIcon","SelectField","lineItems","option","foundItem","String","InvoiceItemsWizard","defaultTaxRate","defaultTaxName","Fragment","InvoiceSummaryTable","InvoiceLateFeeField","disabled","setValue","isTablet","shouldValidate","LateFeeOption","NO_LATE_FEE","lateFeeOptions","FIXED_AMOUNT","isUploaded","ImagePreview","img","SpinnerContainer","S$4","InvoiceLogoUpload","isSubmitting","uploadError","setUploadError","mediaDetail","setMediaDetail","size","extension","handleSetMediaDetails","e","substring","lastIndexOf","handleClearMedia","shouldDirty","hasValue","UploadMedia","imageTypes","url","Spinner","bytesToMegabytes","InvoiceNumberLabel","TextFieldInput","style","backgroundColor","border","S$3","useInvoiceNumber","setError","clearErrors","invoiceId","noumId","currentNumber","prevNoumId","usePrevious","noumChangedAfterLastInvoiceNumberChange","setNoumChangedAfterLastInvoiceNumberChange","useEffect","refetch","useGetInvoiceSequenceQuery","res","number","getInvoiceSequence","sequence","fetchPolicy","debouncedInvoiceNumber","useDebounce","validationLoading","useValidateInvoiceSequenceQuery","query","validationData","validateInvoiceSequence","success","message","resetInvoiceNumber","useCallback","suggestedSequenceNumber","InvoiceNumberField","invoiceNumber","status","InvoiceStatusBadge","toBase64Data","base64","base64ToDataString","toInvoicePDFPreview","buyer","serviceProvider","receiver","address","apartmentNo","street","city","zipCode","getCountryByCode","country","email","sender","invoiceDetails","due","format","Date","InvoiceFormMapper","serializeDueDate","latefee","getLateFeeText","mapFromLateFeeOption","lateFeeType","lateFeeValue","date","issueDate","terms","paymentTerms","paymentTermsMap","title","amount","price","tax","summary","subTotal","sumBy","getItemSubtotalValue","taxes","getTaxItems","taxSum","total","getAllItemsTotalValue","footer","text","notes","logo","image","subject","InvoicePreviewUtils","isArrayEqual","x","y","isEmpty","xorWith","isEqual","useInvoicePDFPreview","selectedBuyer","selectedServiceProvider","debouncedValues","prevValues","shouldUpdatePreview","valuesDataWithoutArrays","prevLineItems","prevDataWithoutArrays","fetchInvoicePreview","useInvoicePdfPreviewLazyQuery","invoicePDFPreview","prev","InvoicePdfPreview","PdfPreviewThumbnail","$isEmpty","S$2","InvoicePreview","setShowInvoicePreview","useWatch","FormSectionStyled","headerStyle","minHeight","S$1","InvoiceTextAreaFormField","children","isExpanded","setIsExpanded","fieldValue","TextArea","PageCard","vertical","devices","TABLET","Separator","LeftContainer","PreviewContainer","PreviewStickyContainer","FormContent","InvoiceForm","predefinedNoumId","invoice","getValues","isDesktop","today","useRef","invoiceStatus","serviceProviderId","dueDate","setSelectedBuyer","setSelectedServiceProvider","currentUserContact","ref","ProjectNoumSelector","canEditField","newValue","shouldTouch","DatePicker","subDays","current","before","ContactSelector","mapNoumContactToSearchableNoumContact","invoiceTo","selected","invoiceFrom","ApiEntityPickerFieldWithLocalSearch","getCurrencyByCode","currencyOptions","DueDateOption","CUSTOM_DATE","dueDateOptions","paymentTermsOptions","Infobox","useLoadingCallback","callback","setLoading","args","InvoiceFormDraftHeader","draftId","onSend","onDuplicate","formHeaderProps","formValues","updatedAt","setUpdatedAt","navigate","useNavigate","handleSaveDraft","isLoadingSave","handleSend","isLoadingSend","invoiceUtils","useInvoicePermissions","toISOString","pathname","routes","INVOICE_MANAGER","DeleteDraftButton","DuplicateInvoiceButton","canDuplicate","SaveDraftButton","hasUnsavedChanges","ReviewAndSendButton","DraftButtons","onClick","StickyFormHeader","DeleteDraftModal","UpdateInvoiceModal","customerName","InvoiceFormEditHeader","isDraft","isLoading","isSendLoading","handleSaveChanges","OtherButtons","totalAmount","InvoicePreviewModal","shouldShowInvoicePreview","useInvoicePdfPreviewQuery","download","useInvoicePdfDownload","handleDownload","base64Data","DocViewer","useInvoiceCreateScreen","setIsLoading","addErrorToast","searchParams","useSearchParams","isDuplicated","Boolean","get","form","useInvoiceForm","getDefaultValues","mapToSelectedContact","onDraftCreated","generatePath","INVOICE_EDIT","replace","saveDraft","deleteInvoice","duplicateInvoice","useInvoice","onCreated","onLoad","isInvoiceEditable","reset","fromInvoice","duplicatedFromInvoiceId","handleDuplicate","duplicated","window","open","createInvoicePath","useRestrictInvoiceCreateRouteAccess","useParams","InvoiceStatusEnum","Draft","InvoiceCreateScreen","editMode","addToast","contextData","isNoumOwner","checkConnectionWithSecretNoum","useContactNoumConnection","goBackToOrigin","useNavigateWithOrigin","keepValues","keepIsValid","keepErrors","keepDirtyValues","submit","isConnected","isSecretNoum","buyerId","UserUtil","isUnauthenticated","INVOICE_PREVIEW","handleGoBack","fallbackUrl","onSubmitError","duplicatedFromBadgeText","duplicatedFromInvoiceNumber","FullScreenLayout","SkeletonLoaderProvider","FormProvider","isDirty","`InvoiceCreateScreen-InvoiceForm-${predefinedNoumId}`","InvoiceSecretNoumAlertModal","DuplicateInvoiceModal","InvoiceCreateScreen$1","InvoiceProvider"],"mappings":"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"}