{"version":3,"file":"InvoicePreview-d7c3cebe.js","sources":["../../src/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewDraftHeader.tsx","../../src/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewHeader.tsx","../../src/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewIssuedHeader.tsx","../../src/features/invoices/components/InvoicePreviewHeaders/UnauthenticatedUserHeaderButtons.tsx","../../src/features/invoices/components/ReviewInvoiceConfirmatioModal/ReviewInvoiceConfirmatioModal.tsx","../../src/screens/InvoiceTool/InvoicePreviewScreen/useInvoicePreviewScreen.ts","../../src/screens/InvoiceTool/InvoicePreviewScreen/useRestrictInvoicePreviewRouteAccess.ts","../../src/screens/InvoiceTool/InvoicePreviewScreen/InvoicePreviewScreen.tsx"],"sourcesContent":["import { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { Icon } from '@/components/Icon';\nimport routes from '@/constants/routes';\nimport { useError } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport EllipsisMenu from '@/screens/Chambers/EllipsisMenu';\nimport { type ComponentProps } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport { useInvoiceForm } from '../../hooks/useInvoiceForm';\nimport { InvoiceFormMapper } from '../../utils/invoiceFormMapper';\nimport DeleteDraftModal from '../DeleteDraftModal/DeleteDraftModal';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\n\ntype FormHeaderProps = Pick<\n  ComponentProps<typeof StickyFormHeader>,\n  'title' | 'onGoBack'\n> & {\n  onDelete?(): Promise<void>;\n  onSubmit?(): void;\n  onDuplicate?(): void;\n  title: string;\n  invoice: InvoiceOutputFragment;\n};\n\ntype ModalType = 'deleteDraft';\n\nconst InvoicePreviewDraftHeader = ({\n  onDelete,\n  onSubmit,\n  onDuplicate,\n  invoice,\n  ...formHeaderProps\n}: FormHeaderProps) => {\n  const { isMobile } = useBreakpoints();\n  const navigate = useNavigate();\n  const { logError } = useError();\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n  const invoiceUtils = useInvoicePermissions();\n\n  const {\n    formState: { isValid },\n  } = useInvoiceForm({ defaultValues: InvoiceFormMapper.fromInvoice(invoice) });\n\n  const handleEdit = () => {\n    if (!invoice.id) {\n      return;\n    }\n    navigate(generatePath(routes.INVOICE_EDIT, { id: invoice.id }));\n  };\n\n  const handleDelete = async () => {\n    try {\n      await onDelete?.();\n\n      navigate({\n        pathname: routes.INVOICE_MANAGER,\n      });\n    } catch {\n      logError(\n        new Error('Unable to delete an invoice. Please try again later.'),\n        'onDelete',\n      );\n    }\n  };\n\n  const DraftButtons = !isMobile ? (\n    <>\n      {invoiceUtils.canDuplicate(invoice) && (\n        <Button\n          size=\"small\"\n          tertiary\n          leftIcon={<Icon name=\"copy_m\" size={16} />}\n          onClick={onDuplicate}\n        >\n          Duplicate\n        </Button>\n      )}\n      <Button\n        size=\"small\"\n        tertiary\n        onClick={handleEdit}\n        leftIcon={<Icon name=\"edit_m\" size={16} />}\n      >\n        Edit\n      </Button>\n      <Button\n        size=\"small\"\n        intent=\"negative\"\n        secondary\n        leftIcon={<Icon name=\"delete_m\" size={16} />}\n        onClick={() => openModal('deleteDraft')}\n      >\n        Delete\n      </Button>\n      <Button\n        size=\"small\"\n        tooltipText={\n          !isValid\n            ? 'Please note that you cannot send an incomplete invoice. To proceed, switch to Edit Mode and provide all required data.'\n            : ''\n        }\n        tooltipPosition=\"bottom-left\"\n        intent=\"positive\"\n        type=\"submit\"\n        disabled={!isValid}\n        onClick={onSubmit}\n      >\n        Confirm & Send\n      </Button>\n    </>\n  ) : (\n    <EllipsisMenu\n      containerWidth=\"125px\"\n      neutral\n      onClick={() => {}}\n      menuOptions={[\n        {\n          key: 'edit',\n          label: 'Edit',\n          type: 'value',\n          value: 'edit',\n          intent: 'default',\n          onClick: handleEdit,\n        },\n        {\n          key: 'delete',\n          label: 'Delete',\n          type: 'value',\n          value: 'delete',\n          intent: 'danger',\n          onClick: handleDelete,\n        },\n      ]}\n      iconColorToken=\"--button-card-neutral-default\"\n    />\n  );\n\n  return (\n    <>\n      <StickyFormHeader\n        {...formHeaderProps}\n        buttons={DraftButtons}\n        isFullScreenMode\n      />\n      <DeleteDraftModal\n        isOpenModal={modalType === 'deleteDraft'}\n        onConfirm={handleDelete}\n        onClose={() => closeModal()}\n      />\n    </>\n  );\n};\n\nexport default InvoicePreviewDraftHeader;\n","import { type InvoiceOutputFragment } from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { Icon } from '@/components/Icon';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport EllipsisMenu from '@/screens/Chambers/EllipsisMenu';\nimport { type ComponentProps } from 'react';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\n\ntype FormHeaderProps = Pick<\n  ComponentProps<typeof StickyFormHeader>,\n  'title' | 'onGoBack'\n> & {\n  onSubmit?(): void;\n  onDuplicate?(): void;\n  title: string;\n  invoice: InvoiceOutputFragment;\n};\n\nconst InvoicePreviewHeader = ({\n  onSubmit,\n  onDuplicate,\n  invoice,\n  ...formHeaderProps\n}: FormHeaderProps) => {\n  const { isMobile } = useBreakpoints();\n  const invoiceUtils = useInvoicePermissions();\n\n  const PreviewButtons = !isMobile ? (\n    <>\n      {invoiceUtils.canDuplicate(invoice) && (\n        <Button\n          size=\"small\"\n          tertiary\n          leftIcon={<Icon name=\"copy_m\" size={16} />}\n          onClick={onDuplicate}\n        >\n          Duplicate\n        </Button>\n      )}\n      <Button size=\"small\" intent=\"positive\" type=\"submit\" onClick={onSubmit}>\n        Confirm & Send\n      </Button>\n    </>\n  ) : (\n    <EllipsisMenu\n      containerWidth=\"125px\"\n      neutral\n      onClick={() => {}}\n      menuOptions={[\n        {\n          key: 'confirm',\n          label: 'Confirm & Send',\n          type: 'value',\n          value: 'confirm',\n          intent: 'default',\n          onClick: onSubmit,\n        },\n      ]}\n      iconColorToken=\"--button-card-neutral-default\"\n    />\n  );\n\n  return (\n    <StickyFormHeader\n      {...formHeaderProps}\n      buttons={PreviewButtons}\n      isFullScreenMode\n    />\n  );\n};\n\nexport default InvoicePreviewHeader;\n","import {\n  type InvoiceStatusEnum,\n  type InvoiceStatusEnumInput,\n} from '@/apollo/generated/types';\nimport {\n  GetInvoiceTimeLinesDocument,\n  useGetInvoiceAmountQuery,\n  type InvoiceOutputFragment,\n} from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { Icon } from '@/components/Icon';\nimport routes from '@/constants/routes';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { useApolloClient } from '@apollo/client';\nimport { delay } from 'lodash';\nimport { type ComponentProps } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport useInvoicePdfDownload from '../../hooks/useInvoicePdfDownload';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\nimport useInvoiceStatusChange from '../../hooks/useInvoiceStatusChange';\nimport ChangeInvoiceStatusModal from '../ChangeInvoiceStatusModal/ChangeInvoiceStatusModal';\nimport MakeInvoicePaymentWizard from '../MakeInvoicePaymentWizard/MakeInvoicePaymentWizard';\n\ntype ModalType = 'change-status' | 'make-payment';\n\ntype FormHeaderProps = Pick<\n  ComponentProps<typeof StickyFormHeader>,\n  'title' | 'onGoBack'\n> & {\n  onDelete?(): Promise<void>;\n  onSubmit?(): void;\n  onDuplicate?(): void;\n  onRefetchInvoice?(): void;\n  title: string;\n  invoice: InvoiceOutputFragment;\n  status?: InvoiceStatusEnum | null;\n};\n\nconst InvoicePreviewIssuedHeader = ({\n  onDelete,\n  onSubmit,\n  onDuplicate,\n  onRefetchInvoice,\n  invoice,\n  status,\n  ...formHeaderProps\n}: FormHeaderProps) => {\n  const apolloClient = useApolloClient();\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n\n  const invoiceUtils = useInvoicePermissions();\n  const { download, loading } = useInvoicePdfDownload();\n  const invoiceId = invoice.id ?? '';\n  const navigate = useNavigate();\n  const { changeStatus } = useInvoiceStatusChange();\n\n  const {\n    data: invoiceAmountData,\n    loading: invoiceAmountLoading,\n    refetch,\n  } = useGetInvoiceAmountQuery({\n    variables: {\n      invoiceId: invoice.id,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const handleStatusChange = async (\n    newStatus: InvoiceStatusEnumInput,\n    amount?: number,\n  ) => {\n    if (!invoice?.id) {\n      return;\n    }\n    closeModal();\n    await changeStatus({ invoice, status: newStatus, amount });\n\n    delay(() => {\n      apolloClient.refetchQueries({\n        include: [GetInvoiceTimeLinesDocument],\n        onQueryUpdated: (previousResult) => {\n          previousResult.refetch({\n            invoiceId: invoice.id,\n          });\n        },\n      });\n      onRefetchInvoice?.();\n    }, 500);\n  };\n\n  const remainingAmount =\n    invoiceAmountData?.getInvoiceAmount?.remainingAmount ?? 0;\n\n  const handleEdit = () => {\n    if (!invoiceId) {\n      return;\n    }\n    navigate(generatePath(routes.INVOICE_EDIT, { id: invoiceId }));\n  };\n\n  const onPaymentSuccess = async () => {\n    setTimeout(() => {\n      apolloClient.refetchQueries({ include: [GetInvoiceTimeLinesDocument] });\n      refetch();\n    }, 1500);\n  };\n\n  const Buttons = (\n    <>\n      {invoiceUtils.canDuplicate(invoice) ? (\n        <Button\n          size=\"small\"\n          tertiary\n          leftIcon={<Icon name=\"copy_m\" size={16} />}\n          onClick={onDuplicate}\n        >\n          Duplicate\n        </Button>\n      ) : null}\n      {invoiceUtils.canEdit(invoice) ? (\n        <Button\n          size=\"small\"\n          tertiary\n          leftIcon={<Icon name=\"edit_m\" size={16} />}\n          type=\"submit\"\n          onClick={handleEdit}\n        >\n          Edit\n        </Button>\n      ) : null}\n      {invoiceUtils.canDownload(invoice) ? (\n        <Button\n          size=\"small\"\n          leftIcon={<Icon name=\"download_m\" size={16} />}\n          tertiary\n          type=\"submit\"\n          loading={loading}\n          onClick={() => download(invoice.id, invoice.invoiceNumber ?? '')}\n        >\n          Download PDF\n        </Button>\n      ) : null}\n\n      {invoiceUtils.canChangeStatus(invoice) ? (\n        <Button\n          size=\"small\"\n          leftIcon={<Icon name=\"transfer_m\" size={16} />}\n          tertiary\n          type=\"submit\"\n          onClick={() => openModal('change-status')}\n        >\n          Change Status\n        </Button>\n      ) : null}\n      {invoiceUtils.canPay(invoice) ? (\n        <Button\n          size=\"small\"\n          leftIcon={<Icon name=\"lock_m\" size={16} />}\n          primary\n          loading={invoiceAmountLoading}\n          onClick={() => openModal('make-payment', invoice)}\n          disabled={remainingAmount <= 0}\n        >\n          {remainingAmount < (invoice.amount ?? 0) ? 'Pay missing ' : 'Pay '}\n          {convertToCurrency(remainingAmount, invoice.currency ?? undefined)}\n        </Button>\n      ) : null}\n    </>\n  );\n\n  return (\n    <>\n      <StickyFormHeader\n        {...formHeaderProps}\n        buttons={Buttons}\n        isFullScreenMode\n      />\n      <ChangeInvoiceStatusModal\n        isOpenModal={modalType === 'change-status'}\n        onCancel={closeModal}\n        onConfirm={handleStatusChange}\n        currentStatus={status ?? undefined}\n        key={modalType}\n        currency={invoice.currency ?? undefined}\n        invoiceId={invoice.id ?? ''}\n      />\n      {modalType === 'make-payment' && (\n        <MakeInvoicePaymentWizard\n          onClose={closeModal}\n          invoice={invoice}\n          onPaymentSuccess={onPaymentSuccess}\n        />\n      )}\n    </>\n  );\n};\n\nexport default InvoicePreviewIssuedHeader;\n","import { useApolloClient } from '@apollo/client';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport {\n  GetInvoiceByIdDocument,\n  GetInvoiceTimeLinesDocument,\n  type InvoiceOutputFragment,\n  useGetInvoiceAmountQuery,\n} from '@/apollo/graphql';\nimport convertToCurrency from '@/utils/currencyToCurrency';\nimport { Stack } from '@/layout';\nimport useInvoicePdfDownload from '../../hooks/useInvoicePdfDownload';\nimport useInvoicePermissions from '../../hooks/useInvoicePermissions';\nimport MakeInvoicePaymentWizard from '../MakeInvoicePaymentWizard/MakeInvoicePaymentWizard';\n\ntype ModalType = 'change-status' | 'make-payment';\n\ntype FormHeaderProps = {\n  invoice: InvoiceOutputFragment;\n};\n\nconst UnauthenticatedUserHeaderButtons = ({ invoice }: FormHeaderProps) => {\n  const apolloClient = useApolloClient();\n  const { openModal, closeModal, modalType } = useModalManager<ModalType>();\n  const invoiceUtils = useInvoicePermissions();\n  const { download, loading } = useInvoicePdfDownload();\n  const invoiceId = invoice.id ?? '';\n\n  const {\n    data: invoiceAmountData,\n    loading: invoiceAmountLoading,\n    refetch,\n  } = useGetInvoiceAmountQuery({\n    variables: {\n      invoiceId: invoice.id,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const remainingAmount =\n    invoiceAmountData?.getInvoiceAmount?.remainingAmount ?? 0;\n\n  const onPaymentSuccess = async () => {\n    apolloClient.refetchQueries({ include: [GetInvoiceTimeLinesDocument] });\n\n    // there is some delay in the backend to update the invoice status\n    setTimeout(() => {\n      refetch();\n\n      apolloClient.refetchQueries({\n        include: [GetInvoiceByIdDocument],\n        onQueryUpdated: (previousResult) => {\n          previousResult.refetch({\n            id: invoiceId,\n          });\n        },\n      });\n    }, 1000);\n  };\n\n  return (\n    <Stack gap={16}>\n      {invoiceUtils.canDownload(invoice) ? (\n        <Button\n          size=\"small\"\n          leftIcon={<Icon name=\"download_m\" size={16} />}\n          tertiary\n          type=\"submit\"\n          loading={loading}\n          onClick={() => download(invoice.id, invoice.invoiceNumber ?? '')}\n        >\n          Download PDF\n        </Button>\n      ) : null}\n\n      {invoiceUtils.canPay(invoice) ? (\n        <Button\n          size=\"small\"\n          leftIcon={<Icon name=\"lock_m\" size={16} />}\n          primary\n          loading={invoiceAmountLoading}\n          onClick={() => openModal('make-payment', invoice)}\n          disabled={remainingAmount <= 0}\n        >\n          {remainingAmount < (invoice.amount ?? 0) ? 'Pay missing ' : 'Pay '}\n          {convertToCurrency(remainingAmount, invoice.currency ?? undefined)}\n        </Button>\n      ) : null}\n\n      {modalType === 'make-payment' && (\n        <MakeInvoicePaymentWizard\n          onClose={closeModal}\n          invoice={invoice}\n          onPaymentSuccess={onPaymentSuccess}\n        />\n      )}\n    </Stack>\n  );\n};\n\nexport default UnauthenticatedUserHeaderButtons;\n","import React, { useState } from 'react';\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { Stack } from '@/layout';\nimport { type AllCurrencyEnum } from '@/apollo/generated/types';\nimport convertToCurrency from '@/utils/currencyToCurrency';\n\ntype ReviewInvoiceConfirmatioModalProps = {\n  isOpenModal: boolean;\n  amount: number;\n  currency: AllCurrencyEnum;\n  customerName: string;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n};\n\nconst ReviewInvoiceConfirmatioModal: React.FC<\n  ReviewInvoiceConfirmatioModalProps\n> = ({ isOpenModal, amount, currency, customerName, onConfirm, onCancel }) => {\n  const [isLoading, setLoading] = useState(false);\n\n  const handleConfirm = async () => {\n    setLoading(true);\n    await onConfirm();\n    setLoading(false);\n  };\n\n  return (\n    <Modal\n      isFullScreen={false}\n      open={isOpenModal}\n      testId=\"add_new_customer_modal\"\n      size={ModalSize.S}\n      isScrollableContent={false}\n    >\n      <ModalHeader>Review Invoice</ModalHeader>\n      <ModalBody gap={16} maxHeight={600}>\n        <TSpan\n          textAlign=\"center\"\n          font=\"body-l\"\n          colorToken=\"--text-modal-neutral-default\"\n        >\n          Do you confirm the issuance of an invoice for{' '}\n          <TSpan font=\"body-l-bold\">\n            {convertToCurrency(amount, currency, 2)}\n          </TSpan>{' '}\n          to <TSpan font=\"body-l-bold\">{customerName}</TSpan>?\n        </TSpan>\n        <TSpan\n          textAlign=\"center\"\n          font=\"body-l\"\n          colorToken=\"--text-modal-neutral-default\"\n        >\n          Invoices can’t be edited after they’ve been paid.\n        </TSpan>\n\n        <Stack vertical gap={16} fullWidth>\n          <Button\n            size=\"full\"\n            primary\n            onClick={handleConfirm}\n            loading={isLoading}\n          >\n            Confirm & Send to Customer\n          </Button>\n          <Button size=\"full\" tertiary onClick={onCancel}>\n            Continue Editing\n          </Button>\n        </Stack>\n      </ModalBody>\n    </Modal>\n  );\n};\n\nexport default ReviewInvoiceConfirmatioModal;\n","import useInvoice from '@/features/invoices/hooks/useInvoice';\nimport { InvoiceUtils } from '@/features/invoices/utils/invoice';\nimport { useToast } from '@/hooks';\nimport { useCallback } from 'react';\n\ntype UseInvoicePreviewScreenOptions = {\n  invoiceId?: string;\n};\nexport default function useInvoicePreviewScreen({\n  invoiceId,\n}: UseInvoicePreviewScreenOptions) {\n  const {\n    deleteInvoice,\n    sendInvoice,\n    duplicateInvoice,\n    refetchInvoice,\n    invoice,\n    loading,\n  } = useInvoice({\n    invoiceId,\n  });\n  const { addErrorToast } = useToast();\n\n  const handleDuplicate = useCallback(async () => {\n    try {\n      const duplicated = await duplicateInvoice();\n      if (duplicated?.id) {\n        window.open(\n          InvoiceUtils.createInvoicePath.duplicateInvoice(duplicated.id),\n          '_blank',\n        );\n      }\n    } catch {\n      addErrorToast('Failed to duplicate invoice');\n    }\n  }, [addErrorToast, duplicateInvoice]);\n\n  return {\n    invoice,\n    loading,\n    sendInvoice,\n    deleteInvoice,\n    handleDuplicate,\n    refetchInvoice,\n  };\n}\n","import {\n  generatePath,\n  useLocation,\n  useNavigate,\n  useParams,\n} from 'react-router';\nimport { useEffect } from 'react';\nimport { InvoiceStatusEnum } from '@/apollo/generated/types';\nimport routes from '@/constants/routes';\nimport { type InvoicePreviewScreenParams } from './types';\n\nexport const useRestrictInvoicePreviewRouteAccess = ({\n  status,\n}: {\n  status?: InvoiceStatusEnum | null;\n}) => {\n  const navigate = useNavigate();\n  const { id } = useParams<InvoicePreviewScreenParams>();\n  const location = useLocation();\n\n  useEffect(() => {\n    if (\n      id &&\n      status &&\n      status !== InvoiceStatusEnum.Draft &&\n      generatePath(routes.INVOICE_PREVIEW, { id }) === location.pathname\n    ) {\n      navigate(generatePath(routes.INVOICE_DETAILS, { id }), { replace: true });\n    }\n  }, [id, location.pathname, navigate, status]);\n};\n","import {\n  AllCurrencyEnum,\n  InvoiceStatusEnum,\n  type ProjectChamberType,\n} from '@/apollo/generated/types';\nimport { Header } from '@/components/Header';\nimport { UnauthenticatedHeader } from '@/layout/UnauthenticatedHeader';\nimport { Spinner } from '@/components/Spinner';\nimport routes from '@/constants/routes';\nimport { useAuth } from '@/features/auth/contexts';\nimport DuplicateInvoiceModal from '@/features/invoices/components/DuplicateInvoiceModal/DuplicateInvoiceModal';\nimport InvoicePreviewDraftHeader from '@/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewDraftHeader';\nimport InvoicePreviewHeader from '@/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewHeader';\nimport InvoicePreviewIssuedHeader from '@/features/invoices/components/InvoicePreviewHeaders/InvoicePreviewIssuedHeader';\nimport UnauthenticatedUserHeaderButtons from '@/features/invoices/components/InvoicePreviewHeaders/UnauthenticatedUserHeaderButtons';\nimport InvoiceSecretNoumAlertModal from '@/features/invoices/components/InvoiceSecretNoumAlertModal/InvoiceSecretNoumAlertModal';\nimport InvoiceDetailsSection from '@/features/invoices/components/InvoiceSummary/InvoiceDetailsSection';\nimport InvoiceSummary from '@/features/invoices/components/InvoiceSummary/InvoiceSummary';\nimport PlanDetails from '@/features/invoices/components/InvoiceSummary/PlanDetails';\nimport { InvoiceTimeline } from '@/features/invoices/components/InvoiceTimeline/InvoiceTimeline';\nimport ReviewInvoiceConfirmatioModal from '@/features/invoices/components/ReviewInvoiceConfirmatioModal/ReviewInvoiceConfirmatioModal';\nimport { InvoiceProvider } from '@/features/invoices/providers/InvoiceProvider';\nimport useContactNoumConnection from '@/features/noumContacts/hooks/contactNoumConnection';\nimport { useError, useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { Stack } from '@/layout';\nimport { FullScreenLayout } from '@/layout/FullScreenLayout';\nimport { ResponsiveMain } from '@/layout/SinglePageLayout';\nimport { UserUtil } from '@/utils/user';\nimport {\n  Navigate,\n  useLocation,\n  useNavigate,\n  useParams,\n} from 'react-router-dom';\nimport S from '../styles';\nimport { type InvoicePreviewScreenParams } from './types';\nimport useInvoicePreviewScreen from './useInvoicePreviewScreen';\nimport { useRestrictInvoicePreviewRouteAccess } from './useRestrictInvoicePreviewRouteAccess';\n\ntype ModalType = 'confirmation' | 'secretNoumAlert' | 'duplicate-invoice';\n\nconst InvoicePreviewScreen = () => {\n  const { id: invoiceId } = useParams<InvoicePreviewScreenParams>();\n  const location = useLocation();\n  const { logError } = useError();\n  const navigate = useNavigate();\n  const { openModal, closeModal, modalType, contextData } = useModalManager<\n    ModalType,\n    boolean\n  >();\n  const { addSuccessIconToast } = useToast();\n  const isViewMode = !location.pathname.includes('/preview');\n  const { isUnauthenticated } = useAuth();\n  const {\n    deleteInvoice,\n    invoice,\n    loading,\n    sendInvoice,\n    handleDuplicate,\n    refetchInvoice,\n  } = useInvoicePreviewScreen({\n    invoiceId,\n  });\n\n  useRestrictInvoicePreviewRouteAccess({ status: invoice?.status });\n\n  const [checkConnectionWithSecretNoum] = useContactNoumConnection();\n\n  const { goBackToOrigin } = useNavigateWithOrigin();\n\n  const submit = async () => {\n    const { isConnected, isSecretNoum } = await checkConnectionWithSecretNoum(\n      invoice?.noumId?._id ?? '',\n      invoice?.invoiceTo?._id ?? '',\n      invoice?.noumId?.projectType as ProjectChamberType,\n    );\n    if (isSecretNoum && !isConnected) {\n      openModal(\n        'secretNoumAlert',\n        UserUtil.isUnauthenticated(invoice?.invoiceTo?.userId),\n      );\n    } else {\n      openModal('confirmation');\n    }\n  };\n\n  const onConfirm = async () => {\n    try {\n      await sendInvoice();\n\n      addSuccessIconToast(\n        `Your invoice has been sent to ${invoice?.invoiceTo?.displayName}`,\n      );\n      navigate(routes.INVOICE_MANAGER);\n    } catch {\n      logError(\n        new Error('Unable to send an invoice. Please try again later.'),\n        'onConfirm',\n      );\n    }\n  };\n\n  const handleGoBack = () => {\n    goBackToOrigin({ fallbackUrl: routes.INVOICE_MANAGER });\n  };\n\n  if (!invoiceId || (!loading && !invoice)) {\n    return <Navigate replace to={routes.INVOICE_MANAGER} />;\n  }\n\n  return (\n    <FullScreenLayout>\n      <>\n        {!invoice && loading ? (\n          <Spinner />\n        ) : invoice ? (\n          <>\n            <S.FormHeaderContainer>\n              {isUnauthenticated ? (\n                <Header isBorderRadius={false}>\n                  <UnauthenticatedHeader\n                    title=\"Your Invoice\"\n                    rightElement={\n                      <UnauthenticatedUserHeaderButtons invoice={invoice} />\n                    }\n                  />\n                </Header>\n              ) : !isViewMode && invoice?.status === InvoiceStatusEnum.Draft ? (\n                <InvoicePreviewHeader\n                  title=\"Invoice Summary\"\n                  onSubmit={submit}\n                  onGoBack={handleGoBack}\n                  invoice={invoice}\n                  onDuplicate={() => openModal('duplicate-invoice')}\n                />\n              ) : isViewMode && invoice?.status === InvoiceStatusEnum.Draft ? (\n                <InvoicePreviewDraftHeader\n                  title=\"Invoice Summary\"\n                  onDelete={deleteInvoice}\n                  invoice={invoice}\n                  onSubmit={submit}\n                  onGoBack={handleGoBack}\n                  onDuplicate={() => openModal('duplicate-invoice')}\n                />\n              ) : (\n                <InvoicePreviewIssuedHeader\n                  title=\"Invoice Summary\"\n                  onDelete={deleteInvoice}\n                  invoice={invoice}\n                  onSubmit={submit}\n                  status={invoice?.status}\n                  onGoBack={handleGoBack}\n                  onRefetchInvoice={refetchInvoice}\n                  onDuplicate={() => openModal('duplicate-invoice')}\n                />\n              )}\n            </S.FormHeaderContainer>\n\n            <ResponsiveMain>\n              <S.Content gap={16} padding=\"16px 0\" oneColumn>\n                {invoice ? (\n                  <Stack vertical gap={16}>\n                    <PlanDetails invoice={invoice} />\n                    <InvoiceSummary invoice={invoice} />\n                    <InvoiceDetailsSection invoice={invoice} />\n                    <InvoiceTimeline invoice={invoice} />\n                  </Stack>\n                ) : null}\n              </S.Content>\n            </ResponsiveMain>\n          </>\n        ) : null}\n      </>\n      {invoice && (\n        <ReviewInvoiceConfirmatioModal\n          isOpenModal={modalType === 'confirmation'}\n          amount={invoice?.amount ?? 0}\n          currency={invoice?.currency ?? AllCurrencyEnum.Usd}\n          customerName={invoice.invoiceTo?.displayName || ''}\n          onConfirm={onConfirm}\n          onCancel={closeModal}\n        />\n      )}\n      <InvoiceSecretNoumAlertModal\n        isOpenModal={modalType === 'secretNoumAlert'}\n        onClose={closeModal}\n        isUnauthenticated={!!contextData}\n      />\n      <DuplicateInvoiceModal\n        isOpenModal={modalType === 'duplicate-invoice'}\n        onClose={closeModal}\n        onConfirm={() => {\n          handleDuplicate();\n          closeModal();\n        }}\n      />\n    </FullScreenLayout>\n  );\n};\n\nexport default () => (\n  <InvoiceProvider>\n    <InvoicePreviewScreen />\n  </InvoiceProvider>\n);\n"],"names":["InvoicePreviewDraftHeader","onDelete","onSubmit","onDuplicate","invoice","formHeaderProps","isMobile","useBreakpoints","navigate","useNavigate","logError","useError","openModal","closeModal","modalType","useModalManager","invoiceUtils","useInvoicePermissions","formState","isValid","useInvoiceForm","defaultValues","InvoiceFormMapper","fromInvoice","handleEdit","id","generatePath","routes","INVOICE_EDIT","handleDelete","pathname","INVOICE_MANAGER","Error","DraftButtons","EllipsisMenu","key","label","type","value","intent","onClick","canDuplicate","jsx","Button","Icon","jsxs","Fragment","StickyFormHeader","DeleteDraftModal","InvoicePreviewHeader","PreviewButtons","InvoicePreviewIssuedHeader","onRefetchInvoice","status","apolloClient","useApolloClient","download","loading","useInvoicePdfDownload","invoiceId","changeStatus","useInvoiceStatusChange","data","invoiceAmountData","invoiceAmountLoading","refetch","useGetInvoiceAmountQuery","variables","fetchPolicy","handleStatusChange","newStatus","amount","delay","refetchQueries","include","GetInvoiceTimeLinesDocument","onQueryUpdated","previousResult","remainingAmount","getInvoiceAmount","onPaymentSuccess","setTimeout","Buttons","canEdit","canDownload","invoiceNumber","canChangeStatus","canPay","convertToCurrency","currency","undefined","ChangeInvoiceStatusModal","`InvoicePreviewIssuedHeader-ChangeInvoiceStatusModal-${modalType}`","MakeInvoicePaymentWizard","UnauthenticatedUserHeaderButtons","GetInvoiceByIdDocument","Stack","ReviewInvoiceConfirmatioModal","isOpenModal","customerName","onConfirm","onCancel","isLoading","setLoading","useState","handleConfirm","Modal","ModalSize","S","ModalHeader","ModalBody","TSpan","useInvoicePreviewScreen","deleteInvoice","sendInvoice","duplicateInvoice","refetchInvoice","useInvoice","addErrorToast","useToast","handleDuplicate","useCallback","duplicated","window","open","InvoiceUtils","createInvoicePath","useRestrictInvoicePreviewRouteAccess","useParams","location","useLocation","useEffect","InvoiceStatusEnum","Draft","INVOICE_PREVIEW","INVOICE_DETAILS","replace","InvoicePreviewScreen","contextData","addSuccessIconToast","isViewMode","includes","isUnauthenticated","useAuth","checkConnectionWithSecretNoum","useContactNoumConnection","goBackToOrigin","useNavigateWithOrigin","submit","isConnected","isSecretNoum","noumId","_id","invoiceTo","projectType","UserUtil","userId","displayName","handleGoBack","fallbackUrl","Navigate","FullScreenLayout","Spinner","Header","UnauthenticatedHeader","ResponsiveMain","PlanDetails","InvoiceSummary","InvoiceDetailsSection","InvoiceTimeline","AllCurrencyEnum","Usd","InvoiceSecretNoumAlertModal","DuplicateInvoiceModal","InvoicePreviewScreen$1","InvoiceProvider"],"mappings":"k0DA6BA,MAAMA,GAA4BA,CAAC,CACjCC,SAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA,GAAGC,CACY,IAAM,CACf,KAAA,CAAEC,SAAAA,GAAaC,EAAgB,EAC/BC,EAAWC,IACX,CAAEC,SAAAA,GAAaC,EAAU,EACzB,CAAEC,UAAAA,EAAWC,WAAAA,EAAYC,UAAAA,GAAcC,EAA4B,EACnEC,EAAeC,IAEf,CACJC,UAAW,CAAEC,QAAAA,CAAQ,GACnBC,GAAe,CAAEC,cAAeC,GAAkBC,YAAYnB,CAAO,CAAA,CAAG,EAEtEoB,EAAaA,IAAM,CAClBpB,EAAQqB,IAGJC,EAAAA,EAAaC,EAAOC,aAAc,CAAEH,GAAIrB,EAAQqB,EAAI,CAAA,CAAC,CAAA,EAG1DI,EAAe,SAAY,CAC3B,GAAA,CACF,MAAM5B,GAAAA,YAAAA,KAEGO,EAAA,CACPsB,SAAUH,EAAOI,eAAAA,CAClB,CAAA,MACD,CACArB,EACE,IAAIsB,MAAM,sDAAsD,EAChE,UAAU,CAEd,CAAA,EAGIC,EAAgB3B,IA8CnB4B,GACC,CAAA,eAAe,QACf,QAAO,GACP,QAAS,IAAM,CAAC,EAChB,YAAa,CACX,CACEC,IAAK,OACLC,MAAO,OACPC,KAAM,QACNC,MAAO,OACPC,OAAQ,UACRC,QAAShB,CAAAA,EAEX,CACEW,IAAK,SACLC,MAAO,SACPC,KAAM,QACNC,MAAO,SACPC,OAAQ,SACRC,QAASX,CACV,CAAA,EAEH,eAAe,gCAElB,YAAA,qDAAA,CAAA,EApEIb,EAAAA,EAAAA,CAAAA,SAAAA,CAAayB,EAAAA,aAAarC,CAAO,GAChCsC,EAACC,GACC,KAAK,QACL,SAAQ,GACR,SAAUD,EAACE,GAAK,KAAK,SAAS,KAAM,+DACpC,QAASzC,EAAY,YAAA,gDAAA,SAGvB,WAAA,CAAA,EAEFuC,EAACC,GACC,KAAK,QACL,SAAQ,GACR,QAASnB,EACT,SAAUkB,EAACE,GAAK,KAAK,SAAS,KAAM,+DAAO,YAAA,gDAAA,SAG7C,MAAA,CAAA,EACAF,EAACC,EACC,CAAA,KAAK,QACL,OAAO,WACP,UAAS,GACT,SAAUD,EAACE,EAAK,CAAA,KAAK,WAAW,KAAM,GAAM,YAAA,6CAAA,CAAA,EAC5C,QAAS,IAAMhC,EAAU,aAAa,EAAE,YAAA,gDAAA,SAG1C,QAAA,CAAA,EACA8B,EAACC,GACC,KAAK,QACL,YACGxB,EAEG,GADA,yHAGN,gBAAgB,cAChB,OAAO,WACP,KAAK,SACL,SAAU,CAACA,EACX,QAASjB,EAAS,YAAA,gDAAA,SAGpB,gBAAA,CAAA,CAAA,EACF,EA4BF,OAEI2C,EAAAC,EAAA,CAAA,SAAA,CAACJ,EAAAK,EAAA,CACC,GAAI1C,EACJ,QAAS4B,EACT,iBAAgB,GAAA,YAAA,6CAAA,EAEjBS,EAAAM,GAAA,CACC,YAAalC,IAAc,cAC3B,UAAWe,EACX,QAAS,IAAMhB,EAAa,EAAA,YAAA,4CAAA,CAAA,CAEhC,CAAA,CAAA,CAEJ,ECvIMoC,GAAuBA,CAAC,CAC5B/C,SAAAA,EACAC,YAAAA,EACAC,QAAAA,EACA,GAAGC,CACY,IAAM,CACf,KAAA,CAAEC,SAAAA,GAAaC,EAAgB,EAC/BS,EAAeC,IAEfiC,EAAkB5C,IAiBrB4B,GACC,CAAA,eAAe,QACf,QAAO,GACP,QAAS,IAAM,CAAC,EAChB,YAAa,CACX,CACEC,IAAK,UACLC,MAAO,iBACPC,KAAM,QACNC,MAAO,UACPC,OAAQ,UACRC,QAAStC,CACV,CAAA,EAEH,eAAe,gCAElB,YAAA,kDAAA,CAAA,EA/BIc,EAAAA,EAAAA,CAAAA,SAAAA,CAAayB,EAAAA,aAAarC,CAAO,GAChCsC,EAACC,GACC,KAAK,QACL,SAAQ,GACR,SAAUD,EAACE,GAAK,KAAK,SAAS,KAAM,4DACpC,QAASzC,EAAY,YAAA,6CAAA,SAGvB,WAAA,CAAA,EAEDuC,EAAAC,EAAA,CAAO,KAAK,QAAQ,OAAO,WAAW,KAAK,SAAS,QAASzC,EAAS,YAAA,6CAAA,SAEvE,iBAAA,CAAA,EACF,EAqBA,OAAAwC,EAACK,GACC,GAAI1C,EACJ,QAAS6C,EACT,iBAAgB,GAChB,YAAA,uCAAA,CAAA,CAEN,EC9BMC,GAA6BA,CAAC,CAClClD,SAAAA,EACAC,SAAAA,EACAC,YAAAA,EACAiD,iBAAAA,EACAhD,QAAAA,EACAiD,OAAAA,EACA,GAAGhD,CACY,IAAM,OACrB,MAAMiD,EAAeC,IACf,CAAE3C,UAAAA,EAAWC,WAAAA,EAAYC,UAAAA,GAAcC,EAA4B,EAEnEC,EAAeC,IACf,CAAEuC,SAAAA,EAAUC,QAAAA,GAAYC,GAAuB,EAC/CC,EAAYvD,EAAQqB,IAAM,GAC1BjB,EAAWC,IACX,CAAEmD,aAAAA,GAAiBC,GAAwB,EAE3C,CACJC,KAAMC,EACNN,QAASO,EACTC,QAAAA,GACEC,EAAyB,CAC3BC,UAAW,CACTR,UAAWvD,EAAQqB,EACrB,EACA2C,YAAa,mBAAA,CACd,EAEKC,EAAqB,MACzBC,EACAC,IACG,CACEnE,GAAAA,MAAAA,EAASqB,KAGFZ,IACZ,MAAM+C,EAAa,CAAExD,QAAAA,EAASiD,OAAQiB,EAAWC,OAAAA,CAAAA,CAAQ,EAEzDC,GAAAA,MAAM,IAAM,CACVlB,EAAamB,eAAe,CAC1BC,QAAS,CAACC,CAA2B,EACrCC,eAAoCC,GAAA,CAClCA,EAAeZ,QAAQ,CACrBN,UAAWvD,EAAQqB,EAAAA,CACpB,CACH,CAAA,CACD,EACmB2B,GAAA,MAAAA,KACnB,GAAG,EAAA,EAGF0B,IACJf,EAAAA,GAAAA,YAAAA,EAAmBgB,mBAAnBhB,YAAAA,EAAqCe,kBAAmB,EAEpDtD,EAAaA,IAAM,CAClBmC,GAGIjC,EAAAA,EAAaC,EAAOC,aAAc,CAAEH,GAAIkC,CAAW,CAAA,CAAC,CAAA,EAGzDqB,EAAmB,SAAY,CACnCC,WAAW,IAAM,CACf3B,EAAamB,eAAe,CAAEC,QAAS,CAACC,CAA2B,CAAA,CAAG,EAC7DV,KACR,IAAI,CAAA,EAGHiB,EAEDlE,EAAAA,EAAAA,CAAAA,SAAAA,CAAayB,EAAAA,aAAarC,CAAO,EAC/BsC,EAAAC,EAAA,CACC,KAAK,QACL,SAAQ,GACR,SAAWD,EAAAE,EAAA,CAAK,KAAK,SAAS,KAAM,2DACpC,QAASzC,EAAY,YAAA,4CAAA,SAAA,WAAA,CAGvB,EACE,KACHa,EAAamE,QAAQ/E,CAAO,EAC3BsC,EAACC,EACC,CAAA,KAAK,QACL,SAAQ,GACR,SAAWD,EAAAE,EAAA,CAAK,KAAK,SAAS,KAAM,GAAG,YAAA,yCAAA,CAAA,EACvC,KAAK,SACL,QAASpB,EAAW,YAAA,4CAAA,SAAA,MAAA,CAGtB,EACE,KACHR,EAAaoE,YAAYhF,CAAO,IAC9BuC,EACC,CAAA,KAAK,QACL,WAAWC,EAAK,CAAA,KAAK,aAAa,KAAM,GAAM,YAAA,yCAAA,CAAA,EAC9C,SAAQ,GACR,KAAK,SACL,QAAAa,EACA,QAAS,IAAMD,EAASpD,EAAQqB,GAAIrB,EAAQiF,eAAiB,EAAE,EAAE,YAAA,4CAAA,uBAGnE,CAAA,EACE,KAEHrE,EAAasE,gBAAgBlF,CAAO,EAClCsC,EAAAC,EAAA,CACC,KAAK,QACL,SAAUD,EAACE,EAAK,CAAA,KAAK,aAAa,KAAM,GAAM,YAAA,yCAAA,CAAA,EAC9C,SAAQ,GACR,KAAK,SACL,QAAS,IAAMhC,EAAU,eAAe,EAAE,YAAA,4CAAA,wBAG5C,CAAA,EACE,KACHI,EAAauE,OAAOnF,CAAO,IACzBuC,EACC,CAAA,KAAK,QACL,SAAWD,EAAAE,EAAA,CAAK,KAAK,SAAS,KAAM,GAAG,YAAA,yCAAA,CAAA,EACvC,QAAO,GACP,QAASoB,EACT,QAAS,IAAMpD,EAAU,eAAgBR,CAAO,EAChD,SAAU0E,GAAmB,EAAE,YAAA,4CAE9BA,SAAAA,CAAmB1E,GAAAA,EAAQmE,QAAU,GAAK,eAAiB,OAC3DiB,EAAkBV,EAAiB1E,EAAQqF,UAAYC,MAAS,CAAA,CAAA,CACnE,EACE,IACN,CAAA,CAAA,EAGF,OAEI7C,EAAAC,EAAA,CAAA,SAAA,CAACJ,EAAAK,EAAA,CACC,GAAI1C,EACJ,QAAS6E,EACT,iBAAgB,GAAA,YAAA,8CAAA,EAElBxC,EAACiD,IACC,YAAa7E,IAAc,gBAC3B,SAAUD,EACV,UAAWwD,EACX,cAAehB,GAAUqC,OAEzB,SAAUtF,EAAQqF,UAAYC,OAC9B,UAAWtF,EAAQqB,IAAM,GAAG,YAAAmE,uDAAA9E,GAAA,EAFvBA,CAEuB,EAE7BA,IAAc,gBACZ4B,EAAAmD,GAAA,CACC,QAAShF,EACT,QAAAT,EACA,iBAAA4E,EAEH,YAAA,qDAAA,CAAA,CACH,CAAA,CAAA,CAEJ,EC/KMc,GAAmCA,CAAC,CAAE1F,QAAAA,CAAyB,IAAM,OACzE,MAAMkD,EAAeC,IACf,CAAE3C,UAAAA,EAAWC,WAAAA,EAAYC,UAAAA,GAAcC,EAA4B,EACnEC,EAAeC,IACf,CAAEuC,SAAAA,EAAUC,QAAAA,GAAYC,GAAuB,EAC/CC,EAAYvD,EAAQqB,IAAM,GAE1B,CACJqC,KAAMC,EACNN,QAASO,EACTC,QAAAA,GACEC,EAAyB,CAC3BC,UAAW,CACTR,UAAWvD,EAAQqB,EACrB,EACA2C,YAAa,mBAAA,CACd,EAEKU,IACJf,EAAAA,GAAAA,YAAAA,EAAmBgB,mBAAnBhB,YAAAA,EAAqCe,kBAAmB,EAEpDE,EAAmB,SAAY,CACnC1B,EAAamB,eAAe,CAAEC,QAAS,CAACC,CAA2B,CAAA,CAAG,EAGtEM,WAAW,IAAM,CACNhB,IAETX,EAAamB,eAAe,CAC1BC,QAAS,CAACqB,EAAsB,EAChCnB,eAAoCC,GAAA,CAClCA,EAAeZ,QAAQ,CACrBxC,GAAIkC,CAAAA,CACL,CACH,CAAA,CACD,GACA,GAAI,CAAA,EAGT,OACGd,EAAAmD,EAAA,CAAM,IAAK,GAAG,YAAA,yCACZhF,SAAAA,CAAAA,EAAaoE,YAAYhF,CAAO,EAC/BsC,EAACC,GACC,KAAK,QACL,SAAUD,EAACE,GAAK,KAAK,aAAa,KAAM,GAAM,YAAA,uCAAA,CAAA,EAC9C,SAAQ,GACR,KAAK,SACL,QAAAa,EACA,QAAS,IAAMD,EAASpD,EAAQqB,GAAIrB,EAAQiF,eAAiB,EAAE,EAAE,YAAA,0CAAA,uBAGnE,CAAA,EACE,KAEHrE,EAAauE,OAAOnF,CAAO,IACzBuC,EACC,CAAA,KAAK,QACL,SAAWD,EAAAE,EAAA,CAAK,KAAK,SAAS,KAAM,GAAG,YAAA,uCAAA,CAAA,EACvC,QAAO,GACP,QAASoB,EACT,QAAS,IAAMpD,EAAU,eAAgBR,CAAO,EAChD,SAAU0E,GAAmB,EAAE,YAAA,0CAE9BA,SAAAA,CAAmB1E,GAAAA,EAAQmE,QAAU,GAAK,eAAiB,OAC3DiB,EAAkBV,EAAiB1E,EAAQqF,UAAYC,MAAS,CAAA,CAAA,CACnE,EACE,KAEH5E,IAAc,gBACZ4B,EAAAmD,GAAA,CACC,QAAShF,EACT,QAAAT,EACA,iBAAA4E,EAEH,YAAA,2DAAA,CAAA,CACH,CAAA,CAAA,CAEJ,EC7EMiB,GAEFA,CAAC,CAAEC,YAAAA,EAAa3B,OAAAA,EAAQkB,SAAAA,EAAUU,aAAAA,EAAcC,UAAAA,EAAWC,SAAAA,CAAS,IAAM,CAC5E,KAAM,CAACC,EAAWC,CAAU,EAAIC,WAAS,EAAK,EAExCC,EAAgB,SAAY,CAChCF,EAAW,EAAI,EACf,MAAMH,EAAW,EACjBG,EAAW,EAAK,CAAA,EAGlB,OACG1D,EAAA6D,GAAA,CACC,aAAc,GACd,KAAMR,EACN,OAAO,yBACP,KAAMS,GAAUC,EAChB,oBAAqB,GAAM,YAAA,sCAE3B,SAAA,CAAClE,EAAAmE,GAAA,CAAY,YAAA,4CAAA,SAAc,iBAAA,IAC1BC,GAAU,CAAA,IAAK,GAAI,UAAW,IAAI,YAAA,0CACjC,SAAA,CAACjE,EAAAkE,EAAA,CACC,UAAU,SACV,KAAK,SACL,WAAW,+BAA8B,YAAA,sCAAA,SAAA,CAAA,gDAEK,IAC9CrE,EAACqE,EAAM,CAAA,KAAK,cAAa,YAAA,sCACtBvB,SAAkBjB,EAAAA,EAAQkB,EAAU,CAAC,CACxC,CAAA,EAAS,IAAG,QACRsB,EAAM,CAAA,KAAK,cAAc,YAAA,sCAACZ,SAAaA,EAAA,EAAQ,GAAA,EACrD,EACAzD,EAACqE,EACC,CAAA,UAAU,SACV,KAAK,SACL,WAAW,+BAA8B,YAAA,sCAAA,SAG3C,mDAAA,CAAA,EAEAlE,EAACmD,GAAM,SAAQ,GAAC,IAAK,GAAI,UAAS,GAAA,YAAA,sCAChC,SAAA,CAACtD,EAAAC,EAAA,CACC,KAAK,OACL,QAAO,GACP,QAAS8D,EACT,QAASH,EAAU,YAAA,uCAAA,SAGrB,6BAAA,EACA5D,EAACC,EAAO,CAAA,KAAK,OAAO,SAAQ,GAAC,QAAS0D,EAAS,YAAA,uCAAA,SAE/C,kBAAA,CAAA,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,ECtEA,SAAwBW,GAAwB,CAC9CrD,UAAAA,CAC8B,EAAG,CAC3B,KAAA,CACJsD,cAAAA,EACAC,YAAAA,EACAC,iBAAAA,EACAC,eAAAA,EACAhH,QAAAA,EACAqD,QAAAA,GACE4D,GAAW,CACb1D,UAAAA,CAAAA,CACD,EACK,CAAE2D,cAAAA,GAAkBC,EAAU,EAE9BC,EAAkBC,EAAAA,YAAY,SAAY,CAC1C,GAAA,CACIC,MAAAA,EAAa,MAAMP,IACrBO,GAAAA,MAAAA,EAAYjG,IACdkG,OAAOC,KACLC,GAAaC,kBAAkBX,iBAAiBO,EAAWjG,EAAE,EAC7D,QAAQ,CAEZ,MACA,CACA6F,EAAc,6BAA6B,CAC7C,CAAA,EACC,CAACA,EAAeH,CAAgB,CAAC,EAE7B,MAAA,CACL/G,QAAAA,EACAqD,QAAAA,EACAyD,YAAAA,EACAD,cAAAA,EACAO,gBAAAA,EACAJ,eAAAA,CAAAA,CAEJ,CClCO,MAAMW,GAAuCA,CAAC,CACnD1E,OAAAA,CAGF,IAAM,CACJ,MAAM7C,EAAWC,IACX,CAAEgB,GAAAA,GAAOuG,EAAuC,EAChDC,EAAWC,IAEjBC,EAAAA,UAAU,IAAM,CAEZ1G,GACA4B,GACAA,IAAW+E,EAAkBC,OAC7B3G,EAAaC,EAAO2G,gBAAiB,CAAE7G,GAAAA,CAAAA,CAAI,IAAMwG,EAASnG,UAEjDJ,EAAAA,EAAaC,EAAO4G,gBAAiB,CAAE9G,GAAAA,CAAAA,CAAI,EAAG,CAAE+G,QAAS,EAAA,CAAM,CAC1E,EACC,CAAC/G,EAAIwG,EAASnG,SAAUtB,EAAU6C,CAAM,CAAC,CAC9C,ECaMoF,GAAuBA,IAAM,OAC3B,KAAA,CAAEhH,GAAIkC,GAAcqE,EAAuC,EAC3DC,EAAWC,IACX,CAAExH,SAAAA,GAAaC,EAAU,EACzBH,EAAWC,IACX,CAAEG,UAAAA,EAAWC,WAAAA,EAAYC,UAAAA,EAAW4H,YAAAA,GAAgB3H,EAGvD,EACG,CAAE4H,oBAAAA,GAAwBpB,EAAU,EACpCqB,EAAa,CAACX,EAASnG,SAAS+G,SAAS,UAAU,EACnD,CAAEC,kBAAAA,GAAsBC,GAAS,EACjC,CACJ9B,cAAAA,EACA7G,QAAAA,EACAqD,QAAAA,EACAyD,YAAAA,EACAM,gBAAAA,EACAJ,eAAAA,GACEJ,GAAwB,CAC1BrD,UAAAA,CAAAA,CACD,EAEoCoE,GAAA,CAAE1E,OAAQjD,GAAAA,YAAAA,EAASiD,MAAAA,CAAQ,EAE1D,KAAA,CAAC2F,CAA6B,EAAIC,KAElC,CAAEC,eAAAA,GAAmBC,GAAuB,EAE5CC,EAAS,SAAY,aACnB,KAAA,CAAEC,YAAAA,EAAaC,aAAAA,CAAiB,EAAA,MAAMN,IAC1C5I,EAAAA,GAAAA,YAAAA,EAASmJ,SAATnJ,YAAAA,EAAiBoJ,MAAO,KACxBpJ,EAAAA,GAAAA,YAAAA,EAASqJ,YAATrJ,YAAAA,EAAoBoJ,MAAO,IAC3BpJ,EAAAA,GAAAA,YAAAA,EAASmJ,SAATnJ,YAAAA,EAAiBsJ,WAClB,EACGJ,GAAgB,CAACD,EACnBzI,EACE,kBACA+I,GAASb,mBAAkB1I,EAAAA,GAAAA,YAAAA,EAASqJ,YAATrJ,YAAAA,EAAoBwJ,MAAM,CAAC,EAGxDhJ,EAAU,cAAc,CAC1B,EAGIwF,EAAY,SAAY,OACxB,GAAA,CACF,MAAMc,EAAa,EAGhByB,EAAA,kCAAgCvI,EAAAA,GAAAA,YAAAA,EAASqJ,YAATrJ,YAAAA,EAAoByJ,aAAa,EAEpErJ,EAASmB,EAAOI,eAAe,CAAA,MAC/B,CACArB,EACE,IAAIsB,MAAM,oDAAoD,EAC9D,WAAW,CAEf,CAAA,EAGI8H,EAAeA,IAAM,CACVZ,EAAA,CAAEa,YAAapI,EAAOI,eAAAA,CAAiB,CAAA,EAGxD,MAAI,CAAC4B,GAAc,CAACF,GAAW,CAACrD,EACvBsC,EAACsH,IAAS,QAAO,GAAC,GAAIrI,EAAOI,gBAAmB,YAAA,+BAAA,CAAA,EAIvDc,EAACoH,GAAgB,CAAA,YAAA,wCACf,SAAA,CACGvH,EAAAI,EAAA,CAAA,SAAA,CAAC1C,GAAWqD,EACXf,EAACwH,IAAO,YAAA,8BAAA,CAAA,EACN9J,EAEAyC,EAAAC,EAAA,CAAA,SAAA,CAACJ,EAAAkE,EAAE,oBAAF,CACEkC,SAAAA,IACEqB,GAAO,CAAA,eAAgB,GAAM,YAAA,8BAC5B,WAACC,GACC,CAAA,MAAM,eACN,aACE1H,EAACoD,IAAiC,QAAA1F,wEACnC,YAAA,6CAAA,CAEL,CAAA,EACE,CAACwI,IAAcxI,GAAAA,YAAAA,EAASiD,UAAW+E,EAAkBC,QACtDpF,GACC,CAAA,MAAM,kBACN,SAAUmG,EACV,SAAUU,EACV,QAAA1J,EACA,YAAa,IAAMQ,EAAU,mBAAmB,EAAE,YAAA,2CAAA,CAAA,EAElDgI,IAAcxI,GAAAA,YAAAA,EAASiD,UAAW+E,EAAkBC,QACrDrI,GACC,CAAA,MAAM,kBACN,SAAUiH,EACV,QAAA7G,EACA,SAAUgJ,EACV,SAAUU,EACV,YAAa,IAAMlJ,EAAU,mBAAmB,EAChD,YAAA,gDAAA,CAAA,IAEDuC,GACC,CAAA,MAAM,kBACN,SAAU8D,EACV,QAAA7G,EACA,SAAUgJ,EACV,OAAQhJ,GAAAA,YAAAA,EAASiD,OACjB,SAAUyG,EACV,iBAAkB1C,EAClB,YAAa,IAAMxG,EAAU,mBAAmB,EAEnD,YAAA,iDAAA,CAAA,CACH,CAAA,EAEA8B,EAAC2H,IAAc,YAAA,sCACb,WAACzD,EAAE,QAAF,CAAU,IAAK,GAAI,QAAQ,SAAS,UAAS,GAC3CxG,WACEyC,EAAAmD,EAAA,CAAM,SAAQ,GAAC,IAAK,GAAG,YAAA,6BACtB,SAAA,CAACtD,EAAA4H,GAAA,CAAY,QAAAlK,EAAiB,YAAA,kCAAA,CAAA,EAC7BsC,EAAA6H,GAAA,CAAe,QAAAnK,EAAiB,YAAA,qCAAA,CAAA,EAChCsC,EAAA8H,GAAA,CAAsB,QAAApK,EAAiB,YAAA,4CAAA,CAAA,EACvCsC,EAAA+H,GAAA,CAAgB,QAAArK,EAAiB,YAAA,sCAAA,CAAA,CAAA,EACpC,EACE,IACN,CAAA,EACF,CAAA,CACF,CAAA,EACE,KACN,EACCA,GACEsC,EAAAuD,GAAA,CACC,YAAanF,IAAc,eAC3B,QAAQV,GAAAA,YAAAA,EAASmE,SAAU,EAC3B,UAAUnE,GAAAA,YAAAA,EAASqF,WAAYiF,GAAgBC,IAC/C,eAAcvK,EAAAA,EAAQqJ,YAARrJ,YAAAA,EAAmByJ,cAAe,GAChD,UAAAzD,EACA,SAAUvF,EAEb,YAAA,oDAAA,CAAA,EACA6B,EAAAkI,GAAA,CACC,YAAa9J,IAAc,kBAC3B,QAASD,EACT,kBAAmB,CAAC,CAAC6H,EAAY,YAAA,kDAAA,CAAA,EAEnChG,EAACmI,IACC,YAAa/J,IAAc,oBAC3B,QAASD,EACT,UAAW,IAAM,CACE2G,IACL3G,GAAA,EACZ,YAAA,6CAAA,CAEN,CAAA,CAAA,CAEJ,EAEeiK,GAAA,MACZC,GAAe,CAAA,YAAA,kBACd,SAACrI,EAAA+F,GAAA,CAAoB,YAAA,sBAAA,CAAA,CACvB,CAAA"}