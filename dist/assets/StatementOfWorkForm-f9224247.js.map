{"version":3,"file":"StatementOfWorkForm-f9224247.js","sources":["../../src/features/contracts/hooks/statementOfWorkForm.ts","../../src/features/contracts/components/ContractSelector/styles.ts","../../src/features/contracts/components/ContractSelector/ContractDetails.tsx","../../src/features/contracts/components/ContractSelector/ContractSelector.tsx","../../src/features/contracts/components/StatementOfWorkForm/WizardTotalAmount/WizardTotalAmount.tsx","../../src/features/contracts/components/StatementOfWorkForm/BonusCommissionsWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/BonusCommissionsWizard/BonusCommissionWizard.tsx","../../src/components/FieldArrayWizard/CreateEditPreview/EditMode.tsx","../../src/components/FieldArrayWizard/CreateEditPreview/Wizard.tsx","../../src/components/FieldArrayWizard/CreateEditPreview/index.ts","../../src/features/contracts/components/StatementOfWorkForm/DeliverablesWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/DeliverablesWizard/PreviewMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/DeliverablesWizard/DeliverablesWizard.tsx","../../src/features/contracts/components/StatementOfWorkForm/ExpenseReimbursementWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/ExpenseReimbursementWizard/ExpenseReimbursementWizard.tsx","../../src/components/OptionSelector/styles.ts","../../src/components/OptionSelector/OptionSelectorItem.tsx","../../src/components/OptionSelector/OptionSelector.tsx","../../src/features/contracts/components/CurrencySelector/CurrencySelector.tsx","../../src/features/contracts/components/StatementOfWorkForm/FeesWizard/InstalmentsWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/FeesWizard/InstalmentsWizard/InstalmentsWizard.tsx","../../src/hooks/fieldArrayWizard/useSynchronizeFieldArrayItems.ts","../../src/features/contracts/components/StatementOfWorkForm/FeesWizard/MilestonesWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/FeesWizard/MilestonesWizard/MilestonesWizard.tsx","../../src/features/contracts/components/StatementOfWorkForm/FeesWizard/FeesWizard.tsx","../../src/features/contracts/components/StatementOfWorkForm/MilestonesWizard/EditMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/MilestonesWizard/PreviewMode.tsx","../../src/features/contracts/components/StatementOfWorkForm/MilestonesWizard/MilestonesWizard.tsx","../../src/features/contracts/components/StatementOfWorkForm/styles.ts","../../src/features/contracts/components/StatementOfWorkForm/StatementOfWorkForm.tsx","../../src/features/contracts/components/StatementOfWorkForm/StatementOfWorkFormHeader.tsx","../../src/screens/Contracts/StatementOfWorkForm/styles.ts","../../src/screens/Contracts/StatementOfWorkForm/useStatementOfWorkFormScreen.ts","../../src/screens/Contracts/StatementOfWorkForm/index.tsx"],"sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm, useFormContext } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { FeesCategoryTypes } from '@/apollo/generated/types';\nimport { type PickRequiredRestDeepPartial } from '@/utils/types';\n\nexport const statementOfWorkFormSchema = yup.object({\n  title: yup.string().required().label('Title'),\n  noumId: yup.string().required().ensure().label('Noum Assignment'),\n  scopeOfWork: yup.string().required().max(3000).label('Scope of Work'),\n  effectiveDate: yup.date().required().label('Effective Date'),\n  contractId: yup.string().required().label('Contract Attachment'),\n  deliverables: yup\n    .array(\n      yup.object({\n        name: yup.string().required().label('Deliverable Name'),\n        dueDate: yup.date().nullable().label('Due Date'),\n        description: yup.string().optional().max(300).label('Description'),\n      }),\n    )\n    .required()\n    .min(1)\n    .label('Deliverables'),\n  milestones: yup\n    .array(\n      yup.object({\n        name: yup.string().required().label('Milestone Name'),\n        dueDate: yup.date().required().label('Due Date'),\n        description: yup.string().optional().max(3000).label('Description'),\n      }),\n    )\n    .label('Milestones')\n    .when('fees.feeCategory', {\n      is: FeesCategoryTypes.Milestones,\n      then: (schema) => schema.required().min(1),\n      otherwise: (schema) => schema.optional(),\n    }),\n  payments: yup.object({\n    currency: yup.string().required().label('Currency'),\n  }),\n  fees: yup.object({\n    feeCategory: yup\n      .mixed<FeesCategoryTypes>()\n      .oneOf(Object.values(FeesCategoryTypes))\n      .required()\n      .label('Fee Category'),\n    inAdvance: yup\n      .object({\n        amount: yup\n          .number()\n          .required()\n          .label('Amount')\n          .typeError(({ label }) => `${label} must be a number.`),\n        dueDate: yup.date().required().label('Due Date'),\n      })\n      .when('feeCategory', {\n        is: FeesCategoryTypes.Inadvance,\n        then: (schema) => {\n          schema.fields.amount.withMutation((s) => s.required());\n          schema.fields.dueDate.withMutation((s) => s.required());\n          return schema.required();\n        },\n        otherwise: (schema) => {\n          schema.fields.amount.withMutation((s) => s.notRequired());\n          schema.fields.dueDate.withMutation((s) => s.notRequired());\n          return schema.notRequired();\n        },\n      }),\n    instalments: yup\n      .array(\n        yup.object({\n          amount: yup\n            .number()\n            .required()\n            .label('Amount')\n            .typeError(({ label }) => `${label} must be a number.`),\n          dueDate: yup.date().required().label('Due Date'),\n        }),\n      )\n      .when('feeCategory', {\n        is: FeesCategoryTypes.Installments,\n        then: (schema) => schema.required().min(1),\n        otherwise: (schema) => schema.optional().min(0),\n      }),\n    milestones: yup\n      .array(\n        yup.object({\n          amount: yup\n            .number()\n            .required()\n            .label('Amount')\n            .typeError(({ label }) => `${label} must be a number.`),\n          dueDate: yup.date().required().label('Due Date'),\n        }),\n      )\n      .when('feeCategory', {\n        is: FeesCategoryTypes.Milestones,\n        then: (schema) => schema.required().min(1),\n        otherwise: (schema) => schema.optional().min(0),\n      }),\n    lumpSum: yup\n      .object({\n        amount: yup\n          .number()\n          .label('Amount')\n          .typeError(({ label }) => `${label} must be a number.`),\n        dueDate: yup.date().required().label('Due Date'),\n      })\n      .when('feeCategory', {\n        is: FeesCategoryTypes.Lumpsum,\n        then: (schema) => {\n          schema.fields.amount.withMutation((s) => s.required());\n          schema.fields.dueDate.withMutation((s) => s.required());\n          return schema.required();\n        },\n        otherwise: (schema) => {\n          schema.fields.amount.withMutation((s) => s.notRequired());\n          schema.fields.dueDate.withMutation((s) => s.notRequired());\n          return schema.notRequired();\n        },\n      }),\n  }),\n  expenseReimbursement: yup.array(\n    yup.object({\n      name: yup.string().required().label('Description'),\n      amount: yup\n        .number()\n        .required()\n        .label('Amount')\n        .typeError(({ label }) => `${label} must be a number.`),\n    }),\n  ),\n  bonusCommission: yup.array(\n    yup.object({\n      name: yup.string().required().label('Description'),\n      amount: yup\n        .number()\n        .required()\n        .label('Amount')\n        .typeError(({ label }) => `${label} must be a number.`),\n    }),\n  ),\n  logo: yup.string().url(),\n});\n\nexport type StatementOfWorkFormValues = yup.InferType<\n  typeof statementOfWorkFormSchema\n>;\nexport type DraftStatementOfWorkFormValues = PickRequiredRestDeepPartial<\n  StatementOfWorkFormValues,\n  'noumId'\n>;\n\ninterface UseStatementOfWorkFormOptions {\n  defaultValues?: DefaultValues<StatementOfWorkFormValues>;\n}\n\nexport function useStatementOfWorkForm({\n  defaultValues,\n}: UseStatementOfWorkFormOptions = {}) {\n  return useForm<StatementOfWorkFormValues>({\n    defaultValues,\n    resolver: yupResolver(statementOfWorkFormSchema),\n    mode: 'onSubmit',\n  });\n}\n\nexport function useStatementOfWorkFormContext() {\n  return useFormContext<StatementOfWorkFormValues>();\n}\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\n\nconst DetailsContainer = styled(Stack).attrs(() => ({\n  gap: 8,\n  vertical: true,\n  fullWidth: true,\n  align: 'stretch',\n}))``;\n\nconst DetailsItem = styled(Stack).attrs(() => ({\n  gap: 24,\n  justify: 'space-between',\n}))``;\n\nconst DetailsItemLabel = styled(TSpan).attrs(() => ({\n  font: 'footnote',\n  colorToken: '--text-card-neutral-default',\n}))``;\n\nconst DetailsItemValue = styled(TSpan).attrs(() => ({\n  font: 'footnote',\n  colorToken: '--text-card-neutral-highlighted',\n}))``;\n\nexport default {\n  DetailsContainer,\n  DetailsItem,\n  DetailsItemLabel,\n  DetailsItemValue,\n};\n","import { useTranslation } from 'react-i18next';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\nimport { type ContractBasic } from '../../types';\nimport S from './styles';\n\ninterface ContractDetailsProps {\n  contract: ContractBasic;\n}\n\nexport function ContractDetails({ contract }: ContractDetailsProps) {\n  const { t } = useTranslation();\n\n  return (\n    <S.DetailsContainer>\n      <S.DetailsItem>\n        <S.DetailsItemLabel>\n          {t('noumena.contracts.contract_selector.details.buyer')}\n        </S.DetailsItemLabel>\n        <S.DetailsItemValue>\n          {contract.buyer?.displayName ?? '--'}\n        </S.DetailsItemValue>\n      </S.DetailsItem>\n      <S.DetailsItem>\n        <S.DetailsItemLabel>\n          {t('noumena.contracts.contract_selector.details.seller')}\n        </S.DetailsItemLabel>\n        <S.DetailsItemValue>\n          {contract.seller?.displayName ?? '--'}\n        </S.DetailsItemValue>\n      </S.DetailsItem>\n      <S.DetailsItem>\n        <S.DetailsItemLabel>\n          {t('noumena.contracts.contract_selector.details.effective_date')}\n        </S.DetailsItemLabel>\n        <S.DetailsItemValue>\n          {contract.effectiveDate\n            ? formatDateString(new Date(contract.effectiveDate))\n            : '--'}\n        </S.DetailsItemValue>\n      </S.DetailsItem>\n    </S.DetailsContainer>\n  );\n}\n","import { useMemo } from 'react';\nimport { debounce } from 'lodash';\nimport { useGetContractsForSelectorQuery } from '@/apollo/graphql';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport { cleanList } from '@/utils/list';\nimport { Stack } from '@/layout';\nimport {\n  ApiEntityPickerFieldWithRemoteSearch,\n  type ApiEntityPickerFieldWithRemoteSearchProps,\n} from '@/components/ApiEntityPickerField';\nimport { ApiEntitySelectionPreviewComponent } from '@/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent';\nimport { type ContractBasic } from '../../types';\nimport { ContractDetails } from './ContractDetails';\nimport { DocumentStatusTag } from '../DocumentStatusTag/DocumentStatusTag';\n\ntype ContractSelectorProps = Omit<\n  ApiEntityPickerFieldWithRemoteSearchProps<string, ContractBasic>,\n  'options' | 'onChange' | 'children' | 'onInputChange'\n> & {\n  noumId: string;\n  onChange: (value: string | undefined) => void;\n};\n\nexport function ContractSelector({\n  onChange,\n  noumId,\n  value,\n  ...selectFieldProps\n}: ContractSelectorProps) {\n  const { data, loading, refetch } = useGetContractsForSelectorQuery({\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      offset: 0,\n      limit: 100,\n      filter: {\n        noumIds: [noumId!],\n        search: '',\n      },\n    },\n    skip: !noumId,\n  });\n\n  const contracts = data?.getContractList.data;\n\n  const options = useMemo<DropdownValueType<ContractBasic, string>[]>(() => {\n    function mapContact(\n      contract: ContractBasic,\n    ): DropdownValueType<ContractBasic, string> {\n      return {\n        key: contract._id,\n        type: 'value',\n        value: contract,\n        label: `${contract.title}`,\n        icon: <Icon name=\"file_m\" size={24} />,\n      };\n    }\n\n    const cleanData = cleanList(contracts);\n    return cleanData.map(mapContact);\n  }, [contracts]);\n\n  const debouncedSearch = useMemo(\n    () =>\n      debounce(\n        (searchTerm: string) =>\n          refetch({\n            filter: {\n              search: searchTerm,\n              noumIds: [noumId],\n            },\n          }),\n        500,\n      ),\n    [noumId, refetch],\n  );\n\n  const selectedOption = options.find((option) => option.key === value);\n\n  return (\n    <Stack gap={16} vertical fullWidth align=\"stretch\">\n      <ApiEntityPickerFieldWithRemoteSearch\n        options={options}\n        maxContainerHeight=\"200px\"\n        renderStickyHeader={() => {}}\n        {...selectFieldProps}\n        isLoading={loading}\n        hideIcons={false}\n        value={value ?? ''}\n        onChange={(option) => onChange(option?.key || '')}\n        onInputChange={debouncedSearch}\n        leftIcon={\n          <Icon\n            name=\"search_m\"\n            size={20}\n            color=\"--icon-input-neutral-default\"\n          />\n        }\n        renderSelectionPreviewComponent={(props) => (\n          <ApiEntitySelectionPreviewComponent\n            {...props}\n            selectedRightSideOption={\n              props.selectedOption && (\n                <DocumentStatusTag status={props.selectedOption.value.status} />\n              )\n            }\n          />\n        )}\n      />\n      {selectedOption && <ContractDetails contract={selectedOption.value} />}\n    </Stack>\n  );\n}\n","import { sumBy } from 'lodash';\nimport { CurrencyEnum } from '@/apollo/generated/types';\nimport { TSpan } from '@/components/Typography';\nimport convertToCurrency from '@/utils/currencyToCurrency';\n\ninterface WizardTotalAmountProps {\n  rows: { amount: number | undefined }[] | undefined;\n}\n\nexport function WizardTotalAmount({ rows }: WizardTotalAmountProps) {\n  return (\n    <TSpan font=\"body-m-bold\">\n      Sum:{' '}\n      {convertToCurrency(\n        sumBy(rows, (row) => parseFloat(`${row.amount}`) || 0),\n        CurrencyEnum.Usd,\n        2,\n      )}\n    </TSpan>\n  );\n}\n","import { Controller } from 'react-hook-form';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { FormControl } from '@/components/FormControl';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\n\nexport function EditMode({\n  index,\n  fieldNamePrefix,\n}: CreateEditOptions<StatementOfWorkFormValues, 'bonusCommission'>) {\n  return (\n    <InlineEdit.EditMode>\n      {({ control }) => (\n        <>\n          <InlineEdit.FormMainRow index={index} displayLineNumbers>\n            <Stack gap={16} fullWidth>\n              <StackItem grow={3}>\n                <Controller\n                  control={control}\n                  name={`${fieldNamePrefix}name`}\n                  render={({ field, fieldState }) => (\n                    <TextField\n                      placeholder=\"Description\"\n                      inputSize=\"small\"\n                      {...field}\n                      {...getErrorProps(fieldState)}\n                    />\n                  )}\n                />\n              </StackItem>\n              <StackItem shrink={1}>\n                <FormControl label=\"Amount:\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller\n                      control={control}\n                      name={`${fieldNamePrefix}amount`}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n            </Stack>\n          </InlineEdit.FormMainRow>\n        </>\n      )}\n    </InlineEdit.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { Icon } from '@/components/Icon';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { Section } from '../../Section/Section';\nimport { WizardTotalAmount } from '../WizardTotalAmount/WizardTotalAmount';\nimport { EditMode } from './EditMode';\n\nconst newItemValues: FieldArrayWithId<\n  StatementOfWorkFormValues,\n  'bonusCommission'\n> = {\n  id: '',\n  name: '',\n  amount: 0,\n};\n\ninterface BonusCommissionWizardProps {\n  disabled?: boolean;\n}\n\nexport function BonusCommissionWizard({\n  disabled = false,\n}: BonusCommissionWizardProps) {\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'bonusCommission'\n  >({\n    name: 'bonusCommission',\n    initialMode: 'create',\n  });\n\n  if (wizardApi.fields.length === 0) {\n    return (\n      <Section\n        variant=\"sub-section\"\n        title=\"Bonus / Commission\"\n        optional\n        titleSideAddon={\n          <Button\n            textOnly\n            size=\"small\"\n            leftIcon={<Icon name=\"add_m\" size={24} />}\n            onClick={() => wizardApi.addNewItem(newItemValues)}\n            disabled={disabled}\n          >\n            Add Item\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <Section\n      variant=\"sub-section\"\n      title=\"Bonus / Commission\"\n      optional\n      hasSeparator\n    >\n      <InlineEdit.Wizard<StatementOfWorkFormValues, 'bonusCommission'>\n        name=\"bonusCommission\"\n        {...wizardApi}\n        newItemValues={newItemValues}\n        hasSeparators\n        EditModeComponent={EditMode}\n        SummaryComponent={WizardTotalAmount}\n      />\n    </Section>\n  );\n}\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport React from 'react';\nimport {\n  type DeepPartial,\n  type FieldValues,\n  FormProvider,\n  useForm,\n  useFormContext,\n  type UseFormReturn,\n} from 'react-hook-form';\nimport { type AnyObjectSchema } from 'yup';\nimport { Stack } from '@/layout';\nimport * as Shared from '../shared';\nimport { useFieldArrayWizardFormContext } from '../shared/context';\n\ninterface PreviewMainRowProps {\n  index: number;\n  children: React.ReactNode;\n  displayLineNumbers?: boolean;\n}\n\nexport function PreviewMainRow({\n  index,\n  children,\n  displayLineNumbers = false,\n}: PreviewMainRowProps) {\n  const { deleteItem, editItem, canEdit, canDelete } =\n    useFieldArrayWizardFormContext();\n\n  return (\n    <Shared.MainRow\n      index={index}\n      displayLineNumbers={displayLineNumbers}\n      actionButtons={\n        <>\n          {canEdit && <Shared.EditButton onClick={() => editItem(index)} />}\n          {canDelete && (\n            <Shared.DeleteButton onClick={() => deleteItem(index)} />\n          )}\n        </>\n      }\n    >\n      {children}\n    </Shared.MainRow>\n  );\n}\n\ninterface FormMainRowProps {\n  index: number;\n  children: React.ReactNode;\n  displayLineNumbers?: boolean;\n}\n\nexport function FormMainRow({\n  index,\n  children,\n  displayLineNumbers = false,\n}: FormMainRowProps) {\n  const { deleteItem, canDelete } = useFieldArrayWizardFormContext();\n\n  return (\n    <Shared.MainRow\n      index={index}\n      displayLineNumbers={displayLineNumbers}\n      actionButtons={\n        <>\n          {canDelete && (\n            <Shared.DeleteButton onClick={() => deleteItem(index)} />\n          )}\n        </>\n      }\n      hasInputs\n    >\n      {children}\n    </Shared.MainRow>\n  );\n}\n\nexport const FormSecondaryRow = Shared.SecondaryRow;\n\ninterface FormFooterProps {\n  children: React.ReactNode;\n  index: number;\n}\n\nexport function FormFooter({ children, index }: FormFooterProps) {\n  const { handleSubmit, formState } = useFormContext();\n  const { saveItem, cancelItemEditing } = useFieldArrayWizardFormContext();\n\n  const { isValid } = formState;\n\n  return (\n    <Shared.FooterRow\n      actionButtons={\n        <>\n          <Shared.SaveButton\n            softDisabled={!isValid}\n            onClick={handleSubmit((data) => {\n              saveItem(index, data);\n            })}\n          >\n            Save Item\n          </Shared.SaveButton>\n          <Shared.CancelButton onClick={() => cancelItemEditing()}>\n            Cancel\n          </Shared.CancelButton>\n        </>\n      }\n    >\n      {children}\n    </Shared.FooterRow>\n  );\n}\n\nexport function FormErrorMessage() {\n  const {\n    formState: { errors },\n  } = useFormContext();\n\n  if (Object.values(errors).length === 0) {\n    return null;\n  }\n\n  const error = Object.values(errors)[0];\n\n  return <Shared.ErrorMessage message={error?.message} />;\n}\n\nexport interface EditModeProps<Values extends FieldValues> {\n  values: Values;\n  children: (options: UseFormReturn<Values>) => React.ReactNode;\n  schema: AnyObjectSchema;\n}\n\nexport function EditMode<Values extends FieldValues>({\n  values,\n  children,\n  schema,\n}: EditModeProps<Values>) {\n  const form = useForm<Values>({\n    defaultValues: values as DeepPartial<Values>,\n    resolver: yupResolver(schema),\n    mode: 'all',\n  });\n\n  return (\n    <FormProvider {...form}>\n      <Stack gap={16} vertical align=\"stretch\">\n        {children(form)}\n      </Stack>\n    </FormProvider>\n  );\n}\n","import React, { type ComponentType } from 'react';\nimport {\n  type FieldArrayPath,\n  type FieldArrayPathValue,\n  type FieldArrayWithId,\n  type FieldValues,\n  useFormContext,\n} from 'react-hook-form';\nimport { Separator } from '@/components/Separator/Separator';\nimport { Stack, StackItem } from '@/layout';\nimport {\n  FieldArrayWizardFormContextProvider,\n  type FieldArrayWizardFormContextProviderProps,\n} from '../shared/context';\nimport * as Shared from '../shared';\nimport {\n  type CreateEditOptions,\n  type RenderOptions,\n  type SummaryOptions,\n} from '../shared/types';\n\ntype WizardProps<\n  Values extends FieldValues,\n  Name extends FieldArrayPath<Values>,\n> = FieldArrayWizardFormContextProviderProps<Values, Name> & {\n  name: Name;\n  newItemValues: Partial<FieldArrayWithId<Values, Name>>;\n  hasSeparators?: boolean;\n  EditModeComponent: ComponentType<CreateEditOptions<Values, Name>>;\n  PreviewModeComponent: ComponentType<RenderOptions<Values, Name>>;\n  CreateModeComponent?: ComponentType<CreateEditOptions<Values, Name>>;\n  SummaryComponent?: ComponentType<SummaryOptions<Values, Name>>;\n};\n\nexport function Wizard<\n  Values extends FieldValues,\n  Name extends FieldArrayPath<Values>,\n>({\n  name,\n  newItemValues,\n  hasSeparators = false,\n  EditModeComponent,\n  PreviewModeComponent,\n  CreateModeComponent = EditModeComponent,\n  SummaryComponent,\n  canAdd = true,\n  canEdit = true,\n  canDelete = true,\n  ...wizardApi\n}: WizardProps<Values, Name>) {\n  const { watch } = useFormContext<Values>();\n\n  // React Hook Form library has an issue with infinite recursion of types.\n  // Throws: \"Type instantiation is excessively deep and possibly infinite.ts(2589)\"\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const allValues = watch(name as any) as FieldArrayPathValue<Values, Name>;\n  const nextRowIndex = wizardApi.fields.length;\n\n  return (\n    <FieldArrayWizardFormContextProvider<Values, Name>\n      name={name}\n      canAdd={canAdd}\n      canEdit={canEdit}\n      canDelete={canDelete}\n      {...wizardApi}\n    >\n      <Stack vertical gap={16} align=\"stretch\">\n        {wizardApi.fields.map((row, index) => {\n          if (wizardApi.mode === 'edit' && wizardApi.editedIndex === index) {\n            return (\n              <React.Fragment key={row.id}>\n                <EditModeComponent\n                  values={row}\n                  index={index}\n                  name={name}\n                  fieldNamePrefix={`${name}.${index}.`}\n                />\n                {hasSeparators && <Separator fullWidth noMargin />}\n              </React.Fragment>\n            );\n          }\n\n          return (\n            <React.Fragment key={row.id}>\n              <PreviewModeComponent\n                values={row}\n                index={index}\n                name={name}\n                fieldNamePrefix={`${name}.${index}.`}\n              />\n              {hasSeparators && <Separator fullWidth noMargin />}\n            </React.Fragment>\n          );\n        })}\n\n        <StackItem>\n          {canAdd && wizardApi.mode === 'create' ? (\n            <CreateModeComponent\n              values={newItemValues}\n              index={nextRowIndex}\n              name={name}\n              fieldNamePrefix={`${name}.${nextRowIndex}.`}\n            />\n          ) : (\n            <Stack justify=\"space-between\">\n              {canAdd && (\n                <Shared.AddButton onClick={() => wizardApi.showNewItemForm()}>\n                  Add New Item\n                </Shared.AddButton>\n              )}\n              {SummaryComponent && <SummaryComponent rows={allValues} />}\n            </Stack>\n          )}\n        </StackItem>\n      </Stack>\n    </FieldArrayWizardFormContextProvider>\n  );\n}\n","import {\n  EditMode,\n  FormErrorMessage,\n  FormFooter,\n  FormMainRow,\n  FormSecondaryRow,\n  PreviewMainRow,\n} from './EditMode';\nimport { Wizard } from './Wizard';\n\nexport const CreateEditPreview = {\n  Wizard,\n  EditMode,\n  PreviewMainRow,\n  FormMainRow,\n  FormSecondaryRow,\n  FormErrorMessage,\n  FormFooter,\n};\n","import { reach } from 'yup';\nimport { Controller } from 'react-hook-form';\nimport { useState } from 'react';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport {\n  statementOfWorkFormSchema,\n  type StatementOfWorkFormValues,\n} from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { TextField } from '@/components/TextField';\nimport { DatePicker } from '@/components/DatePicker';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\nimport { Icon } from '@/components/Icon';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { TextArea } from '@/components/TextArea';\n\nconst schema = reach(statementOfWorkFormSchema, 'deliverables.0');\n\nexport function EditMode({\n  values,\n  index,\n}: CreateEditOptions<StatementOfWorkFormValues, 'deliverables'>) {\n  const [isDescriptionVisible, setIsDescriptionVisible] = useState(\n    !!values.description,\n  );\n\n  return (\n    <CreateEditPreview.EditMode schema={schema} values={values}>\n      {({ control, setValue }) => (\n        <>\n          <CreateEditPreview.FormMainRow index={index}>\n            <StackItem grow>\n              <Stack gap={16}>\n                <Controller\n                  control={control}\n                  name=\"name\"\n                  render={({ field, fieldState }) => (\n                    <TextField\n                      placeholder=\"Deliverable Name\"\n                      inputSize=\"small\"\n                      {...field}\n                      error={!!fieldState.error}\n                    />\n                  )}\n                />\n                <StackItem shrink={0}>\n                  <Controller\n                    control={control}\n                    name=\"dueDate\"\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        label=\"Due Date (optional)\"\n                        placeholder=\"MM/DD/YYYY\"\n                        {...fieldProps}\n                        onChange={(newValue) =>\n                          fieldProps.onChange(newValue ?? null)\n                        }\n                        error={!!fieldState.error}\n                      />\n                    )}\n                  />\n                </StackItem>\n              </Stack>\n            </StackItem>\n          </CreateEditPreview.FormMainRow>\n\n          <Controller\n            control={control}\n            name=\"description\"\n            render={({ field }) =>\n              isDescriptionVisible ? (\n                <StackItem grow>\n                  <TextArea\n                    placeholder=\"Description\"\n                    maxLength={300}\n                    autoResize\n                    {...field}\n                  />\n                </StackItem>\n              ) : (\n                <></>\n              )\n            }\n          />\n\n          <CreateEditPreview.FormFooter index={index}>\n            {isDescriptionVisible ? (\n              <Button\n                textOnly\n                size=\"small\"\n                leftIcon={<Icon name=\"close_m\" size={24} />}\n                onClick={() => {\n                  setIsDescriptionVisible(false);\n                  setValue('description', '');\n                }}\n              >\n                Remove description\n              </Button>\n            ) : (\n              <Button\n                textOnly\n                size=\"small\"\n                leftIcon={<Icon name=\"edit_m\" size={24} />}\n                onClick={() => {\n                  setIsDescriptionVisible(true);\n                }}\n              >\n                Add description{' '}\n                <TSpan colorToken=\"--text-body-neutral-default\">\n                  (optional)\n                </TSpan>\n              </Button>\n            )}\n          </CreateEditPreview.FormFooter>\n        </>\n      )}\n    </CreateEditPreview.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport { TSpan } from '@/components/Typography';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\n\ntype Values = FieldArrayWithId<StatementOfWorkFormValues, 'deliverables'>;\n\ninterface PreviewModeProps {\n  values: Values;\n  index: number;\n}\n\nexport function PreviewMode({ values, index }: PreviewModeProps) {\n  return (\n    <CreateEditPreview.PreviewMainRow displayLineNumbers index={index}>\n      <StackItem grow>\n        <Stack gap={16} align=\"center\">\n          <Stack gap={4} vertical align=\"stretch\" grow>\n            <TSpan font=\"body-m\">{values.name}</TSpan>\n            {values.description && (\n              <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n                {values.description}\n              </TSpan>\n            )}\n          </Stack>\n          {values.dueDate && (\n            <Stack gap={8} shrink={0}>\n              <TSpan font=\"body-m-bold\">Due Date:</TSpan>\n              <TSpan font=\"body-m\">{formatDateString(values.dueDate)}</TSpan>\n            </Stack>\n          )}\n        </Stack>\n      </StackItem>\n    </CreateEditPreview.PreviewMainRow>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport { Icon } from '@/components/Icon';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { Section } from '../../Section/Section';\nimport { EditMode } from './EditMode';\nimport { PreviewMode } from './PreviewMode';\n\nconst newItemValues: Partial<\n  FieldArrayWithId<StatementOfWorkFormValues, 'deliverables'>\n> = {\n  id: '',\n  name: '',\n  description: '',\n  dueDate: undefined,\n};\n\ninterface DeliverablesWizardProps {\n  disabled?: boolean;\n}\n\nexport function DeliverablesWizard({\n  disabled = false,\n}: DeliverablesWizardProps) {\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'deliverables'\n  >({\n    name: 'deliverables',\n    initialMode: 'preview',\n  });\n\n  if (wizardApi.fields.length === 0 && wizardApi.mode === 'preview') {\n    return (\n      <Section\n        title=\"Deliverables\"\n        titleSideAddon={\n          <Button\n            textOnly\n            size=\"small\"\n            leftIcon={<Icon name=\"add_m\" size={24} />}\n            onClick={() => wizardApi.showNewItemForm()}\n            disabled={disabled}\n          >\n            Add Item\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <Section title=\"Deliverables\" hasSeparator>\n      <CreateEditPreview.Wizard<StatementOfWorkFormValues, 'deliverables'>\n        name=\"deliverables\"\n        {...wizardApi}\n        newItemValues={newItemValues}\n        PreviewModeComponent={PreviewMode}\n        EditModeComponent={EditMode}\n      />\n    </Section>\n  );\n}\n","import { Controller } from 'react-hook-form';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { FormControl } from '@/components/FormControl';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\n\nexport function EditMode({\n  index,\n  fieldNamePrefix,\n}: CreateEditOptions<StatementOfWorkFormValues, 'expenseReimbursement'>) {\n  return (\n    <InlineEdit.EditMode>\n      {({ control }) => (\n        <>\n          <InlineEdit.FormMainRow index={index} displayLineNumbers>\n            <Stack gap={16} fullWidth>\n              <StackItem grow={3}>\n                <Controller\n                  control={control}\n                  name={`${fieldNamePrefix}name`}\n                  render={({ field, fieldState }) => (\n                    <TextField\n                      placeholder=\"Description\"\n                      inputSize=\"small\"\n                      {...field}\n                      {...getErrorProps(fieldState)}\n                    />\n                  )}\n                />\n              </StackItem>\n              <StackItem shrink={1}>\n                <FormControl label=\"Amount:\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller\n                      control={control}\n                      name={`${fieldNamePrefix}amount`}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n            </Stack>\n          </InlineEdit.FormMainRow>\n        </>\n      )}\n    </InlineEdit.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { Icon } from '@/components/Icon';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { Section } from '../../Section/Section';\nimport { WizardTotalAmount } from '../WizardTotalAmount/WizardTotalAmount';\nimport { EditMode } from './EditMode';\n\nconst newItemValues: FieldArrayWithId<\n  StatementOfWorkFormValues,\n  'expenseReimbursement'\n> = {\n  id: '',\n  name: '',\n  amount: 0,\n};\n\ninterface ExpenseReimbursementWizardProps {\n  disabled?: boolean;\n}\n\nexport function ExpenseReimbursementWizard({\n  disabled = false,\n}: ExpenseReimbursementWizardProps) {\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'expenseReimbursement'\n  >({\n    name: 'expenseReimbursement',\n    initialMode: 'create',\n  });\n\n  if (wizardApi.fields.length === 0) {\n    return (\n      <Section\n        variant=\"sub-section\"\n        title=\"Expense Reimbursement\"\n        optional\n        titleSideAddon={\n          <Button\n            textOnly\n            size=\"small\"\n            leftIcon={<Icon name=\"add_m\" size={24} />}\n            onClick={() => wizardApi.addNewItem(newItemValues)}\n            disabled={disabled}\n          >\n            Add Item\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <Section\n      variant=\"sub-section\"\n      title=\"Expense Reimbursement\"\n      optional\n      hasSeparator\n    >\n      <InlineEdit.Wizard<StatementOfWorkFormValues, 'expenseReimbursement'>\n        name=\"expenseReimbursement\"\n        {...wizardApi}\n        newItemValues={newItemValues}\n        hasSeparators\n        EditModeComponent={EditMode}\n        SummaryComponent={WizardTotalAmount}\n      />\n    </Section>\n  );\n}\n","import styled from 'styled-components';\nimport { TSpan } from '../Typography';\nimport { type OptionSelectorSize } from './types';\n\nconst Container = styled.button<{\n  size: OptionSelectorSize;\n  isSelected: boolean;\n}>`\n  display: flex;\n  flex-wrap: nowrap;\n  align-items: center;\n  flex-grow: 1;\n  flex-shrink: 1;\n  gap: 12px;\n  padding: ${(props) => (props.size === 'small' ? '8px 12px' : '12px 12px')};\n  background-color: transparent;\n  border: 1px solid\n    ${(props) =>\n      props.isSelected\n        ? 'var(--border-option-selector-neutral-pressed)'\n        : 'var(--border-option-selector-neutral-default)'};\n  border-radius: 4px;\n  cursor: pointer;\n  max-height: 56px;\n  height: 56px;\n`;\n\ninterface LabelProps {\n  isSelected: boolean;\n}\n\nconst Label = styled(TSpan).attrs<LabelProps>((props) => ({\n  font: props.isSelected ? 'body-m-bold' : 'body-m',\n}))<LabelProps>`\n  white-space: nowrap;\n  flex-grow: 1;\n`;\n\nconst SideElement = styled.div`\n  flex-grow: 0;\n  flex-shrink: 0;\n`;\n\nexport default {\n  Container,\n  Label,\n  SideElement,\n};\n","import React from 'react';\nimport { Stack } from '@/layout';\nimport { Icon } from '../Icon';\nimport { Radiobox } from '../Radiobox';\nimport S from './styles';\nimport { type OptionSelectorSize } from './types';\n\ninterface OptionSelectorItemProps {\n  label: string;\n  size: OptionSelectorSize;\n  isSelected: boolean;\n  leftElement?: React.ReactElement;\n  rightElement?: React.ReactElement;\n  footerElement?: React.ReactElement;\n  onClick?(): void;\n}\n\nexport function OptionSelectorItem({\n  size,\n  label,\n  isSelected,\n  leftElement,\n  rightElement,\n  footerElement,\n  onClick,\n}: OptionSelectorItemProps) {\n  return (\n    <Stack vertical gap={16} grow align=\"stretch\">\n      <S.Container size={size} isSelected={isSelected} onClick={onClick}>\n        <Radiobox\n          isChecked={isSelected}\n          icon={\n            isSelected ? (\n              <Icon\n                name=\"radio_btn_m\"\n                size={12}\n                color=\"--icon-radiobutton-brand-primary-default\"\n              />\n            ) : undefined\n          }\n        />\n        {leftElement && <S.SideElement>{leftElement}</S.SideElement>}\n        <S.Label isSelected={isSelected}>{label}</S.Label>\n        {rightElement && <S.SideElement>{rightElement}</S.SideElement>}\n      </S.Container>\n      {footerElement}\n    </Stack>\n  );\n}\n\nexport default OptionSelectorItem;\n","import { Stack } from '@/layout';\nimport { OptionSelectorItem } from './OptionSelectorItem';\nimport { type OptionSelectorOption, type OptionSelectorSize } from './types';\n\nexport interface OptionSelectorProps<T extends string> {\n  size?: OptionSelectorSize;\n  options: OptionSelectorOption<T>[];\n  value: T;\n  onChange(value: T): void;\n}\n\nexport function OptionSelector<T extends string>({\n  size = 'large',\n  options,\n  value,\n  onChange,\n}: OptionSelectorProps<T>) {\n  return (\n    <Stack gap={16} align=\"stretch\" justify=\"stretch\" fullWidth>\n      {options.map((option) => (\n        <OptionSelectorItem\n          key={option.value}\n          size={size}\n          {...option}\n          isSelected={value === option.value}\n          onClick={() => onChange(option.value)}\n        />\n      ))}\n    </Stack>\n  );\n}\n\nexport default OptionSelector;\n","import { SelectField } from '@/components/SelectField';\nimport { type SelectFieldProps } from '@/components/SelectField/SelectField';\nimport { InvoiceUtils } from '@/features/invoices/utils/invoice';\n\ntype CurrencySelectorProps = Omit<\n  SelectFieldProps<string>,\n  'onChange' | 'options'\n> & {\n  onChange: (value: string | undefined) => void;\n};\n\nexport function CurrencySelector({\n  onChange,\n  ...selectFieldProps\n}: CurrencySelectorProps) {\n  return (\n    <SelectField\n      {...selectFieldProps}\n      hideIcons={false}\n      disabledIconColor={false}\n      onChange={(option) => onChange(option.value)}\n      options={InvoiceUtils.currencyOptions}\n    />\n  );\n}\n","import { Controller } from 'react-hook-form';\nimport { DatePicker } from '@/components/DatePicker';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { FormControl } from '@/components/FormControl';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\n\nexport function EditMode({\n  index,\n  fieldNamePrefix,\n}: CreateEditOptions<StatementOfWorkFormValues, 'fees.instalments'>) {\n  return (\n    <InlineEdit.EditMode>\n      {({ control }) => (\n        <>\n          <InlineEdit.FormMainRow index={index} displayLineNumbers>\n            <Stack gap={16} fullWidth>\n              <StackItem grow={0}>\n                <FormControl label=\"Amount:\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller\n                      control={control}\n                      name={`${fieldNamePrefix}amount`}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n              <StackItem grow={0}>\n                <FormControl label=\"Due:\" horizontal>\n                  <Controller\n                    control={control}\n                    name={`${fieldNamePrefix}dueDate`}\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n            </Stack>\n          </InlineEdit.FormMainRow>\n          <InlineEdit.FormErrorMessage index={index} />\n        </>\n      )}\n    </InlineEdit.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { WizardTotalAmount } from '../../WizardTotalAmount/WizardTotalAmount';\nimport { EditMode } from './EditMode';\n\nconst newItemValues: FieldArrayWithId<\n  StatementOfWorkFormValues,\n  'fees.instalments'\n> = {\n  id: '',\n  amount: 0,\n  dueDate: new Date(),\n};\n\nexport function InstalmentsWizard() {\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'fees.instalments'\n  >({\n    name: 'fees.instalments',\n    initialMode: 'create',\n  });\n\n  return (\n    <InlineEdit.Wizard<StatementOfWorkFormValues, 'fees.instalments'>\n      name=\"fees.instalments\"\n      {...wizardApi}\n      newItemValues={newItemValues}\n      hasSeparators\n      EditModeComponent={EditMode}\n      SummaryComponent={WizardTotalAmount}\n    />\n  );\n}\n","import { isEqual } from 'lodash';\nimport { useLayoutEffect } from 'react';\n\ninterface UseSynchronizeFieldArrayItemsOptions {\n  thisArray: Array<unknown> | undefined;\n  otherArray: Array<unknown> | undefined;\n  append: () => void;\n  remove: (index: number) => void;\n}\n\nexport function useSynchronizeFieldArrayItems({\n  thisArray,\n  otherArray,\n  append,\n  remove,\n}: UseSynchronizeFieldArrayItemsOptions) {\n  const otherSerialized = JSON.stringify(otherArray ?? null);\n  const thisSerialized = JSON.stringify(thisArray ?? null);\n\n  useLayoutEffect(() => {\n    const other = JSON.parse(otherSerialized) as Array<unknown> | null;\n    const previous = JSON.parse(thisSerialized) as Array<unknown> | null;\n\n    if (!previous || !other || other.length === previous.length) {\n      return;\n    }\n\n    if (other.length > previous.length) {\n      append();\n      return;\n    }\n\n    const removedIndex = previous.findIndex(\n      (p, index) => !isEqual(p, other[index]),\n    );\n    remove(removedIndex);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [otherSerialized, thisSerialized]);\n}\n","import { Controller, type FieldPathValue } from 'react-hook-form';\nimport { DatePicker } from '@/components/DatePicker';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { FormControl } from '@/components/FormControl';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport {\n  type StatementOfWorkFormValues,\n  useStatementOfWorkFormContext,\n} from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\n\nexport function EditMode({\n  index,\n  fieldNamePrefix,\n}: CreateEditOptions<StatementOfWorkFormValues, 'fees.milestones'>) {\n  const { watch } = useStatementOfWorkFormContext();\n\n  const milestone = watch(`milestones.${index}`) as\n    | FieldPathValue<StatementOfWorkFormValues, `milestones.0`>\n    | undefined;\n\n  return (\n    <InlineEdit.EditMode>\n      {({ control }) => (\n        <>\n          <InlineEdit.FormMainRow index={index} displayLineNumbers>\n            <Stack gap={16} align=\"center\" fullWidth>\n              <StackItem grow={2}>\n                <Stack gap={4} vertical fullWidth align=\"stretch\">\n                  {milestone?.name}\n                  <TSpan\n                    font=\"footnote\"\n                    colorToken=\"--text-card-neutral-default\"\n                  >\n                    Delivery Date:{' '}\n                    {milestone?.dueDate\n                      ? formatDateString(milestone.dueDate)\n                      : '--'}\n                  </TSpan>\n                </Stack>\n              </StackItem>\n              <StackItem grow={1}>\n                <FormControl label=\"Amount:\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller\n                      control={control}\n                      name={`${fieldNamePrefix}amount`}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n              <StackItem grow={1}>\n                <FormControl label=\"Due:\" horizontal>\n                  <Controller\n                    control={control}\n                    name={`${fieldNamePrefix}dueDate`}\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n            </Stack>\n          </InlineEdit.FormMainRow>\n        </>\n      )}\n    </InlineEdit.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport {\n  type StatementOfWorkFormValues,\n  useStatementOfWorkFormContext,\n} from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { useSynchronizeFieldArrayItems } from '@/hooks/fieldArrayWizard/useSynchronizeFieldArrayItems';\nimport { TSpan } from '@/components/Typography';\nimport { WizardTotalAmount } from '../../WizardTotalAmount/WizardTotalAmount';\nimport { EditMode } from './EditMode';\n\nconst newItemValues: FieldArrayWithId<\n  StatementOfWorkFormValues,\n  'fees.milestones'\n> = {\n  id: '',\n  amount: 0,\n  dueDate: new Date(),\n};\n\nexport function MilestonesWizard() {\n  const { watch } = useStatementOfWorkFormContext();\n\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'fees.milestones'\n  >({\n    name: 'fees.milestones',\n    initialMode: 'create',\n  });\n\n  // This wizard displays only items related to milestones chosen in the previous section.\n  useSynchronizeFieldArrayItems({\n    thisArray: wizardApi.fields,\n    otherArray: watch('milestones'),\n    append: () => wizardApi.addNewItem(newItemValues),\n    remove: (index: number) => wizardApi.deleteItem(index),\n  });\n\n  if (wizardApi.fields.length === 0) {\n    return (\n      <TSpan>\n        You haven&apos;t added any Milestones on the previous steps yet.\n      </TSpan>\n    );\n  }\n\n  return (\n    <InlineEdit.Wizard<StatementOfWorkFormValues, 'fees.milestones'>\n      name=\"fees.milestones\"\n      {...wizardApi}\n      newItemValues={newItemValues}\n      hasSeparators\n      canAdd={false}\n      canDelete={false}\n      EditModeComponent={EditMode}\n      SummaryComponent={WizardTotalAmount}\n    />\n  );\n}\n","import { Controller } from 'react-hook-form';\nimport { FeesCategoryTypes } from '@/apollo/generated/types';\nimport { FormControl } from '@/components/FormControl';\nimport { OptionSelector } from '@/components/OptionSelector';\nimport { type OptionSelectorOption } from '@/components/OptionSelector/types';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport { DatePicker } from '@/components/DatePicker';\nimport {\n  type StatementOfWorkFormValues,\n  useStatementOfWorkFormContext,\n} from '../../../hooks/statementOfWorkForm';\nimport { CurrencySelector } from '../../CurrencySelector/CurrencySelector';\nimport { Section } from '../../Section/Section';\nimport { InstalmentsWizard } from './InstalmentsWizard/InstalmentsWizard';\nimport { MilestonesWizard } from './MilestonesWizard/MilestonesWizard';\n\nexport function FeesWizard() {\n  const { control, watch } = useStatementOfWorkFormContext();\n\n  const feeCategory = watch('fees.feeCategory');\n\n  const options: OptionSelectorOption<FeesCategoryTypes>[] = [\n    {\n      value: FeesCategoryTypes.Inadvance,\n      label: 'In Advance',\n    },\n    {\n      value: FeesCategoryTypes.Installments,\n      label: 'Installments',\n    },\n    {\n      value: FeesCategoryTypes.Milestones,\n      label: 'Milestones',\n    },\n    {\n      value: FeesCategoryTypes.Lumpsum,\n      label: 'Lump Sum',\n    },\n  ];\n\n  return (\n    <Section\n      title=\"Fees\"\n      titleSideAddon={\n        <StackItem grow={0} shrink={0}>\n          <Controller<StatementOfWorkFormValues, 'payments.currency'>\n            name=\"payments.currency\"\n            control={control}\n            render={({ field: { ref, ...fieldProps }, fieldState }) => (\n              <CurrencySelector\n                inputSize=\"small\"\n                disabled\n                {...fieldProps}\n                {...getErrorProps(fieldState)}\n              />\n            )}\n          />\n        </StackItem>\n      }\n    >\n      <Stack vertical gap={16} align=\"stretch\">\n        <Controller<StatementOfWorkFormValues, 'fees.feeCategory'>\n          name=\"fees.feeCategory\"\n          control={control}\n          render={({ field: { ref, ...fieldProps } }) => (\n            <OptionSelector<FeesCategoryTypes>\n              size=\"small\"\n              {...fieldProps}\n              options={options}\n            />\n          )}\n        />\n        <Stack vertical gap={16} align=\"stretch\" fullWidth>\n          {feeCategory === FeesCategoryTypes.Inadvance ? (\n            <Stack gap={24} align=\"center\" justify=\"start\">\n              <StackItem grow={0}>\n                <FormControl label=\"Amount\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller<\n                      StatementOfWorkFormValues,\n                      'fees.inAdvance.amount'\n                    >\n                      name=\"fees.inAdvance.amount\"\n                      control={control}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          fullWidth={false}\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n\n              <StackItem grow={0}>\n                <FormControl label=\"Due:\" horizontal>\n                  <Controller<\n                    StatementOfWorkFormValues,\n                    'fees.inAdvance.dueDate'\n                  >\n                    name=\"fees.inAdvance.dueDate\"\n                    control={control}\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        placeholder=\"MM/DD/YYYY\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n            </Stack>\n          ) : feeCategory === FeesCategoryTypes.Installments ? (\n            <InstalmentsWizard />\n          ) : feeCategory === FeesCategoryTypes.Milestones ? (\n            <MilestonesWizard />\n          ) : feeCategory === FeesCategoryTypes.Lumpsum ? (\n            <Stack gap={24} align=\"center\" justify=\"start\">\n              <StackItem grow={0}>\n                <FormControl label=\"Amount\" horizontal>\n                  <Stack gap={8} align=\"center\">\n                    <Controller<\n                      StatementOfWorkFormValues,\n                      'fees.lumpSum.amount'\n                    >\n                      name=\"fees.lumpSum.amount\"\n                      control={control}\n                      render={({\n                        field: { ref, ...fieldProps },\n                        fieldState,\n                      }) => (\n                        <TextField\n                          inputSize=\"small\"\n                          numberOnly\n                          isCurrency\n                          fullWidth={false}\n                          {...fieldProps}\n                          {...getErrorProps(fieldState)}\n                        />\n                      )}\n                    />\n                    <TSpan colorToken=\"--text-tablecell-header-neutral-default\">\n                      USD\n                    </TSpan>\n                  </Stack>\n                </FormControl>\n              </StackItem>\n\n              <StackItem grow={0}>\n                <FormControl label=\"Due:\" horizontal>\n                  <Controller<StatementOfWorkFormValues, 'fees.lumpSum.dueDate'>\n                    name=\"fees.lumpSum.dueDate\"\n                    control={control}\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        placeholder=\"MM/DD/YYYY\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n            </Stack>\n          ) : null}\n        </Stack>\n      </Stack>\n    </Section>\n  );\n}\n","import { reach } from 'yup';\nimport { Controller } from 'react-hook-form';\nimport { useState } from 'react';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport {\n  statementOfWorkFormSchema,\n  type StatementOfWorkFormValues,\n} from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { TextField } from '@/components/TextField';\nimport { DatePicker } from '@/components/DatePicker';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\nimport { Icon } from '@/components/Icon';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { TextArea } from '@/components/TextArea';\nimport { getErrorProps } from '@/utils/forms';\n\nexport function EditMode({\n  values,\n  index,\n}: CreateEditOptions<StatementOfWorkFormValues, 'milestones'>) {\n  const [isDescriptionVisible, setIsDescriptionVisible] = useState(\n    !!values.description,\n  );\n\n  return (\n    <CreateEditPreview.EditMode\n      schema={reach(statementOfWorkFormSchema, 'milestones.0')}\n      values={values}\n    >\n      {({ control, setValue }) => (\n        <>\n          <CreateEditPreview.FormMainRow index={index}>\n            <StackItem grow>\n              <Stack gap={16}>\n                <Controller\n                  control={control}\n                  name=\"name\"\n                  render={({ field, fieldState }) => (\n                    <TextField\n                      placeholder=\"Milestone Name\"\n                      inputSize=\"small\"\n                      {...field}\n                      {...getErrorProps(fieldState)}\n                    />\n                  )}\n                />\n                <StackItem shrink={0}>\n                  <Controller\n                    control={control}\n                    name=\"dueDate\"\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        size=\"small\"\n                        label=\"Delivery Date\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                        required\n                      />\n                    )}\n                  />\n                </StackItem>\n              </Stack>\n            </StackItem>\n          </CreateEditPreview.FormMainRow>\n\n          <Controller\n            control={control}\n            name=\"description\"\n            render={({ field }) =>\n              isDescriptionVisible ? (\n                <StackItem grow>\n                  <TextArea\n                    placeholder=\"Description\"\n                    maxLength={300}\n                    autoResize\n                    {...field}\n                  />\n                </StackItem>\n              ) : (\n                <></>\n              )\n            }\n          />\n\n          <CreateEditPreview.FormFooter index={index}>\n            {isDescriptionVisible ? (\n              <Button\n                textOnly\n                size=\"small\"\n                leftIcon={<Icon name=\"close_m\" size={24} />}\n                onClick={() => {\n                  setIsDescriptionVisible(false);\n                  setValue('description', '');\n                }}\n              >\n                Remove description\n              </Button>\n            ) : (\n              <Button\n                textOnly\n                size=\"small\"\n                leftIcon={<Icon name=\"edit_m\" size={24} />}\n                onClick={() => {\n                  setIsDescriptionVisible(true);\n                }}\n              >\n                Add description{' '}\n                <TSpan colorToken=\"--text-body-neutral-default\">\n                  (optional)\n                </TSpan>\n              </Button>\n            )}\n          </CreateEditPreview.FormFooter>\n        </>\n      )}\n    </CreateEditPreview.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport { TSpan } from '@/components/Typography';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { Stack, StackItem } from '@/layout';\nimport { formatDateString } from '@/utils/getTimeStampForDisplaying';\n\ntype Values = FieldArrayWithId<StatementOfWorkFormValues, 'milestones'>;\n\ninterface PreviewModeProps {\n  values: Values;\n  index: number;\n}\n\nexport function PreviewMode({ values, index }: PreviewModeProps) {\n  return (\n    <CreateEditPreview.PreviewMainRow displayLineNumbers index={index}>\n      <StackItem grow>\n        <Stack gap={16} align=\"center\">\n          <Stack gap={4} vertical align=\"stretch\" grow>\n            <TSpan font=\"body-m\">{values.name}</TSpan>\n            {values.description && (\n              <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n                {values.description}\n              </TSpan>\n            )}\n          </Stack>\n          <Stack gap={8} shrink={0}>\n            <TSpan font=\"body-m-bold\">Delivery Date:</TSpan>\n            <TSpan font=\"body-m\">{formatDateString(values.dueDate)}</TSpan>\n          </Stack>\n        </Stack>\n      </StackItem>\n    </CreateEditPreview.PreviewMainRow>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { CreateEditPreview } from '@/components/FieldArrayWizard/CreateEditPreview';\nimport { Icon } from '@/components/Icon';\nimport { type StatementOfWorkFormValues } from '@/features/contracts/hooks/statementOfWorkForm';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { Section } from '../../Section/Section';\nimport { EditMode } from './EditMode';\nimport { PreviewMode } from './PreviewMode';\n\nconst newItemValues: FieldArrayWithId<StatementOfWorkFormValues, 'milestones'> =\n  {\n    id: '',\n    name: '',\n    description: '',\n    dueDate: new Date(),\n  };\n\ninterface MilestonesWizardProps {\n  disabled?: boolean;\n}\n\nexport function MilestonesWizard({ disabled = false }: MilestonesWizardProps) {\n  const wizardApi = useFieldArrayWizard<\n    StatementOfWorkFormValues,\n    'milestones'\n  >({\n    name: 'milestones',\n    initialMode: 'preview',\n  });\n\n  if (wizardApi.fields.length === 0 && wizardApi.mode === 'preview') {\n    return (\n      <Section\n        title=\"Milestones\"\n        optional\n        titleSideAddon={\n          <Button\n            textOnly\n            size=\"small\"\n            leftIcon={<Icon name=\"add_m\" size={24} />}\n            onClick={() => wizardApi.showNewItemForm()}\n            disabled={disabled}\n          >\n            Add Item\n          </Button>\n        }\n      />\n    );\n  }\n\n  return (\n    <Section title=\"Milestones\" hasSeparator optional>\n      <CreateEditPreview.Wizard<StatementOfWorkFormValues, 'milestones'>\n        name=\"milestones\"\n        {...wizardApi}\n        newItemValues={newItemValues}\n        PreviewModeComponent={PreviewMode}\n        EditModeComponent={EditMode}\n      />\n    </Section>\n  );\n}\n","import styled from 'styled-components';\nimport { Card as OriginalCard } from '@/components/Card';\nimport { mediaSizes } from '@/constants/devices';\nimport { Separator as OriginalSeparator } from '@/components/Separator/Separator';\n\nconst Card = styled(OriginalCard)`\n  padding: 24px;\n  // Don't clip dropdown popover layer\n  overflow: visible;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    border-radius: 0;\n  }\n`;\n\nconst Separator = styled(OriginalSeparator)`\n  width: 100%;\n`;\n\nexport default {\n  Card,\n  Separator,\n};\n","import { Controller } from 'react-hook-form';\nimport { DatePicker } from '@/components/DatePicker';\nimport { FormControl } from '@/components/FormControl';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport { TextArea } from '@/components/TextArea';\nimport { type SowStatus } from '@/apollo/generated/types';\nimport { type SowFragment } from '@/apollo/graphql';\nimport { type Maybe } from '@/common/types';\nimport { FormError } from '@/components/FormError';\nimport {\n  type StatementOfWorkFormValues,\n  useStatementOfWorkFormContext,\n} from '../../hooks/statementOfWorkForm';\nimport { ContractSelector } from '../ContractSelector/ContractSelector';\nimport { DocumentStatusTag } from '../DocumentStatusTag/DocumentStatusTag';\nimport { ProjectNoumSelector } from '../ProjectNoumSelector/ProjectNoumSelector';\nimport { Section } from '../Section/Section';\nimport { BonusCommissionWizard } from './BonusCommissionsWizard/BonusCommissionWizard';\nimport { DeliverablesWizard } from './DeliverablesWizard/DeliverablesWizard';\nimport { ExpenseReimbursementWizard } from './ExpenseReimbursementWizard/ExpenseReimbursementWizard';\nimport { FeesWizard } from './FeesWizard/FeesWizard';\nimport { MilestonesWizard } from './MilestonesWizard/MilestonesWizard';\nimport S from './styles';\n\ninterface StatementOfWorkFormProps {\n  documentStatus: SowStatus;\n  isCreating: boolean;\n  onNoumChange(): void;\n  disableNoum?: boolean;\n  statementOfWork?: Maybe<SowFragment>;\n}\n\nexport function StatementOfWorkForm({\n  documentStatus,\n  isCreating,\n  onNoumChange,\n  disableNoum = false,\n  statementOfWork,\n}: StatementOfWorkFormProps) {\n  const {\n    control,\n    getValues,\n    formState: { errors },\n  } = useStatementOfWorkFormContext();\n  const { isDesktop } = useBreakpoints();\n\n  return (\n    <Stack gap={isDesktop ? 24 : 8} vertical align=\"stretch\">\n      <S.Card>\n        <Stack gap={16} vertical align=\"stretch\">\n          <Stack gap={16} justify=\"stretch\" align=\"center\">\n            <TSpan font=\"heading-xs-bold\">Title:</TSpan>\n            <StackItem grow>\n              <Controller<StatementOfWorkFormValues, 'title'>\n                name=\"title\"\n                control={control}\n                render={({ field, fieldState }) => (\n                  <TextField\n                    inputSize=\"small\"\n                    disabled={isCreating}\n                    {...field}\n                    {...getErrorProps(fieldState)}\n                  />\n                )}\n              />\n            </StackItem>\n            <DocumentStatusTag status={documentStatus} size=\"medium\" />\n          </Stack>\n\n          <S.Separator />\n\n          <Stack gap={16} vertical align=\"stretch\">\n            <FormControl label=\"Noum Assignment\">\n              <Controller<StatementOfWorkFormValues, 'noumId'>\n                name=\"noumId\"\n                render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                  <ProjectNoumSelector\n                    disabled={disableNoum || isCreating}\n                    label=\"\"\n                    preselectedItem={statementOfWork?.linkedNoum}\n                    inputSize=\"small\"\n                    placeholderText=\"Find a Noum...\"\n                    {...fieldProps}\n                    onChange={(newNoumId) => {\n                      fieldProps.onChange(newNoumId);\n                      onNoumChange();\n                    }}\n                    {...getErrorProps(fieldState)}\n                  />\n                )}\n              />\n            </FormControl>\n            <Stack gap={16} fullWidth>\n              <StackItem grow>\n                <FormControl label=\"Scope of Work\">\n                  <Controller<StatementOfWorkFormValues, 'scopeOfWork'>\n                    name=\"scopeOfWork\"\n                    render={({\n                      field: { ref, value, ...fieldProps },\n                      fieldState,\n                    }) => (\n                      <TextArea\n                        disabled={isCreating}\n                        label=\"\"\n                        maxLength={3000}\n                        placeholder=\"Description\"\n                        value={value ?? ''}\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n              <StackItem>\n                <FormControl label=\"Effective Date\">\n                  <Controller<StatementOfWorkFormValues, 'effectiveDate'>\n                    name=\"effectiveDate\"\n                    render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                      <DatePicker\n                        disabled={isCreating}\n                        label=\"\"\n                        placeholder=\"MM/DD/YYYY\"\n                        size=\"small\"\n                        {...fieldProps}\n                        {...getErrorProps(fieldState)}\n                        required\n                      />\n                    )}\n                  />\n                </FormControl>\n              </StackItem>\n            </Stack>\n          </Stack>\n        </Stack>\n      </S.Card>\n      <S.Card>\n        <Section title=\"Contract Attachment\" hasSeparator>\n          <Controller<StatementOfWorkFormValues, 'contractId'>\n            name=\"contractId\"\n            render={({ field: { ref, ...fieldProps }, fieldState }) => (\n              <ContractSelector\n                disabled={isCreating}\n                noumId={getValues('noumId')}\n                inputSize=\"small\"\n                label=\"\"\n                placeholderText=\"Find a Contract...\"\n                noSearchOptionsText=\"No contract exists for this Noum. Create a new one or choose a different Noum.\"\n                {...fieldProps}\n                {...getErrorProps(fieldState)}\n              />\n            )}\n          />\n        </Section>\n      </S.Card>\n\n      <S.Card hasError={!!errors.deliverables?.message}>\n        <Stack vertical align=\"stretch\" gap={8}>\n          <DeliverablesWizard disabled={isCreating} />\n          <FormError message={errors.deliverables?.message} />\n        </Stack>\n      </S.Card>\n\n      <S.Card hasError={!!errors.milestones?.message}>\n        <Stack vertical align=\"stretch\" gap={8}>\n          <MilestonesWizard disabled={isCreating} />\n          <FormError message={errors.milestones?.message} />\n        </Stack>\n      </S.Card>\n\n      <S.Card hasError={!!errors.fees?.feeCategory?.message}>\n        <FeesWizard />\n        <FormError message={errors.fees?.feeCategory?.message} />\n      </S.Card>\n\n      <S.Card>\n        <ExpenseReimbursementWizard disabled={isCreating} />\n      </S.Card>\n\n      <S.Card>\n        <BonusCommissionWizard disabled={isCreating} />\n      </S.Card>\n\n      {/* <S.Card>\n        <Section title=\"Upload your own logo\" optional>\n          TBA\n        </Section>\n      </S.Card> */}\n    </Stack>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath } from 'react-router';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport routes from '@/constants/routes';\nimport { useError, useToast } from '@/hooks';\nimport { useFormLocalDraft } from '@/hooks/formLocalDraft';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport {\n  type DraftStatementOfWorkFormValues,\n  statementOfWorkFormSchema,\n  type StatementOfWorkFormValues,\n} from '../../hooks/statementOfWorkForm';\nimport { useStatementOfWorkPermissions } from '../../hooks/statementOfWorkPermissions';\nimport {\n  DocumentType,\n  type StatementOfWork,\n  type StatementOfWorkBasic,\n} from '../../types';\nimport { StatementOfWorkUtils } from '../../utils/statementOfWork';\nimport { DeleteDocumentConfirmationModal } from '../DeleteDocumentConfirmationModal/DeleteDocumentConfirmationModal';\nimport * as DocumentHeader from '../DocumentHeader/DocumentHeader';\n\ntype ModalType = 'delete';\n\ntype StatementOfWorkFormHeaderProps = {\n  statementOfWork: StatementOfWorkBasic | null;\n  isEditMode: boolean;\n  onSaveDraft(\n    values: DraftStatementOfWorkFormValues,\n  ): Promise<StatementOfWork | null>;\n  onSaveDraftSuccess?(statementOfWork: StatementOfWork): void;\n  onDeleteDraft(): Promise<void>;\n  onGoBackToList(): void;\n};\n\nexport const StatementOfWorkFormHeader = ({\n  statementOfWork,\n  isEditMode,\n  onSaveDraft,\n  onSaveDraftSuccess,\n  onDeleteDraft,\n  onGoBackToList,\n}: StatementOfWorkFormHeaderProps) => {\n  const { navigateAndPassOrigin } = useNavigateWithOrigin();\n  const { t } = useTranslation();\n  const { addErrorToast, addPrimaryIconToast, addSuccessIconToast } =\n    useToast();\n  const { logError } = useError();\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const form = useFormContext<StatementOfWorkFormValues>();\n  const {\n    watch,\n    formState: { isDirty },\n  } = form;\n\n  const { lastSavedAt, markLocalChangesAsSaved } = useFormLocalDraft({ form });\n  const StatementOfWorkPermissions = useStatementOfWorkPermissions();\n\n  const documentTitle = watch('title');\n\n  const handlePreview = async () => {\n    if (!statementOfWork?._id) {\n      return;\n    }\n\n    if (!StatementOfWorkPermissions.canSeeSummary(statementOfWork)) {\n      await form.trigger();\n      addErrorToast(t('noumena.statement_of_work_form.toast.not_completed'));\n      return;\n    }\n\n    if (isDirty) {\n      await handleSaveDraft();\n    }\n\n    navigateAndPassOrigin(\n      generatePath(routes.STATEMENT_OF_WORK_PREVIEW, {\n        id: statementOfWork._id,\n      }),\n    );\n  };\n\n  const handleSaveDraft = async () => {\n    const values = statementOfWorkFormSchema.cast(form.getValues());\n\n    if (!values.noumId) {\n      addPrimaryIconToast(\n        t('noumena.statement_of_work_form.toast.no_noum_selected'),\n      );\n      return;\n    }\n\n    try {\n      const updatedDraft = await onSaveDraft(values);\n      if (!updatedDraft) {\n        return;\n      }\n\n      onSaveDraftSuccess?.(updatedDraft);\n      markLocalChangesAsSaved();\n      addSuccessIconToast(\n        t('noumena.statement_of_work_form.toast.draft_saved'),\n      );\n    } catch (err) {\n      logError(err, 'sow-save-draft');\n    }\n  };\n\n  const handleDeleteDraft = () => {\n    if (isEditMode) {\n      openModal('delete');\n    } else {\n      onGoBackToList();\n    }\n  };\n\n  const confirmDraftDelete = async () => {\n    try {\n      await onDeleteDraft();\n      addSuccessIconToast(\n        t('noumena.statement_of_work_form.toast.draft_deleted'),\n      );\n      closeModal();\n      onGoBackToList();\n    } catch (err) {\n      closeModal();\n      logError(err, 'sow-delete-draft');\n    }\n  };\n\n  return (\n    <>\n      <StickyFormHeader\n        title={\n          isEditMode\n            ? t('noumena.statement_of_work_form.title.edit')\n            : t('noumena.statement_of_work_form.title.create')\n        }\n        hasUnsavedChanges={isDirty}\n        updatedAt={lastSavedAt?.toISOString()}\n        buttons={\n          <>\n            <DocumentHeader.DeleteButton\n              onClick={handleDeleteDraft}\n              isDraft={StatementOfWorkUtils.isDraft(statementOfWork)}\n            />\n            <DocumentHeader.SaveButton\n              isDraft={StatementOfWorkUtils.isDraft(statementOfWork)}\n              onClick={handleSaveDraft}\n              disabled={!isEditMode || !isDirty}\n            />\n            <DocumentHeader.SummaryButton\n              onClick={handlePreview}\n              softDisabled={\n                !isEditMode ||\n                !StatementOfWorkPermissions.canSeeSummary(statementOfWork)\n              }\n            />\n          </>\n        }\n      />\n      <DeleteDocumentConfirmationModal\n        isOpen={modalType === 'delete'}\n        isDraft={StatementOfWorkUtils.isDraft(statementOfWork)}\n        documentName={documentTitle}\n        documentType={DocumentType.Sow}\n        onCancel={closeModal}\n        onDelete={confirmDraftDelete}\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { Card as OriginalCard } from '@/components/Card';\nimport { mediaSizes } from '@/constants/devices';\n\nconst Card = styled(OriginalCard)`\n  padding: 24px;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    border-radius: 0;\n  }\n`;\n\nconst PdfPreview = styled.div`\n  width: 390px;\n  height: 550px;\n  border: 1px solid var(--border-card-neutral-default);\n`;\n\nexport default {\n  Card,\n  PdfPreview,\n};\n","import { useEffect, useState } from 'react';\nimport { useStatementOfWork } from '@/features/contracts/hooks/statementOfWork';\nimport {\n  statementOfWorkFormSchema,\n  useStatementOfWorkForm,\n} from '@/features/contracts/hooks/statementOfWorkForm';\nimport { StatementOfWorkFormMapper } from '@/features/contracts/utils/statementOfWorkFormMapper';\nimport { useError } from '@/hooks';\n\ninterface UseStatementOfWorkFormScreenOptions {\n  id?: string;\n  noumId?: string;\n  onCreate(id: string): void;\n}\n\nexport function useStatementOfWorkFormScreen({\n  id,\n  noumId,\n  onCreate,\n}: UseStatementOfWorkFormScreenOptions) {\n  const { logError } = useError();\n\n  const [isCreating, setIsCreating] = useState(false);\n  const isEditMode = !!id;\n\n  const form = useStatementOfWorkForm({\n    defaultValues: StatementOfWorkFormMapper.getDefaultValues({\n      noumId,\n    }),\n  });\n  const { reset, getValues, watch } = form;\n\n  const selectedNoumId = watch('noumId') ?? noumId;\n\n  const {\n    isLoading,\n    statementOfWork,\n    createStatementOfWork,\n    updateStatementOfWork,\n    deleteStatementOfWork,\n  } = useStatementOfWork(id);\n\n  useEffect(() => {\n    if (statementOfWork) {\n      reset(StatementOfWorkFormMapper.fromStatementOfWork(statementOfWork));\n    }\n  }, [reset, statementOfWork]);\n\n  useEffect(() => {\n    async function createAndGoToEdit() {\n      const values = statementOfWorkFormSchema.cast(getValues());\n\n      try {\n        setIsCreating(true);\n        const newContract = await createStatementOfWork({\n          ...values,\n          noumId: selectedNoumId,\n        });\n        onCreate(newContract._id);\n      } catch (err) {\n        logError(err, 'contract-create-draft');\n      } finally {\n        setIsCreating(false);\n      }\n    }\n\n    if (!isEditMode && selectedNoumId) {\n      createAndGoToEdit();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getValues, isEditMode, selectedNoumId]);\n\n  return {\n    form,\n    isLoading,\n    isCreating,\n    isEditMode,\n    statementOfWork,\n    updateDraft: updateStatementOfWork,\n    deleteDraft: deleteStatementOfWork,\n  };\n}\n","import { useCallback } from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport {\n  generatePath,\n  Navigate,\n  useParams,\n  useSearchParams,\n} from 'react-router-dom';\nimport { SowStatus } from '@/apollo/generated/types';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { Spinner } from '@/components/Spinner';\nimport { TSpan } from '@/components/Typography';\nimport routes from '@/constants/routes';\nimport DocumentPdfThumbnail from '@/features/contracts/components/DocumentPdfThumbnail/DocumentPdfThumbnail';\nimport { Section } from '@/features/contracts/components/Section/Section';\nimport {\n  StatementOfWorkForm,\n  StatementOfWorkFormHeader,\n} from '@/features/contracts/components/StatementOfWorkForm';\nimport { useStatementOfWorkPdf } from '@/features/contracts/hooks/statementOfWorkPdf';\nimport { StatementOfWorkUtils } from '@/features/contracts/utils/statementOfWork';\nimport { useToast } from '@/hooks';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack, StackItem } from '@/layout';\nimport SinglePageLayout, { ResponsiveMain } from '@/layout/SinglePageLayout';\nimport { downloadFileFromUrl } from '@/utils/file';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { ContractToolRoutes } from '@/features/contracts/utils/routes';\nimport S from './styles';\nimport { useStatementOfWorkFormScreen } from './useStatementOfWorkFormScreen';\n\ntype Params = { id?: string };\n\nexport function StatementOfWorkFormScreen() {\n  const { t } = useTranslation();\n  const { id } = useParams<Params>();\n  const { navigateAndPassOrigin, goBackToOrigin } = useNavigateWithOrigin();\n  const [searchParams] = useSearchParams();\n  const { isDesktop } = useBreakpoints();\n  const { addToast } = useToast();\n\n  const predefinedNoumId = searchParams.get('noumId') ?? undefined;\n\n  const onCreate = useCallback(\n    (newId: string) => {\n      navigateAndPassOrigin(\n        generatePath(routes.STATEMENT_OF_WORK_EDIT, { id: newId }),\n        {\n          replace: true,\n        },\n      );\n    },\n    [navigateAndPassOrigin],\n  );\n\n  const {\n    form,\n    isLoading,\n    isEditMode,\n    isCreating,\n    statementOfWork,\n    updateDraft,\n    deleteDraft,\n  } = useStatementOfWorkFormScreen({\n    id,\n    noumId: predefinedNoumId,\n    onCreate,\n  });\n\n  const pdfQuery = useStatementOfWorkPdf({ id });\n\n  const { getValues, setValue } = form;\n\n  const onNoumChange = () => {\n    if (getValues('contractId')) {\n      setValue('contractId', '');\n      addToast(\n        'primary',\n        'icon',\n        t('noumena.statement_of_work_form.toast.noum_changed'),\n      );\n    }\n  };\n\n  const goBackToList = () => {\n    goBackToOrigin({ fallbackUrl: ContractToolRoutes.contractManager() });\n  };\n\n  if (id && !statementOfWork && !isLoading) {\n    return <Navigate to={routes.NOT_FOUND} replace />;\n  }\n\n  const pdfDownloadFileName = StatementOfWorkUtils.formatPdfFileName({\n    title: form.watch('title'),\n    SOWNumber: statementOfWork?.SOWNumber,\n  });\n\n  return (\n    <FormProvider {...form}>\n      <SinglePageLayout>\n        <StatementOfWorkFormHeader\n          statementOfWork={statementOfWork}\n          isEditMode={isEditMode}\n          onDeleteDraft={deleteDraft}\n          onSaveDraft={updateDraft}\n          onSaveDraftSuccess={() => pdfQuery.refetch()}\n          onGoBackToList={goBackToList}\n        />\n\n        <ResponsiveMain>\n          {isLoading ? (\n            <Spinner />\n          ) : (\n            <Stack gap={24}>\n              <StackItem grow>\n                <StatementOfWorkForm\n                  documentStatus={statementOfWork?.status ?? SowStatus.Draft}\n                  disableNoum={!!predefinedNoumId}\n                  isCreating={isCreating}\n                  onNoumChange={onNoumChange}\n                  statementOfWork={statementOfWork}\n                />\n              </StackItem>\n              <StackItem basis=\"390px\" shrink={0}>\n                <Stack vertical gap={24} grow={false} align=\"stretch\">\n                  {isDesktop && (\n                    <S.Card>\n                      <Section\n                        variant=\"sub-section\"\n                        title={t(\n                          'noumena.statement_of_work_form.document_preview.title',\n                        )}\n                      >\n                        <Stack gap={16} vertical align=\"stretch\">\n                          <DocumentPdfThumbnail\n                            data={pdfQuery.pdfData}\n                            isLoading={pdfQuery.loading}\n                            downloadFileName={pdfDownloadFileName}\n                          />\n                          <Button\n                            tertiary\n                            icon={<Icon name=\"download_m\" size={24} />}\n                            disabled={!pdfQuery.pdfData}\n                            onClick={() => {\n                              if (pdfQuery.pdfData) {\n                                downloadFileFromUrl(\n                                  pdfQuery.pdfData,\n                                  'application/pdf',\n                                  pdfDownloadFileName,\n                                );\n                              }\n                            }}\n                          >\n                            {t(\n                              'noumena.statement_of_work_form.document_preview.download',\n                            )}\n                          </Button>\n                        </Stack>\n                      </Section>\n                    </S.Card>\n                  )}\n\n                  <StackItem grow={false} shrink>\n                    <S.Card>\n                      <Section\n                        variant=\"sub-section\"\n                        title={t(\n                          'noumena.statement_of_work_form.disclaimer.title',\n                        )}\n                      >\n                        <TSpan\n                          font=\"body-m\"\n                          colorToken=\"--text-card-neutral-default\"\n                        >\n                          {t(\n                            'noumena.statement_of_work_form.disclaimer.description',\n                          )}\n                        </TSpan>\n                      </Section>\n                    </S.Card>\n                  </StackItem>\n                </Stack>\n              </StackItem>\n            </Stack>\n          )}\n        </ResponsiveMain>\n      </SinglePageLayout>\n    </FormProvider>\n  );\n}\n\nexport default StatementOfWorkFormScreen;\n"],"names":["statementOfWorkFormSchema","yup","title","required","label","noumId","ensure","scopeOfWork","max","effectiveDate","contractId","deliverables","name","dueDate","nullable","description","optional","min","milestones","when","is","FeesCategoryTypes","Milestones","then","schema","otherwise","payments","currency","fees","feeCategory","oneOf","Object","values","inAdvance","amount","number","typeError","Inadvance","fields","withMutation","s","notRequired","instalments","Installments","lumpSum","Lumpsum","expenseReimbursement","bonusCommission","logo","url","useStatementOfWorkForm","defaultValues","useForm","resolver","yupResolver","mode","useStatementOfWorkFormContext","useFormContext","DetailsContainer","styled","Stack","attrs","gap","vertical","fullWidth","align","DetailsItem","justify","DetailsItemLabel","TSpan","font","colorToken","DetailsItemValue","S$3","ContractDetails","contract","t","useTranslation","jsxs","S","jsx","buyer","displayName","seller","formatDateString","Date","ContractSelector","onChange","value","selectFieldProps","data","loading","refetch","useGetContractsForSelectorQuery","fetchPolicy","variables","offset","limit","filter","noumIds","search","skip","contracts","getContractList","options","useMemo","mapContact","key","_id","type","icon","Icon","cleanData","cleanList","map","debouncedSearch","debounce","searchTerm","selectedOption","find","option","ApiEntityPickerFieldWithRemoteSearch","props","ApiEntitySelectionPreviewComponent","DocumentStatusTag","status","WizardTotalAmount","rows","convertToCurrency","sumBy","row","parseFloat","CurrencyEnum","Usd","EditMode","index","fieldNamePrefix","InlineEdit","control","Fragment","StackItem","Controller","field","fieldState","TextField","getErrorProps","FormControl","ref","fieldProps","newItemValues","id","BonusCommissionWizard","disabled","wizardApi","useFieldArrayWizard","initialMode","length","Section","Button","addNewItem","PreviewMainRow","children","displayLineNumbers","deleteItem","editItem","canEdit","canDelete","useFieldArrayWizardFormContext","Shared.MainRow","Shared.EditButton","Shared.DeleteButton","FormMainRow","FormSecondaryRow","Shared","FormFooter","handleSubmit","formState","saveItem","cancelItemEditing","isValid","Shared.FooterRow","Shared.SaveButton","Shared.CancelButton","FormErrorMessage","errors","error","Shared.ErrorMessage","message","form","FormProvider","Wizard","hasSeparators","EditModeComponent","PreviewModeComponent","CreateModeComponent","SummaryComponent","canAdd","watch","allValues","nextRowIndex","FieldArrayWizardFormContextProvider","editedIndex","React","Separator","Shared.AddButton","showNewItemForm","CreateEditPreview","reach","isDescriptionVisible","setIsDescriptionVisible","useState","setValue","DatePicker","newValue","TextArea","PreviewMode","undefined","DeliverablesWizard","ExpenseReimbursementWizard","Container","button","size","isSelected","Label","SideElement","div","S$2","OptionSelectorItem","leftElement","rightElement","footerElement","onClick","Radiobox","OptionSelector","CurrencySelector","SelectField","InvoiceUtils","currencyOptions","InstalmentsWizard","useSynchronizeFieldArrayItems","thisArray","otherArray","append","remove","otherSerialized","JSON","stringify","thisSerialized","useLayoutEffect","other","parse","previous","removedIndex","findIndex","p","isEqual","milestone","MilestonesWizard","FeesWizard","Card","OriginalCard","mediaSizes","TABLET_MAX","OriginalSeparator","S$1","StatementOfWorkForm","documentStatus","isCreating","onNoumChange","disableNoum","statementOfWork","getValues","isDesktop","useBreakpoints","ProjectNoumSelector","linkedNoum","newNoumId","FormError","StatementOfWorkFormHeader","isEditMode","onSaveDraft","onSaveDraftSuccess","onDeleteDraft","onGoBackToList","navigateAndPassOrigin","useNavigateWithOrigin","addErrorToast","addPrimaryIconToast","addSuccessIconToast","useToast","logError","useError","modalType","openModal","closeModal","useModalManager","isDirty","lastSavedAt","markLocalChangesAsSaved","useFormLocalDraft","StatementOfWorkPermissions","useStatementOfWorkPermissions","documentTitle","handlePreview","canSeeSummary","trigger","handleSaveDraft","generatePath","routes","STATEMENT_OF_WORK_PREVIEW","cast","updatedDraft","err","handleDeleteDraft","confirmDraftDelete","StickyFormHeader","toISOString","DocumentHeader.DeleteButton","StatementOfWorkUtils","isDraft","DocumentHeader.SaveButton","DocumentHeader.SummaryButton","DeleteDocumentConfirmationModal","DocumentType","Sow","PdfPreview","useStatementOfWorkFormScreen","onCreate","setIsCreating","StatementOfWorkFormMapper","getDefaultValues","reset","selectedNoumId","isLoading","createStatementOfWork","updateStatementOfWork","deleteStatementOfWork","useStatementOfWork","useEffect","fromStatementOfWork","createAndGoToEdit","newContract","updateDraft","deleteDraft","StatementOfWorkFormScreen","useParams","goBackToOrigin","searchParams","useSearchParams","addToast","predefinedNoumId","get","useCallback","newId","STATEMENT_OF_WORK_EDIT","replace","pdfQuery","useStatementOfWorkPdf","goBackToList","fallbackUrl","ContractToolRoutes","contractManager","Navigate","NOT_FOUND","pdfDownloadFileName","formatPdfFileName","SOWNumber","SinglePageLayout","ResponsiveMain","Spinner","SowStatus","Draft","DocumentPdfThumbnail","pdfData"],"mappings":"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"}