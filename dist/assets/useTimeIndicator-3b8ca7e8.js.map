{"version":3,"file":"useTimeIndicator-3b8ca7e8.js","sources":["../../src/hooks/useTimeIndicator.ts"],"sourcesContent":["import { getTimeBetweenDates } from '@/utils/date';\nimport { addHours, isFuture } from 'date-fns';\nimport { useState, useRef, useCallback, useEffect } from 'react';\n\nexport const useTimeIndicator = (startDate: string) => {\n  const [countDown, setCountDown] = useState('00:00:00');\n  const intervalId = useRef<null | NodeJS.Timer>(null);\n\n  const handleUpdateTimer = useCallback((endDate: Date) => {\n    const interval = setInterval(() => {\n      const resultDate = getTimeBetweenDates(new Date(), endDate);\n      setCountDown(resultDate);\n    }, 1000);\n    intervalId.current = interval;\n  }, []);\n\n  useEffect(() => {\n    if (startDate) {\n      const newStartDate = new Date(startDate);\n      const endDate = addHours(newStartDate, 72);\n      if (isFuture(endDate)) {\n        handleUpdateTimer(endDate);\n      }\n    }\n  }, [startDate, handleUpdateTimer]);\n\n  useEffect(\n    () => () => {\n      if (intervalId.current) {\n        clearInterval(intervalId.current);\n      }\n    },\n    [],\n  );\n  return [countDown];\n};\n\nexport default useTimeIndicator;\n"],"names":["useTimeIndicator","startDate","countDown","setCountDown","useState","intervalId","useRef","handleUpdateTimer","useCallback","endDate","interval","setInterval","resultDate","getTimeBetweenDates","Date","current","useEffect","newStartDate","addHours","isFuture","clearInterval"],"mappings":"kGAIaA,MAAAA,EAAoBC,GAAsB,CACrD,KAAM,CAACC,EAAWC,CAAY,EAAIC,WAAS,UAAU,EAC/CC,EAAaC,SAA4B,IAAI,EAE7CC,EAAoBC,cAAaC,GAAkB,CACjDC,MAAAA,EAAWC,YAAY,IAAM,CACjC,MAAMC,EAAaC,EAAwBC,IAAAA,KAAQL,CAAO,EAC1DN,EAAaS,CAAU,GACtB,GAAI,EACPP,EAAWU,QAAUL,CACvB,EAAG,CAAE,CAAA,EAELM,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIf,EAAW,CACPgB,MAAAA,EAAe,IAAIH,KAAKb,CAAS,EACjCQ,EAAUS,EAASD,EAAc,EAAE,EACrCE,EAASV,CAAO,GAClBF,EAAkBE,CAAO,EAE7B,EACC,CAACR,EAAWM,CAAiB,CAAC,EAEjCS,EAAAA,UACE,IAAM,IAAM,CACNX,EAAWU,SACbK,cAAcf,EAAWU,OAAO,CAEpC,EACA,CAAE,CAAA,EAEG,CAACb,CAAS,CACnB"}