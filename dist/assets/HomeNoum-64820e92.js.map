{"version":3,"file":"HomeNoum-64820e92.js","sources":["../../src/screens/HomeNoum/styles.ts","../../src/screens/HomeNoum/ProfileCompletion.tsx","../../src/screens/HomeNoum/HomeNoumView.tsx","../../src/screens/HomeNoum/HomeNoum.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { mediaSizes } from '@/constants/devices';\nimport { Card } from '@/components/Card';\n\nexport const ProfileCompletionWrapper = styled(Card)`\n  position: fixed;\n  left: 0;\n  width: 100%;\n  z-index: 49;\n  max-height: max-content;\n  border-radius: 0%;\n  padding-left: 75px;\n  @media (max-width: ${mediaSizes.TABLET_L}) {\n    padding: 16px;\n  }\n`;\n\nexport const ProfileCompletionConatiner = styled.div`\n  width: 100%;\n`;\n\nexport const ProfileCompletionContent = styled.div`\n  margin: 0 auto;\n`;\n","import Skeleton from 'react-loading-skeleton';\nimport { type FC, useCallback, useMemo } from 'react';\nimport { Trans } from 'react-i18next';\nimport { t } from 'i18next';\nimport { CircleProgressBar } from '@/components/ProgressBar';\nimport { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\nimport {\n  Dropdown,\n  type DropdownTargetProps,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useToggle, useWindowDimensions } from '@/hooks';\nimport { breakpoints } from '@/constants/devices';\nimport {\n  ElementTypeEnum,\n  type Maybe,\n  type SpaceProfileValue,\n  UserStatus,\n} from '@/apollo/generated/types';\nimport { SpaceUtils } from '@/utils/space';\nimport { useNoumDetails } from '@/features/noums/hooks/noums';\nimport { usePublishNoumLayoutHelper } from '@/features/noums/hooks/spaceQuery';\nimport { useNoumContext } from '../Chamber/ViewChamber/ChamberProvider';\nimport {\n  ProfileCompletionConatiner,\n  ProfileCompletionContent,\n  ProfileCompletionWrapper,\n} from './styles';\nimport HomeNoumAboutMe from '../Chamber/components/modals/HomeNoumAboutMe';\nimport HomeNoumBusinessBrief from '../Chamber/components/modals/HomeNoumBusinessBrief';\nimport HomeNoumProjectWorkExperience from '../Chamber/components/modals/HomeNoumProjectWorkExperience';\n\nexport const ProfileCompletion: FC = () => {\n  const { width } = useWindowDimensions();\n  const isMobile = width <= breakpoints.MOBILE_MAX;\n\n  const { space, spaceConfig, loadingSpace } = useNoumContext();\n  const { masterId: mainSpaceId } = useAuth();\n  const { onRefetchSpaceByConfig, onRefetchSpaceById } = useNoumDetails(\n    mainSpaceId || '',\n  );\n  const { publishNoumLayoutHelper } = usePublishNoumLayoutHelper();\n  const [isOpenAboutMe, toggleAboutMe] = useToggle(false);\n  const [isBusinessBriefOpen, businessBriefToggle] = useToggle(false);\n  const [isProjectWorkExperienceOpen, projectWorkExperienceToggle] =\n    useToggle(false);\n  const [isEducationTrainingOpen, educationTrainingToggle] = useToggle(false);\n\n  const prepareProgressBarItems = (\n    tempProgressItems: Maybe<SpaceProfileValue>[] | undefined,\n  ) => {\n    const progressBarItems: DropdownValueType<string, string>[] = [];\n    if (tempProgressItems) {\n      tempProgressItems.forEach((element) => {\n        if (element && element.id && element.name) {\n          progressBarItems.push({\n            value: element.id,\n            key: element.name,\n            type: 'value',\n            label: element.name,\n            icon: (\n              <Icon\n                name=\"plus_m\"\n                size={24}\n                color=\"--text-tablecell-header-neutral-highlighted\"\n              />\n            ),\n          });\n        }\n      });\n    }\n    return progressBarItems;\n  };\n\n  const progressItems: DropdownValueType<string, string>[] = useMemo(() => {\n    if (spaceConfig && spaceConfig?.length > 0) {\n      const filteredSpaceConfig = spaceConfig.filter(\n        (item) => item?.id !== ElementTypeEnum.Home,\n      );\n      const tempProgressItems: Maybe<SpaceProfileValue>[] | undefined =\n        SpaceUtils.getProgressBarItems(space, filteredSpaceConfig, true);\n      const items = prepareProgressBarItems(tempProgressItems);\n      return items;\n    }\n    return [];\n  }, [space, spaceConfig]);\n\n  const progressItemClicked = useCallback(\n    (progressItemsID: string) => {\n      switch (progressItemsID) {\n        case ElementTypeEnum.Profile:\n          toggleAboutMe();\n          break;\n\n        case ElementTypeEnum.BusinessBrief:\n          businessBriefToggle();\n          break;\n\n        case ElementTypeEnum.ProjectWorkExperience:\n          projectWorkExperienceToggle();\n          break;\n\n        case ElementTypeEnum.EducationTraining:\n          educationTrainingToggle();\n          break;\n\n        default:\n          break;\n      }\n    },\n    [\n      toggleAboutMe,\n      businessBriefToggle,\n      projectWorkExperienceToggle,\n      educationTrainingToggle,\n    ],\n  );\n\n  const handleSuccess = async () => {\n    toggleAboutMe();\n    await publishNoumLayoutHelper(space?._id!);\n    refetch();\n  };\n\n  const handleBusinessBriefSuccess = async () => {\n    businessBriefToggle();\n    refetch();\n  };\n\n  const handleProjectWorkExperienceSuccess = async () => {\n    projectWorkExperienceToggle();\n    refetch();\n  };\n\n  const handleEducationTrainingSuccess = async () => {\n    educationTrainingToggle();\n    refetch();\n  };\n\n  const refetch = useCallback(() => {\n    onRefetchSpaceById();\n    onRefetchSpaceByConfig();\n  }, [onRefetchSpaceByConfig, onRefetchSpaceById]);\n\n  const showCompleteness = useMemo(\n    () => !space?.percentCompleted || space?.percentCompleted < 100,\n    [space?.percentCompleted],\n  );\n\n  if (loadingSpace)\n    return (\n      <ProfileCompletionWrapper>\n        <Skeleton\n          width=\"100%\"\n          height={50}\n          borderRadius={12}\n          enableAnimation\n          baseColor=\"var(--color-base-gray-100)\"\n        />\n      </ProfileCompletionWrapper>\n    );\n\n  if (!showCompleteness) return <></>;\n  return (\n    <>\n      {spaceConfig &&\n        spaceConfig.length > 0 &&\n        space &&\n        space?.uid?.userStatus === UserStatus.Active && (\n          <>\n            <ProfileCompletionWrapper>\n              <ProfileCompletionConatiner>\n                <ProfileCompletionContent>\n                  {' '}\n                  <Stack\n                    justify=\"space-between\"\n                    vertical={isMobile}\n                    gap={16}\n                    align={isMobile ? 'start' : 'center'}\n                  >\n                    <Stack gap={20} align=\"center\">\n                      {!isMobile && (\n                        <CircleProgressBar\n                          percentage={space?.percentCompleted || 0}\n                          circleSize={37}\n                          barSize={4}\n                          color=\"var(--bg-progressbar-brand-primary-hightlighted)\"\n                          backgroudColor=\"var(--bg-progressbar-neutral-default)\"\n                        />\n                      )}\n                      <Stack vertical gap={4}>\n                        <TSpan\n                          font=\"body-l-bold\"\n                          colorToken=\"--text-card/neutral-highlighted\"\n                        >\n                          <Trans\n                            i18nKey={t(\n                              'noumena.editor.noumprogress.profile_completenes',\n                              {\n                                completeness: space?.percentCompleted || 0,\n                              },\n                            )}\n                            components={{\n                              span: (\n                                <TSpan colorToken=\"--text-card-brand-primary-default\" />\n                              ),\n                            }}\n                          />\n                        </TSpan>\n                        <TSpan\n                          font=\"body-m-bold\"\n                          colorToken=\"--text-card-neutral-default\"\n                        >\n                          <Trans\n                            i18nKey=\"noumena.noumprogress.profile_complete\"\n                            components={{\n                              bold: (\n                                <TSpan colorToken=\"--text-card-neutral-highlighted\" />\n                              ),\n                            }}\n                          />\n                        </TSpan>\n                      </Stack>\n                    </Stack>\n                    <Dropdown\n                      containerWidth=\"max-content\"\n                      closeOnSelect\n                      onSelectOption={(v) => {\n                        progressItemClicked(v.value);\n                      }}\n                      options={progressItems}\n                      isAnimation={false}\n                      observerMinHeight=\"0\"\n                      isMobile={false}\n                      isPopperStyle\n                    >\n                      {({\n                        targetRef,\n                        targetProps,\n                        toggle,\n                      }: DropdownTargetProps<HTMLButtonElement>) => (\n                        <Button\n                          ref={targetRef}\n                          onClick={toggle}\n                          {...targetProps}\n                          primary\n                          size=\"small\"\n                          rightIcon={<Icon name=\"chevron_down_m\" size={14} />}\n                        >\n                          {t('noumena.editor.noumprogress.profile.complete')}\n                        </Button>\n                      )}\n                    </Dropdown>\n                  </Stack>\n                </ProfileCompletionContent>{' '}\n              </ProfileCompletionConatiner>\n            </ProfileCompletionWrapper>\n            <HomeNoumAboutMe\n              isOpen={isOpenAboutMe}\n              handleClose={toggleAboutMe}\n              handleSuccess={handleSuccess}\n            />\n            <HomeNoumBusinessBrief\n              isOpen={isBusinessBriefOpen}\n              handleClose={businessBriefToggle}\n              handleSuccess={handleBusinessBriefSuccess}\n              position={1}\n            />\n            <HomeNoumProjectWorkExperience\n              isOpen={isProjectWorkExperienceOpen}\n              handleClose={projectWorkExperienceToggle}\n              handleSuccess={handleProjectWorkExperienceSuccess}\n              elementType={ElementTypeEnum.ProjectWorkExperience}\n              position={2}\n            />\n            <HomeNoumProjectWorkExperience\n              isOpen={isEducationTrainingOpen}\n              handleClose={educationTrainingToggle}\n              handleSuccess={handleEducationTrainingSuccess}\n              elementType={ElementTypeEnum.EducationTraining}\n              position={3}\n            />\n          </>\n        )}\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { useLaunchDarkly } from '@/hooks';\nimport ChamberViewLayout from '@/layout/ChamberViewLayout';\nimport { ChamberHeader } from '../Chamber/ViewChamber/ChamberHeader';\nimport { ProfileCompletion } from './ProfileCompletion';\nimport { ChamberLeftSideBar } from '../Chamber/ViewChamber/ChamberLeftSideBar';\nimport { NoumBody } from '../Chamber/ViewChamber/NoumBody';\nimport { ChamberBody } from '../Chamber/ViewChamber/ChamberBody';\nimport { useNoumContext } from '../Chamber/ViewChamber/ChamberProvider';\n\nconst HomeNoumView = () => {\n  const { space } = useNoumContext();\n  const {\n    flags: { noumEditor2, newAppNavigation },\n  } = useLaunchDarkly();\n\n  const showCompleteness = useMemo(\n    () => !space?.percentCompleted || space?.percentCompleted < 100,\n    [space?.percentCompleted],\n  );\n\n  return (\n    <ChamberViewLayout\n      header={<ChamberHeader />}\n      leftSidebar={\n        noumEditor2 ? (\n          <ProfileCompletion />\n        ) : newAppNavigation ? undefined : (\n          <ChamberLeftSideBar />\n        )\n      }\n      isStickyContainer={showCompleteness}\n    >\n      {noumEditor2 ? <NoumBody /> : <ChamberBody />}\n    </ChamberViewLayout>\n  );\n};\n\nexport default HomeNoumView;\n","import { useAuth } from '@/features/auth/contexts';\nimport Chamber from '../Chamber/ViewChamber/Chamber';\nimport HomeNoumView from './HomeNoumView';\n\nconst HomeNoum = (): JSX.Element => {\n  const { masterId } = useAuth();\n\n  return (\n    <Chamber id={masterId ?? ''} isMaster>\n      <HomeNoumView />\n    </Chamber>\n  );\n};\n\nexport default HomeNoum;\n"],"names":["ProfileCompletionWrapper","styled","Card","mediaSizes","TABLET_L","ProfileCompletionConatiner","div","ProfileCompletionContent","ProfileCompletion","width","useWindowDimensions","isMobile","breakpoints","MOBILE_MAX","space","spaceConfig","loadingSpace","useNoumContext","masterId","mainSpaceId","useAuth","onRefetchSpaceByConfig","onRefetchSpaceById","useNoumDetails","publishNoumLayoutHelper","usePublishNoumLayoutHelper","isOpenAboutMe","toggleAboutMe","useToggle","isBusinessBriefOpen","businessBriefToggle","isProjectWorkExperienceOpen","projectWorkExperienceToggle","isEducationTrainingOpen","educationTrainingToggle","prepareProgressBarItems","tempProgressItems","progressBarItems","forEach","element","id","name","push","value","key","type","label","icon","jsx","Icon","progressItems","useMemo","length","filteredSpaceConfig","filter","item","ElementTypeEnum","Home","SpaceUtils","getProgressBarItems","items","progressItemClicked","useCallback","progressItemsID","Profile","BusinessBrief","ProjectWorkExperience","EducationTraining","handleSuccess","_id","refetch","handleBusinessBriefSuccess","handleProjectWorkExperienceSuccess","handleEducationTrainingSuccess","showCompleteness","percentCompleted","Skeleton","Fragment","uid","userStatus","UserStatus","Active","jsxs","Stack","CircleProgressBar","TSpan","Trans","t","completeness","span","bold","Dropdown","v","targetRef","targetProps","toggle","Button","HomeNoumAboutMe","HomeNoumBusinessBrief","HomeNoumProjectWorkExperience","HomeNoumView","flags","noumEditor2","newAppNavigation","useLaunchDarkly","ChamberViewLayout","ChamberHeader","undefined","ChamberLeftSideBar","NoumBody","ChamberBody","HomeNoum","Chamber"],"mappings":"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"}