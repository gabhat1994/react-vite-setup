{"version":3,"file":"index-cc87b0f6.js","sources":["../../src/features/onboarding/hooks/questions/useOnboardingQuestions.tsx","../../src/screens/Register/Steps/OnboardingQuestions/types.ts","../../src/screens/Register/Steps/OnboardingQuestions/data.ts","../../src/screens/Register/Steps/OnboardingQuestions/SignUpForm/styles.ts","../../src/screens/Register/Steps/OnboardingQuestions/styles.ts","../../src/screens/Register/Steps/OnboardingQuestions/QuestionContainer.tsx","../../src/screens/Register/Steps/OnboardingQuestions/SignUpForm/QuestionAnswers.tsx","../../src/screens/Register/Steps/OnboardingQuestions/SignUpForm/index.tsx","../../src/screens/Register/Steps/OnboardingQuestions/index.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport { t } from 'i18next';\nimport {\n  useGetOnboardingQuestionAndAnswersQuery,\n  useGetUserSubmittedOnboardingQuestionsAndAnswersLazyQuery,\n  useSubmitOnboardingQuestionnaireMutation,\n  useUpdateUserSkillsMutation,\n} from '@/apollo/graphql';\nimport { useToast } from '@/hooks';\nimport { setLocalStorage } from '@/utils/localStorage';\nimport onboardingStatusLocalStorage from '@/constants/onboardingStatusLocalStorage';\n\nexport const useOnboardingQuestions = () => {\n  const { addToast } = useToast();\n  const { data, loading, error } = useGetOnboardingQuestionAndAnswersQuery();\n  const [submitOnboardingQuestionnaireMutation, { loading: submitting }] =\n    useSubmitOnboardingQuestionnaireMutation();\n  const [updateUserSkills] = useUpdateUserSkillsMutation();\n\n  const handleError = useCallback(\n    (networkError: String | Error | null) => {\n      addToast(\n        'error',\n        'none',\n        `${t('noumena.toast_error.text')}: ${networkError}`,\n      );\n    },\n    [addToast],\n  );\n\n  const [getAnsweredQuestions, { loading: getAnswerLoading }] =\n    useGetUserSubmittedOnboardingQuestionsAndAnswersLazyQuery({\n      onCompleted(resp) {\n        if (resp) {\n          const { getUserSubmittedOnboardingQuestionsAndAnswers: answers } =\n            resp;\n          setLocalStorage(\n            onboardingStatusLocalStorage.ONBOARDING_COMPLETE_STATUS,\n            answers,\n          );\n        }\n      },\n    });\n\n  const handleSubmitOnboardingAnswer = useCallback(\n    async (answers, skillId) => {\n      const { data: res } = await submitOnboardingQuestionnaireMutation({\n        variables: { input: answers },\n        onCompleted: () => {},\n        onError: ({ networkError = null, graphQLErrors = [] }) => {\n          const [err] = graphQLErrors;\n          handleError(err?.message ?? networkError);\n        },\n      });\n      if (skillId) {\n        await updateUserSkills({\n          variables: { input: [skillId] },\n        });\n      }\n      await getAnsweredQuestions();\n      return res?.submitOnboardingQuestionnaire?.userStatus;\n    },\n    [\n      handleError,\n      submitOnboardingQuestionnaireMutation,\n      getAnsweredQuestions,\n      updateUserSkills,\n    ],\n  );\n\n  return {\n    questions: data?.getOnboardingQuestionAndAnswers?.data || [],\n    loading: loading || getAnswerLoading,\n    error,\n    handleSubmitOnboardingAnswer,\n    submitting,\n  };\n};\n\nexport default useOnboardingQuestions;\n","export type TquestionKey =\n  | 'age_range'\n  | 'year_of_self_employed'\n  | 'business_stage'\n  | 'business_country'\n  | 'business_industry'\n  | 'revenue'\n  | 'business_entity';\n\nexport const EnumQuestionKey = {\n  age_range: '636340a1d1b4cfc58759939c',\n  year_of_self_employed: '632be1607003c70096be762d',\n  business_stage: '6359035b844d4764725c2912',\n  business_country: '632be1607003c70096be762e',\n  business_industry: '632be1607003c70096be762f',\n  revenue: '632be1607003c70096be7630',\n  business_entity: '632be1607003c70096be7631',\n};\n\nexport type TOnboardingQuestionForm = {\n  age_range: string;\n  year_of_self_employed: string;\n  business_stage: string;\n  business_country: string;\n  business_industry: string;\n  revenue: string;\n  business_entity: string;\n};\n","import * as yup from 'yup';\nimport { type ObjectShape } from 'yup/lib/object';\nimport { t } from 'i18next';\n\nexport const initialAnswers = {\n  age_range: undefined,\n  year_of_self_employed: undefined,\n  business_stage: undefined,\n  business_country: 'us',\n  business_industry: undefined,\n  revenue: undefined,\n  business_entity: undefined,\n};\n\nexport const questionsFormSchema = () => {\n  const schemaObj: ObjectShape = {\n    year_of_self_employed: yup\n      .string()\n      .required(\n        t(\n          'noumena.register.onboarding_questions.error.message.answer_required',\n        ),\n      ),\n    business_country: yup\n      .string()\n      .required(\n        t(\n          'noumena.register.onboarding_questions.error.message.answer_required',\n        ),\n      ),\n    business_industry: yup\n      .string()\n      .required(\n        t(\n          'noumena.register.onboarding_questions.error.message.answer_required',\n        ),\n      ),\n    revenue: yup\n      .string()\n      .required(\n        t(\n          'noumena.register.onboarding_questions.error.message.answer_required',\n        ),\n      ),\n    business_entity: yup\n      .string()\n      .required(\n        t(\n          'noumena.register.onboarding_questions.error.message.answer_required',\n        ),\n      ),\n    age_range: yup\n      .string()\n      .required(\n        t(\n          `noumena.register.onboarding_questions.error.message.answer_required`,\n        ),\n      ),\n    business_stage: yup\n      .string()\n      .required(\n        t(\n          `noumena.register.onboarding_questions.error.message.answer_required`,\n        ),\n      ),\n  };\n  return yup.object().shape(schemaObj).required();\n};\n\nexport const questionsMock = {\n  data: [\n    {\n      _id: '632be1607003c70096be762d',\n      question: 'How long have you been self-employed?',\n      options: [\n        'Interested in making the jump',\n        'Full-time job but working on a side hustle',\n        '1-2 years',\n        '3-5 years',\n        '6-9 years',\n        '10+ years',\n      ],\n      __typename: 'QuestionAndAnswers',\n    },\n    {\n      _id: '632be1607003c70096be762e',\n      question: 'What country do you run your business in?',\n      options: [],\n      __typename: 'QuestionAndAnswers',\n    },\n    {\n      _id: '632be1607003c70096be762f',\n      question: 'What kind of business & services do you provide?',\n      options: [],\n      __typename: 'QuestionAndAnswers',\n    },\n    {\n      _id: '632be1607003c70096be7630',\n      question: 'What is your expected revenue from your business this year?',\n      options: [\n        'Less than $30,000',\n        '$30,000 - $60,000',\n        '$60,000 - $100,000',\n        '$100,000 - $200,000',\n        '$200,000 - $300,000',\n        '$300,000+',\n      ],\n      __typename: 'QuestionAndAnswers',\n    },\n    {\n      _id: '632be1607003c70096be7631',\n      question:\n        'What entity do you use for your primary self-employed business?',\n      options: [\n        'Sole Proprietor',\n        'Single LLC',\n        'PLLC',\n        'S-Corp',\n        'A non-US business entity',\n        'No business entity',\n        'Other',\n      ],\n      __typename: 'QuestionAndAnswers',\n    },\n  ],\n  count: 5,\n  __typename: 'QuestionAndAnswersOutput',\n};\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\nimport { mediaSizes } from '@/constants/devices';\n\nexport const FormStyled = styled.div`\n  width: 100%;\n  min-height: 80vh;\n  @media (max-width: ${mediaSizes.LAPTOP_L_MAX}) {\n    padding-bottom: 125px;\n  }\n`;\n\nexport const Form = styled.form`\n  width: 100%;\n`;\n\nexport const FullWidthStack = styled(Stack)`\n  width: 100%;\n`;\n\nexport const AddButtonStyle = styled.div`\n  display: inline-flex;\n  align-items: center;\n  cursor: pointer;\n  color: var(--text-button-brand-primary-default);\n  gap: 12px;\n  height: 24px;\n`;\n\nexport const IconWrapper = styled.div`\n  display: flex;\n  padding: 4px;\n  gap: 12px;\n  width: 85%;\n`;\n\nexport const Point = styled.div`\n  border-radius: 100%;\n  background-color: gray;\n  width: 8px;\n  height: 8px;\n  z-index: 1000;\n  margin-top: 7px;\n`;\n","import styled from 'styled-components';\nimport { Stack } from '@/layout';\n\nconst Screen = styled(Stack)`\n  font-family: var(--font-family);\n  max-width: 400px;\n  display: block;\n`;\n\nexport const QuestionContainerWrapper = styled.div`\n  width: 100%;\n`;\nexport default Screen;\n","import {\n  type FC,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { isAndroid } from 'react-device-detect';\nimport { debounce } from 'lodash';\nimport { Spacer } from '@/layout';\nimport { Dropdown, type DropdownValueType } from '@/components/Dropdown';\nimport { TSpan } from '@/components/Typography';\nimport { TextField } from '@/components/TextField';\nimport { Icon } from '@/components/Icon';\nimport { type Country } from '@/components/PhoneInput/types';\nimport { Flag } from '@/components/Flag';\nimport { breakpoints } from '@/constants/devices';\nimport { useWindowDimensions } from '@/hooks';\nimport { QuestionContainerWrapper } from './styles';\n\nexport interface QuestionContainerProps {\n  questionKey: string;\n  description: string;\n  answerOptions: DropdownValueType<string | Country>[];\n  setAnswer: (answer?: string) => void;\n  answer?: string;\n  error?: boolean;\n  isLoading?: boolean;\n  helperText?: string;\n  onFocus?: () => void;\n}\n\nconst QuestionContainer: FC<QuestionContainerProps> = ({\n  questionKey,\n  description,\n  answerOptions,\n  setAnswer,\n  error,\n  isLoading,\n  helperText,\n  onFocus,\n}: QuestionContainerProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { width } = useWindowDimensions();\n  const isMobile = useMemo(() => width <= breakpoints.MOBILE_MAX, [width]);\n  const { t } = useTranslation();\n  const isSearchDisabled = [\n    'age_range',\n    'year_of_self_employed',\n    'business_stage',\n    'revenue',\n    'business_entity',\n    // 'business_industry',\n  ].includes(questionKey);\n  const isSkillQuestion = questionKey === 'business_industry';\n  const isBusinessCountry = questionKey === 'business_country';\n\n  const [isOpenDropdown, setIsOpenDropdown] = useState<boolean>(false);\n  const [selectedLabel, setSelectedLabel] = useState<string | undefined>(\n    undefined,\n  );\n  const [selectedCountry, setSelectedCountry] = useState<Country | undefined>(\n    questionKey === 'business_country'\n      ? {\n          name: 'United States',\n          dialCode: '1',\n          iso2: 'us',\n        }\n      : undefined,\n  );\n\n  const [search, setSearch] = useState<string>('');\n  const [options, setOptions] = useState<DropdownValueType<string | Country>[]>(\n    [],\n  );\n\n  const [numberOfItems, setNumberOfItems] = useState(15);\n  useEffect(() => {\n    const searchPattern = search?.toLocaleLowerCase()?.trim() || '';\n    if (!isSearchDisabled) {\n      if (isSkillQuestion && isAndroid && !searchPattern) {\n        setOptions([]);\n        return;\n      }\n      const filteredOptions = answerOptions.filter((option) => {\n        if (\n          questionKey === 'business_country' &&\n          option &&\n          option.type === 'value' &&\n          option.value &&\n          typeof option.value === 'object'\n        ) {\n          return String(option.value.name)\n            ?.toLowerCase()\n            .includes(searchPattern);\n        }\n        if (isSkillQuestion) {\n          return String(option.value)?.toLowerCase().includes(searchPattern);\n        }\n        return true;\n      });\n\n      setOptions(filteredOptions);\n    }\n  }, [answerOptions, isSearchDisabled, isSkillQuestion, questionKey, search]);\n\n  const handleChangeAnswer = useCallback(\n    (newAnswer?: string | Country) => {\n      let option;\n      if (typeof newAnswer === 'string') {\n        option = answerOptions.find((_option) => _option.value === newAnswer);\n        setSelectedLabel(\n          option?.label && typeof option.label === 'string' ? option.label : '',\n        );\n        setAnswer(newAnswer);\n      } else if (\n        questionKey === 'business_country' &&\n        typeof newAnswer === 'object'\n      ) {\n        setSelectedCountry(newAnswer);\n        setAnswer(newAnswer.iso2);\n      }\n      setSearch('');\n    },\n    [answerOptions, questionKey, setAnswer],\n  );\n\n  const handleFetchMore = useCallback(\n    () => setNumberOfItems(numberOfItems + 15),\n    [numberOfItems],\n  );\n\n  const debouncedSearch = useRef(\n    debounce(async (searchValue) => {\n      setSearch(searchValue.trim());\n    }, 200),\n  ).current;\n\n  useEffect(() => () => debouncedSearch.cancel(), [debouncedSearch]);\n\n  const handleSearchChange = useCallback(\n    (searchValue: string) => {\n      if (questionKey === 'business_country') {\n        setIsOpenDropdown(true);\n      }\n      debouncedSearch(searchValue);\n      if (selectedLabel || selectedCountry) {\n        setSelectedLabel(undefined);\n        setSelectedCountry(undefined);\n        setAnswer(undefined);\n      }\n      if (\n        (searchValue === '' && isBusinessCountry) ||\n        (searchValue === '' && isSkillQuestion)\n      ) {\n        setSelectedLabel('');\n      }\n    },\n    [\n      questionKey,\n      debouncedSearch,\n      selectedLabel,\n      selectedCountry,\n      isBusinessCountry,\n      isSkillQuestion,\n      setAnswer,\n    ],\n  );\n\n  const renderLeftIcon = useCallback(\n    ({ toggle }: { toggle: () => void }) => {\n      if (questionKey === 'business_country' && selectedCountry) {\n        return (\n          <Flag\n            flag={`flag_${selectedCountry?.iso2}` as keyof typeof Flag}\n            size={24}\n            onClick={toggle}\n          />\n        );\n      }\n      if (isSkillQuestion)\n        return (\n          <Icon\n            name=\"search_m\"\n            size={24}\n            color=\"var(--icon-card-placeholder-neutral-default)\"\n          />\n        );\n      return undefined;\n    },\n    [isSkillQuestion, questionKey, selectedCountry],\n  );\n\n  const handleClose = useCallback(() => {\n    setIsOpenDropdown(false);\n    if (isMobile) setSearch('');\n  }, [isMobile]);\n\n  const placeholder = isSkillQuestion\n    ? t(`noumena.register.onboarding_questions.select_industry`)\n    : t(`noumena.register.onboarding_questions.answer.placeholder`);\n  const inputValue = isSearchDisabled ? undefined : search || '';\n  const dropDownOptions =\n    isSearchDisabled || search.length === 0 ? answerOptions : options;\n\n  return (\n    <QuestionContainerWrapper ref={containerRef}>\n      <TSpan colorToken=\"--text-tablecell-header-neutral-highlighted\">\n        {description}\n      </TSpan>\n      <Spacer height={8} />\n      <Dropdown\n        inputValue={inputValue}\n        key={questionKey}\n        hideIcons={questionKey !== 'business_country'}\n        isOpen={isOpenDropdown}\n        options={dropDownOptions}\n        onSelectOption={(option) => {\n          handleChangeAnswer(option.value);\n        }}\n        onInputChange={(val) => setSearch(val)}\n        onFetchMore={handleFetchMore}\n        onOpen={onFocus}\n        onClose={handleClose}\n        isLoading={isLoading}\n        closeOnSelect\n        renderContainerFromBottom={isSearchDisabled && isMobile}\n        showInternalSearch={!isSearchDisabled && isMobile}\n        forceHideCloseButton={false}\n        containerHeight={!isSearchDisabled && isMobile ? '100vh' : 'auto'}\n        noAvailableOptionsText={t('noumena.dropdown.no_search_results.text')}\n        noSearchOptionsText={t('noumena.dropdown.no_search_results.text')}\n        containerWidth={`${containerRef.current?.scrollWidth}px` ?? 'auto'}\n        containerStyle={isSkillQuestion ? { minHeight: 192 } : undefined}\n        observerMinHeight=\"0px\"\n        searchPlaceholder={\n          isSkillQuestion\n            ? t(\n                `noumena.register.onboarding_questions.select_industry_placeholder`,\n              )\n            : undefined\n        }\n        searchLeftIcon={isSkillQuestion ? <></> : undefined}\n        hideLeftIconPlace\n        forceListFromBottom={isSkillQuestion && !isMobile}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            onClick={() => setIsOpenDropdown(true)}\n            readOnly={isSearchDisabled}\n            ref={inputRef}\n            {...inputProps}\n            error={!isOpenDropdown ? error : false}\n            onChange={(e) => {\n              handleSearchChange(e.target.value);\n            }}\n            helperText={\n              error && helperText && !isOpenDropdown ? helperText : undefined\n            }\n            placeholder={placeholder}\n            value={\n              search.length > 0\n                ? search\n                : selectedCountry && questionKey === 'business_country'\n                ? selectedCountry?.name\n                : selectedLabel\n            }\n            rightIcon={\n              isSearchDisabled ? (\n                <Icon\n                  color=\"--icon-input-neutral-disabled\"\n                  name=\"chevron_down_m\"\n                  size={16}\n                  onClick={() => setIsOpenDropdown(true)}\n                />\n              ) : (\n                search.trim().length > 0 && (\n                  <Icon\n                    name=\"clear_m\"\n                    size={16}\n                    onClick={() => {\n                      handleSearchChange('');\n                    }}\n                    color=\"--icon-input-brand-primary-default\"\n                  />\n                )\n              )\n            }\n            leftIcon={renderLeftIcon({ toggle })}\n            onFocus={onFocus}\n          />\n        )}\n      </Dropdown>\n    </QuestionContainerWrapper>\n  );\n};\n\nexport default QuestionContainer;\n","import React from 'react';\nimport { t } from 'i18next';\n\nimport { Spacer, Stack } from '@/layout';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { type Country } from '@/components/PhoneInput/types';\n\nimport QuestionContainer from '../QuestionContainer';\n\ninterface Props {\n  questionKey: string;\n  answerOptions: DropdownValueType<string | Country>[];\n  error: string | undefined;\n  loading: boolean;\n  onChooseAnswer: (a: string | undefined) => void;\n  onFocus: () => void;\n}\n\nconst QuestionAnswers: React.FC<Props> = ({\n  questionKey,\n  answerOptions,\n  error,\n  loading,\n  onChooseAnswer,\n  onFocus,\n}) => (\n  <Stack fullWidth vertical key={questionKey}>\n    <Spacer height={24} />\n    <QuestionContainer\n      questionKey={questionKey}\n      description={t(\n        `noumena.register.onboarding_questions.${questionKey}.description`,\n      )}\n      answerOptions={answerOptions}\n      setAnswer={onChooseAnswer}\n      error={!!error}\n      isLoading={loading}\n      helperText={error}\n      onFocus={() => onFocus()}\n    />\n  </Stack>\n);\n\nexport default QuestionAnswers;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { type SubmitHandler, useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport generate from 'uniqid';\nimport { useNavigate } from 'react-router';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer, Stack } from '@/layout';\nimport { Button } from '@/components/Button';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { type Country } from '@/components/PhoneInput/types';\nimport countries from '@/assets/json/countries.json';\nimport { Flag } from '@/components/Flag';\nimport {\n  type SubmitOnboardingQuestionnaire,\n  UserStatus,\n} from '@/apollo/generated/types';\nimport ROUTES from '@/constants/routes';\nimport { useAuth } from '@/features/auth/contexts';\nimport EVENTS from '@/constants/trackingEvents';\nimport { trackEvent } from '@/utils/tracking';\nimport { useSkills } from '@/features/skills/components/SkillSelection';\nimport { useOnboardingQuestions } from '@/features/onboarding/hooks/questions';\nimport {\n  EnumQuestionKey,\n  type TOnboardingQuestionForm,\n  type TquestionKey,\n} from '../types';\nimport { initialAnswers, questionsFormSchema } from '../data';\nimport { Form, FormStyled } from './styles';\nimport QuestionAnswers from './QuestionAnswers';\n\nconst QuestionEvents = [\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_1,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_2,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_3,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_4,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_5,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_6,\n  EVENTS.ONBOARDING.QUESTIONNAIRE.QUESTION_7,\n];\nconst SignUpForm = () => {\n  const { updateUserStatus, refetchUserData, user } = useAuth();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { questions, handleSubmitOnboardingAnswer, loading, submitting } =\n    useOnboardingQuestions();\n  const { allSkills: industries } = useSkills();\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [questionAndAnswers, setQuestionAndAnswers] = useState<{\n    [key: string]: DropdownValueType<string | Country>[];\n  }>({\n    age_range: [],\n    year_of_self_employed: [],\n    business_stage: [],\n    business_country: [],\n    business_industry: [],\n    revenue: [],\n    business_entity: [],\n  });\n\n  const dropdownCountries: DropdownValueType<Country>[] = useMemo(\n    () =>\n      countries.map((country) => ({\n        key: generate(),\n        label: (\n          <Stack>\n            <TSpan\n              font=\"input-s\"\n              colorToken=\"--text-tablecell-header-neutral-highlighted\"\n              data-testid=\"country-options\"\n            >\n              <div style={{ padding: '0 4px' }}>{country.name}</div>\n            </TSpan>\n          </Stack>\n        ),\n        type: 'value',\n        value: country,\n        icon: (\n          <Flag flag={`flag_${country.iso2}` as keyof typeof Flag} size={24} />\n        ),\n      })),\n    [],\n  );\n\n  const dropDownIndustries: DropdownValueType<string>[] = useMemo(\n    () =>\n      industries\n        .sort((a, b) => a?.name?.localeCompare(b?.name || '') ?? 0)\n        .map((x) => ({\n          key: generate(),\n          type: 'value',\n          value: x?.name ?? '',\n          label: x?.name ?? '',\n        })),\n    [industries],\n  );\n\n  const userEventData = useMemo(() => ({ UUID: user?._id }), [user]);\n\n  useEffect(() => {\n    const questionAndAnswersT: {\n      [key: string]: DropdownValueType<string | Country>[];\n    } = {};\n    if (questions.length > 0) {\n      questions?.forEach((question) => {\n        const enumKey = Object.keys(EnumQuestionKey).find(\n          (key) =>\n            EnumQuestionKey[key as keyof typeof EnumQuestionKey] ===\n            question?._id,\n        );\n        if (enumKey) {\n          const answerOptionsT: DropdownValueType<string | Country>[] = [];\n          question?.options?.forEach((option) => {\n            if (option?.answer) {\n              answerOptionsT.push({\n                key: generate(),\n                type: 'value',\n                value: option.answer,\n                label: option.answer,\n                description: option.description || '',\n              });\n            }\n          });\n          questionAndAnswersT[enumKey] = answerOptionsT;\n        }\n      });\n      setQuestionAndAnswers(questionAndAnswersT);\n    }\n  }, [questions]);\n\n  const {\n    setValue,\n    trigger,\n    handleSubmit,\n    formState: { errors, isValid },\n  } = useForm<TOnboardingQuestionForm>({\n    resolver: yupResolver(questionsFormSchema()),\n    mode: 'all',\n    reValidateMode: 'onChange',\n    defaultValues: initialAnswers,\n  });\n\n  const onSubmit: SubmitHandler<TOnboardingQuestionForm> = useCallback(\n    async (data) => {\n      setIsSubmitting(true);\n      let eventData: object = {\n        UUID: user?._id,\n      };\n      const answers: SubmitOnboardingQuestionnaire[] = [];\n      let skillId;\n      Object.keys(data).forEach((key) => {\n        const questionId = EnumQuestionKey[key as keyof typeof EnumQuestionKey];\n        const answerText: string = data[key as keyof TOnboardingQuestionForm];\n        eventData = { ...eventData, [questionId]: answerText };\n        const answerItem: SubmitOnboardingQuestionnaire = {\n          questionId,\n          answer: answerText,\n        };\n        if (key === 'business_country') {\n          answerItem.countryCode = answerText;\n          const selectedCountry = countries.find(\n            (country) => country.iso2 === answerText,\n          );\n          answerItem.answer = selectedCountry?.name || answerItem.answer;\n        }\n        if (key === 'business_industry') {\n          skillId = industries.find(\n            (skill) => skill?.name === answerItem.answer,\n          )?._id;\n        }\n        answers.push(answerItem);\n      });\n\n      trackEvent(EVENTS.ONBOARDING.QUESTIONNAIRE.SUBMIT, eventData);\n\n      const res = await handleSubmitOnboardingAnswer(answers, skillId);\n      if (res) {\n        updateUserStatus(res);\n        refetchUserData();\n        if (res === UserStatus.Active) {\n          navigate(ROUTES.ACTIVE);\n        } else if (res === UserStatus.Pending) {\n          if (\n            data?.year_of_self_employed\n              ?.toLowerCase()\n              ?.includes('interested') ||\n            data?.year_of_self_employed?.toLowerCase()?.includes('hustle') ||\n            data?.revenue.toLowerCase()?.includes('less than') ||\n            data?.business_entity\n              .toLowerCase()\n              ?.includes('no business entity') ||\n            data?.business_entity.toLowerCase()?.includes('other')\n          ) {\n            navigate(ROUTES.MORE_INFO);\n          } else {\n            navigate(ROUTES.SIGNUP_PENDING);\n          }\n        } else if (res === UserStatus.Rejected) {\n          navigate(ROUTES.INACTIVE);\n        }\n      }\n      setIsSubmitting(false);\n    },\n    [\n      user?._id,\n      handleSubmitOnboardingAnswer,\n      updateUserStatus,\n      navigate,\n      industries,\n      refetchUserData,\n    ],\n  );\n\n  const setAnswer = useCallback(\n    (questionKey: TquestionKey, answer?: string) => {\n      setValue(questionKey, answer ?? '');\n      trigger(questionKey);\n    },\n    [setValue, trigger],\n  );\n\n  return (\n    <FormStyled data-testid=\"onboardingQuestionsFormContainer\">\n      <Spacer height={20} />\n      <TSpan\n        font=\"heading-m-bold\"\n        $fill\n        colorToken=\"--text-body-header-neutral-default\"\n      >\n        {t(`noumena.register.onboarding_questions.sub_title`)}\n      </TSpan>\n      <Spacer height={11} />\n      <TSpan font=\"body-l\" $fill colorToken=\"--text-body-neutral-default\">\n        {t(`noumena.register.onboarding_questions.description`)}\n      </TSpan>\n      <Spacer height={8} />\n      <Form onSubmit={handleSubmit(onSubmit)}>\n        {Object.keys(questionAndAnswers).map((questionKey, index) => (\n          <QuestionAnswers\n            key={questionKey}\n            questionKey={questionKey}\n            answerOptions={\n              questionKey === 'business_country'\n                ? dropdownCountries\n                : questionKey === 'business_industry'\n                ? dropDownIndustries\n                : questionAndAnswers[questionKey as TquestionKey] || []\n            }\n            error={errors[questionKey as TquestionKey]?.message}\n            loading={loading}\n            onChooseAnswer={(answer) =>\n              setAnswer(questionKey as TquestionKey, answer)\n            }\n            onFocus={() => trackEvent(QuestionEvents[index], userEventData)}\n          />\n        ))}\n\n        <Spacer height={32} />\n        <Stack fullWidth>\n          <Button\n            data-testid=\"onboardingQuestionsSubmitButton\"\n            type=\"submit\"\n            primary\n            size=\"full\"\n            loading={isSubmitting}\n            disabled={!isValid || loading || submitting || isSubmitting}\n          >\n            {t(`noumena.submit`)}\n          </Button>\n        </Stack>\n        <Spacer height={16} />\n        <Stack fullWidth>\n          <TSpan\n            font=\"body-s\"\n            colorToken=\"--text-body-neutral-disabled\"\n            textAlign=\"center\"\n          >\n            {t(\n              `noumena.register.onboarding_questions.description.our_solutions_best`,\n            )}\n          </TSpan>\n        </Stack>\n      </Form>\n    </FormStyled>\n  );\n};\n\nexport default SignUpForm;\n","import { t } from 'i18next';\nimport { Chips } from '@/components/Chips/Chips';\nimport { AppStyled } from '../../styles';\nimport SignUpForm from './SignUpForm/index';\nimport Screen from './styles';\nimport { OnboardingScreenLayout } from '../../OnboardingScreenLayout';\n\nconst OnboardingQuestions = () => (\n  <OnboardingScreenLayout>\n    <AppStyled data-testid=\"SIGN_UP\" className=\"App\">\n      <Chips style={{ borderRadius: 8, marginTop: 28 }}>\n        {t(`noumena.register.onboarding_questions.step`)}\n      </Chips>\n      <Screen data-testid=\"onboardingQuestionsContainer\">\n        <SignUpForm />\n      </Screen>\n    </AppStyled>\n  </OnboardingScreenLayout>\n);\n\nexport default OnboardingQuestions;\n"],"names":["useOnboardingQuestions","addToast","useToast","data","loading","error","useGetOnboardingQuestionAndAnswersQuery","submitOnboardingQuestionnaireMutation","submitting","useSubmitOnboardingQuestionnaireMutation","updateUserSkills","useUpdateUserSkillsMutation","handleError","useCallback","networkError","t","getAnsweredQuestions","getAnswerLoading","useGetUserSubmittedOnboardingQuestionsAndAnswersLazyQuery","onCompleted","resp","getUserSubmittedOnboardingQuestionsAndAnswers","answers","onboardingStatusLocalStorage","ONBOARDING_COMPLETE_STATUS","handleSubmitOnboardingAnswer","skillId","res","variables","input","onError","graphQLErrors","err","message","submitOnboardingQuestionnaire","userStatus","questions","getOnboardingQuestionAndAnswers","EnumQuestionKey","age_range","year_of_self_employed","business_stage","business_country","business_industry","revenue","business_entity","initialAnswers","undefined","questionsFormSchema","schemaObj","yup","required","string","shape","FormStyled","styled","div","mediaSizes","LAPTOP_L_MAX","Form","form","Stack","Screen","QuestionContainerWrapper","QuestionContainer","questionKey","description","answerOptions","setAnswer","isLoading","helperText","onFocus","containerRef","useRef","width","useWindowDimensions","isMobile","useMemo","breakpoints","MOBILE_MAX","useTranslation","isSearchDisabled","includes","isSkillQuestion","isBusinessCountry","isOpenDropdown","setIsOpenDropdown","useState","selectedLabel","setSelectedLabel","selectedCountry","setSelectedCountry","name","dialCode","iso2","search","setSearch","options","setOptions","numberOfItems","setNumberOfItems","useEffect","searchPattern","toLocaleLowerCase","trim","isAndroid","filteredOptions","filter","option","type","value","String","toLowerCase","handleChangeAnswer","newAnswer","find","_option","label","handleFetchMore","debouncedSearch","debounce","searchValue","current","cancel","handleSearchChange","renderLeftIcon","toggle","jsx","Flag","Icon","handleClose","placeholder","inputValue","dropDownOptions","length","jsxs","TSpan","Spacer","Dropdown","val","scrollWidth","minHeight","`QuestionContainer-Dropdown-${questionKey}`","inputProps","inputRef","TextField","e","target","QuestionAnswers","onChooseAnswer","`QuestionAnswers-Stack-${questionKey}`","QuestionEvents","EVENTS","ONBOARDING","QUESTIONNAIRE","QUESTION_1","QUESTION_2","QUESTION_3","QUESTION_4","QUESTION_5","QUESTION_6","QUESTION_7","SignUpForm","updateUserStatus","refetchUserData","user","useAuth","navigate","useNavigate","allSkills","industries","useSkills","isSubmitting","setIsSubmitting","questionAndAnswers","setQuestionAndAnswers","dropdownCountries","countries","map","country","key","generate","padding","icon","dropDownIndustries","sort","a","b","localeCompare","x","userEventData","UUID","_id","questionAndAnswersT","forEach","question","enumKey","Object","keys","answerOptionsT","answer","push","setValue","trigger","handleSubmit","formState","errors","isValid","useForm","resolver","yupResolver","mode","reValidateMode","defaultValues","onSubmit","eventData","questionId","answerText","answerItem","countryCode","skill","trackEvent","SUBMIT","UserStatus","Active","ROUTES","ACTIVE","Pending","MORE_INFO","SIGNUP_PENDING","Rejected","INACTIVE","index","`SignUpForm-QuestionAnswers-${questionKey}`","Button","OnboardingQuestions","OnboardingScreenLayout","AppStyled","Chips","borderRadius","marginTop"],"mappings":"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"}