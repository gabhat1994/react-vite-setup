{"version":3,"file":"StatementOfWorkPreview-4235e572.js","sources":["../../src/features/contracts/components/StatementOfWorkPreview/StatementOfWorkPreviewHeader.tsx","../../src/features/contracts/components/StatementOfWorkPreview/StatementOfWorkSigningHeader.tsx","../../src/screens/Contracts/StatementOfWorkPreview/styles.ts","../../src/screens/Contracts/StatementOfWorkPreview/index.tsx"],"sourcesContent":["import { useTranslation } from 'react-i18next';\nimport { generatePath, useNavigate } from 'react-router';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport routes from '@/constants/routes';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useError } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { UserUtil } from '@/utils/user';\nimport { useContractPreviewFormContext } from '../../hooks/contractPreviewForm';\nimport { useStatementOfWorkPermissions } from '../../hooks/statementOfWorkPermissions';\nimport { DocumentType, type StatementOfWork } from '../../types';\nimport { StatementOfWorkUtils } from '../../utils/statementOfWork';\nimport { DeclineDocumentConfirmationModal } from '../DeclineDocumentConfirmationModal/DeclineDocumentConfirmationModal';\nimport { DeleteDocumentConfirmationModal } from '../DeleteDocumentConfirmationModal/DeleteDocumentConfirmationModal';\nimport * as DocumentHeader from '../DocumentHeader/DocumentHeader';\nimport { useDownloadStatementOfWorkPdfLazy } from '../../hooks/statementOfWorkPdf';\nimport { ContractUtils } from '../../utils/contract';\nimport { ResendDocumentConfirmationModal } from '../ResendDocumentConfirmationModal/ResendDocumentConfirmationModal';\n\ntype ModalType = 'delete' | 'decline' | 'resend';\n\ntype StatementOfWorkPreviewHeaderProps = {\n  statementOfWork: StatementOfWork | null;\n  onConfirmDelete(): Promise<void>;\n  onConfirmDecline(): Promise<void>;\n  onConfirmResend(): Promise<void>;\n  onDuplicate(): Promise<void>;\n  onGoBackToList(): void;\n};\n\nexport const StatementOfWorkPreviewHeader = ({\n  statementOfWork,\n  onConfirmDelete,\n  onConfirmDecline,\n  onConfirmResend,\n  onDuplicate,\n  onGoBackToList,\n}: StatementOfWorkPreviewHeaderProps) => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const { user } = useAuth();\n  const { logError } = useError();\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const downloadPdf = useDownloadStatementOfWorkPdfLazy();\n\n  const StatementOfWorkPermissions = useStatementOfWorkPermissions();\n\n  const {\n    formState: { isValid, isDirty },\n  } = useContractPreviewFormContext();\n\n  const handleKeepAsDraft = () => {\n    onGoBackToList();\n  };\n\n  const handleDeleteDraft = () => {\n    openModal('delete');\n  };\n\n  const handleDuplicate = async () => {\n    await onDuplicate();\n  };\n\n  const handleEdit = () => {\n    if (!statementOfWork?._id) {\n      return;\n    }\n\n    navigate(\n      generatePath(routes.STATEMENT_OF_WORK_EDIT, { id: statementOfWork._id }),\n      {\n        replace: true,\n      },\n    );\n  };\n\n  const handleDecline = () => {\n    openModal('decline');\n  };\n\n  const handleResend = () => {\n    openModal('resend');\n  };\n\n  const confirmDelete = async () => {\n    try {\n      await onConfirmDelete();\n      closeModal();\n      onGoBackToList();\n    } catch (err) {\n      closeModal();\n      logError(err, 'sow-delete-draft');\n    }\n  };\n\n  const confirmDecline = async () => {\n    try {\n      await onConfirmDecline();\n    } catch (err) {\n      logError(err, 'sow-decline');\n    } finally {\n      closeModal();\n    }\n  };\n\n  const handleDownloadPdf = () => {\n    if (!statementOfWork?._id) {\n      return;\n    }\n\n    downloadPdf(\n      statementOfWork._id,\n      StatementOfWorkUtils.formatPdfFileName(statementOfWork),\n    );\n  };\n\n  const confirmResend = async () => {\n    try {\n      await onConfirmResend();\n    } catch (err) {\n      logError(err, 'contract-resend');\n    } finally {\n      closeModal();\n    }\n  };\n\n  const isSigningBlocked =\n    !(isValid && isDirty) ||\n    ContractUtils.isDraft(statementOfWork?.linkedContract);\n\n  return (\n    <>\n      <StickyFormHeader\n        showBackButton={!UserUtil.isUnauthenticated(user)}\n        title={t('noumena.statement_of_work_preview.title')}\n        buttons={\n          StatementOfWorkPermissions.isOwner(statementOfWork) ? (\n            <>\n              {StatementOfWorkPermissions.canResend(statementOfWork) && (\n                <DocumentHeader.ResendButton onClick={handleResend} />\n              )}\n              {StatementOfWorkPermissions.canEdit(statementOfWork) && (\n                <DocumentHeader.EditButton onClick={handleEdit} />\n              )}\n              {StatementOfWorkPermissions.canDuplicate(statementOfWork) && (\n                <DocumentHeader.DuplicateButton onClick={handleDuplicate} />\n              )}\n              {StatementOfWorkPermissions.canDelete(statementOfWork) && (\n                <DocumentHeader.DeleteButton\n                  onClick={handleDeleteDraft}\n                  isDraft={StatementOfWorkUtils.isDraft(statementOfWork)}\n                />\n              )}\n              {StatementOfWorkPermissions.canDownloadPdf(statementOfWork) &&\n                !StatementOfWorkUtils.isDraft(statementOfWork) && (\n                  <DocumentHeader.DownloadPdfButton\n                    onClick={handleDownloadPdf}\n                  />\n                )}\n              {StatementOfWorkPermissions.canSaveDraft(statementOfWork) && (\n                <DocumentHeader.KeepAsDraftButton onClick={handleKeepAsDraft} />\n              )}\n              {StatementOfWorkPermissions.canSign(statementOfWork) && (\n                <DocumentHeader.SendButton softDisabled={isSigningBlocked} />\n              )}\n            </>\n          ) : (\n            <>\n              {StatementOfWorkPermissions.canDownloadPdf(statementOfWork) &&\n                !StatementOfWorkUtils.isDraft(statementOfWork) && (\n                  <DocumentHeader.DownloadPdfButton\n                    onClick={handleDownloadPdf}\n                  />\n                )}\n              {StatementOfWorkPermissions.canDecline(statementOfWork) && (\n                <DocumentHeader.DeclineButton onClick={handleDecline} />\n              )}\n              {StatementOfWorkPermissions.canSign(statementOfWork) && (\n                <DocumentHeader.SendButton softDisabled={isSigningBlocked} />\n              )}\n            </>\n          )\n        }\n      />\n\n      <DeleteDocumentConfirmationModal\n        isOpen={modalType === 'delete'}\n        isDraft={StatementOfWorkUtils.isDraft(statementOfWork)}\n        documentName={statementOfWork?.title ?? ''}\n        documentType={DocumentType.Sow}\n        onCancel={closeModal}\n        onDelete={confirmDelete}\n      />\n      <DeclineDocumentConfirmationModal\n        isOpen={modalType === 'decline'}\n        documentName={statementOfWork?.title ?? ''}\n        onCancel={closeModal}\n        onDelete={confirmDecline}\n      />\n      <ResendDocumentConfirmationModal\n        isOpen={modalType === 'resend'}\n        onCancel={closeModal}\n        onConfirm={confirmResend}\n      />\n    </>\n  );\n};\n","import { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { useStatementOfWorkPermissions } from '../../hooks/statementOfWorkPermissions';\nimport { type StatementOfWorkBasic } from '../../types';\nimport * as DocumentHeader from '../DocumentHeader/DocumentHeader';\n\ntype StatementOfWorkSigningHeaderProps = {\n  statementOfWork: StatementOfWorkBasic | null;\n  title: string;\n  onGoBack(): void;\n  onDownloadPdf(): void;\n};\n\nexport const StatementOfWorkSigningHeader = ({\n  statementOfWork,\n  title,\n  onGoBack,\n  onDownloadPdf,\n}: StatementOfWorkSigningHeaderProps) => {\n  const StatementOfWorkPermissions = useStatementOfWorkPermissions();\n\n  return (\n    <>\n      <StickyFormHeader\n        onGoBack={onGoBack}\n        title={title}\n        buttons={\n          statementOfWork &&\n          StatementOfWorkPermissions.canDownloadPdf(statementOfWork) && (\n            <DocumentHeader.DownloadPdfButton onClick={onDownloadPdf} />\n          )\n        }\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nconst SignatureModalForm = styled.form`\n  display: flex;\n  justify-content: stretch;\n  align-items: stretch;\n  flex-grow: 1;\n`;\n\nexport default {\n  SignatureModalForm,\n};\n","import { FormProvider } from 'react-hook-form';\nimport { Navigate, useParams } from 'react-router-dom';\nimport { Spinner } from '@/components/Spinner';\nimport routes from '@/constants/routes';\nimport { DocumentSignaturePreview } from '@/features/contracts/components/DocumentSignaturePreview/DocumentSignaturePreview';\nimport {\n  StatementOfWorkPreview,\n  StatementOfWorkPreviewHeader,\n} from '@/features/contracts/components/StatementOfWorkPreview';\nimport { useToast } from '@/hooks';\nimport useScrollIntoElement from '@/hooks/useScrollIntoElement';\nimport SinglePageLayout, {\n  FullHeightMain,\n  ResponsiveMain,\n} from '@/layout/SinglePageLayout';\nimport { StatementOfWorkSigningHeader } from '@/features/contracts/components/StatementOfWorkPreview/StatementOfWorkSigningHeader';\nimport { ContractToolRoutes } from '@/features/contracts/utils/routes';\nimport { StatementOfWorkUtils } from '@/features/contracts/utils/statementOfWork';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { downloadFileFromUrl } from '@/utils/file';\nimport { useStatementOfWorkPermissions } from '@/features/contracts/hooks/statementOfWorkPermissions';\nimport S from './styles';\nimport { useStatementOfWorkPreviewScreen } from './useStatementOfWorkPreviewScreen';\n\nexport function StatementOfWorkPreviewScreen() {\n  const { id } = useParams();\n  const { goBackToOrigin } = useNavigateWithOrigin();\n  const { addErrorToast } = useToast();\n  const { scrollIntoElement } = useScrollIntoElement();\n  const StatementOfWorkPermissions = useStatementOfWorkPermissions();\n\n  const {\n    summary,\n    signature,\n    statementOfWork,\n    previewStep,\n    changeStep,\n    deleteStatementOfWork,\n    declineStatementOfWork,\n    duplicateStatementOfWork,\n    resendStatementOfWork,\n  } = useStatementOfWorkPreviewScreen({ id });\n\n  const goBackToList = () => {\n    goBackToOrigin({ fallbackUrl: ContractToolRoutes.contractManager() });\n  };\n\n  const handleGoBackToSummary = () => {\n    changeStep('Summary');\n  };\n\n  const handleSubmitError = () => {\n    addErrorToast(\n      'Please check all the agreements in the last section to continue.',\n    );\n    scrollIntoElement('agreements');\n  };\n\n  if (\n    !id ||\n    (!statementOfWork && !summary.isLoading) ||\n    (statementOfWork &&\n      !StatementOfWorkPermissions.canSeeSummary(statementOfWork))\n  ) {\n    return <Navigate to={routes.NOT_FOUND} replace />;\n  }\n\n  if (previewStep === 'Summary') {\n    return (\n      <SinglePageLayout>\n        <form\n          onSubmit={summary.form.handleSubmit(\n            summary.onSubmit,\n            handleSubmitError,\n          )}\n        >\n          <FormProvider {...summary.form}>\n            <StatementOfWorkPreviewHeader\n              statementOfWork={statementOfWork}\n              onConfirmDelete={deleteStatementOfWork}\n              onConfirmDecline={declineStatementOfWork}\n              onConfirmResend={resendStatementOfWork}\n              onDuplicate={duplicateStatementOfWork}\n              onGoBackToList={goBackToList}\n            />\n\n            <ResponsiveMain>\n              {summary.isLoading ? (\n                <Spinner />\n              ) : statementOfWork ? (\n                <StatementOfWorkPreview statementOfWork={statementOfWork} />\n              ) : null}\n            </ResponsiveMain>\n          </FormProvider>\n        </form>\n      </SinglePageLayout>\n    );\n  }\n\n  if (previewStep === 'ConfirmSignature') {\n    return (\n      <SinglePageLayout>\n        <FullHeightMain>\n          <StatementOfWorkSigningHeader\n            title=\"Check your SOW before signing\"\n            onGoBack={handleGoBackToSummary}\n            statementOfWork={statementOfWork}\n            onDownloadPdf={() => {\n              if (!statementOfWork || !signature.pdfWithSignature) {\n                return;\n              }\n              downloadFileFromUrl(\n                signature.pdfWithSignature,\n                'application/json',\n                StatementOfWorkUtils.formatPdfFileName(statementOfWork),\n              );\n            }}\n          />\n          <S.SignatureModalForm\n            onSubmit={signature.form.handleSubmit(\n              signature.onSubmit,\n              handleSubmitError,\n            )}\n          >\n            <FormProvider {...signature.form}>\n              <DocumentSignaturePreview\n                pdfData={signature.pdfWithSignature}\n                isLoading={signature.isLoading}\n                onGoBack={handleGoBackToSummary}\n              />\n            </FormProvider>\n          </S.SignatureModalForm>\n        </FullHeightMain>\n      </SinglePageLayout>\n    );\n  }\n\n  return <Navigate to={routes.NOT_FOUND} replace />;\n}\n\nexport default StatementOfWorkPreviewScreen;\n"],"names":["StatementOfWorkPreviewHeader","statementOfWork","onConfirmDelete","onConfirmDecline","onConfirmResend","onDuplicate","onGoBackToList","t","useTranslation","navigate","useNavigate","user","useAuth","logError","useError","modalType","openModal","closeModal","useModalManager","downloadPdf","useDownloadStatementOfWorkPdfLazy","StatementOfWorkPermissions","useStatementOfWorkPermissions","formState","isValid","isDirty","useContractPreviewFormContext","handleKeepAsDraft","handleDeleteDraft","handleDuplicate","handleEdit","_id","generatePath","routes","STATEMENT_OF_WORK_EDIT","id","replace","handleDecline","handleResend","confirmDelete","err","confirmDecline","handleDownloadPdf","StatementOfWorkUtils","formatPdfFileName","confirmResend","isSigningBlocked","ContractUtils","isDraft","linkedContract","jsxs","Fragment","jsx","StickyFormHeader","UserUtil","isUnauthenticated","isOwner","canResend","DocumentHeader.ResendButton","canEdit","DocumentHeader.EditButton","canDuplicate","DocumentHeader.DuplicateButton","canDelete","DocumentHeader.DeleteButton","canDownloadPdf","DocumentHeader.DownloadPdfButton","canSaveDraft","DocumentHeader.KeepAsDraftButton","canSign","DocumentHeader.SendButton","canDecline","DocumentHeader.DeclineButton","DeleteDocumentConfirmationModal","title","DocumentType","Sow","DeclineDocumentConfirmationModal","ResendDocumentConfirmationModal","StatementOfWorkSigningHeader","onGoBack","onDownloadPdf","SignatureModalForm","styled","form","S","StatementOfWorkPreviewScreen","useParams","goBackToOrigin","useNavigateWithOrigin","addErrorToast","useToast","scrollIntoElement","useScrollIntoElement","summary","signature","previewStep","changeStep","deleteStatementOfWork","declineStatementOfWork","duplicateStatementOfWork","resendStatementOfWork","useStatementOfWorkPreviewScreen","goBackToList","fallbackUrl","ContractToolRoutes","contractManager","handleGoBackToSummary","handleSubmitError","isLoading","canSeeSummary","Navigate","NOT_FOUND","SinglePageLayout","handleSubmit","onSubmit","FormProvider","ResponsiveMain","Spinner","StatementOfWorkPreview","FullHeightMain","pdfWithSignature","downloadFileFromUrl","DocumentSignaturePreview"],"mappings":"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"}