{"version":3,"file":"SetupPin-06f1ecff.js","sources":["../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/types.ts","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/style.ts","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/Header.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/HelperText.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/Questions.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/BackButton.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/ContinueButton.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SecurityQuestions/SecurityQuestions.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/types.ts","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/Otp.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/Header.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/BackButton.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/ContinueButton.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/ShowPasswordButton.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/HelperText.tsx","../../src/features/TransactionModal/components/Steps/PlaidFlow/SetupPin/SetupPin.tsx"],"sourcesContent":["import { createContext, type Dispatch, type SetStateAction } from 'react';\n\nexport interface TQuestions {\n  id: string;\n  question: string;\n}\n\nexport type TSecurityQuestions = {\n  questionOne: TQuestions;\n  questionSecond: TQuestions;\n  questionThird: TQuestions;\n};\n\nexport interface FormValues {\n  answerOne: string;\n  answerSecond: string;\n  answerThree: string;\n}\n\nexport type TSecurityQuestionsProps = {\n  children: React.ReactNode;\n  passCode: string | null;\n  handlePreviousStep: () => void;\n  handleNextStep: () => void;\n  loading?: boolean;\n};\n\nexport type TSecurityQuestionContext = {\n  securityQuestions: TSecurityQuestions;\n  questionsArray: TQuestions[] | undefined;\n  setSecurityQuestions:\n    | Dispatch<SetStateAction<TSecurityQuestions>>\n    | undefined;\n  handlePreviousStep: () => void;\n  handleSubmit: () => void;\n};\n\nexport const SecurityQuestionContext = createContext<TSecurityQuestionContext>({\n  securityQuestions: {\n    questionOne: { id: '', question: '' },\n    questionSecond: { id: '', question: '' },\n    questionThird: { id: '', question: '' },\n  },\n  questionsArray: undefined,\n  setSecurityQuestions: undefined,\n  handlePreviousStep: () => null,\n  handleSubmit: () => null,\n});\n","import styled from 'styled-components';\nimport { Icon } from '@/components/Icon';\n\nexport const AddressRightIcon = styled(Icon)<{ isOpen?: boolean }>`\n  transition: transform 0.3s;\n  ${({ isOpen }) => isOpen && 'transform: rotate(180deg)'}\n`;\n\nexport const FallbackModal = styled.div`\n  height: 600px;\n`;\n","import { t } from 'i18next';\nimport { TSpan } from '@/components/Typography';\nimport { type TProps } from '@/components/Typography/Typography';\n\nconst Header = (props: TProps) => (\n  <TSpan {...props}>\n    {t('noumena.money.setupWallet.security_question.text')}\n  </TSpan>\n);\n\nexport default Header;\n","import { t } from 'i18next';\nimport { TSpan } from '@/components/Typography';\n\nconst HelperText = () => (\n  <TSpan\n    textAlign=\"center\"\n    font=\"body-l\"\n    colorToken=\"--text-body-neutral-default\"\n  >\n    {t('noumena.money.setupWallet.security_question.sub_text')}\n  </TSpan>\n);\n\nexport default HelperText;\n","import { useCallback, useContext, useMemo, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { t } from 'i18next';\nimport generate from 'uniqid';\nimport { Dropdown, type DropdownValueType } from '@/components/Dropdown';\nimport { TSpan } from '@/components/Typography';\nimport { TextField } from '@/components/TextField';\nimport { Spacer, Stack } from '@/layout';\nimport { AddressRightIcon } from './style';\nimport { type FormValues, type TQuestions, SecurityQuestionContext } from './types';\n\nconst Questions = () => {\n  const [open, setOpen] = useState(false);\n  const { securityQuestions, questionsArray, setSecurityQuestions } =\n    useContext(SecurityQuestionContext);\n  const {\n    register,\n    getValues,\n    formState: { errors },\n  } = useFormContext<FormValues>();\n\n  const generateDropDownItems = (\n    val: TQuestions[] | undefined,\n  ): DropdownValueType<TQuestions>[] =>\n    val?.map((ques) => ({\n      key: generate(),\n      label: (\n        <Stack>\n          <TSpan\n            font=\"input-s\"\n            colorToken=\"--text-tablecell-header-neutral-highlighted\"\n            data-testid=\"country-options\"\n          >\n            <div style={{ padding: '0 4px' }}>{ques.question}</div>\n          </TSpan>\n        </Stack>\n      ),\n      type: 'value',\n      value: ques,\n    })) || [];\n  const generatedQuestions: DropdownValueType<TQuestions>[] = useMemo(\n    () => generateDropDownItems(questionsArray),\n    [questionsArray],\n  );\n\n  const getDropDownQuestions = useCallback(\n    (selectedQuestionOne: TQuestions, selectedQuestionTwo: TQuestions) => {\n      if (!selectedQuestionOne.id && !selectedQuestionTwo.id)\n        return generatedQuestions;\n      const filteredSecondQuestionArray = questionsArray?.filter(\n        (que) =>\n          que.id !== selectedQuestionOne.id &&\n          que.id !== selectedQuestionTwo.id,\n      );\n      return generateDropDownItems(filteredSecondQuestionArray);\n    },\n    [questionsArray, generatedQuestions],\n  );\n\n  return (\n    <form style={{ width: '100%' }}>\n      <Dropdown\n        hideIcons\n        usePortal={false}\n        usePopStyle={true}\n        isAnimation={false}\n        containerWidth=\"443px\"\n        options={getDropDownQuestions(\n          securityQuestions.questionSecond,\n          securityQuestions.questionThird,\n        )}\n        placement=\"bottom-start\"\n        onSelectOption={(option) => {\n          if (setSecurityQuestions) {\n            setSecurityQuestions((prv) => ({\n              ...prv,\n              questionOne: option.value,\n            }));\n          }\n        }}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            readOnly\n            style={{ cursor: 'pointer' }}\n            data-testid=\"step-five-security-question-input-one-read-only\"\n            label={t(\n              'noumena.money.setupWallet.security_question.text_field.label',\n            )}\n            {...inputProps}\n            ref={inputRef}\n            value={securityQuestions.questionOne.question}\n            rightIcon={\n              <AddressRightIcon\n                name=\"chevron_down_m\"\n                isOpen={open}\n                size={16}\n                onClick={toggle}\n                color=\"--icon-input-neutral-default\"\n                data-testid=\"styledAddressDownArrow-one\"\n              />\n            }\n          />\n        )}\n      </Dropdown>\n      <Spacer height={8} />\n      <TextField\n        disabled={!securityQuestions.questionOne.id}\n        {...register('answerOne', {\n          required: { value: true, message: t(`noumena.input.not_empty`) },\n        })}\n        style={{ cursor: 'pointer' }}\n        data-testid=\"step-five-answer-question-one\"\n        label={t(\n          'noumena.money.setupWallet.security_question.answer_text_field.label',\n        )}\n        value={getValues('answerOne')}\n        error={!!errors.answerOne}\n        helperText={errors?.answerOne?.message}\n      />\n      <Spacer height={16} />\n      <Dropdown\n        hideIcons\n        containerWidth=\"443px\"\n        usePortal={false}\n        usePopStyle={true}\n        isAnimation={false}\n        options={getDropDownQuestions(\n          securityQuestions.questionOne,\n          securityQuestions.questionThird,\n        )}\n        placement=\"bottom-start\"\n        onSelectOption={(option) => {\n          if (setSecurityQuestions) {\n            setSecurityQuestions((prv) => ({\n              ...prv,\n              questionSecond: option.value,\n            }));\n          }\n        }}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            readOnly\n            style={{ cursor: 'pointer' }}\n            data-testid=\"step-five-security-question-input-two-read-only\"\n            label={t(\n              'noumena.money.setupWallet.security_question.text_field.label1',\n            )}\n            {...inputProps}\n            ref={inputRef}\n            value={securityQuestions.questionSecond.question}\n            rightIcon={\n              <AddressRightIcon\n                name=\"chevron_down_m\"\n                isOpen={open}\n                size={16}\n                onClick={toggle}\n                color=\"--icon-input-neutral-default\"\n                data-testid=\"styledAddressDownArrow-two\"\n              />\n            }\n          />\n        )}\n      </Dropdown>\n      <Spacer height={8} />\n      <TextField\n        disabled={!securityQuestions.questionSecond.id}\n        {...register('answerSecond', {\n          required: { value: true, message: t(`noumena.input.not_empty`) },\n        })}\n        style={{ cursor: 'pointer' }}\n        data-testid=\"step-five-answer-question-two\"\n        label={t(\n          'noumena.money.setupWallet.security_question.answer_text_field.label',\n        )}\n        value={getValues('answerSecond')}\n        error={!!errors.answerSecond}\n        helperText={errors.answerSecond?.message}\n      />\n      <Spacer height={16} />\n      <Dropdown\n        hideIcons\n        usePortal={false}\n        usePopStyle={true}\n        isAnimation={false}\n        containerWidth=\"443px\"\n        options={getDropDownQuestions(\n          securityQuestions.questionOne,\n          securityQuestions.questionSecond,\n        )}\n        placement=\"bottom-start\"\n        dropdownItemStyle={{\n          fontWeight: '400',\n          fontSize: '14px',\n          color: 'black',\n        }}\n        onSelectOption={(option) => {\n          if (setSecurityQuestions) {\n            setSecurityQuestions((prv) => ({\n              ...prv,\n              questionThird: option.value,\n            }));\n          }\n        }}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            readOnly\n            style={{ cursor: 'pointer' }}\n            data-testid=\"step-five-security-question-input-three-read-only\"\n            label={t(\n              'noumena.money.setupWallet.security_question.text_field.label2',\n            )}\n            {...inputProps}\n            ref={inputRef}\n            value={securityQuestions.questionThird.question}\n            rightIcon={\n              <AddressRightIcon\n                name=\"chevron_down_m\"\n                isOpen={open}\n                size={16}\n                onClick={toggle}\n                color=\"--icon-input-neutral-default\"\n                data-testid=\"styledAddressDownArrow-three\"\n              />\n            }\n          />\n        )}\n      </Dropdown>\n      <Spacer height={8} />\n      <TextField\n        disabled={!securityQuestions.questionThird.id}\n        {...register('answerThree', {\n          required: { value: true, message: t(`noumena.input.not_empty`) },\n        })}\n        style={{ cursor: 'pointer' }}\n        data-testid=\"step-five-answer-question-three\"\n        label={t(\n          'noumena.money.setupWallet.security_question.answer_text_field.label',\n        )}\n        value={getValues('answerThree')}\n        error={!!errors.answerThree}\n        helperText={errors.answerThree?.message}\n      />\n    </form>\n  );\n};\n\nexport default Questions;\n","import { useContext } from 'react';\nimport { t } from 'i18next';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\nimport { SecurityQuestionContext } from './types';\n\nconst BackButton = () => {\n  const deviceType = useDeviceType();\n  const { handlePreviousStep } = useContext(SecurityQuestionContext);\n\n  return (\n    <Button\n      data-testid=\"step-five-back-button\"\n      type=\"button\"\n      style={\n        deviceType === DeviceTypeEnum.MOBILE ? { width: '100%' } : undefined\n      }\n      size={deviceType !== DeviceTypeEnum.MOBILE ? 'large' : undefined}\n      onClick={handlePreviousStep}\n      leftIcon={\n        <Icon\n          name=\"arrow_left_m\"\n          size={24}\n          color=\"--icon-button-neutral-default\"\n        />\n      }\n    >\n      {t('noumena.back.text')}\n    </Button>\n  );\n};\n\nexport default BackButton;\n","import { t } from 'i18next';\nimport { useContext } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { DeviceTypeEnum, useDeviceType } from '@/hooks';\nimport { SecurityQuestionContext, type FormValues } from './types';\n\nconst ContinueButton = () => {\n  const deviceType = useDeviceType();\n  const { handleSubmit } = useContext(SecurityQuestionContext);\n  const {\n    formState: { isDirty, isValid },\n  } = useFormContext<FormValues>();\n  return (\n    <Button\n      data-testid=\"step-five-submit-button\"\n      type=\"submit\"\n      primary\n      size={deviceType !== DeviceTypeEnum.MOBILE ? 'full' : undefined}\n      style={\n        deviceType === DeviceTypeEnum.MOBILE ? { width: '100%' } : undefined\n      }\n      disabled={!isDirty || !isValid}\n      onClick={handleSubmit}\n    >\n      {t('noumena.continue')}\n    </Button>\n  );\n};\n\nexport default ContinueButton;\n","import { useCallback, useMemo, useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { captureException } from '@sentry/react';\nimport { Spinner } from '@/components/Spinner';\nimport {\n  useGetSecurityQuestionsQuery,\n  useCreatePassCodeMutation,\n} from '@/apollo/graphql';\nimport { useToast } from '@/hooks';\nimport {\n  type FormValues,\n  type TQuestions,\n  type TSecurityQuestions,\n  type TSecurityQuestionsProps,\n  SecurityQuestionContext,\n} from './types';\nimport { FallbackModal } from './style';\nimport Header from './Header';\nimport HelperText from './HelperText';\nimport Questions from './Questions';\nimport BackButton from './BackButton';\nimport ContinueButton from './ContinueButton';\n\nconst SecurityQuestions = ({\n  children,\n  handlePreviousStep,\n  passCode,\n  handleNextStep,\n  loading = false,\n}: TSecurityQuestionsProps) => {\n  const { addToast } = useToast();\n  const [questionsArray, setQuestionsArray] = useState<TQuestions[]>();\n  const [securityQuestions, setSecurityQuestions] =\n    useState<TSecurityQuestions>({\n      questionOne: { id: '', question: '' },\n      questionSecond: { id: '', question: '' },\n      questionThird: { id: '', question: '' },\n    });\n\n  const formMethods = useForm<FormValues>({\n    mode: 'onChange',\n    defaultValues: { answerOne: '', answerSecond: '', answerThree: '' },\n  });\n\n  useGetSecurityQuestionsQuery({\n    onCompleted: ({ getQuestionnaire }) => {\n      setQuestionsArray(getQuestionnaire);\n    },\n    onError: (error) => {\n      addToast('error', 'none', error.message);\n      captureException(error, {\n        tags: { section: 'getSecurity-questions' },\n      });\n    },\n  });\n\n  const [createPassCodeMutation] = useCreatePassCodeMutation({\n    onCompleted: () => handleNextStep(),\n    onError: (error) => {\n      if (error.message === 'PassCode already generated') {\n        addToast('error', 'none', ` Pin Code already generated`);\n        handleNextStep();\n      } else {\n        addToast('error', 'none', ` ${error?.message}`);\n      }\n    },\n  });\n\n  const handleSubmit = useCallback(() => {\n    const {\n      formState: { errors },\n    } = formMethods;\n    if (Object.keys(errors).length === 0 && errors.constructor === Object) {\n      const { answerOne, answerSecond, answerThree } = formMethods.getValues();\n      const payload = [\n        { id: securityQuestions.questionOne.id, answer: answerOne },\n        { id: securityQuestions.questionSecond.id, answer: answerSecond },\n        { id: securityQuestions.questionThird.id, answer: answerThree },\n      ];\n      if (passCode) {\n        createPassCodeMutation({\n          variables: {\n            input: {\n              passCode,\n              securityQuestions: payload,\n            },\n          },\n        });\n      }\n    }\n  }, [\n    formMethods,\n    securityQuestions.questionOne.id,\n    securityQuestions.questionSecond.id,\n    securityQuestions.questionThird.id,\n    passCode,\n    createPassCodeMutation,\n  ]);\n\n  const contextValue = useMemo(\n    () => ({\n      securityQuestions,\n      questionsArray,\n      setSecurityQuestions,\n      handlePreviousStep,\n      handleSubmit,\n    }),\n    [\n      securityQuestions,\n      questionsArray,\n      setSecurityQuestions,\n      handleSubmit,\n      handlePreviousStep,\n    ],\n  );\n\n  return (\n    <SecurityQuestionContext.Provider value={contextValue}>\n      {loading ? (\n        <FallbackModal>\n          <Spinner />\n        </FallbackModal>\n      ) : (\n        <FormProvider {...formMethods}>{children}</FormProvider>\n      )}\n    </SecurityQuestionContext.Provider>\n  );\n};\n\nSecurityQuestions.Header = Header;\nSecurityQuestions.HelperText = HelperText;\nSecurityQuestions.Questions = Questions;\nSecurityQuestions.BackButton = BackButton;\nSecurityQuestions.ContinueButton = ContinueButton;\n\nexport default SecurityQuestions;\n","import { createContext, type Dispatch, type SetStateAction } from 'react';\n\nexport enum EPinCodeStates {\n  SETTING_THE_PIN = 'SETTING_THE_PIN',\n  CONFIRMING_THE_PIN = 'CONFIRMING_THE_PIN',\n}\n\nexport type TPinState = {\n  entered: string | undefined;\n  confirmed: string | undefined;\n};\n\nexport type TSetupPinContext = {\n  pinState: TPinState | undefined;\n  componentState: EPinCodeStates;\n  shouldDisable: boolean;\n  showPassword: boolean;\n  setShowPassword: Dispatch<SetStateAction<boolean>> | null;\n  handlePinChange: (pin: string | undefined) => void | null;\n  handleBack: () => void | null;\n  handleNext: () => void | null;\n};\n\nexport type TSetupPinProps = {\n  children: React.ReactNode;\n  handleBack: () => void | null;\n  onPassCodeConfirm: (pin: string) => void;\n  onContinueButtonClick: () => void;\n};\n\nexport const SetupPinContext = createContext<TSetupPinContext>({\n  pinState: { entered: '', confirmed: '' },\n  componentState: EPinCodeStates.SETTING_THE_PIN,\n  shouldDisable: true,\n  showPassword: false,\n  setShowPassword: null,\n  handlePinChange: () => null,\n  handleBack: () => null,\n  handleNext: () => null,\n});\n","import { useContext } from 'react';\nimport { OtpInput } from '@/components/Otp/OtpInput';\nimport { EPinCodeStates, SetupPinContext } from './types';\n\nconst Otp = () => {\n  const { componentState, handlePinChange, pinState, showPassword } =\n    useContext(SetupPinContext);\n\n  const hanldeOnChange = (val: string | undefined) => {\n    handlePinChange(val);\n  };\n\n  return (\n    <OtpInput\n      width=\"44px\"\n      value={\n        componentState === EPinCodeStates.SETTING_THE_PIN\n          ? pinState?.entered\n          : pinState?.confirmed\n      }\n      onChange={hanldeOnChange}\n      numInputs={6}\n      isInputPassword={!showPassword}\n      dataTestId=\"pin-code\"\n      color=\"var(--text-input-brand-primary-default)\"\n    />\n  );\n};\n\nexport default Otp;\n","import { useContext } from 'react';\nimport { TSpan } from '@/components/Typography';\nimport { type TProps } from '@/components/Typography/Typography';\n\nimport { EPinCodeStates, SetupPinContext } from './types';\n\nconst Header = (props: TProps) => {\n  const { componentState } = useContext(SetupPinContext);\n  return (\n    <TSpan {...props}>\n      {componentState === EPinCodeStates.SETTING_THE_PIN\n        ? 'Set Up a PIN Code'\n        : 'Confirm Your PIN Code'}\n    </TSpan>\n  );\n};\n\nexport default Header;\n","import { useContext } from 'react';\nimport { t } from 'i18next';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport { SetupPinContext } from './types';\n\nconst BackButton = () => {\n  const { handleBack } = useContext(SetupPinContext);\n  return (\n    <Button\n      data-testid=\"step-four-back-button\"\n      type=\"button\"\n      size=\"full\"\n      onClick={handleBack}\n      leftIcon={\n        <Icon\n          name=\"arrow_left_m\"\n          size={24}\n          color=\"--icon-button-neutral-default\"\n        />\n      }\n    >\n      {t('noumena.back.text')}\n    </Button>\n  );\n};\n\nexport default BackButton;\n","import { useContext } from 'react';\nimport { t } from 'i18next';\nimport { Button } from '@/components/Button';\nimport { SetupPinContext } from './types';\n\nconst ContinueButton = () => {\n  const { handleNext, shouldDisable } = useContext(SetupPinContext);\n  return (\n    <Button\n      data-testid=\"step-four-submit-button\"\n      type=\"submit\"\n      primary\n      size=\"full\"\n      disabled={shouldDisable}\n      onClick={handleNext}\n    >\n      {t('noumena.continue')}\n    </Button>\n  );\n};\n\nexport default ContinueButton;\n","import { useContext } from 'react';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport { SetupPinContext } from './types';\n\nconst ShowPasswordButton = () => {\n  const { showPassword, setShowPassword } = useContext(SetupPinContext);\n  const toggleVisibility = () => {\n    if (setShowPassword) {\n      setShowPassword(!showPassword);\n    }\n  };\n  return (\n    <Button\n      textOnly\n      onClick={toggleVisibility}\n      leftIcon={\n        <Icon\n          name={showPassword ? 'money_eye_off' : 'money_eye_up'}\n          size={24}\n          color=\"--icon-button-brand-primary-default\"\n        />\n      }\n    >\n      <TSpan font=\"button-m\" colorToken=\"--text-button-brand-primary-default\">\n        {showPassword ? 'Hide' : 'Show'} PIN Code\n      </TSpan>\n    </Button>\n  );\n};\n\nexport default ShowPasswordButton;\n","import { t } from 'i18next';\nimport { TSpan } from '@/components/Typography';\n\nconst HelperText = () => (\n  <TSpan\n    textAlign=\"center\"\n    font=\"body-l\"\n    colorToken=\"--text-body-neutral-default\"\n  >\n    {t('noumena.money.setupWallet.pinCode.sub_text')}\n  </TSpan>\n);\n\nexport default HelperText;\n","import { useState, useMemo, useEffect, useCallback } from 'react';\nimport { t } from 'i18next';\nimport { VALID_NUMBER_REGEX } from '@/constants/regex';\nimport { useToast } from '@/hooks';\nimport Otp from './Otp';\nimport Header from './Header';\nimport BackButton from './BackButton';\nimport ContinueButton from './ContinueButton';\nimport ShowPasswordButton from './ShowPasswordButton';\nimport HelperText from './HelperText';\nimport {\n  EPinCodeStates,\n  type TPinState,\n  type TSetupPinProps,\n  SetupPinContext,\n} from './types';\n\nexport const PIN_CODE_LENGTH = 6;\n\nexport const SetupPin = ({\n  children,\n  onPassCodeConfirm,\n  onContinueButtonClick,\n  handleBack,\n}: TSetupPinProps) => {\n  const { addToast } = useToast();\n  const isValidNumber = useMemo(() => VALID_NUMBER_REGEX, []);\n  const [pinState, setPinState] = useState<TPinState>({\n    entered: '',\n    confirmed: '',\n  });\n  const [componentState, setComponentState] = useState<EPinCodeStates>(\n    EPinCodeStates.SETTING_THE_PIN,\n  );\n  const [showPassword, setShowPassword] = useState(false);\n\n  useEffect(() => {\n    if (\n      pinState?.entered?.length === PIN_CODE_LENGTH &&\n      pinState?.confirmed?.length === PIN_CODE_LENGTH\n    ) {\n      if (pinState.entered === pinState.confirmed) {\n        onPassCodeConfirm(pinState.confirmed);\n      } else {\n        addToast('error', 'none', 'PIN codes don’t match. Please try again.');\n      }\n    }\n  }, [pinState, addToast, onPassCodeConfirm]);\n\n  const handleBackClick = useCallback(() => {\n    if (componentState === EPinCodeStates.CONFIRMING_THE_PIN) {\n      setPinState({ entered: '', confirmed: '' });\n      setComponentState(EPinCodeStates.SETTING_THE_PIN);\n    } else {\n      handleBack();\n    }\n  }, [componentState, handleBack]);\n\n  const handleNext = useCallback(() => {\n    if (componentState === EPinCodeStates.SETTING_THE_PIN) {\n      if (pinState?.entered && isValidNumber.test(pinState.entered)) {\n        setComponentState(EPinCodeStates.CONFIRMING_THE_PIN);\n      } else {\n        addToast(\n          'error',\n          'none',\n          `${t('Invalid pincode, only numbers are allowed')}`,\n        );\n      }\n    } else {\n      onContinueButtonClick();\n    }\n  }, [\n    setComponentState,\n    componentState,\n    addToast,\n    isValidNumber,\n    onContinueButtonClick,\n    pinState?.entered,\n  ]);\n\n  const handlePinChange = useCallback(\n    (pin: string | undefined) => {\n      if (componentState === EPinCodeStates.SETTING_THE_PIN) {\n        setPinState((prv) => ({ ...prv, entered: pin }));\n      } else {\n        setPinState((prv) => ({ ...prv, confirmed: pin }));\n      }\n    },\n    [setPinState, componentState],\n  );\n\n  const shouldDisable =\n    componentState === EPinCodeStates.SETTING_THE_PIN\n      ? !(pinState?.entered?.length === PIN_CODE_LENGTH)\n      : !(pinState.entered === pinState.confirmed);\n\n  const SetupPinContextValue = useMemo(\n    () => ({\n      pinState,\n      componentState,\n      handleBack: handleBackClick,\n      handleNext,\n      shouldDisable,\n      handlePinChange,\n      showPassword,\n      setShowPassword,\n    }),\n    [\n      pinState,\n      componentState,\n      handleBackClick,\n      handleNext,\n      shouldDisable,\n      handlePinChange,\n      showPassword,\n      setShowPassword,\n    ],\n  );\n\n  return (\n    <div style={{ width: '100%' }}>\n      <SetupPinContext.Provider value={SetupPinContextValue}>\n        {children}\n      </SetupPinContext.Provider>\n    </div>\n  );\n};\n\nSetupPin.Otp = Otp;\nSetupPin.ShowPasswordButton = ShowPasswordButton;\nSetupPin.Header = Header;\nSetupPin.HelperText = HelperText;\nSetupPin.BackButton = BackButton;\nSetupPin.ContinueButton = ContinueButton;\n"],"names":["SecurityQuestionContext","createContext","securityQuestions","questionOne","id","question","questionSecond","questionThird","questionsArray","undefined","setSecurityQuestions","handlePreviousStep","handleSubmit","AddressRightIcon","styled","Icon","isOpen","FallbackModal","div","Header","props","jsx","TSpan","t","HelperText","Questions","open","setOpen","useState","useContext","register","getValues","formState","errors","useFormContext","generateDropDownItems","val","map","ques","key","generate","label","Stack","padding","type","value","generatedQuestions","useMemo","getDropDownQuestions","useCallback","selectedQuestionOne","selectedQuestionTwo","filteredSecondQuestionArray","filter","que","jsxs","width","Dropdown","option","prv","inputProps","inputRef","toggle","TextField","cursor","Spacer","required","message","answerOne","answerSecond","fontWeight","fontSize","color","answerThree","BackButton","deviceType","useDeviceType","Button","DeviceTypeEnum","MOBILE","ContinueButton","isDirty","isValid","SecurityQuestions","children","passCode","handleNextStep","loading","addToast","useToast","setQuestionsArray","formMethods","useForm","mode","defaultValues","useGetSecurityQuestionsQuery","onCompleted","getQuestionnaire","onError","error","captureException","tags","section","createPassCodeMutation","useCreatePassCodeMutation","Object","keys","length","constructor","payload","answer","variables","input","contextValue","Spinner","FormProvider","EPinCodeStates","SETTING_THE_PIN","CONFIRMING_THE_PIN","SetupPinContext","pinState","entered","confirmed","componentState","shouldDisable","showPassword","setShowPassword","handlePinChange","handleBack","handleNext","Otp","hanldeOnChange","OtpInput","ShowPasswordButton","toggleVisibility","PIN_CODE_LENGTH","SetupPin","onPassCodeConfirm","onContinueButtonClick","isValidNumber","VALID_NUMBER_REGEX","setPinState","setComponentState","useEffect","handleBackClick","test","pin","SetupPinContextValue"],"mappings":"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"}