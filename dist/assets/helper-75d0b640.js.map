{"version":3,"file":"helper-75d0b640.js","sources":["../../src/features/money/hooks/useTransactions.ts","../../src/screens/MoneyDetails/ViewTransactions/helper.ts","../../src/screens/MoneyDetails/helper.ts"],"sourcesContent":["import { usePaymentsQuery } from '@/apollo/graphql/queries/getTransactions.generated';\nimport { type PaymentFilter } from '@/apollo/generated/types';\n\ntype UseTransactionsOptions = {\n  filter: PaymentFilter;\n  limit: number;\n  page: number;\n  disabled?: boolean;\n};\n\nexport const useTransactions = ({\n  filter,\n  limit,\n  page,\n  disabled,\n}: UseTransactionsOptions) => {\n  const { data, loading, refetch } = usePaymentsQuery({\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      filter,\n      limit,\n      page,\n    },\n    skip: disabled,\n  });\n\n  return {\n    transactionData: {\n      data: data?.payments?.data || [],\n      totalCount: data?.payments?.count || 0,\n      loading,\n    },\n    refresh: refetch,\n  };\n};\n","import { format } from 'date-fns';\nimport { t } from 'i18next';\nimport { PaymentAccountTypeEnum } from '@/apollo/generated/types';\nimport { type DropdownValueType } from '@/components/Dropdown/types';\nimport { type GetAccountListQuery } from '@/apollo/graphql';\n\nexport const MonthList: string[] = [\n  t(`noumena.viewTransactions.January`),\n  t(`noumena.viewTransactions.February`),\n  t(`noumena.viewTransactions.March`),\n  t(`noumena.viewTransactions.April`),\n  t(`noumena.viewTransactions.May`),\n  t(`noumena.viewTransactions.June`),\n  t(`noumena.viewTransactions.July`),\n  t(`noumena.viewTransactions.August`),\n  t(`noumena.viewTransactions.September`),\n  t(`noumena.viewTransactions.October`),\n  t(`noumena.viewTransactions.November`),\n  t(`noumena.viewTransactions.December`),\n];\n\nexport const findMonthList = () => {\n  const newList = [];\n  const monthName = MonthList;\n  const d = new Date();\n  d.setDate(1);\n\n  for (let i = 0; i <= 11; i += 1) {\n    newList.push(`${monthName[d.getMonth()]} ${d.getFullYear()}`);\n    d.setMonth(d.getMonth() - 1);\n  }\n  return newList.reverse();\n};\n\nexport const findCurrentMonth = () => {\n  const year = `${new Date().getFullYear().toString()}`;\n  const name = MonthList[Number(new Date().getMonth().toString().slice(-2))];\n  return `${name} ${year}`;\n};\n\nexport const convert = (str: Date) => {\n  const date = new Date(str);\n  const mnth = `0${date.getMonth() + 1}`.slice(-2);\n  const day = `0${date.getDate()}`.slice(-2);\n  return [date.getFullYear(), mnth, day].join('-');\n};\n\nexport const DateFormaterStringInput = (str?: string) => {\n  if (!str) return '';\n  const now = format(new Date(Number(str)), 'MMM dd, yyyy');\n  return now;\n};\n\nexport const accountsDropdownMapper = (data: GetAccountListQuery) => {\n  const values: DropdownValueType<string>[] = [\n    {\n      label: 'Wallets : All',\n      key: '',\n      type: 'value',\n      value: '',\n    },\n  ];\n  const accounts: DropdownValueType<string>[] = data?.getAccountList!.map(\n    (account) => ({\n      label:\n        account?.accountType === 'WALLET'\n          ? account?.walletName || ''\n          : account?.customerName || '',\n      key:\n        account?.masterWalletId !== null && account?.chamberId !== null\n          ? PaymentAccountTypeEnum.SubWallet\n          : account.accountType || '',\n      type: 'value',\n      value: account?.id || '',\n    }),\n  );\n  const res = [...values, ...accounts];\n\n  return res;\n};\n\nexport const selectedAccountFinder = (\n  data: GetAccountListQuery,\n  id: string,\n  setSelectedDropdownValue: Function,\n) => {\n  const selectedValue = data?.getAccountList?.filter(\n    (account) => id === account?.id,\n  )[0];\n\n  setSelectedDropdownValue({\n    label:\n      selectedValue === undefined\n        ? 'Wallets : All'\n        : selectedValue?.accountType === 'WALLET'\n        ? selectedValue?.walletName || ''\n        : selectedValue?.customerName || '',\n    key:\n      id === ''\n        ? ''\n        : selectedValue?.masterWalletId !== null &&\n          selectedValue?.chamberId !== null\n        ? PaymentAccountTypeEnum.SubWallet\n        : selectedValue?.accountType || '',\n    type: 'value',\n    value: selectedValue?.id || '',\n  });\n\n  return selectedValue;\n};\n","import { t } from 'i18next';\nimport { format } from 'date-fns';\nimport { PaymentAccountTypeEnum } from '@/apollo/generated/types';\n\nexport const MonthList: string[] = [\n  t(`noumena.viewTransactions.January`),\n  t(`noumena.viewTransactions.February`),\n  t(`noumena.viewTransactions.March`),\n  t(`noumena.viewTransactions.April`),\n  t(`noumena.viewTransactions.May`),\n  t(`noumena.viewTransactions.June`),\n  t(`noumena.viewTransactions.July`),\n  t(`noumena.viewTransactions.August`),\n  t(`noumena.viewTransactions.September`),\n  t(`noumena.viewTransactions.October`),\n  t(`noumena.viewTransactions.November`),\n  t(`noumena.viewTransactions.December`),\n];\n\nexport const getType = (val: string) => {\n  switch (val) {\n    case 'WALLET':\n      return PaymentAccountTypeEnum.Wallet;\n    case 'BANK':\n      return PaymentAccountTypeEnum.Bank;\n    case 'CARD':\n      return PaymentAccountTypeEnum.Card;\n    case 'SUB_WALLET':\n      return PaymentAccountTypeEnum.SubWallet;\n    default:\n      return undefined;\n  }\n};\n\nexport const convert = (str?: Date) => {\n  if (!str) return undefined;\n  const date = new Date(str);\n  const mnth = `0${date.getMonth() + 1}`.slice(-2);\n  const day = `0${date.getDate()}`.slice(-2);\n  return [date.getFullYear(), mnth, day].join('-');\n};\n\nexport const DateFormater = (str?: Date) => {\n  if (!str) return '';\n  const now = format(new Date(Number(str)), 'MMM dd, yyyy');\n  return now;\n};\n\nexport const DateFormaterToDDMMYYYY = (str?: string | undefined | null) => {\n  if (!str) return '';\n  const now = format(new Date(Number(str)), 'MM/dd/yyyy');\n  return now;\n};\n\nexport const formatTimeAMPM = (str: string | undefined | null) => {\n  if (!str) return '';\n  const date = new Date(Number(str));\n  let hours = date.getHours();\n  const minutes = date.getMinutes();\n  const ampm = hours >= 12 ? 'PM' : 'AM';\n  hours %= 12;\n  hours = hours || 12; // the hour '0' should be '12'\n  const newminutes = `0${minutes}`.slice(-2);\n  const strTime = `${hours}:${newminutes} ${ampm}`;\n  return strTime;\n};\n"],"names":["useTransactions","filter","limit","page","disabled","data","loading","refetch","usePaymentsQuery","fetchPolicy","variables","skip","transactionData","payments","totalCount","count","refresh","MonthList","t","findMonthList","newList","monthName","d","Date","setDate","i","push","getMonth","getFullYear","setMonth","reverse","findCurrentMonth","year","toString","Number","slice","convert","str","date","mnth","day","getDate","join","DateFormaterStringInput","format","accountsDropdownMapper","values","label","key","type","value","accounts","getAccountList","map","account","accountType","walletName","customerName","masterWalletId","chamberId","PaymentAccountTypeEnum","SubWallet","id","res","selectedAccountFinder","setSelectedDropdownValue","selectedValue","undefined","DateFormater","DateFormaterToDDMMYYYY","formatTimeAMPM","hours","getHours","minutes","getMinutes","ampm","newminutes","strTime"],"mappings":"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"}