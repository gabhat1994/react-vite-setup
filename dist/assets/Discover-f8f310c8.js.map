{"version":3,"file":"Discover-f8f310c8.js","sources":["../../src/features/discovery/components/NOUMSlider/MobileSlider.tsx","../../src/features/discovery/components/NOUMSlider/CarouselSlide.tsx","../../src/features/discovery/components/NOUMSlider/SliderBody.tsx","../../src/features/discovery/components/NOUMSlider/SliderHeaderControls.tsx","../../src/features/discovery/components/NOUMSlider/SliderHeader.tsx","../../src/features/discovery/components/NOUMSlider/utils.ts","../../src/features/discovery/components/NOUMSlider/NOUMSlider.tsx","../../src/screens/Discovery/Discovery.tsx"],"sourcesContent":["import { useState, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport type SwiperCore from 'swiper';\nimport ChamberBox from '@/components/ChamberBox/ChamberBox';\nimport { useWindowDimensions } from '@/hooks';\nimport { getFullName } from '@/utils/fullName';\nimport { useMarkBroadcastedNoumAsViewedMutation } from '@/apollo/graphql';\nimport { HandleFollowSearch } from '@/screens/Chamber/components/RightPanel/elements/NoumActions/types';\nimport { SpaceStatusEnum } from '@/apollo/generated/types';\nimport {\n  ChamberBoxNameEnum,\n  DiscoveryCategoryEnum,\n} from '@/components/ChamberBox/types';\nimport OwnerDefaultImage from '@/assets/images/profile_default.png';\nimport { ChamberItem, SwiperContainer } from './styles';\nimport { type MobileSliderProps } from './types';\nimport 'swiper/swiper-bundle.min.css';\nimport 'swiper/swiper.min.css';\nimport 'swiper/components/pagination/pagination.min.css';\n\nexport const MobileSlider = ({ items, category }: MobileSliderProps) => {\n  const [isEnd, setEnd] = useState(false);\n  const [isSwiping, setSwiping] = useState(false);\n  const [swiper, setSwiper] = useState<SwiperCore>();\n  const { t } = useTranslation();\n  const { width } = useWindowDimensions();\n  const slidesPerView = width / 252;\n  const { featured, source } = HandleFollowSearch;\n  const [markBroadcastedNoumAsViewed] =\n    useMarkBroadcastedNoumAsViewedMutation();\n\n  swiper?.on('progress', (currentSwiper) => {\n    setSwiping(currentSwiper?.progress > 0);\n  });\n\n  const handleMarkBroadcastedNoumAsViewed = useCallback(\n    async (id: string) => {\n      await markBroadcastedNoumAsViewed({\n        variables: { spaceId: id },\n        onCompleted: () => {},\n      });\n    },\n    [markBroadcastedNoumAsViewed],\n  );\n\n  const onClickChamber = useCallback(\n    (id: string | null | undefined) => {\n      const isFromFeaturedPage = category === DiscoveryCategoryEnum.Featured;\n      if (isFromFeaturedPage) {\n        handleMarkBroadcastedNoumAsViewed(id ?? '');\n      }\n    },\n    [category, handleMarkBroadcastedNoumAsViewed],\n  );\n\n  const getChamberUrl = (id: string | null | undefined) =>\n    id\n      ? category === DiscoveryCategoryEnum.Featured\n        ? `/noum/${id}?${source}=${featured}`\n        : `/noum/${id}`\n      : undefined;\n\n  return (\n    <SwiperContainer isSwiping={isSwiping} isEnd={isEnd}>\n      <Swiper\n        slidesPerView={slidesPerView}\n        spaceBetween={16}\n        freeMode={true}\n        className=\"discoverySwiper\"\n        onInit={(swiperInstance) => setSwiper(swiperInstance)}\n        onReachEnd={() => {\n          setSwiping(false);\n          setEnd(true);\n        }}\n        width={width - 32}\n      >\n        {items?.map((noum) => (\n          <SwiperSlide key={noum?._id}>\n            <ChamberItem\n              key={noum?._id}\n              onClick={() => onClickChamber(noum?._id)}\n              data-testid={`noum-${noum?._id}`}\n            >\n              <ChamberBox\n                id={noum?._id}\n                chamberUrl={getChamberUrl(noum?._id)}\n                url={noum?.profileImage ?? undefined}\n                ownerImageURL={\n                  noum?.uid?.profile?.profilePicture || OwnerDefaultImage\n                }\n                title={noum?.uid?.title || ''}\n                chamberTitle={noum?.name || ''}\n                name={\n                  (noum?.category?.name?.toLowerCase() as ChamberBoxNameEnum) ||\n                  ChamberBoxNameEnum.member\n                }\n                ownedby={\n                  noum?._id === noum?.uid?._id\n                    ? t('noumena.you')\n                    : getFullName(\n                        noum?.uid?.firstName,\n                        noum?.uid?.middleName,\n                        noum?.uid?.lastName,\n                      ) ?? undefined\n                }\n                archived={noum?.status === SpaceStatusEnum.Archived}\n                followers={noum?.followersCount || 0}\n                location={noum?.uid?.location ?? undefined}\n                category={category}\n                startDate={noum?.broadcastedAt}\n                isFavouriteNoum={noum?.isFavourited || false}\n              />\n            </ChamberItem>\n          </SwiperSlide>\n        ))}\n      </Swiper>\n    </SwiperContainer>\n  );\n};\n","import { useCallback, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { getFullName } from '@/utils/fullName';\nimport { SpaceStatusEnum } from '@/apollo/generated/types';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useMarkBroadcastedNoumAsViewedMutation } from '@/apollo/graphql';\nimport ChamberBox from '@/components/ChamberBox/ChamberBox';\nimport OwnerDefaultImage from '@/assets/images/profile_default.png';\nimport { HandleFollowSearch } from '@/screens/Chamber/components/RightPanel/elements/NoumActions/types';\nimport { useSkeletonIsLoadingContext } from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { chambersForSkeletonLoader } from '@/utils/skeletonLoaderHelpers';\nimport {\n  ChamberBoxNameEnum,\n  DiscoveryCategoryEnum,\n} from '@/components/ChamberBox/types';\nimport { type CarouselSlideProps } from './types';\nimport * as S from './styles';\n\nconst { featured, source } = HandleFollowSearch;\n\nexport const CarouselSlide = ({\n  items,\n  countPerPage,\n  category,\n}: CarouselSlideProps) => {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const [markBroadcastedNoumAsViewed] =\n    useMarkBroadcastedNoumAsViewedMutation();\n  const { isLoading } = useSkeletonIsLoadingContext();\n  const userId = useMemo(() => user?._id ?? '', [user]);\n\n  const handleMarkBroadcastedNoumAsViewed = useCallback(\n    async (id: string) => {\n      await markBroadcastedNoumAsViewed({\n        variables: { spaceId: id },\n        onCompleted: () => {},\n      });\n    },\n    [markBroadcastedNoumAsViewed],\n  );\n\n  const onClickChamber = useCallback(\n    (id: string | null | undefined) => {\n      const isFromFeaturedPage = category === DiscoveryCategoryEnum.Featured;\n      if (isFromFeaturedPage) {\n        handleMarkBroadcastedNoumAsViewed(id ?? '');\n      }\n    },\n    [category, handleMarkBroadcastedNoumAsViewed],\n  );\n\n  const getChamberUrl = (id: string | null | undefined) =>\n    id\n      ? category === DiscoveryCategoryEnum.Featured\n        ? `/noum/${id}?${source}=${featured}`\n        : `/noum/${id}`\n      : undefined;\n\n  return (\n    <>\n      {(isLoading ? chambersForSkeletonLoader(countPerPage) : items)?.map(\n        (chamber) => (\n          <S.CardContainer\n            key={chamber?._id}\n            data-testid={`carouselItem-${chamber?._id}`}\n            countPerPage={countPerPage}\n            onClick={() => onClickChamber(chamber?._id)}\n            isNotFilledItems={\n              !!countPerPage && (items?.length || 0) % countPerPage !== 0\n            }\n          >\n            <ChamberBox\n              id={chamber?._id}\n              chamberUrl={getChamberUrl(chamber?._id)}\n              url={chamber?.profileImage ?? undefined}\n              ownerImageURL={\n                chamber?.uid?.profile?.profilePicture || OwnerDefaultImage\n              }\n              title={chamber?.uid?.title || ''}\n              name={\n                (chamber?.category?.name?.toLowerCase() as ChamberBoxNameEnum) ||\n                ChamberBoxNameEnum.member\n              }\n              ownedby={\n                userId === chamber?.uid?._id\n                  ? t('noumena.you')\n                  : getFullName(\n                      chamber?.uid?.firstName,\n                      chamber?.uid?.middleName,\n                      chamber?.uid?.lastName,\n                    ) ?? undefined\n              }\n              chamberTitle={chamber?.name || ''}\n              archived={chamber?.status === SpaceStatusEnum.Archived}\n              followers={chamber?.followersCount || 0}\n              location={chamber?.uid?.location ?? undefined}\n              category={category}\n              startDate={chamber?.broadcastedAt}\n              isFavouriteNoum={chamber?.isFavourited || false}\n            />\n          </S.CardContainer>\n        ),\n      )}\n    </>\n  );\n};\n","import { Carousel } from 'react-responsive-carousel';\nimport { useSkeletonIsLoadingContext } from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { type SpaceOutputFragment } from '@/apollo/graphql';\nimport * as S from './styles';\nimport { MobileSlider } from './MobileSlider';\nimport { CarouselSlide } from './CarouselSlide';\nimport { type SliderBodyProps } from './types';\n\nconst SliderBody = ({\n  isMobile,\n  carouselItems,\n  countPerPage,\n  category,\n  updateCurrentSlide,\n  page,\n  pageArray,\n  pageItems,\n}: SliderBodyProps) => {\n  const { isLoading } = useSkeletonIsLoadingContext();\n\n  if (isMobile)\n    return (\n      <S.SliderBody\n        data-testid=\"sliderBody\"\n        flexStart={carouselItems && carouselItems?.length < countPerPage}\n      >\n        <MobileSlider items={carouselItems || []} category={category} />\n      </S.SliderBody>\n    );\n  return (\n    <S.ResponsiveSlider data-testid=\"sliderBody\">\n      <Carousel\n        showArrows={false}\n        selectedItem={page}\n        onChange={updateCurrentSlide}\n        showIndicators={false}\n        showThumbs={false}\n        showStatus={false}\n        swipeable={false}\n      >\n        {(isLoading ? [...Array(countPerPage).keys()] : pageArray)?.map(\n          (item) => (\n            <CarouselSlide\n              key={item}\n              items={\n                pageItems\n                  ? pageItems[item as number]\n                  : [\n                      {} as SpaceOutputFragment,\n                      {} as SpaceOutputFragment,\n                      {} as SpaceOutputFragment,\n                    ]\n              }\n              countPerPage={countPerPage}\n              category={category}\n            />\n          ),\n        )}\n      </Carousel>\n    </S.ResponsiveSlider>\n  );\n};\n\nexport default SliderBody;\n","import { useTranslation } from 'react-i18next';\nimport Skeleton from 'react-loading-skeleton';\nimport { Icon } from '@/components/Icon';\nimport { useSkeletonIsLoadingContext } from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport * as S from './styles';\nimport { type SliderHeaderControlsProps } from './types';\n\nconst SliderHeaderControls = ({\n  showControls = false,\n  disablePrev,\n  goPrevious,\n  disableNext,\n  goNext,\n  hideShowAllButton,\n  handleShowAllClick,\n}: SliderHeaderControlsProps) => {\n  const { isLoading } = useSkeletonIsLoadingContext();\n  const { t } = useTranslation();\n\n  if (!showControls) return null;\n\n  if (isLoading)\n    return (\n      <S.SliderControls data-testid=\"slidercontrols\">\n        <Skeleton width={96} height={24} />\n      </S.SliderControls>\n    );\n\n  return (\n    <S.SliderControls data-testid=\"slidercontrols\">\n      <S.Steps\n        marginRight={8}\n        disabled={disablePrev}\n        onClick={goPrevious}\n        data-testid=\"previous\"\n      >\n        <Icon\n          name=\"chevron_small_left_m\"\n          size={24}\n          color={\n            disablePrev\n              ? '--icon-button-neutral-disabled'\n              : '--icon-button-neutral-default'\n          }\n        />\n      </S.Steps>\n      <S.Steps\n        marginRight={24}\n        disabled={disableNext}\n        onClick={goNext}\n        data-testid=\"next\"\n      >\n        <Icon\n          name=\"chevron_small_right_m\"\n          size={24}\n          color={\n            disableNext\n              ? '--icon-button-neutral-disabled'\n              : '--icon-button-neutral-default'\n          }\n        />\n      </S.Steps>\n      {!hideShowAllButton && (\n        <S.ShowAllButton\n          textOnly\n          intent=\"negative\"\n          size=\"small\"\n          onClick={handleShowAllClick}\n          rightIcon={\n            <Icon\n              name=\"chevron_small_right_m\"\n              size={24}\n              data-testid=\"showallbtn\"\n              color=\"--icon-button-brand-primary-default\"\n            />\n          }\n        >\n          {t('noumena.slider.show_all')}\n        </S.ShowAllButton>\n      )}\n    </S.SliderControls>\n  );\n};\nexport default SliderHeaderControls;\n","import Skeleton from 'react-loading-skeleton';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer } from '@/layout/Stack';\nimport { useSkeletonIsLoadingContext } from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { useDiscoveryTabContext } from '@/screens/Discovery/DiscoveryTabContext';\nimport SliderHeaderControls from './SliderHeaderControls';\nimport * as S from './styles';\nimport { type SliderHeaderProps } from './types';\nimport { RecommendedSectionHeader } from './styles';\nimport { RecommendedNoumsTabs } from './RecommendedTabs';\n\nexport const SliderHeader = ({\n  title,\n  description,\n  showControls,\n  hideShowAllButton,\n  disableNext,\n  disablePrev,\n  showTabs,\n  goNext,\n  goPrevious,\n  handleShowAllClick,\n}: SliderHeaderProps) => {\n  const { isLoading } = useSkeletonIsLoadingContext();\n  const { isTabLoading } = useDiscoveryTabContext();\n\n  const loading = isLoading && !isTabLoading;\n  return (\n    <S.SliderHeader\n      data-testid=\"sliderheader\"\n      direction={showTabs ? 'column' : 'row'}\n    >\n      <S.SliderInfo showTabs={showTabs}>\n        {loading ? (\n          <Skeleton />\n        ) : (\n          <TSpan\n            font=\"heading-xs-bold\"\n            colorToken=\"--text-body-header-neutral-default\"\n          >\n            {title}\n          </TSpan>\n        )}\n        <Spacer height={4} />\n        {loading ? (\n          <Skeleton />\n        ) : (\n          <TSpan font=\"body-l\" colorToken=\"--text-body-neutral-default\">\n            {description}\n          </TSpan>\n        )}\n      </S.SliderInfo>\n      <RecommendedSectionHeader full={showTabs}>\n        {showTabs && (loading ? <Skeleton /> : <RecommendedNoumsTabs />)}\n        <SliderHeaderControls\n          showControls={showControls}\n          hideShowAllButton={hideShowAllButton}\n          disableNext={disableNext}\n          disablePrev={disablePrev}\n          goNext={goNext}\n          goPrevious={goPrevious}\n          handleShowAllClick={handleShowAllClick}\n        />\n      </RecommendedSectionHeader>\n    </S.SliderHeader>\n  );\n};\n","import { type Maybe } from '@/apollo/generated/types';\nimport { type SpaceOutputFragment } from '@/apollo/graphql';\nimport { type PageInfo } from './types';\n\nexport const getCurrentPageItems = (\n  cards: Maybe<SpaceOutputFragment>[],\n  page: number,\n  noOfItems: number,\n): PageInfo => {\n  const items = Array.from(cards);\n  if (items.length === 0 || page === 0 || noOfItems === 0)\n    return { items: [], totalPages: 0 };\n\n  const numsPerGroup = Math.ceil(items.length / noOfItems);\n  const pages = new Array(numsPerGroup)\n    .fill('')\n    .map((_, i) => items.slice(i * noOfItems, (i + 1) * noOfItems));\n  return { items: pages[page - 1] || [], totalPages: pages.length };\n};\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router';\nimport { chunk } from 'lodash';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nimport { useWindowDimensions } from '@/hooks/dimensions';\nimport { breakpoints } from '@/constants/devices';\nimport SkeletonLoaderProvider from '@/components/SkeletonLoader/SkeletonLoaderProvider';\nimport { useDiscoveryTabContext } from '@/screens/Discovery/DiscoveryTabContext';\nimport { DiscoveryCategoryEnum } from '@/components/ChamberBox/types';\nimport SliderBody from './SliderBody';\nimport { SliderHeader } from './SliderHeader';\nimport { type SliderProps } from './types';\nimport {\n  DESKTOP_ITEMS_COUNT,\n  OTHER_VIEWS_COUNT,\n  SLIDER_BREAK_POINT,\n} from './constants';\nimport { getCurrentPageItems } from './utils';\nimport * as S from './styles';\n\nexport const NOUMSlider = ({\n  title,\n  description,\n  cardItems = [],\n  loading,\n  route,\n  category,\n  hideShowAllButton,\n}: SliderProps) => {\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const [page, setPage] = useState(0);\n  const windowSize = useWindowDimensions();\n  const isMobile = windowSize.width < breakpoints.TABLET;\n\n  const countPerPage =\n    windowSize.width > SLIDER_BREAK_POINT\n      ? DESKTOP_ITEMS_COUNT\n      : isMobile\n      ? cardItems.length\n      : OTHER_VIEWS_COUNT;\n\n  const carouselItems = useMemo(() => {\n    const { items } = getCurrentPageItems(\n      [...cardItems],\n      page + 1,\n      countPerPage,\n    );\n    return items;\n  }, [cardItems, countPerPage, page]);\n\n  const pageItems = chunk(cardItems, countPerPage);\n\n  const pageSize = useMemo(() => {\n    const { totalPages } = getCurrentPageItems(\n      [...cardItems],\n      page + 1,\n      countPerPage,\n    );\n    return totalPages;\n  }, [cardItems, countPerPage, page]);\n\n  const pageArray = Array.from({ length: pageSize }, (_, i) => i);\n\n  const isShowAllButtonOnMobile =\n    windowSize.width < breakpoints.TABLET && (carouselItems?.length || 0) > 1;\n\n  const { recommendedTab } = useDiscoveryTabContext();\n\n  const showControls = windowSize.width >= breakpoints.TABLET && pageSize > 1;\n\n  const handleShowAllClick = useCallback(() => {\n    navigate(route, {\n      replace: true,\n      state: { title, description },\n    });\n  }, [title, description, navigate, route]);\n\n  const goNext = useCallback(() => {\n    if (page < pageSize) setPage(page + 1);\n  }, [page, pageSize]);\n\n  const goPrevious = useCallback(() => {\n    if (page > 0) setPage(page - 1);\n  }, [page]);\n\n  const updateCurrentSlide = useCallback(\n    (slide: number) => {\n      if (page !== slide) {\n        setPage(slide);\n      }\n    },\n    [page],\n  );\n\n  useEffect(() => {\n    setPage(0);\n  }, [recommendedTab]);\n\n  return (\n    <SkeletonLoaderProvider isLoading={!carouselItems.length && loading}>\n      <S.SliderWrapper data-testid=\"slider\">\n        <SliderHeader\n          title={title}\n          description={description}\n          showControls={showControls}\n          disableNext={page === pageSize - 1}\n          disablePrev={page === 0}\n          goNext={goNext}\n          goPrevious={goPrevious}\n          handleShowAllClick={handleShowAllClick}\n          hideShowAllButton={hideShowAllButton}\n          showTabs={category === DiscoveryCategoryEnum.Recommended}\n        />\n        <SliderBody\n          isMobile={isMobile}\n          pageItems={pageItems}\n          page={page}\n          pageArray={pageArray}\n          category={category}\n          carouselItems={carouselItems}\n          countPerPage={countPerPage}\n          updateCurrentSlide={updateCurrentSlide}\n        />\n        {isShowAllButtonOnMobile && (\n          <S.MobileShowAllButton\n            data-testid=\"mobile_show_all\"\n            size=\"large\"\n            onClick={handleShowAllClick}\n          >\n            {t('noumena.slider.show_all')}\n          </S.MobileShowAllButton>\n        )}\n      </S.SliderWrapper>\n    </SkeletonLoaderProvider>\n  );\n};\n\nexport default NOUMSlider;\n","import { useTranslation } from 'react-i18next';\nimport { useEffect } from 'react';\nimport ListLayout from '@/layout/ListLayout';\nimport ROUTES from '@/constants/routes';\nimport {\n  useDiscoveryMyCircleNoums,\n  useDiscoveryPopularNoums,\n  useDiscoveryRecommendedNoums,\n  useDiscoveryFeaturedNoums,\n} from '@/features/discovery/hooks';\nimport { DiscoveryCategoryEnum } from '@/components/ChamberBox/types';\nimport { useLaunchDarkly } from '@/hooks';\nimport { NOUMSlider } from '@/features/discovery/components';\nimport {\n  DiscoveryTabProvider,\n  useDiscoveryTabContext,\n} from './DiscoveryTabContext';\nimport { Container } from './styles';\n\nconst Discovery = () => {\n  const { t } = useTranslation();\n  const { recommendedTab, setIsTabLoading } = useDiscoveryTabContext();\n  const {\n    noums: recommendedNoums,\n    loading: recommendedNoumsLoading,\n    tabLoading,\n  } = useDiscoveryRecommendedNoums({ tabId: recommendedTab });\n  const { noums: featuredNoums, loading: featuredNoumsLoading } =\n    useDiscoveryFeaturedNoums();\n  const { noums: myCircleNoums, loading: myCircleNoumsLoading } =\n    useDiscoveryMyCircleNoums();\n  const { noums: popularNoums, loading: popularNoumsLoading } =\n    useDiscoveryPopularNoums();\n\n  useEffect(() => {\n    setIsTabLoading(tabLoading);\n  }, [setIsTabLoading, tabLoading]);\n\n  const isFeaturedNoumsVisible =\n    featuredNoumsLoading || Boolean(featuredNoums.length);\n  const isMyCircleNoumsVisible =\n    myCircleNoumsLoading || Boolean(myCircleNoums.length);\n  const isPopularNoumsVisible =\n    popularNoumsLoading || Boolean(popularNoums.length);\n  const { flags } = useLaunchDarkly();\n  const { discoveryNewNoums } = flags;\n\n  return (\n    <ListLayout type=\"Discovery\">\n      {discoveryNewNoums && (\n        <Container>\n          <NOUMSlider\n            title={t('noumena.discovery.recommended.title')}\n            category={DiscoveryCategoryEnum.Recommended}\n            route={ROUTES.DISCOVERY_RECOMMENDED_SHOW_ALL}\n            cardItems={recommendedNoums}\n            loading={recommendedNoumsLoading}\n            description={t('noumena.discovery.recommended.description')}\n          />\n        </Container>\n      )}\n      {isFeaturedNoumsVisible && (\n        <Container>\n          <NOUMSlider\n            title={t('noumena.discovery.featured.title')}\n            category={DiscoveryCategoryEnum.Featured}\n            route={ROUTES.DISCOVERY_FEATURED_SHOW_ALL}\n            cardItems={featuredNoums}\n            loading={featuredNoumsLoading}\n            description={t('noumena.discovery.featured.description')}\n          />\n        </Container>\n      )}\n      {isMyCircleNoumsVisible && (\n        <Container>\n          <NOUMSlider\n            title={t('noumena.discovery.mycircle.title')}\n            category={DiscoveryCategoryEnum.MyCircle}\n            route={ROUTES.DISCOVERY_MYCIRCLE_SHOW_ALL}\n            cardItems={myCircleNoums}\n            loading={myCircleNoumsLoading}\n            description={t('noumena.discovery.mycircle.description')}\n          />\n        </Container>\n      )}\n      {isPopularNoumsVisible && (\n        <Container>\n          <NOUMSlider\n            title={t('noumena.discovery.popular.title')}\n            category={DiscoveryCategoryEnum.Popular}\n            route={ROUTES.DISCOVERY_POPULAR_SHOW_ALL}\n            cardItems={popularNoums}\n            loading={popularNoumsLoading}\n            description={t('noumena.discovery.popular.description')}\n          />\n        </Container>\n      )}\n    </ListLayout>\n  );\n};\n\nexport default () => (\n  <DiscoveryTabProvider>\n    <Discovery />\n  </DiscoveryTabProvider>\n);\n"],"names":["MobileSlider","items","category","isEnd","setEnd","useState","isSwiping","setSwiping","swiper","setSwiper","t","useTranslation","width","useWindowDimensions","slidesPerView","featured","source","HandleFollowSearch","markBroadcastedNoumAsViewed","useMarkBroadcastedNoumAsViewedMutation","on","currentSwiper","progress","handleMarkBroadcastedNoumAsViewed","useCallback","id","variables","spaceId","onCompleted","onClickChamber","DiscoveryCategoryEnum","Featured","getChamberUrl","undefined","jsx","SwiperContainer","Swiper","swiperInstance","map","noum","SwiperSlide","ChamberItem","_id","ChamberBox","profileImage","uid","profile","profilePicture","OwnerDefaultImage","title","name","toLowerCase","ChamberBoxNameEnum","member","getFullName","firstName","middleName","lastName","status","SpaceStatusEnum","Archived","followersCount","location","broadcastedAt","isFavourited","CarouselSlide","countPerPage","user","useAuth","isLoading","useSkeletonIsLoadingContext","userId","useMemo","Fragment","chambersForSkeletonLoader","chamber","S.CardContainer","length","SliderBody","isMobile","carouselItems","updateCurrentSlide","page","pageArray","pageItems","S.SliderBody","S.ResponsiveSlider","Carousel","Array","keys","item","`SliderBody-CarouselSlide-${item}`","SliderHeaderControls","showControls","disablePrev","goPrevious","disableNext","goNext","hideShowAllButton","handleShowAllClick","S.SliderControls","Skeleton","jsxs","S.Steps","Icon","S.ShowAllButton","SliderHeader","description","showTabs","isTabLoading","useDiscoveryTabContext","loading","S.SliderHeader","S.SliderInfo","TSpan","Spacer","RecommendedSectionHeader","RecommendedNoumsTabs","getCurrentPageItems","cards","noOfItems","from","totalPages","numsPerGroup","Math","ceil","pages","fill","_","i","slice","NOUMSlider","cardItems","route","navigate","useNavigate","setPage","windowSize","breakpoints","TABLET","SLIDER_BREAK_POINT","DESKTOP_ITEMS_COUNT","OTHER_VIEWS_COUNT","chunk","pageSize","isShowAllButtonOnMobile","recommendedTab","replace","state","slide","useEffect","SkeletonLoaderProvider","S.SliderWrapper","Recommended","S.MobileShowAllButton","Discovery","setIsTabLoading","noums","recommendedNoums","recommendedNoumsLoading","tabLoading","useDiscoveryRecommendedNoums","tabId","featuredNoums","featuredNoumsLoading","useDiscoveryFeaturedNoums","myCircleNoums","myCircleNoumsLoading","useDiscoveryMyCircleNoums","popularNoums","popularNoumsLoading","useDiscoveryPopularNoums","isFeaturedNoumsVisible","Boolean","isMyCircleNoumsVisible","isPopularNoumsVisible","flags","useLaunchDarkly","discoveryNewNoums","ListLayout","Container","ROUTES","DISCOVERY_RECOMMENDED_SHOW_ALL","DISCOVERY_FEATURED_SHOW_ALL","MyCircle","DISCOVERY_MYCIRCLE_SHOW_ALL","Popular","DISCOVERY_POPULAR_SHOW_ALL","Discovery$1","DiscoveryTabProvider"],"mappings":"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"}