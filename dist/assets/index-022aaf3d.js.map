{"version":3,"file":"index-022aaf3d.js","sources":["../../src/components/ContextMenu/ContextMenu.tsx","../../src/components/ContextMenu/ButtonMenu.tsx","../../src/components/DataGrid/ActionsMenu.tsx","../../src/components/DataGrid/Filters/FilterInput.tsx","../../src/hooks/useSubmitOnFormChange.ts","../../src/components/DataGrid/Filters/Filters.tsx","../../src/components/DataGrid/Footer/Footer.tsx","../../src/components/DataGrid/Pagination.tsx","../../src/components/DataGrid/RowSelection/BulkActionButton.tsx","../../src/components/DataGrid/RowSelection/SelectedRowsCounter.tsx","../../src/components/DataGrid/RowSelection/BulkAction.tsx","../../src/components/DataGrid/RowSelection/Checkbox.tsx","../../src/components/DataGrid/Table/TableLoadingSkeleton.tsx","../../src/components/DataGrid/Table/TableNoResults.tsx","../../src/components/DataGrid/Table/Table.tsx","../../src/components/SkeletonLoader/SizedSkeleton.tsx","../../src/components/DataGrid/CollapsibleList/CollapsibleListSkeleton.tsx","../../src/components/DataGrid/CollapsibleList/CollapsibleList.tsx","../../src/components/DataGrid/index.ts"],"sourcesContent":["import { useCallback, useRef, useState } from 'react';\nimport { Button } from '@/components/Button';\nimport {\n  Dropdown,\n  type DropdownProps,\n  type DropdownTargetProps,\n  type DropdownValueType,\n} from '@/components/Dropdown';\nimport { Spinner } from '@/components/Spinner';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer, Stack } from '@/layout';\nimport { useClickOutside } from '@/hooks';\nimport S from './styles';\n\ninterface ContextMenuTargetProps<TargetRef extends HTMLElement = HTMLElement>\n  extends DropdownTargetProps<TargetRef> {\n  open: () => void;\n  close: () => void;\n}\n\nexport type ContextMenuProps<\n  ValueType = string,\n  TargetRef extends HTMLElement = HTMLElement,\n> = Pick<DropdownProps<ValueType, TargetRef>, 'containerWidth' | 'isMobile'> & {\n  children: (props: ContextMenuTargetProps<TargetRef>) => JSX.Element;\n  menuOptions: DropdownValueType<ValueType>[];\n  loading?: boolean;\n  onClick?: (value: ValueType) => void;\n};\n\nexport const ContextMenu = <\n  ValueType extends string,\n  TargetRef extends HTMLElement = HTMLElement,\n>({\n  children,\n  menuOptions,\n  loading,\n  isMobile,\n  onClick,\n  ...dropdownProps\n}: ContextMenuProps<ValueType, TargetRef>) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const toggle = useCallback(() => {\n    setIsOpen((prev) => !prev);\n  }, []);\n\n  useClickOutside(ref, true, () => setIsOpen(false));\n\n  const handleClick = (value: DropdownValueType<ValueType>) => {\n    if (onClick) {\n      value.onClick?.();\n      onClick(value.value);\n    }\n    toggle();\n  };\n\n  const optionsRenderer = () => {\n    if (loading) {\n      return (\n        <S.SpinnerWrapper>\n          <Spinner />\n        </S.SpinnerWrapper>\n      );\n    }\n\n    return (\n      <Stack\n        ref={ref}\n        padding={isMobile ? 16 : 0}\n        gap={isMobile ? 16 : 0}\n        vertical\n        overflow=\"hidden\"\n        fullWidth\n        align=\"stretch\"\n      >\n        {isMobile ? (\n          <>\n            {menuOptions.map((value) => (\n              <Button\n                key={value.value}\n                size=\"full\"\n                intent={value.intent === 'danger' ? 'negative' : undefined}\n                icon={value.icon ?? undefined}\n                disabled={value.disabled}\n                onClick={() => handleClick(value)}\n              >\n                {value.label}\n              </Button>\n            ))}\n            <Spacer height={14} />\n          </>\n        ) : (\n          menuOptions.map((value) => (\n            <S.OptionContainer\n              key={value.value}\n              onClick={(e) => {\n                e.stopPropagation();\n                handleClick(value);\n              }}\n            >\n              {value.icon}\n              <TSpan\n                font=\"body-m-bold\"\n                colorToken={\n                  value.intent === 'danger'\n                    ? '--text-tablecell-header-danger-primary-highlighted'\n                    : undefined\n                }\n              >\n                {value.label}\n              </TSpan>\n            </S.OptionContainer>\n          ))\n        )}\n      </Stack>\n    );\n  };\n\n  return (\n    <Dropdown<ValueType, TargetRef>\n      {...dropdownProps}\n      isOpen={isOpen}\n      placement=\"auto\"\n      isAnimation={false}\n      calRefTop={false}\n      padding=\"0px\"\n      onSelectOption={() => {}}\n      options={menuOptions}\n      optionsRenderer={optionsRenderer}\n      isMobile={isMobile}\n      renderContainerFromBottom\n    >\n      {(dropdownRenderProps) =>\n        children({\n          ...dropdownRenderProps,\n          toggle,\n          open: () => setIsOpen(true),\n          close: () => setIsOpen(false),\n        })\n      }\n    </Dropdown>\n  );\n};\n","import { Button } from '@/components/Button';\nimport { type ButtonProps } from '../Button/types';\nimport { ContextMenu, type ContextMenuProps } from './ContextMenu';\n\nexport type ButtonMenuProps<ValueType = string> = Omit<\n  ContextMenuProps<ValueType, HTMLButtonElement>,\n  'children'\n> &\n  Pick<\n    ButtonProps,\n    | 'textOnly'\n    | 'neutral'\n    | 'primary'\n    | 'secondary'\n    | 'tertiary'\n    | 'size'\n    | 'icon'\n    | 'disabled'\n  > & {\n    loading?: boolean;\n  };\n\nexport const ButtonMenu = <ValueType extends string>({\n  textOnly,\n  size = 'small',\n  primary,\n  secondary,\n  tertiary,\n  neutral,\n  disabled,\n  icon,\n  ...contextMenuProps\n}: ButtonMenuProps<ValueType>) => (\n  <ContextMenu<ValueType, HTMLButtonElement> {...contextMenuProps}>\n    {({ targetRef, toggle }) => (\n      <Button\n        ref={targetRef}\n        size={size}\n        primary={primary}\n        secondary={secondary}\n        tertiary={tertiary}\n        neutral={neutral}\n        textOnly={textOnly}\n        icon={icon}\n        disabled={disabled}\n        onClick={(event) => {\n          event.stopPropagation();\n          toggle();\n        }}\n      />\n    )}\n  </ContextMenu>\n);\n","import { ButtonMenu, type ButtonMenuProps } from '../ContextMenu';\nimport { type DropdownValueType } from '../Dropdown';\nimport { Icon } from '../Icon';\nimport { type IconProps } from '../Icon/Icon';\n\nexport type ActionsMenuItem<ValueType> = Pick<\n  DropdownValueType<ValueType>,\n  'key' | 'label' | 'intent' | 'value'\n> & { iconName?: IconProps['name'] };\n\ntype ActionsMenuProps<ValueType> = Pick<\n  ButtonMenuProps<ValueType>,\n  'onClick' | 'size'\n> & { menuOptions: ActionsMenuItem<ValueType>[] };\n\nexport function ActionsMenu<ValueType extends string = string>({\n  onClick,\n  size,\n  menuOptions,\n}: ActionsMenuProps<ValueType>) {\n  return (\n    <ButtonMenu<ValueType>\n      size={size}\n      onClick={onClick}\n      neutral\n      menuOptions={menuOptions.map(\n        ({ key, label, value, iconName, intent }) => ({\n          type: 'value',\n          key,\n          label,\n          value,\n          icon: (\n            <Icon\n              name={iconName}\n              size={24}\n              color={\n                intent === 'danger'\n                  ? '--icon-tablecell-danger-primary-default'\n                  : '--icon-tablecell-neutral-highlighted'\n              }\n            />\n          ),\n          intent,\n        }),\n      )}\n      icon={<Icon name=\"more_m\" size={24} />}\n    />\n  );\n}\n","import {\n  Controller,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n  useFormContext,\n} from 'react-hook-form';\n\ntype FilterInputProps<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n> = Omit<ControllerProps<TFieldValues, TName>, 'control'>;\n\nexport function FilterInput<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: FilterInputProps<TFieldValues, TName>) {\n  const { control } = useFormContext<TFieldValues>();\n\n  return <Controller {...props} control={control} />;\n}\n","import { isEqual } from 'lodash';\nimport { useEffect } from 'react';\nimport { type UseFormReturn } from 'react-hook-form';\nimport { usePrevious } from './previous';\n\ninterface UseSubmitOnFormChangeProps<\n  FieldValues extends Record<string, unknown>,\n> {\n  disabled?: boolean;\n  form: UseFormReturn<FieldValues>;\n  onSubmit: (values: FieldValues) => void;\n}\n\nexport function useSubmitOnFormChange<\n  FieldValues extends Record<string, unknown>,\n>({\n  form,\n  onSubmit,\n  disabled = false,\n}: UseSubmitOnFormChangeProps<FieldValues>) {\n  const allValues = form.watch();\n  const prevAllValues = usePrevious(allValues);\n  const haveValuesChanged =\n    prevAllValues !== undefined && !isEqual(allValues, prevAllValues);\n\n  useEffect(() => {\n    if (!disabled && haveValuesChanged) {\n      onSubmit(allValues);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [haveValuesChanged, onSubmit, disabled]);\n}\n","import React, { useCallback } from 'react';\nimport { type DeepPartial, FormProvider, useForm } from 'react-hook-form';\nimport { useSubmitOnFormChange } from '@/hooks/useSubmitOnFormChange';\nimport { useDataGrid } from '../DataGridContext';\n\ninterface FiltersProps<FiltersMap extends Record<string, unknown>> {\n  children: React.ReactNode;\n  defaultValues?: DeepPartial<FiltersMap>;\n  onSubmit: (values: FiltersMap) => void;\n  submitOnChange?: boolean;\n  clearRowSelectionOnSubmit?: boolean;\n}\n\nexport function Filters<FiltersMap extends Record<string, unknown>>({\n  children,\n  defaultValues,\n  onSubmit,\n  submitOnChange = true,\n  clearRowSelectionOnSubmit = true,\n}: FiltersProps<FiltersMap>) {\n  const { rowSelection } = useDataGrid();\n  const filtersForm = useForm<FiltersMap>({\n    defaultValues,\n  });\n\n  const handleFormSubmit = useCallback(\n    (data: FiltersMap) => {\n      if (clearRowSelectionOnSubmit) {\n        rowSelection.clear();\n      }\n      onSubmit(data);\n    },\n    [clearRowSelectionOnSubmit, onSubmit, rowSelection],\n  );\n\n  useSubmitOnFormChange({\n    disabled: !submitOnChange,\n    form: filtersForm,\n    onSubmit: handleFormSubmit,\n  });\n\n  return <FormProvider {...filtersForm}>{children}</FormProvider>;\n}\n","import React from 'react';\nimport { Stack } from '@/layout';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport S from './styles';\n\ninterface FooterProps {\n  leftElement: React.ReactNode;\n  rightElement?: React.ReactNode;\n}\n\nexport function Footer({ leftElement, rightElement }: FooterProps) {\n  const { isMobile } = useBreakpoints();\n  return (\n    <Stack\n      gap={24}\n      vertical={isMobile}\n      reverse={isMobile}\n      justify=\"space-between\"\n      align=\"center\"\n    >\n      <S.LeftSlot>{leftElement}</S.LeftSlot>\n      <S.RightSlot>{rightElement}</S.RightSlot>\n    </Stack>\n  );\n}\n","import { useCallback } from 'react';\nimport { Pagination as StandalonePagination } from '../Pagination';\n\nexport interface PaginationState {\n  page: number;\n  itemsPerPage: number;\n  offset: number;\n  totalCount: number;\n}\n\nfunction calculateOffset(page: number, itemsPerPage: number) {\n  return (page - 1) * itemsPerPage;\n}\n\nexport type PaginationProps = {\n  totalCount: number;\n  itemsPerPage?: number;\n  onChange: (state: PaginationState) => void;\n  currentPage?: number;\n  currentOffset?: number;\n};\n\nexport function Pagination({\n  totalCount,\n  itemsPerPage = 5,\n  currentPage,\n  currentOffset,\n  onChange,\n}: PaginationProps) {\n  const handleChange = useCallback(\n    (newPage: number) => {\n      onChange({\n        page: newPage,\n        itemsPerPage,\n        totalCount,\n        offset: calculateOffset(newPage, itemsPerPage),\n      });\n    },\n    [itemsPerPage, onChange, totalCount],\n  );\n  const page =\n    currentPage ?? (currentOffset ? currentOffset / itemsPerPage + 1 : 1);\n\n  return (\n    <StandalonePagination\n      renderOnOnePageCount={true}\n      totalCount={totalCount}\n      currentPage={page}\n      pageSize={itemsPerPage}\n      onPageChange={handleChange}\n    />\n  );\n}\n","import { type ComponentProps } from 'react';\nimport { Button } from '@/components/Button';\nimport { useDataGrid } from '../DataGridContext';\n\nexport type BulkActionButtonProps = Omit<\n  ComponentProps<typeof Button>,\n  'onClick'\n> & {\n  onClick: (selectedItems: string[]) => void;\n};\n\nexport function BulkActionButton(props: BulkActionButtonProps) {\n  const { rowSelection } = useDataGrid();\n\n  return (\n    <Button\n      {...props}\n      disabled={props.disabled || rowSelection.selectedItems.length === 0}\n      onClick={() => {\n        rowSelection.clear();\n        props.onClick(rowSelection.selectedItems);\n      }}\n    />\n  );\n}\n","import { useTranslation } from 'react-i18next';\nimport { TSpan } from '@/components/Typography';\nimport { useDataGrid } from '../DataGridContext';\n\nexport interface SelectedRowsCounterProps {\n  render?: (selectedItemsCount: number) => JSX.Element | null;\n}\n\nexport function SelectedRowsCounter({ render }: SelectedRowsCounterProps) {\n  const { t } = useTranslation();\n  const { rowSelection } = useDataGrid();\n  const selectedItemsCount = rowSelection.selectedItems.length;\n\n  return (\n    <TSpan font=\"body-m\" colorToken=\"--text-card-neutral-default\">\n      {typeof render === 'function'\n        ? render(selectedItemsCount)\n        : t('noumena.data_grid.rows_selected', { count: selectedItemsCount })}\n    </TSpan>\n  );\n}\n","import { Stack } from '@/layout';\nimport { BulkActionButton, type BulkActionButtonProps } from './BulkActionButton';\nimport {\n  SelectedRowsCounter,\n  type SelectedRowsCounterProps,\n} from './SelectedRowsCounter';\n\ntype BulkActionProps = BulkActionButtonProps & {\n  label: string;\n  renderCounterLabel?: SelectedRowsCounterProps['render'];\n};\n\nexport function BulkAction({\n  label,\n  renderCounterLabel,\n  ...buttonProps\n}: BulkActionProps) {\n  return (\n    <Stack gap={16} align=\"center\">\n      <SelectedRowsCounter render={renderCounterLabel} />\n      <BulkActionButton secondary size=\"small\" {...buttonProps}>\n        {label}\n      </BulkActionButton>\n    </Stack>\n  );\n}\n","import { type ComponentProps } from 'react';\nimport { TickCheckbox } from '@/components/Checkbox';\n\ntype RowSelectionCheckboxProps = Pick<\n  ComponentProps<typeof TickCheckbox>,\n  'isChecked' | 'onChange'\n>;\n\nexport function RowSelectionCheckbox({\n  isChecked,\n  onChange,\n}: RowSelectionCheckboxProps) {\n  return <TickCheckbox isChecked={isChecked} onChange={onChange} size={16} />;\n}\n","/* eslint-disable react/no-array-index-key */\nimport Skeleton from 'react-loading-skeleton';\nimport S, { ROW_HEIGHT } from './styles';\n\ninterface TableLoadingSkeletonProps {\n  rowsCount: number;\n  columnsCount: number;\n}\n\nexport function TableLoadingSkeleton({\n  rowsCount,\n  columnsCount,\n}: TableLoadingSkeletonProps) {\n  return (\n    <>\n      {Array.from({ length: rowsCount }).map((row, rowIndex) => (\n        <S.TableRow key={rowIndex}>\n          {Array.from({ length: columnsCount }).map((column, columnIndex) => (\n            <S.TableCell key={columnIndex}>\n              <Skeleton height={`${ROW_HEIGHT / 2} px`} />\n            </S.TableCell>\n          ))}\n        </S.TableRow>\n      ))}\n    </>\n  );\n}\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport S from './styles';\n\ninterface TableNoResultsProps {\n  columnsCount: number;\n  rowsCount: number;\n  message: React.ReactNode;\n}\n\nexport function TableNoResults({\n  columnsCount,\n  rowsCount,\n  message,\n}: TableNoResultsProps) {\n  const { t } = useTranslation();\n\n  return (\n    <S.TableRow>\n      <S.TableCell colSpan={columnsCount}>\n        <S.NoResults $rowsCount={rowsCount}>\n          {message ?? t('noumena.data_grid.table.no_results')}\n        </S.NoResults>\n      </S.TableCell>\n    </S.TableRow>\n  );\n}\n","import React, { type ReactNode } from 'react';\nimport { Icon } from '@/components/Icon';\nimport { Stack } from '@/layout';\nimport { useDataGrid } from '../DataGridContext';\nimport { RowSelectionCheckbox } from '../RowSelection/Checkbox';\nimport { type AnyObject } from '../types';\nimport { DataGridUtils } from '../utils';\nimport S from './styles';\nimport { TableLoadingSkeleton } from './TableLoadingSkeleton';\nimport { TableNoResults } from './TableNoResults';\n\nexport interface TableColumn<T, TSort extends string = string> {\n  id: string;\n  title: React.ReactNode;\n  sortName?: TSort;\n  renderValue: (item: T) => ReactNode;\n  wordWrap?: boolean;\n  width?: string;\n}\n\ninterface TableProps<DataItem, TSort extends string = string> {\n  data?: DataItem[];\n  columns: TableColumn<DataItem, TSort>[];\n  keyExtractor: (item: DataItem) => string;\n  onRowClick?: (item: DataItem) => void;\n  enableRowSelection?: boolean;\n  wordWrap?: boolean;\n  loading?: boolean;\n  rowsPerPage: number;\n  noResultsMessage?: React.ReactNode;\n  noResultsMessageRowSpan?: number;\n}\n\nexport function Table<\n  DataItem extends AnyObject,\n  TSort extends string = string,\n>({\n  data,\n  columns,\n  keyExtractor,\n  onRowClick,\n  rowsPerPage,\n  enableRowSelection = false,\n  wordWrap = true,\n  loading = false,\n  noResultsMessage,\n  noResultsMessageRowSpan = rowsPerPage,\n}: TableProps<DataItem, TSort>) {\n  const {\n    data: contextData,\n    rowSelection,\n    sorting,\n    setSorting,\n  } = useDataGrid<DataItem>();\n\n  const rows = data ?? contextData;\n\n  const allRowIds = rows.map(keyExtractor);\n  const areAllRowsSelected =\n    rows.length > 0 && rowSelection.areSelected(allRowIds);\n\n  const totalColumnsCount = columns.length + (enableRowSelection ? 1 : 0);\n\n  return (\n    <S.Table>\n      <S.TableHead>\n        <S.TableRow>\n          {enableRowSelection && (\n            <S.TableHeader $width=\"1px\">\n              <RowSelectionCheckbox\n                isChecked={areAllRowsSelected}\n                onChange={(checked) =>\n                  checked\n                    ? rowSelection.selectMultiple(allRowIds)\n                    : rowSelection.removeMultiple(allRowIds)\n                }\n              />\n            </S.TableHeader>\n          )}\n          {columns.map((column) => (\n            <S.TableHeader\n              key={column.id}\n              $wordWrap={column.wordWrap ?? wordWrap}\n              $width={column.width}\n              onClick={() => {\n                if (!column.sortName) {\n                  return;\n                }\n                setSorting({\n                  column: column.sortName,\n                  direction:\n                    sorting?.column === column.sortName\n                      ? DataGridUtils.getOppositeSortingDirection(\n                          sorting?.direction,\n                        )\n                      : 'asc',\n                });\n              }}\n            >\n              <Stack align=\"center\">\n                {column.title}\n                {column.sortName && sorting?.column === column.sortName ? (\n                  <Icon\n                    name={\n                      sorting.direction === 'asc'\n                        ? 'chevron_small_up_m'\n                        : 'chevron_small_down_m'\n                    }\n                    size={16}\n                  />\n                ) : null}\n              </Stack>\n            </S.TableHeader>\n          ))}\n        </S.TableRow>\n      </S.TableHead>\n      <S.TableBody>\n        {loading && rows.length === 0 ? (\n          <TableLoadingSkeleton\n            rowsCount={rowsPerPage}\n            columnsCount={totalColumnsCount}\n          />\n        ) : rows.length === 0 ? (\n          <TableNoResults\n            rowsCount={noResultsMessageRowSpan}\n            columnsCount={totalColumnsCount}\n            message={noResultsMessage}\n          />\n        ) : (\n          rows.map((item) => {\n            const rowKey = keyExtractor(item);\n\n            return (\n              <S.TableRow\n                key={rowKey}\n                $clickable={!!onRowClick}\n                onClick={onRowClick ? () => onRowClick(item) : undefined}\n              >\n                {enableRowSelection && (\n                  <S.TableCell $width=\"1px\" $wordWrap={true}>\n                    <RowSelectionCheckbox\n                      isChecked={rowSelection.isSelected(rowKey)}\n                      onChange={(checked) =>\n                        checked\n                          ? rowSelection.selectOne(rowKey)\n                          : rowSelection.removeOne(rowKey)\n                      }\n                    />\n                  </S.TableCell>\n                )}\n                {columns.map((column) => {\n                  const renderedValue = column.renderValue(item);\n                  return (\n                    <S.TableCell\n                      key={column.id}\n                      $wordWrap={column.wordWrap ?? wordWrap}\n                      $width={column.width}\n                    >\n                      {renderedValue}\n                    </S.TableCell>\n                  );\n                })}\n              </S.TableRow>\n            );\n          })\n        )}\n      </S.TableBody>\n    </S.Table>\n  );\n}\n","import { type CSSProperties } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\ninterface SizedSkeletonProps {\n  w?: number | string;\n  h?: number | string;\n  r?: number;\n  maxWidth?: CSSProperties['maxWidth'];\n}\n\nexport function SizedSkeleton({\n  w = 128,\n  h = 128,\n  r = 8,\n  maxWidth,\n}: SizedSkeletonProps) {\n  return (\n    <div\n      style={{\n        width: w,\n        height: h,\n        borderRadius: r,\n        maxWidth,\n        lineHeight: 'unset',\n      }}\n    >\n      <Skeleton\n        width={w}\n        height={h}\n        style={{\n          borderRadius: r,\n          maxWidth: '100%',\n          lineHeight: 'unset !important',\n        }}\n      />\n    </div>\n  );\n}\n","/* eslint-disable react/no-array-index-key */\nimport { Stack } from '@/layout';\nimport { SizedSkeleton } from '@/components/SkeletonLoader';\nimport S, { ROW_HEIGHT } from './styles';\n\ninterface TableLoadingSkeletonProps {\n  rowsCount: number;\n}\n\nexport function CollapsibleListSkeleton({\n  rowsCount,\n}: TableLoadingSkeletonProps) {\n  return (\n    <Stack vertical fullWidth gap={16}>\n      {Array.from({ length: rowsCount }).map((row, rowIndex) => (\n        <S.ListRow key={rowIndex}>\n          <SizedSkeleton w=\"100%\" h={`${ROW_HEIGHT / 2}px`} />\n        </S.ListRow>\n      ))}\n    </Stack>\n  );\n}\n","import React from 'react';\nimport { Accordion } from '@/components/Accordion';\nimport { Stack } from '@/layout';\nimport { useDataGrid } from '../DataGridContext';\nimport { type AnyObject } from '../types';\nimport { RowSelectionCheckbox } from '../RowSelection/Checkbox';\nimport { CollapsibleListSkeleton } from './CollapsibleListSkeleton';\n\ninterface CollapsibleListProps<T> {\n  data?: T[];\n  loading?: boolean;\n  keyExtractor: (item: T) => string;\n  enableRowSelection?: boolean;\n  rowsPerPage?: number;\n  renderLeft: (item: T) => JSX.Element;\n  renderRight: (item: T) => JSX.Element;\n  renderContent: (item: T) => JSX.Element;\n}\n\nexport function CollapsibleList<DataItem extends AnyObject>({\n  data = [],\n  loading,\n  keyExtractor,\n  renderLeft,\n  renderRight,\n  renderContent,\n  rowsPerPage = 10,\n  enableRowSelection = false,\n}: CollapsibleListProps<DataItem>) {\n  const { rowSelection } = useDataGrid<DataItem>();\n  const [expandedId, setExpandedId] = React.useState<string>();\n\n  return (\n    <Stack vertical fullWidth>\n      {loading ? (\n        <CollapsibleListSkeleton rowsCount={rowsPerPage} />\n      ) : (\n        <>\n          {data.map((item) => (\n            <Accordion\n              key={keyExtractor(item)}\n              expanded={expandedId === keyExtractor(item)}\n              onToggle={() => {\n                if (expandedId === keyExtractor(item)) {\n                  setExpandedId(undefined);\n                } else {\n                  setExpandedId(keyExtractor(item));\n                }\n              }}\n              title=\"\"\n              headerPadding=\"8px 0\"\n              left={\n                <>\n                  {enableRowSelection && (\n                    <RowSelectionCheckbox\n                      isChecked={rowSelection.isSelected(keyExtractor(item))}\n                      onChange={(checked) =>\n                        checked\n                          ? rowSelection.selectOne(keyExtractor(item))\n                          : rowSelection.removeOne(keyExtractor(item))\n                      }\n                    />\n                  )}\n                  {renderLeft(item)}\n                </>\n              }\n              right={renderRight(item)}\n            >\n              {renderContent(item)}\n            </Accordion>\n          ))}\n        </>\n      )}\n    </Stack>\n  );\n}\n","import { ActionsMenu } from './ActionsMenu';\nimport { DataGridProvider } from './DataGridContext';\nimport { FilterInput } from './Filters/FilterInput';\nimport { Filters } from './Filters/Filters';\nimport { Footer } from './Footer/Footer';\nimport { Pagination } from './Pagination';\nimport { BulkAction } from './RowSelection/BulkAction';\nimport { BulkActionButton } from './RowSelection/BulkActionButton';\nimport { SelectedRowsCounter } from './RowSelection/SelectedRowsCounter';\nimport { Table } from './Table/Table';\nimport { CollapsibleList } from './CollapsibleList/CollapsibleList';\n\nexport { useDataGrid } from './DataGridContext';\n\nexport const DataGrid = {\n  Provider: DataGridProvider,\n  Table,\n  Pagination,\n  BulkAction,\n  BulkActionButton,\n  SelectedRowsCounter,\n  Filters,\n  FilterInput,\n  Footer,\n  ActionsMenu,\n  CollapsibleList,\n};\n\nexport { type ActionsMenuItem } from './ActionsMenu';\n"],"names":["ContextMenu","children","menuOptions","loading","isMobile","onClick","dropdownProps","isOpen","setIsOpen","useState","ref","useRef","toggle","useCallback","prev","useClickOutside","handleClick","value","jsx","Dropdown","optionsRenderer","S","Spinner","Stack","map","Button","intent","undefined","icon","disabled","label","Spacer","e","stopPropagation","TSpan","dropdownRenderProps","open","close","ButtonMenu","textOnly","size","primary","secondary","tertiary","neutral","contextMenuProps","targetRef","event","ActionsMenu","key","iconName","type","Icon","FilterInput","props","control","useFormContext","Controller","useSubmitOnFormChange","form","onSubmit","allValues","watch","prevAllValues","usePrevious","haveValuesChanged","isEqual","useEffect","Filters","defaultValues","submitOnChange","clearRowSelectionOnSubmit","rowSelection","useDataGrid","filtersForm","useForm","handleFormSubmit","data","clear","FormProvider","Footer","leftElement","rightElement","useBreakpoints","jsxs","calculateOffset","page","itemsPerPage","Pagination","totalCount","currentPage","currentOffset","onChange","handleChange","newPage","offset","StandalonePagination","BulkActionButton","selectedItems","length","SelectedRowsCounter","render","t","useTranslation","selectedItemsCount","count","BulkAction","renderCounterLabel","buttonProps","RowSelectionCheckbox","isChecked","TickCheckbox","TableLoadingSkeleton","rowsCount","columnsCount","Fragment","Array","from","row","rowIndex","column","columnIndex","Skeleton","ROW_HEIGHT","TableNoResults","message","Table","columns","keyExtractor","onRowClick","rowsPerPage","enableRowSelection","wordWrap","noResultsMessage","noResultsMessageRowSpan","contextData","sorting","setSorting","rows","allRowIds","areAllRowsSelected","areSelected","totalColumnsCount","checked","selectMultiple","removeMultiple","width","sortName","direction","DataGridUtils","getOppositeSortingDirection","title","id","item","rowKey","isSelected","selectOne","removeOne","renderedValue","renderValue","SizedSkeleton","w","h","r","maxWidth","height","borderRadius","lineHeight","CollapsibleListSkeleton","CollapsibleList","renderLeft","renderRight","renderContent","expandedId","setExpandedId","React","Accordion","DataGrid","Provider","DataGridProvider"],"mappings":"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"}