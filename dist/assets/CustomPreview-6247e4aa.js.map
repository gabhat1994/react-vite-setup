{"version":3,"file":"CustomPreview-6247e4aa.js","sources":["../../src/features/noums/hooks/spaceQuery/useUpdateNoumCustomPreviewHelper.ts","../../src/screens/Chamber/components/modals/NoumCustomPreviewDiscardChange/Modal.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewHeader.tsx","../../src/screens/Chamber/CustomPreview/EditCustomPreview.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewPanel/styles.ts","../../src/screens/Chamber/CustomPreview/CustomPreviewPanelDnd/styles.ts","../../src/screens/Chamber/CustomPreview/CustomPreviewPanelDnd/DragableElement.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewPanelDnd/DragableArea.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewPanelDnd/DroppableArea.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewPanelDnd/index.tsx","../../src/screens/Chamber/CustomPreview/CustomPreviewPanel/index.tsx","../../src/screens/Chamber/CustomPreview/EditCustomPreviewV2.tsx","../../src/screens/Chamber/CustomPreview/index.tsx"],"sourcesContent":["import { useCallback } from 'react';\nimport * as Sentry from '@sentry/react';\nimport { t } from 'i18next';\nimport { useUpdateNoumCustomPreviewMutation } from '@/apollo/graphql';\nimport { type NoumCustomPreviewElementInput } from '@/apollo/generated/types';\nimport { useToast } from '@/hooks/toast';\n\nexport function useUpdateNoumCustomPreviewHelper() {\n  const { addToast } = useToast();\n\n  const [updateNoumCustomPreviewMutation, { loading }] =\n    useUpdateNoumCustomPreviewMutation();\n\n  const updateNoumCustomPreviewHelper = useCallback(\n    async (noumId: string, elements: NoumCustomPreviewElementInput[]) => {\n      let isSuccess;\n      try {\n        await updateNoumCustomPreviewMutation({\n          variables: { noumId, elements },\n        });\n        isSuccess = true;\n        addToast(\n          'success',\n          'icon',\n          t(`noumena.noum_edit.custom_preview.toast.save_success`),\n        );\n      } catch (error) {\n        let message = 'Unknown';\n        if (error instanceof Error) {\n          message = error.message;\n        }\n        addToast('error', 'none', message);\n        Sentry.captureException(new Error(message), {\n          tags: {\n            section: 'updateNoumCustomPreviewMutation',\n          },\n        });\n\n        isSuccess = false;\n      }\n\n      return isSuccess;\n    },\n    [addToast, updateNoumCustomPreviewMutation],\n  );\n\n  return {\n    loading,\n    updateNoumCustomPreviewHelper,\n  };\n}\n\nexport default useUpdateNoumCustomPreviewHelper;\n","import { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@/components/Button';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\n\nexport interface NoumCustomPreviewDiscardChangeProps {\n  spaceId: string;\n  isOpen: boolean;\n  handleClose: (isSuccess?: boolean) => void;\n}\n\nexport const NoumCustomPreviewDiscardChange = memo(\n  (props: NoumCustomPreviewDiscardChangeProps) => {\n    const { t } = useTranslation();\n    const handleConfirm = async () => {\n      /* TO DO discardCustomPreviewChange */\n      // eslint-disable-next-line no-console\n      console.log(props.spaceId);\n      props.handleClose(true);\n    };\n\n    return (\n      <Modal\n        testId=\"testNoumCustomPreviewDiscardChange\"\n        open={props.isOpen}\n        onClose={props.handleClose}\n        size={ModalSize.S}\n        disableBackdropClick\n      >\n        <>\n          <ModalHeader data-testid=\"titleNoumCustomPreviewDiscardChange\">\n            {t(`noumena.container.chamber_discard_change.title`)}\n          </ModalHeader>\n          <ModalBody align=\"center\">\n            <TSpan\n              data-testid=\"bodyNoumCustomPreviewDiscardChange\"\n              font=\"body-l\"\n              textAlign=\"center\"\n              colorToken=\"--text-modal-neutral-default\"\n            >\n              {t(`noumena.noum_edit.custom_preview.exit_modal.description`)}\n            </TSpan>\n          </ModalBody>\n          <ModalFooter flexDirection=\"column\" gap={16}>\n            <Button\n              data-testid=\"confirmNoumCustomPreviewDiscardChange\"\n              primary\n              intent=\"negative\"\n              size=\"full\"\n              onClick={handleConfirm}\n            >\n              {t(`noumena.noum_edit.custom_preview.exit_modal.confirm_button`)}\n            </Button>\n            <Button\n              data-testid=\"continueEditingNoumCustomPreviewDiscardChange\"\n              tertiary\n              size=\"full\"\n              onClick={() => props.handleClose()}\n            >\n              {t(`noumena.noum_edit.custom_preview.exit_modal.cancel_button`)}\n            </Button>\n          </ModalFooter>\n        </>\n      </Modal>\n    );\n  },\n);\n\nexport default NoumCustomPreviewDiscardChange;\n","import { forwardRef, type Ref, useCallback, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport { Icon } from '@/components/Icon';\nimport { useWindowDimensions } from '@/hooks/dimensions';\nimport { useUpdateNoumCustomPreviewHelper } from '@/features/noums/hooks/spaceQuery';\nimport {\n  IconWrapper,\n  StatusLabel,\n  StyledButton,\n  StatusWrapper,\n  MobileStatusWrapper,\n  EditChangeStatusText,\n  ButtonsWrapper,\n} from '@/components/Header/styles';\nimport { useLaunchDarkly } from '@/hooks';\nimport { NoumCustomPreviewDiscardChange } from '../components/modals/NoumCustomPreviewDiscardChange';\nimport { useEditChamberState } from '../EditChamber/provider';\nimport { CustomPreviewTabEnum } from './constants';\nimport { EditHeaderWrapperNew } from '../EditChamber/styles';\n\nexport type CustomPreviewHeaderProps = {\n  /* Id of the noum */\n  spaceId: string;\n  /* selected tab of rightside area (edit/preview) */\n  selectedCustomPreviewTab: string;\n  /* timestamp for last saved data */\n  lastCustomPreviewSavedTime?: string;\n};\n\nexport const CustomPreviewHeader = forwardRef(\n  (\n    {\n      lastCustomPreviewSavedTime = '',\n      selectedCustomPreviewTab,\n      spaceId,\n    }: CustomPreviewHeaderProps,\n    ref: Ref<HTMLDivElement>,\n  ) => {\n    const {\n      flags: { noumEditor2, noumCustomPreivewV2 },\n    } = useLaunchDarkly();\n    const {\n      hasUnsavedCustomPreview,\n      updateCustomPreviewElements,\n      customPreviewElements,\n    } = useEditChamberState();\n    const { t } = useTranslation();\n    const navigate = useNavigate();\n    const [isOpenExitCustomPreviewModal, toggleExitCustomPreviewModal] =\n      useState<boolean>(false);\n\n    const handleClickExit = useCallback(() => {\n      if (hasUnsavedCustomPreview) {\n        toggleExitCustomPreviewModal(true);\n      } else navigate(-1);\n    }, [hasUnsavedCustomPreview, navigate]);\n\n    const { width } = useWindowDimensions();\n\n    const isTablet = width > 768;\n\n    const handleCloseExitModal = useCallback(\n      (isSuccess?: boolean) => {\n        toggleExitCustomPreviewModal(false);\n        if (isSuccess) {\n          updateCustomPreviewElements?.([]);\n          navigate(-1);\n        }\n      },\n      [navigate, updateCustomPreviewElements],\n    );\n    const { updateNoumCustomPreviewHelper, loading } =\n      useUpdateNoumCustomPreviewHelper();\n\n    const handleClickCustomPreviewSave = useCallback(async () => {\n      const isSuccess = await updateNoumCustomPreviewHelper(\n        spaceId,\n        customPreviewElements,\n      );\n      if (isSuccess) {\n        navigate(-1);\n      }\n    }, [\n      customPreviewElements,\n      navigate,\n      spaceId,\n      updateNoumCustomPreviewHelper,\n    ]);\n\n    const RenderMobileStatus = () => (\n      <StatusWrapper className=\"xs-block\">\n        {lastCustomPreviewSavedTime && (\n          <MobileStatusWrapper>\n            {t('noumena.noum_edit.custom_preview.header.status.last_update')}:{' '}\n            {lastCustomPreviewSavedTime}\n            <EditChangeStatusText colorToken=\"--text-top-nav-neutral-default\">\n              {selectedCustomPreviewTab === CustomPreviewTabEnum.Edit\n                ? t(\n                    'noumena.noum_edit.custom_preview.header.status.preview_saved',\n                  )\n                : t(\n                    'noumena.noum_edit.custom_preview.header.status.all_preview_saved',\n                  )}\n            </EditChangeStatusText>\n          </MobileStatusWrapper>\n        )}\n      </StatusWrapper>\n    );\n\n    const RenderStatus = ({ className: name = 'xs-hidden' }) => (\n      <StatusWrapper className={`xs-${name}`}>\n        {lastCustomPreviewSavedTime && (\n          <StatusLabel\n            labelSize=\"small\"\n            data-testid={`lastPublishedLabel_xs_${name}`}\n            className={`xs-${name}`}\n          >\n            {t('noumena.noum_edit.custom_preview.header.status.last_update')}:{' '}\n            {lastCustomPreviewSavedTime}\n            <EditChangeStatusText colorToken=\"--text-top-nav-neutral-default\">\n              {selectedCustomPreviewTab === CustomPreviewTabEnum.Edit\n                ? t(\n                    'noumena.noum_edit.custom_preview.header.status.preview_saved',\n                  )\n                : t(\n                    'noumena.noum_edit.custom_preview.header.status.all_preview_saved',\n                  )}\n            </EditChangeStatusText>\n          </StatusLabel>\n        )}\n      </StatusWrapper>\n    );\n\n    return (\n      <EditHeaderWrapperNew ref={ref} data-testid=\"Edit-Header\">\n        {noumEditor2 && noumCustomPreivewV2 ? (\n          <StyledButton\n            size=\"small\"\n            onClick={handleClickExit}\n            secondary={hasUnsavedCustomPreview}\n            intent=\"negative\"\n            tertiary={!hasUnsavedCustomPreview}\n          >\n            {hasUnsavedCustomPreview\n              ? t(`noumena.cancel`)\n              : t('noumena._new_header.done_button.text')}\n          </StyledButton>\n        ) : (\n          <IconWrapper>\n            <Icon\n              name=\"arrow_left_m\"\n              size={24}\n              onClick={handleClickExit}\n              color=\"--icon-top-nav-global-element-neutral-highlighted\"\n            />\n          </IconWrapper>\n        )}\n        <RenderStatus className=\"hidden\" />\n        <ButtonsWrapper>\n          <StyledButton\n            data-testid=\"EditHeader-CustomPreview-Save\"\n            primary\n            size=\"small\"\n            onClick={handleClickCustomPreviewSave}\n            loading={loading}\n            disabled={\n              !hasUnsavedCustomPreview ||\n              loading ||\n              customPreviewElements.length === 0 ||\n              !spaceId\n            }\n          >\n            {selectedCustomPreviewTab === CustomPreviewTabEnum.Edit\n              ? t('noumena.noum_edit.custom_preview.header.button.save')\n              : t('noumena.header.publish_button.text')}\n          </StyledButton>\n        </ButtonsWrapper>\n\n        {isTablet ? <RenderStatus className=\"block\" /> : <RenderMobileStatus />}\n        <NoumCustomPreviewDiscardChange\n          isOpen={isOpenExitCustomPreviewModal}\n          spaceId={spaceId}\n          handleClose={handleCloseExitModal}\n        />\n      </EditHeaderWrapperNew>\n    );\n  },\n);\n","import { Header } from '@/components/Header';\nimport { Spinner } from '@/components/Spinner';\nimport { useLaunchDarkly } from '@/hooks/launchDarkly';\nimport { useNoumDetails, useNoumEdit } from '@/features/noums/hooks/noums';\nimport { Stack } from '@/layout';\nimport { AppLayout } from '@/layout/AppLayout';\nimport ChamberViewLayout from '@/layout/ChamberViewLayout';\nimport { useEffect, useState, type FC } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport routes from '@/constants/routes';\nimport { CustomPreviewHeader } from './CustomPreviewHeader';\nimport { EditChamberBody } from '../EditChamber/EditChamberBody';\nimport { EditChamberProvider } from '../EditChamber/provider';\nimport { type IEditChamber } from '../EditChamber/types';\nimport Chamber from '../ViewChamber/Chamber';\nimport { ChamberHeader } from '../ViewChamber/ChamberHeader';\nimport { CustomPreviewRightPanel } from './CustomPreviewRightpanel';\nimport { CustomPreviewTabEnum } from './constants';\nimport { AppStyled, CustomPreviewTopNavbar, HeadDCPTab } from './styles';\n\nconst EditCustomPreview: FC<IEditChamber> = ({ id }) => {\n  const { isOpen, isOwner, isArchived, isOnLoad, lastCustomPreviewSavedTime } =\n    useNoumEdit(id);\n  const { space, loading } = useNoumDetails(id, true);\n  const { flags } = useLaunchDarkly();\n  const navigate = useNavigate();\n  const [selectedCustomPreviewTab, setSelectedCPreviewTab] =\n    useState<CustomPreviewTabEnum>(CustomPreviewTabEnum.Edit);\n\n  useEffect(() => {\n    if (!flags.customNoums) {\n      navigate(generatePath(routes.EDIT_NOUM, { id }));\n    }\n  }, [flags.customNoums, id, navigate]);\n\n  if (loading || !space) {\n    return <Spinner />;\n  }\n\n  if (flags.newAppNavigation) {\n    return (\n      <EditChamberProvider space={space} loading={loading} id={id}>\n        {space && isOwner && !isArchived && (\n          <AppLayout.Layout\n            topNavbar={\n              <CustomPreviewTopNavbar>\n                <CustomPreviewHeader\n                  spaceId={id}\n                  selectedCustomPreviewTab={selectedCustomPreviewTab}\n                  lastCustomPreviewSavedTime={lastCustomPreviewSavedTime}\n                />\n              </CustomPreviewTopNavbar>\n            }\n          >\n            <Chamber id={id} isCustomPreview>\n              <ChamberViewLayout\n                header={\n                  <>\n                    <HeadDCPTab>\n                      <CustomPreviewRightPanel\n                        selectedCustomPreviewTab={selectedCustomPreviewTab}\n                        setSelectedCPreviewTab={setSelectedCPreviewTab}\n                      />\n                    </HeadDCPTab>\n                    <ChamberHeader isCustomPreview />\n                  </>\n                }\n                isCustomPreview\n                hasSideBar={false}\n                selectedCustomPreviewTab={selectedCustomPreviewTab}\n                setSelectedCPreviewTab={setSelectedCPreviewTab}\n              >\n                {loading || isOnLoad ? (\n                  <Stack>{!isOpen && <Spinner />}</Stack>\n                ) : (\n                  <>\n                    <EditChamberBody\n                      space={space}\n                      isCustomPreview\n                      selectedCustomPreviewTab={selectedCustomPreviewTab}\n                    />\n                  </>\n                )}\n              </ChamberViewLayout>\n            </Chamber>\n          </AppLayout.Layout>\n        )}\n      </EditChamberProvider>\n    );\n  }\n\n  return (\n    <EditChamberProvider space={space} loading={loading} id={id}>\n      {space && isOwner && !isArchived && (\n        <AppStyled data-testid=\"EDIT-CHAMBER\" className=\"App\">\n          <Header isBorderRadius={false}>\n            <CustomPreviewHeader\n              spaceId={id}\n              selectedCustomPreviewTab={selectedCustomPreviewTab}\n              lastCustomPreviewSavedTime={lastCustomPreviewSavedTime}\n            />\n          </Header>\n          <Chamber id={id} isCustomPreview>\n            <ChamberViewLayout\n              header={\n                <>\n                  <HeadDCPTab>\n                    <CustomPreviewRightPanel\n                      selectedCustomPreviewTab={selectedCustomPreviewTab}\n                      setSelectedCPreviewTab={setSelectedCPreviewTab}\n                    />\n                  </HeadDCPTab>\n                  <ChamberHeader isCustomPreview />\n                </>\n              }\n              isCustomPreview\n              hasSideBar={false}\n              selectedCustomPreviewTab={selectedCustomPreviewTab}\n              setSelectedCPreviewTab={setSelectedCPreviewTab}\n            >\n              {loading || isOnLoad ? (\n                <Stack>{!isOpen && <Spinner />}</Stack>\n              ) : (\n                <>\n                  <EditChamberBody\n                    space={space}\n                    isCustomPreview\n                    selectedCustomPreviewTab={selectedCustomPreviewTab}\n                  />\n                </>\n              )}\n            </ChamberViewLayout>\n          </Chamber>\n        </AppStyled>\n      )}\n    </EditChamberProvider>\n  );\n};\n\nexport default EditCustomPreview;\n","import styled from 'styled-components';\n\nexport const DescriptionWrapper = styled.div`\n  padding: 16px;\n`;\n","import styled, { css } from 'styled-components';\nimport { TSpan } from '@/components/Typography';\nimport { mediaSizes, sizes } from '@/constants/devices';\n\nexport const DropZone = styled.div<{\n  isDraggingOver: boolean;\n  isDraggingFrom: boolean;\n}>`\n  padding-bottom: 8px;\n  width: 100%;\n  &:empty {\n    padding-bottom: 0px;\n  }\n  @media (max-width: ${sizes.TABLET_L}) {\n    width: 100%;\n    margin: auto;\n  }\n`;\n\nexport const DNDContainer = styled.div<{ isDragging?: boolean }>`\n  &:first-child {\n    padding-top: 0px;\n  }\n`;\n\nexport const xsHidden = css`\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    display: none;\n  }\n`;\n\nexport const WrapperIcons = styled.div<{ disabled?: boolean }>`\n  cursor: pointer;\n  opacity: ${(p) => (p.disabled ? '0.2' : '1')};\n  &.xs-hidden {\n    ${xsHidden}\n  }\n`;\n\nexport const ToolNameSpan = styled(TSpan)`\n  text-overflow: ellipsis;\n  overflow: hidden;\n`;\n","import { memo } from 'react';\nimport { Icon, TSpan } from '@/components';\nimport { Stack } from '@/layout';\nimport { ElementUtils } from '@/utils/element';\nimport { Separator } from '@/components/Separator/Separator';\nimport { type DragableElementProps } from './types';\nimport { DNDContainer, ToolNameSpan, WrapperIcons } from './styles';\n\nexport const DragableElement = memo(\n  ({\n    element,\n    isDragging,\n    provided,\n    handleCPVisibilityChange,\n  }: DragableElementProps) => {\n    const isCustomPreviewVisible = ElementUtils.isCustomPreviewVisible(element);\n    const onClickVisibilityChange = () => {\n      if (element?._id)\n        handleCPVisibilityChange?.(element._id, !isCustomPreviewVisible);\n    };\n\n    return (\n      <DNDContainer\n        ref={provided?.innerRef}\n        {...provided?.draggableProps}\n        isDragging={isDragging}\n        data-testid={element._id}\n        hidden={!ElementUtils.isCPVisibilityChangeable(element)}\n      >\n        <Stack fullWidth justify=\"space-between\" align=\"center\" padding={12}>\n          <Stack gap={8} maxWidth={194} overflow=\"hidden\" align=\"center\">\n            <WrapperIcons {...provided?.dragHandleProps}>\n              <Icon\n                name=\"order_m\"\n                size={24}\n                color=\"--icon-button-neutral-default\"\n              />\n            </WrapperIcons>\n            <TSpan>\n              <Icon\n                name={ElementUtils.getIconName(element)}\n                size={24}\n                color=\"--icon-button-neutral-default\"\n              />\n            </TSpan>\n            <ToolNameSpan\n              font=\"footnote\"\n              colorToken=\"--text-card-neutral-highlighted\"\n            >\n              {element.elementType}\n            </ToolNameSpan>\n          </Stack>\n          <WrapperIcons>\n            <Icon\n              onClick={onClickVisibilityChange}\n              name={isCustomPreviewVisible ? 'eye_on_m' : 'eye_off_m'}\n              size={24}\n              color={\n                isCustomPreviewVisible\n                  ? '--icon-button-brand-primary-hover'\n                  : '--icon-card-neutral-default'\n              }\n            />\n          </WrapperIcons>\n        </Stack>\n        <Separator noMargin fullWidth />\n      </DNDContainer>\n    );\n  },\n);\n","import { type FC, memo } from 'react';\nimport {\n  Draggable,\n  type DraggableProvided,\n  type DraggableStateSnapshot,\n} from 'react-beautiful-dnd';\nimport { DragableElement } from './DragableElement';\nimport { type DragableAreaProps } from './types';\n\nexport const DragableArea: FC<DragableAreaProps> = memo((props) => (\n  <Draggable\n    draggableId={`${props.element._id}`}\n    index={props.index}\n    disableInteractiveElementBlocking\n  >\n    {(\n      dragProvided: DraggableProvided,\n      dragSnapshot: DraggableStateSnapshot,\n    ) => (\n      <DragableElement\n        {...props}\n        isDragging={dragSnapshot.isDragging}\n        provided={dragProvided}\n      />\n    )}\n  </Draggable>\n));\n","import { type FC } from 'react';\nimport {\n  Droppable,\n  type DroppableProvided,\n  type DroppableStateSnapshot,\n} from 'react-beautiful-dnd';\nimport { DragableArea } from './DragableArea';\nimport { DropZone } from './styles';\nimport { type DroppableAreaProps } from './types';\n\nexport const DroppableArea: FC<DroppableAreaProps> = (props) => (\n  <Droppable droppableId=\"custom_preview_panel_list\">\n    {(\n      dropProvided: DroppableProvided,\n      dropSnapshot: DroppableStateSnapshot,\n    ) => (\n      <DropZone\n        ref={dropProvided.innerRef}\n        isDraggingOver={dropSnapshot.isDraggingOver}\n        isDraggingFrom={Boolean(dropSnapshot.draggingFromThisWith)}\n        {...dropProvided.droppableProps}\n        data-testid=\"custom-preview-panel-wrapper\"\n      >\n        {props.elements.map((element, index) => (\n          <DragableArea\n            {...props}\n            key={element._id}\n            index={index}\n            currentIndex={index}\n            totalIndex={props.elements.length - 1}\n            element={element}\n          />\n        ))}\n        {dropProvided.placeholder}\n      </DropZone>\n    )}\n  </Droppable>\n);\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport {\n  DragDropContext,\n  type DropResult,\n  type PreDragActions,\n  type SensorAPI,\n  type SnapDragActions,\n} from 'react-beautiful-dnd';\nimport {\n  type ElementOutput,\n  type NoumCustomPreviewElementInput,\n  SpaceTypeEnum,\n} from '@/apollo/generated/types';\nimport { reorderList } from '@/utils/list';\nimport { ElementUtils } from '@/utils/element';\nimport { useEditChamberState } from '@/screens/Chamber/EditChamber/provider';\nimport { DroppableArea } from './DroppableArea';\nimport { CustomPreviewTabEnum } from '../constants';\n\nexport const CustomPreviewPanelDnd = () => {\n  const {\n    id: spaceId,\n    space,\n    elements: originalEls,\n    sendRerenderEvent,\n    updateCustomPreviewElements,\n    customPreviewElements,\n    hasUnsavedCustomPreview,\n  } = useEditChamberState();\n\n  const sensorAPIRef = useRef<SensorAPI | null>(null);\n  const [isDragging, setIsDragging] = useState(false);\n  const [elements, setElements] = useState<ElementOutput[]>([]);\n\n  const useSensor = (api: SensorAPI) => {\n    sensorAPIRef.current = api;\n  };\n\n  const lift = useCallback(\n    (draggableId: string): SnapDragActions | null => {\n      if (isDragging) {\n        return null;\n      }\n      const api = sensorAPIRef.current;\n      if (!api) {\n        return null;\n      }\n\n      const preDrag: PreDragActions | null = api.tryGetLock(\n        draggableId,\n        () => {},\n      );\n\n      if (!preDrag) {\n        return null;\n      }\n\n      return preDrag.snapLift();\n    },\n    [isDragging],\n  );\n\n  const onDragStart = useCallback(() => {\n    setIsDragging(true);\n  }, []);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      setIsDragging(false);\n\n      if (\n        !spaceId ||\n        !result.destination ||\n        result.destination.index === result.source.index\n      ) {\n        return;\n      }\n\n      const newElements = reorderList<ElementOutput>(\n        elements,\n        result.source.index,\n        result.destination.index,\n      );\n      if (updateCustomPreviewElements) {\n        const elementsCP = newElements.map((el, index) => ({\n          _id: el._id,\n          customPosition: index + 1,\n        })) as NoumCustomPreviewElementInput[];\n        updateCustomPreviewElements(elementsCP);\n      }\n      setElements(newElements);\n      sendRerenderEvent();\n    },\n    [spaceId, elements, sendRerenderEvent, updateCustomPreviewElements],\n  );\n\n  useEffect(() => {\n    let updateElements;\n    if (hasUnsavedCustomPreview) {\n      updateElements = ElementUtils.unSavedfilterAndSortCPPublished(\n        originalEls,\n        customPreviewElements,\n        CustomPreviewTabEnum.Edit,\n      );\n    } else updateElements = originalEls;\n    if (updateElements) {\n      const newElements = ElementUtils.filterMasterElement(\n        updateElements,\n        space?.type === SpaceTypeEnum.Home,\n      );\n      setElements(newElements);\n    }\n  }, [\n    customPreviewElements,\n    hasUnsavedCustomPreview,\n    originalEls,\n    space?.type,\n  ]);\n\n  const handleCPVisibilityChange = useCallback(\n    (elementId: string, isVisible: boolean) => {\n      updateCustomPreviewElements?.([\n        { _id: elementId, isCustomPreviewVisible: isVisible },\n      ]);\n    },\n    [updateCustomPreviewElements],\n  );\n\n  return (\n    <DragDropContext\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n      sensors={[useSensor]}\n    >\n      <DroppableArea\n        spaceId={spaceId}\n        elements={elements}\n        lift={lift}\n        handleCPVisibilityChange={handleCPVisibilityChange}\n      />\n    </DragDropContext>\n  );\n};\n\nexport default CustomPreviewPanelDnd;\n","import SideModal from '@/components/SideModal/SideModal';\nimport { useBreakpoints } from '@/hooks';\nimport { Trans } from 'react-i18next';\nimport { t } from 'i18next';\nimport { Stack } from '@/layout';\nimport { Separator } from '@/components/Separator/Separator';\nimport { type SideModalProps } from '@/components/SideModal/types';\nimport { StyledTSpan } from '../styles';\nimport { DescriptionWrapper } from './styles';\nimport CustomPreviewPanelDnd from '../CustomPreviewPanelDnd';\n\nexport const CustomPreviewPanel = ({ open }: SideModalProps) => {\n  const { isDesktop } = useBreakpoints();\n\n  return (\n    <SideModal\n      className=\"noums_container\"\n      placement=\"right\"\n      nonBlockingModal={isDesktop}\n      disableEscapeKeyDown\n      isBackgroundOpacity={!isDesktop}\n      height=\"100%\"\n      padding={0}\n      width=\"250px\"\n      title={t('noumena.noum_edit.custom_preview')}\n      titleFont=\"body-m-bold\"\n      open={open}\n    >\n      <Stack\n        vertical\n        fullWidth\n        align=\"stretch\"\n        aria-label=\"custom_preview_panel\"\n      >\n        <Separator noMargin fullWidth />\n        <DescriptionWrapper aria-label=\"custom_preview_panel_description\">\n          <Trans\n            i18nKey={t('noumena.noum_edit.custom_previews.descriptiontop')}\n            components={{\n              span: <StyledTSpan />,\n            }}\n          />\n        </DescriptionWrapper>\n        <Separator noMargin fullWidth />\n        <CustomPreviewPanelDnd />\n      </Stack>\n    </SideModal>\n  );\n};\n","import { Header } from '@/components/Header';\nimport { Spinner } from '@/components/Spinner';\nimport { useLaunchDarkly } from '@/hooks/launchDarkly';\nimport { useNoumDetails, useNoumEdit } from '@/features/noums/hooks/noums';\nimport { Stack } from '@/layout';\nimport { AppLayout } from '@/layout/AppLayout';\nimport ChamberViewLayout from '@/layout/ChamberViewLayout';\nimport { useEffect, useState, type FC } from 'react';\nimport { generatePath, useNavigate } from 'react-router';\nimport { CustomPreviewHeader } from '@/screens/Chamber/CustomPreview/CustomPreviewHeader';\nimport routes from '@/constants/routes';\nimport { EditChamberBody } from '../EditChamber/EditChamberBody';\nimport { EditChamberProvider } from '../EditChamber/provider';\nimport { type IEditChamber } from '../EditChamber/types';\nimport Chamber from '../ViewChamber/Chamber';\nimport { CustomPreviewTabEnum } from './constants';\nimport { AppStyled, CustomPreviewTopNavbar } from './styles';\nimport { EditChamberHeader } from '../EditChamber/EditChamberHeader';\nimport CustomPreviewBodyV2 from './CustomPreviewBodyV2';\nimport { CustomPreviewPanel } from './CustomPreviewPanel';\n\nconst EditCustomPreviewV2: FC<IEditChamber> = ({ id }) => {\n  const { isOpen, isOwner, isArchived, isOnLoad, lastCustomPreviewSavedTime } =\n    useNoumEdit(id);\n  const { space, loading } = useNoumDetails(id, true);\n  const { flags } = useLaunchDarkly();\n  const navigate = useNavigate();\n  const [selectedCustomPreviewTab, setSelectedCPreviewTab] =\n    useState<CustomPreviewTabEnum>(CustomPreviewTabEnum.Edit);\n\n  useEffect(() => {\n    if (!flags.customNoums) {\n      navigate(generatePath(routes.EDIT_NOUM, { id }));\n    }\n  }, [flags.customNoums, id, navigate]);\n\n  if (loading || !space) {\n    return <Spinner />;\n  }\n\n  if (flags.newAppNavigation) {\n    return (\n      <EditChamberProvider space={space} loading={loading} id={id}>\n        {space && isOwner && !isArchived && (\n          <AppLayout.Layout\n            topNavbar={\n              <CustomPreviewTopNavbar>\n                <CustomPreviewHeader\n                  spaceId={id}\n                  selectedCustomPreviewTab={selectedCustomPreviewTab}\n                  lastCustomPreviewSavedTime={lastCustomPreviewSavedTime}\n                />\n              </CustomPreviewTopNavbar>\n            }\n          >\n            <Chamber id={id} isCustomPreview>\n              <ChamberViewLayout\n                header={<EditChamberHeader isCustomPreview />}\n                hasSideBar={false}\n                selectedCustomPreviewTab={selectedCustomPreviewTab}\n                setSelectedCPreviewTab={setSelectedCPreviewTab}\n              >\n                {loading || isOnLoad ? (\n                  <Stack>{!isOpen && <Spinner />}</Stack>\n                ) : (\n                  <>\n                    <CustomPreviewBodyV2 />\n                    <CustomPreviewPanel open={true} />\n                  </>\n                )}\n              </ChamberViewLayout>\n            </Chamber>\n          </AppLayout.Layout>\n        )}\n      </EditChamberProvider>\n    );\n  }\n\n  return (\n    <EditChamberProvider space={space} loading={loading} id={id}>\n      {space && isOwner && !isArchived && (\n        <AppStyled data-testid=\"EDIT-CHAMBER\" className=\"App\">\n          <Header isBorderRadius={false}>\n            <CustomPreviewHeader\n              spaceId={id}\n              selectedCustomPreviewTab={selectedCustomPreviewTab}\n              lastCustomPreviewSavedTime={lastCustomPreviewSavedTime}\n            />\n          </Header>\n          <Chamber id={id} isCustomPreview>\n            <ChamberViewLayout\n              header={<EditChamberHeader isCustomPreview />}\n              isCustomPreview\n              hasSideBar={false}\n              selectedCustomPreviewTab={selectedCustomPreviewTab}\n              setSelectedCPreviewTab={setSelectedCPreviewTab}\n            >\n              {loading || isOnLoad ? (\n                <Stack>{!isOpen && <Spinner />}</Stack>\n              ) : (\n                <>\n                  <EditChamberBody\n                    space={space}\n                    isCustomPreview\n                    selectedCustomPreviewTab={selectedCustomPreviewTab}\n                  />\n                </>\n              )}\n            </ChamberViewLayout>\n          </Chamber>\n        </AppStyled>\n      )}\n    </EditChamberProvider>\n  );\n};\n\nexport default EditCustomPreviewV2;\n","import { useParams } from 'react-router-dom';\nimport { useLaunchDarkly } from '@/hooks';\nimport EditCustomPreview from './EditCustomPreview';\nimport EditCustomPreviewV2 from './EditCustomPreviewV2';\n\nconst Index = () => {\n  const { id = '' } = useParams();\n  const {\n    flags: { noumCustomPreivewV2, noumEditor2 },\n  } = useLaunchDarkly();\n\n  return noumCustomPreivewV2 && noumEditor2 ? (\n    <EditCustomPreviewV2 id={id} />\n  ) : (\n    <EditCustomPreview id={id} />\n  );\n};\n\nexport default Index;\n"],"names":["useUpdateNoumCustomPreviewHelper","addToast","useToast","updateNoumCustomPreviewMutation","loading","useUpdateNoumCustomPreviewMutation","updateNoumCustomPreviewHelper","useCallback","noumId","elements","isSuccess","variables","t","error","message","Error","Sentry","tags","section","NoumCustomPreviewDiscardChange","memo","props","useTranslation","handleConfirm","log","spaceId","handleClose","Modal","isOpen","ModalSize","S","jsxs","Fragment","jsx","ModalHeader","ModalBody","TSpan","ModalFooter","Button","CustomPreviewHeader","forwardRef","lastCustomPreviewSavedTime","selectedCustomPreviewTab","ref","flags","noumEditor2","noumCustomPreivewV2","useLaunchDarkly","hasUnsavedCustomPreview","updateCustomPreviewElements","customPreviewElements","useEditChamberState","navigate","useNavigate","isOpenExitCustomPreviewModal","toggleExitCustomPreviewModal","useState","handleClickExit","width","useWindowDimensions","isTablet","handleCloseExitModal","handleClickCustomPreviewSave","RenderMobileStatus","StatusWrapper","MobileStatusWrapper","EditChangeStatusText","CustomPreviewTabEnum","Edit","RenderStatus","className","name","StatusLabel","EditHeaderWrapperNew","StyledButton","IconWrapper","Icon","ButtonsWrapper","length","EditCustomPreview","id","isOwner","isArchived","isOnLoad","useNoumEdit","space","useNoumDetails","setSelectedCPreviewTab","useEffect","customNoums","generatePath","routes","EDIT_NOUM","Spinner","newAppNavigation","EditChamberProvider","AppLayout","CustomPreviewTopNavbar","Chamber","ChamberViewLayout","HeadDCPTab","CustomPreviewRightPanel","ChamberHeader","Stack","EditChamberBody","AppStyled","Header","DescriptionWrapper","styled","div","DropZone","sizes","TABLET_L","DNDContainer","xsHidden","css","mediaSizes","MOBILE_L_MAX","WrapperIcons","p","disabled","ToolNameSpan","DragableElement","element","isDragging","provided","handleCPVisibilityChange","isCustomPreviewVisible","ElementUtils","onClickVisibilityChange","_id","innerRef","draggableProps","isCPVisibilityChangeable","dragHandleProps","getIconName","elementType","Separator","DragableArea","Draggable","index","dragProvided","dragSnapshot","DroppableArea","Droppable","dropProvided","dropSnapshot","isDraggingOver","Boolean","draggingFromThisWith","droppableProps","map","createElement","placeholder","CustomPreviewPanelDnd","originalEls","sendRerenderEvent","sensorAPIRef","useRef","setIsDragging","setElements","useSensor","api","current","lift","draggableId","preDrag","tryGetLock","snapLift","onDragStart","onDragEnd","result","destination","source","newElements","reorderList","elementsCP","el","customPosition","updateElements","unSavedfilterAndSortCPPublished","filterMasterElement","type","SpaceTypeEnum","Home","elementId","isVisible","DragDropContext","CustomPreviewPanel","open","isDesktop","useBreakpoints","SideModal","Trans","span","StyledTSpan","EditCustomPreviewV2","EditChamberHeader","CustomPreviewBodyV2","Index","useParams","CustomPreview"],"mappings":"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"}