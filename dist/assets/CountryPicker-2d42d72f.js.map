{"version":3,"file":"CountryPicker-2d42d72f.js","sources":["../../src/components/CounteryPicker/styles.ts","../../src/components/CounteryPicker/CountryPicker.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Icon } from '@/components/Icon';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 100%;\n  & > :not(:last-child) {\n    margin-right: 8px;\n  }\n`;\n\nexport const CountryRightIcon = styled(Icon)<{ isOpen?: boolean }>`\n  transition: transform 0.3s;\n  ${({ isOpen }) => isOpen && 'transform: rotate(180deg)'};\n`;\n","import { type FC, useCallback, useEffect, useState } from 'react';\nimport { type Placement } from '@popperjs/core';\nimport generate from 'uniqid';\nimport { Stack } from '@/layout';\nimport { Dropdown, type DropdownValueType } from '@/components/Dropdown';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport countries from '@/assets/json/countries.json';\nimport { type Country } from './types';\nimport { CountryRightIcon } from './styles';\nimport { type ITextField } from '../TextField/types';\nimport { Flag } from '../Flag';\nimport { type FlagProps } from '../Flag/Flag';\n\nexport const genericCountryOptions: DropdownValueType<Country>[] =\n  countries.map((country) => ({\n    key: generate(),\n    label: (\n      <Stack>\n        <TSpan\n          font=\"input-s\"\n          colorToken=\"--text-tablecell-header-neutral-default\"\n          data-testid=\"country-options\"\n        >\n          <div style={{ padding: '0 4px' }}>{country.name}</div>\n        </TSpan>\n      </Stack>\n    ),\n    type: 'value',\n    value: { ...country },\n    icon: <Flag flag={`flag_${country.iso2}` as FlagProps['flag']} size={14} />,\n  }));\n\nexport type CountryPickerProps = {\n  options?: DropdownValueType<Country>[];\n  onCountryCodeChange: (value: string | undefined, code?: string) => void;\n  value?: string;\n  disabled?: boolean;\n  placement?: Placement;\n  containerHeight?: string;\n} & Pick<ITextField, 'helperText' | 'error' | 'inputSize' | 'label'>;\n\nconst CountryPicker: FC<CountryPickerProps> = ({\n  options = genericCountryOptions,\n  onCountryCodeChange,\n  value,\n  disabled,\n  containerHeight,\n  placement = 'bottom-start',\n  ...textFieldProps\n}) => {\n  const [searchOptions, setOptions] = useState<DropdownValueType<Country>[]>(\n    [],\n  );\n  const [numberOfItems, setNumberOfItems] = useState(15);\n  const [isOpen, setIsOpen] = useState(false);\n  const [selected, setSelected] = useState<Country>({\n    name: '',\n    dialCode: '',\n    iso2: '',\n  });\n\n  const [search, setSearch] = useState<string>('');\n\n  const onInputChange = (val: string) => {\n    setSearch(val);\n  };\n\n  useEffect(() => {\n    const filteredOptions = options.filter((option) => {\n      if (option && option.type === 'value' && option.value) {\n        return String(option.value.name)\n          ?.toLowerCase()\n          .includes(search.toLocaleLowerCase());\n      }\n      return true;\n    });\n    setOptions(filteredOptions);\n  }, [options, search]);\n\n  useEffect(() => {\n    if (value && value.length === 2) {\n      setSelected({\n        name:\n          options.find(\n            (_option) =>\n              _option.value.iso2.toLocaleLowerCase() ===\n              value?.toLocaleLowerCase(),\n          )?.value.name || '',\n        dialCode:\n          options.find(\n            (_option) =>\n              _option.value.iso2.toLocaleLowerCase() ===\n              value?.toLocaleLowerCase(),\n          )?.value.dialCode || '',\n        iso2: value || '',\n      });\n    }\n  }, [options, value]);\n\n  useEffect(() => {\n    const option = options.find(\n      (_option) => _option.value.iso2 === selected.iso2,\n    );\n    onCountryCodeChange(option?.value.name, option?.value?.iso2);\n  }, [onCountryCodeChange, options, selected]);\n\n  const handleFetchMore = useCallback(\n    () => setNumberOfItems(numberOfItems + 15),\n    [numberOfItems],\n  );\n\n  const visibleOptions = searchOptions.slice(\n    0,\n    Math.min(searchOptions.length, numberOfItems),\n  );\n\n  return (\n    <Stack fullWidth data-testid=\"countryPicker\">\n      <Dropdown\n        containerWidth=\"443px\"\n        containerHeight={containerHeight}\n        inputValue={search || ''}\n        options={search.length > 0 ? visibleOptions : options}\n        usePortal={true}\n        placement={placement}\n        disabled={disabled}\n        onSelectOption={(option) => {\n          setSelected(option.value);\n          setSearch('');\n        }}\n        showInternalSearch\n        onInputChange={onInputChange}\n        onFetchMore={handleFetchMore}\n        onClose={() => {\n          setSearch('');\n          setIsOpen(false);\n        }}\n        onOpen={() => setIsOpen(true)}\n      >\n        {({ inputProps, inputRef, toggle }) => (\n          <TextField\n            data-testid=\"country-picker-textfield\"\n            readOnly={true}\n            ref={inputRef}\n            {...textFieldProps}\n            {...inputProps}\n            value={selected.name || ''}\n            isAlwaysFocus={isOpen}\n            label=\"Select Country...\"\n            leftIcon={\n              selected?.iso2 ? (\n                <Flag\n                  flag={`flag_${selected.iso2}` as FlagProps['flag']}\n                  size={28}\n                />\n              ) : null\n            }\n            rightIcon={\n              <CountryRightIcon\n                name=\"chevron_down_m\"\n                isOpen={isOpen}\n                size={16}\n                onClick={toggle}\n                data-testid=\"styledCountryDownArrow\"\n                color=\"--icon-input-neutral-default\"\n              />\n            }\n          />\n        )}\n      </Dropdown>\n    </Stack>\n  );\n};\n\nexport default CountryPicker;\n"],"names":["styled","div","CountryRightIcon","Icon","isOpen","genericCountryOptions","countries","map","country","key","generate","label","jsx","Stack","TSpan","padding","name","type","value","icon","Flag","iso2","CountryPicker","options","onCountryCodeChange","disabled","containerHeight","placement","textFieldProps","searchOptions","setOptions","useState","numberOfItems","setNumberOfItems","setIsOpen","selected","setSelected","dialCode","search","setSearch","onInputChange","val","useEffect","filteredOptions","filter","option","String","toLowerCase","includes","toLocaleLowerCase","length","find","_option","handleFetchMore","useCallback","visibleOptions","slice","Math","min","Dropdown","inputProps","inputRef","toggle","TextField"],"mappings":"6MAGyBA,EAAOC;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,EASnBC,MAAAA,EAAmBF,EAAOG,CAAI;AAAA;AAAA,IAEvC,CAAC,CAAEC,OAAAA,CAAO,IAAMA,GAAU;AAAA,ECAjBC,EACXC,EAAUC,IAAkBC,IAAA,CAC1BC,IAAKC,EAAU,EACfC,MACGC,EAAAC,EAAA,CAAK,YAAA,8BACJ,WAACC,EACC,CAAA,KAAK,UACL,WAAW,0CACX,cAAY,kBAAiB,YAAA,8BAE7B,SAAAF,EAAC,OAAI,MAAO,CAAEG,QAAS,OAAYP,EAAAA,SAAAA,EAAQQ,IAAK,CAAA,CAAA,CAClD,CACF,CAAA,EAEFC,KAAM,QACNC,MAAO,CAAE,GAAGV,CAAQ,EACpBW,KAAOP,EAAAQ,EAAA,CAAK,KAAO,QAAOZ,EAAQa,OAA6B,KAAM,GAAG,YAAA,4BAAA,CAAA,CAC1E,EAAE,EAWEC,EAAwCA,CAAC,CAC7CC,QAAAA,EAAUlB,EACVmB,oBAAAA,EACAN,MAAAA,EACAO,SAAAA,EACAC,gBAAAA,EACAC,UAAAA,EAAY,eACZ,GAAGC,CACL,IAAM,CACJ,KAAM,CAACC,EAAeC,CAAU,EAAIC,EAAAA,SAClC,CAAE,CAAA,EAEE,CAACC,EAAeC,CAAgB,EAAIF,WAAS,EAAE,EAC/C,CAAC3B,EAAQ8B,CAAS,EAAIH,WAAS,EAAK,EACpC,CAACI,EAAUC,CAAW,EAAIL,WAAkB,CAChDf,KAAM,GACNqB,SAAU,GACVhB,KAAM,EAAA,CACP,EAEK,CAACiB,EAAQC,CAAS,EAAIR,WAAiB,EAAE,EAEzCS,EAAiBC,GAAgB,CACrCF,EAAUE,CAAG,CAAA,EAGfC,EAAAA,UAAU,IAAM,CACRC,MAAAA,EAAkBpB,EAAQqB,OAAmBC,GAAA,OACjD,OAAIA,GAAUA,EAAO5B,OAAS,SAAW4B,EAAO3B,OACvC4B,EAAAA,OAAOD,EAAO3B,MAAMF,IAAI,IAAxB8B,YAAAA,EACHC,cACDC,SAASV,EAAOW,kBAAAA,GAEd,EAAA,CACR,EACDnB,EAAWa,CAAe,CAAA,EACzB,CAACpB,EAASe,CAAM,CAAC,EAEpBI,EAAAA,UAAU,IAAM,SACVxB,GAASA,EAAMgC,SAAW,GAChBd,EAAA,CACVpB,OACEO,EAAAA,EAAQ4B,KACLC,GACCA,EAAQlC,MAAMG,KAAK4B,kBAAmB,KACtC/B,GAAAA,YAAAA,EAAO+B,oBAAmB,IAH9B1B,YAAAA,EAIGL,MAAMF,OAAQ,GACnBqB,WACEd,EAAAA,EAAQ4B,KACLC,GACCA,EAAQlC,MAAMG,KAAK4B,kBAAmB,KACtC/B,GAAAA,YAAAA,EAAO+B,oBAAmB,IAH9B1B,YAAAA,EAIGL,MAAMmB,WAAY,GACvBhB,KAAMH,GAAS,EAAA,CAChB,CACH,EACC,CAACK,EAASL,CAAK,CAAC,EAEnBwB,EAAAA,UAAU,IAAM,OACRG,MAAAA,EAAStB,EAAQ4B,KACpBC,GAAYA,EAAQlC,MAAMG,OAASc,EAASd,IAAI,EAEnDG,EAAoBqB,GAAAA,YAAAA,EAAQ3B,MAAMF,MAAM6B,EAAAA,GAAAA,YAAAA,EAAQ3B,QAAR2B,YAAAA,EAAexB,IAAI,CAC1D,EAAA,CAACG,EAAqBD,EAASY,CAAQ,CAAC,EAErCkB,MAAAA,EAAkBC,cACtB,IAAMrB,EAAiBD,EAAgB,EAAE,EACzC,CAACA,CAAa,CAAC,EAGXuB,EAAiB1B,EAAc2B,MACnC,EACAC,KAAKC,IAAI7B,EAAcqB,OAAQlB,CAAa,CAAC,EAI7C,OAAApB,EAACC,EAAM,CAAA,UAAS,GAAC,cAAY,gBAAe,YAAA,sBAC1C,SAAAD,EAAC+C,EACC,CAAA,eAAe,QACf,gBAAAjC,EACA,WAAYY,GAAU,GACtB,QAASA,EAAOY,OAAS,EAAIK,EAAiBhC,EAC9C,UAAW,GACX,UAAAI,EACA,SAAAF,EACA,eAA4BoB,GAAA,CAC1BT,EAAYS,EAAO3B,KAAK,EACxBqB,EAAU,EAAE,CAAA,EAEd,mBAAkB,GAClB,cAAAC,EACA,YAAaa,EACb,QAAS,IAAM,CACbd,EAAU,EAAE,EACZL,EAAU,EAAK,CAAA,EAEjB,OAAQ,IAAMA,EAAU,EAAI,EAAE,YAAA,yBAE7B,SAAC,CAAA,CAAE0B,WAAAA,EAAYC,SAAAA,EAAUC,OAAAA,CAAO,IAC9BlD,EAAAmD,EAAA,CACC,cAAY,2BACZ,SAAU,GACV,IAAKF,EACL,GAAIjC,EACJ,GAAIgC,EACJ,MAAOzB,EAASnB,MAAQ,GACxB,cAAeZ,EACf,MAAM,oBACN,SACE+B,GAAAA,MAAAA,EAAUd,KACPT,EAAAQ,EAAA,CACC,KAAO,QAAOe,EAASd,OACvB,KAAM,GAAG,YAAA,oBAAA,CAAA,EAET,KAEN,UACGT,EAAAV,EAAA,CACC,KAAK,iBACL,OAAAE,EACA,KAAM,GACN,QAAS0D,EACT,cAAY,yBACZ,MAAM,+BACN,YAAA,gCAAA,CAAA,EAGP,YAAA,yBAAA,CAAA,CACH,CAAA,CACF,CAAA,CAEJ"}