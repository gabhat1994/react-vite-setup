{"version":3,"file":"useApplicationReview-3b8b1d50.js","sources":["../../src/features/wallet/components/DwollaDocumentUploader/styles.ts","../../src/features/wallet/components/DwollaDocumentUploader/Picker.tsx","../../src/features/wallet/components/DwollaDocumentUploader/DwollaDocumentDropDown.tsx","../../src/features/wallet/components/DwollaDocumentUploader/DocumentHeading.tsx","../../src/features/wallet/components/DwollaDocumentUploader/Input.tsx","../../src/features/wallet/components/DwollaDocumentUploader/UploadInput.tsx","../../src/features/wallet/components/DwollaDocumentUploader/FileDisplay.tsx","../../src/features/wallet/components/DwollaDocumentUploader/UploadComponent.tsx","../../src/features/wallet/components/DwollaDocumentUploader/DwollaDocumentModal.tsx","../../src/services/rest/ApplicationReviewfile.ts","../../src/features/wallet/utils/utils.ts","../../src/features/wallet/hooks/useApplicationReview.ts"],"sourcesContent":["import { Icon } from '@/components/Icon';\nimport { sizes } from '@/constants/devices';\nimport { Stack } from '@/layout';\nimport styled, { css } from 'styled-components';\n\nexport const DisplayFileContainer = styled.div<{\n  isSingleFileDownload: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  height: 362px;\n  width: 458px;\n  border-radius: 8px;\n  background-color: var(--bg-dragdrop-neutral-default);\n  border: 1px solid var(--border-dragdrop-neutral-default);\n  border-style: none;\n\n  ${({ isSingleFileDownload }) =>\n    isSingleFileDownload &&\n    css`\n      width: 100%;\n      height: 470px;\n\n      @media (max-width: ${sizes.TABLET_L}) {\n        width: 100%;\n        height: 100%;\n      }\n    `}\n  ${({ isSingleFileDownload }) =>\n    !isSingleFileDownload &&\n    css`\n      @media (max-width: ${sizes.TABLET_L}) {\n        width: 100%;\n        height: 362px;\n      }\n    `}\n\n\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n    height: 287px;\n  }\n`;\n\nexport const FileDetails = styled(Stack)`\n  width: 100%;\n  height: 65px;\n  box-sizing: border-box;\n  padding: 12px;\n  border-bottom: 1px solid var(--border-dragdrop-neutral-default);\n`;\n\nexport const ClearFile = styled(Icon)`\n  cursor: pointer;\n`;\n\nexport const DocumentContainer = styled.div<{ isSingleFileDownload: boolean }>`\n  width: 100%;\n  height: 297px;\n  box-sizing: border-box;\n\n  ${({ isSingleFileDownload }) =>\n    isSingleFileDownload &&\n    css`\n      height: 80%;\n    `}\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n    height: 221px;\n  }\n`;\nexport const Image = styled.img<{ isSingleFileDownload: boolean }>`\n  width: 100%;\n  height: 297px;\n\n  ${({ isSingleFileDownload }) =>\n    isSingleFileDownload &&\n    css`\n      height: 100%;\n    `}\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n    height: 221px;\n  }\n`;\n\nexport const UploadInputContainer = styled.div<{\n  isDraggingOver: boolean;\n  isSingleSideUpload: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  height: 362px;\n  width: 458px;\n  cursor: pointer;\n  border-radius: 8px;\n\n  ${({ isSingleSideUpload }) =>\n    isSingleSideUpload &&\n    css`\n      height: 470px;\n      width: 100%; ;\n    `}\n\n  ${({ isDraggingOver }) =>\n    isDraggingOver &&\n    css`\n      background-color: var(--bg-dragdrop-brand-secondary-focused);\n      border: 2px solid var(--border-dragdrop-brand-primary-focused);\n      border-style: dashed;\n    `}\n  ${({ isDraggingOver }) =>\n    !isDraggingOver &&\n    css`\n      background-color: var(--bg-dragdrop-neutral-default);\n      border: 1px solid var(--border-dragdrop-neutral-default);\n      border-style: none;\n    `}\n\n${({ isSingleSideUpload }) =>\n    !isSingleSideUpload &&\n    css`\n      @media (max-width: ${sizes.TABLET_L}) {\n        width: 100%;\n        height: 362px;\n      }\n    `}\n\n${({ isSingleSideUpload }) =>\n    isSingleSideUpload &&\n    css`\n      @media (max-width: ${sizes.TABLET_L}) {\n        width: 100%;\n        height: 80vh;\n      }\n    `}\n\n\n\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n    height: 287px;\n  }\n`;\n\nexport const UploadIconWrapper = styled.div`\n  height: 24px;\n`;\n\nexport const TextWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const ActionIconWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-self: flex-end;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: 16px;\n  gap: 12px;\n  height: 24px;\n  flex: none;\n  flex-grow: 0;\n`;\n\nexport const IConTextWrapper = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const SpinnerContainer = styled.div`\n  width: 24px;\n  height: 24px !important;\n  position: relative;\n`;\n\nexport const IDPickerContainer = styled(Stack).attrs({\n  gap: '16px',\n  align: 'center',\n})`\n  width: 438px;\n  padding: 16px;\n  height: 80px;\n  border-radius: 8px;\n  border: 1px solid var(--border-card-neutral-default);\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n    height: 127px;\n  }\n`;\nexport const IDPickerLeft = styled(Stack).attrs({})`\n  box-sizing: border-box;\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 279px;\n    height: 95px;\n  }\n`;\n\nexport const IDPickerIcon = styled.span<{ isSuccess: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 40px;\n  height: 40px;\n  padding: 8px;\n  border-radius: 8px;\n  box-sizing: border-box;\n  ${({ isSuccess }) =>\n    isSuccess &&\n    css`\n      background-color: var(--bg-iconbox-success-secondary-default);\n    `}\n  ${({ isSuccess }) =>\n    !isSuccess &&\n    css`\n      background-color: var(--bg-iconbox-brand-secondary-default);\n    `}\n`;\n\nexport const IDPickerContent = styled(Stack).attrs({\n  vertical: true,\n})`\n  width: 290px;\n  box-sizing: border-box;\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n  }\n`;\n\nexport const Chevrolet = styled(Icon)<{ isOpen?: boolean }>`\n  transition: transform 0.3s;\n  ${({ isOpen }) => isOpen && 'transform: rotate(180deg)'};\n`;\n\nexport const Index = styled(Stack).attrs({\n  align: 'center',\n  justify: 'center',\n})`\n  width: 24px;\n  height: 24px;\n  background-color: var(--bg-badge-brand-secondary-default);\n  border-radius: 12px;\n`;\n","import { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport {\n  IDPickerContainer,\n  IDPickerLeft,\n  IDPickerIcon,\n  IDPickerContent,\n  Chevrolet,\n} from './styles';\n\ntype PickerProps = {\n  variant: 'primary' | 'success';\n  isOpen: boolean;\n  onToggle: () => void;\n  isMobile: boolean;\n};\n\nexport const Picker = ({\n  variant,\n  isOpen,\n  onToggle,\n  isMobile,\n}: PickerProps) => (\n  <IDPickerContainer>\n    <IDPickerLeft\n      align={isMobile ? undefined : 'center'}\n      justify={isMobile ? 'center' : undefined}\n      gap={isMobile ? '10px' : '16px'}\n      vertical={isMobile}\n    >\n      <IDPickerIcon isSuccess={variant === 'success'}>\n        <Icon\n          name={variant === 'primary' ? 'id_card_m' : 'tick_m'}\n          size={26}\n          color={\n            variant === 'primary'\n              ? '--icon-iconbox-brand-primary-default'\n              : '--icon-iconbox-success-primary-default'\n          }\n        />\n      </IDPickerIcon>\n      <IDPickerContent gap={isMobile ? undefined : '4px'}>\n        <TSpan font=\"body-l\" colorToken=\"--text-card-neutral-highlighted\">\n          Government-issued ID Document\n        </TSpan>\n        <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n          Upload 1 of the 3 types of required documents\n        </TSpan>\n      </IDPickerContent>\n    </IDPickerLeft>\n    {variant === 'primary' ? (\n      <Chevrolet\n        name=\"chevron_down_m\"\n        isOpen={isOpen}\n        size={14}\n        onClick={onToggle}\n        color=\"--icon_card-neutral-highlighted\"\n      />\n    ) : (\n      <Icon\n        onClick={onToggle}\n        name=\"edit_m\"\n        size={24}\n        color=\"--icon_card-neutral-highlighted\"\n      />\n    )}\n  </IDPickerContainer>\n);\n","import { useState } from 'react';\n\nimport {\n  Dropdown,\n  type DropdownTargetProps,\n  type DropdownValueType,\n} from '@/components/Dropdown';\n\nimport { type DocumentType } from '@/apollo/generated/types';\nimport { Picker } from './Picker';\n\ntype DwollaDocumentDropDownProps = {\n  documentOptions: DropdownValueType<DocumentType, string>[];\n  onSelect: (option: DropdownValueType<DocumentType, string>) => void;\n  isMobile: boolean;\n  variant: 'primary' | 'success';\n};\n\nexport const DwollaDocumentDropDown = ({\n  documentOptions,\n  onSelect,\n  isMobile,\n  variant,\n}: DwollaDocumentDropDownProps) => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Dropdown\n      usePortal={true}\n      usePopStyle={true}\n      isAnimation={false}\n      options={documentOptions}\n      hideIcons\n      placement=\"bottom-start\"\n      onSelectOption={(option) => {\n        onSelect(option);\n      }}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n    >\n      {({ inputRef, toggle }: DropdownTargetProps<HTMLDivElement>) => (\n        <div style={{ width: '100%' }} ref={inputRef}>\n          <Picker\n            variant={variant}\n            isOpen={open}\n            onToggle={toggle}\n            isMobile={isMobile}\n          />\n        </div>\n      )}\n    </Dropdown>\n  );\n};\n","import { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport { Index } from './styles';\n\ntype DocumentHeadingProps = {\n  heading: string;\n  index: number;\n};\n\nexport const DocumentHeading = ({ heading, index }: DocumentHeadingProps) => (\n  <Stack gap={8} align=\"center\">\n    <Index>\n      <TSpan\n        textAlign=\"center\"\n        font=\"footnote-bold\"\n        colorToken=\"--text-badge-brand-primary-default\"\n      >\n        {index}\n      </TSpan>\n    </Index>\n    <TSpan colorToken=\"--text-modal-neutral-highlighted\" font=\"body-l-bold\">\n      {heading}\n    </TSpan>\n  </Stack>\n);\n","/* eslint-disable no-console */\nimport { type MouseEventHandler, type MouseEvent, useMemo } from 'react';\nimport { TSpan } from '@/components/Typography';\nimport { TextWrapper, UploadInputContainer, IConTextWrapper } from './styles';\n\ninterface InputProps {\n  defaultPlaceHolder: string;\n  defaultSubPlaceHolder: string;\n  linkPlaceHolder?: string;\n  onDragOverText?: string;\n  isUploadStarted?: boolean;\n  isUploadComplete?: boolean;\n  isDraggingOver: boolean;\n  isMobile: boolean;\n  isTablet?: boolean;\n  isSingleSideUpload: boolean;\n  onClick?: MouseEventHandler<HTMLInputElement>;\n}\nexport const Input = ({\n  isUploadComplete,\n  isUploadStarted,\n  onClick,\n  defaultPlaceHolder,\n  defaultSubPlaceHolder,\n  isDraggingOver,\n  linkPlaceHolder,\n  onDragOverText,\n  isMobile,\n  isTablet,\n  isSingleSideUpload,\n}: InputProps) => {\n  const isUploading = useMemo(\n    () => (isUploadStarted && !isUploadComplete) || false,\n    [isUploadComplete, isUploadStarted],\n  );\n\n  const handleClick = (event: MouseEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    onClick?.(event);\n  };\n\n  return (\n    <UploadInputContainer\n      onClick={handleClick}\n      isDraggingOver={isDraggingOver}\n      isSingleSideUpload={isSingleSideUpload}\n    >\n      <IConTextWrapper>\n        <>\n          {!isUploading && !isUploadComplete && (\n            <TextWrapper>\n              <TSpan\n                font=\"body-l-bold\"\n                colorToken={\n                  isDraggingOver || isTablet || isMobile\n                    ? '--text-dragdrop-brand-primary-default'\n                    : '--text-dragdrop-header-neutral-default'\n                }\n              >\n                {isDraggingOver ? onDragOverText : defaultPlaceHolder}\n                {linkPlaceHolder && !isDraggingOver && (\n                  <TSpan colorToken=\"--text-dragdrop-brand-primary-default\">\n                    {' '}\n                    {linkPlaceHolder}\n                  </TSpan>\n                )}\n                .\n              </TSpan>\n              <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n                {defaultSubPlaceHolder}\n              </TSpan>\n            </TextWrapper>\n          )}\n        </>\n      </IConTextWrapper>\n    </UploadInputContainer>\n  );\n};\n","import { memo } from 'react';\nimport { applicationreviewTypes } from '@/constants/fileTypes';\nimport { Upload } from '@/features/upload/components';\nimport { Input } from './Input';\nimport { type UploadComponentProps } from './types';\n\nexport const UploadInput = memo(\n  ({\n    url,\n    maximumFileSize,\n    defaultPlaceHolder,\n    defaultSubPlaceHolder,\n    onContentChange,\n    onUploadFile,\n    isUploadStarted,\n    isUploadComplete,\n    linkPlaceHolder,\n    onDragOverText,\n    isMobile,\n    isTablet,\n    isSingleSideUpload,\n  }: UploadComponentProps) => (\n    <Upload<HTMLDivElement>\n      url={url}\n      maxSize={maximumFileSize}\n      acceptedFileTypes={applicationreviewTypes}\n      onContentChange={onContentChange}\n      uploadToS3={false}\n      onUploadFile={onUploadFile}\n    >\n      {({ triggerElRef, ...rest }) => (\n        <div ref={triggerElRef}>\n          <Input\n            isUploadComplete={isUploadComplete}\n            isUploadStarted={isUploadStarted}\n            onClick={rest.onClickHandler}\n            defaultPlaceHolder={defaultPlaceHolder}\n            defaultSubPlaceHolder={defaultSubPlaceHolder}\n            isDraggingOver={rest.isDraggingOver}\n            linkPlaceHolder={linkPlaceHolder}\n            onDragOverText={onDragOverText}\n            isMobile={isMobile}\n            isTablet={isTablet}\n            isSingleSideUpload={!!isSingleSideUpload}\n          />\n        </div>\n      )}\n    </Upload>\n  ),\n);\n","import { Stack } from '@/layout';\nimport { TSpan } from '@/components/Typography';\n\nimport {\n  DisplayFileContainer,\n  FileDetails,\n  DocumentContainer,\n  Image,\n  ClearFile,\n} from './styles';\n\nimport { type DisplayFileProps } from './types';\n\nexport const FileDisplay = ({\n  uploadedFileBlob,\n  fileName,\n  fileSize,\n  isSingleFileUpload,\n  clearFile,\n}: DisplayFileProps) => (\n  <DisplayFileContainer isSingleFileDownload={isSingleFileUpload}>\n    <FileDetails align=\"center\" justify=\"space-between\">\n      <Stack vertical>\n        <TSpan\n          font=\"body-m\"\n          colorToken=\"--text-card-header-neutral-highlighted\"\n        >\n          {fileName}\n        </TSpan>\n        <TSpan font=\"footnote\" colorToken=\"--text-card-neutral-default\">\n          {Math.ceil(fileSize / (1024 * 1024))} MB\n        </TSpan>\n      </Stack>\n      <ClearFile\n        onClick={() => clearFile()}\n        name=\"close_m\"\n        size={24}\n        color=\"--icon-card-neutral-default\"\n      />\n    </FileDetails>\n    <DocumentContainer isSingleFileDownload={isSingleFileUpload}>\n      <Image\n        isSingleFileDownload={isSingleFileUpload}\n        src={uploadedFileBlob}\n        alt=\"\"\n      />\n    </DocumentContainer>\n  </DisplayFileContainer>\n);\n","import { memo } from 'react';\nimport { UploadInput } from './UploadInput';\nimport { type UploadComponentProps } from './types';\nimport { FileDisplay } from './FileDisplay';\n\nexport const UploadComponent = memo(\n  ({\n    uploadedFile,\n    clearFile,\n    ...rest\n  }: { clearFile: () => void } & UploadComponentProps) =>\n    uploadedFile ? (\n      <FileDisplay\n        uploadedFileBlob={URL.createObjectURL(uploadedFile)}\n        fileName={uploadedFile.name}\n        fileSize={uploadedFile.size}\n        clearFile={clearFile}\n        isSingleFileUpload={!!rest.isSingleSideUpload}\n      />\n    ) : (\n      <UploadInput uploadedFile={uploadedFile} {...rest} />\n    ),\n);\n","import { Button } from '@/components/Button';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport * as EM from '@/components/ExtendedModal';\nimport { Icon } from '@/components/Icon';\nimport { TSpan } from '@/components/Typography';\nimport { Spacer } from '@/layout';\nimport { t } from 'i18next';\nimport { DocumentHeading } from './DocumentHeading';\nimport { UploadComponent } from './UploadComponent';\nimport { type UploadComponentProps } from './types';\n\ntype DwollaDocumentModalProps = {\n  contextData: DropdownValueType<string, string> | null;\n  uploadedFrontSideFile: UploadComponentProps['uploadedFile'];\n  uploadedBackSideFile: UploadComponentProps['uploadedFile'];\n  disable: boolean;\n  isXLSize: boolean;\n  isMobile: boolean;\n  isTablet: boolean;\n  isSingleSideUpload: boolean;\n  onConfirmAndSave: () => void;\n  onFrontSideUpload: UploadComponentProps['onUploadFile'];\n  onBackSideUpload: UploadComponentProps['onUploadFile'];\n  clearFrontSideFile: () => void;\n  clearBackSideFile: () => void;\n  maxUploadSize: number;\n} & Required<Pick<EM.IModal, 'open' | 'onClose'>>;\n\nexport const DwollaDocumentModal = ({\n  contextData,\n  uploadedBackSideFile,\n  uploadedFrontSideFile,\n  onClose,\n  open,\n  disable,\n  isMobile,\n  isTablet,\n  isXLSize,\n  isSingleSideUpload,\n  onFrontSideUpload,\n  onBackSideUpload,\n  clearBackSideFile,\n  clearFrontSideFile,\n  onConfirmAndSave,\n  maxUploadSize,\n}: DwollaDocumentModalProps) => (\n  <EM.Modal\n    open={open}\n    enableCloseButton\n    size={isXLSize ? EM.ModalSize.XL : EM.ModalSize.XXL}\n    onClose={onClose}\n  >\n    <EM.ModalHeader>\n      <TSpan\n        font=\"heading-xs-bold\"\n        colorToken=\"--text-modal-header-neutral-default\"\n      >\n        Upload Scan/Photo of Your {contextData ? contextData.label : ''}\n      </TSpan>\n    </EM.ModalHeader>\n    <EM.ModalBody\n      flexDirection={isMobile ? 'column' : 'row'}\n      gap={16}\n      maxHeight={600}\n    >\n      <div style={{ width: '100%' }}>\n        {!isSingleSideUpload && (\n          <DocumentHeading index={1} heading=\"Front side of your document\" />\n        )}\n        <Spacer height={16} />\n        <UploadComponent\n          url=\"\"\n          onUploadFile={onFrontSideUpload}\n          maximumFileSize={maxUploadSize}\n          defaultPlaceHolder={\n            isTablet || isMobile\n              ? t('noumena.money.application.review.add.file.touch')\n              : t('noumena.money.application.review.add.file.non.touch')\n          }\n          onDragOverText=\"Drag your file here\"\n          linkPlaceHolder={isTablet || isMobile ? '' : 'browse'}\n          defaultSubPlaceHolder={t(\n            'noumena.money.application.review.add.file.placeholder',\n            { maxUploadSize: String(maxUploadSize) },\n          )}\n          isUploadStarted={false}\n          isUploadComplete={false}\n          uploadedFile={uploadedFrontSideFile}\n          clearFile={clearFrontSideFile}\n          isMobile={isMobile}\n          isTablet={isTablet}\n          isSingleSideUpload={isSingleSideUpload}\n        />\n      </div>\n      {!isSingleSideUpload && (\n        <div style={{ width: '100%' }}>\n          <DocumentHeading index={2} heading=\"Back side of your document\" />\n          <Spacer height={16} />\n          <UploadComponent\n            url=\"\"\n            onUploadFile={onBackSideUpload}\n            maximumFileSize={maxUploadSize}\n            defaultPlaceHolder={\n              isTablet || isMobile\n                ? t('noumena.money.application.review.add.file.touch')\n                : t('noumena.money.application.review.add.file.non.touch')\n            }\n            onDragOverText=\"Drag your file here, or\"\n            linkPlaceHolder={isTablet || isMobile ? '' : 'browse'}\n            defaultSubPlaceHolder={t(\n              'noumena.money.application.review.add.file.placeholder',\n              { maxUploadSize: String(maxUploadSize) },\n            )}\n            isUploadStarted={false}\n            isUploadComplete={false}\n            uploadedFile={uploadedBackSideFile}\n            clearFile={clearBackSideFile}\n            isMobile={isMobile}\n            isTablet={isTablet}\n          />\n        </div>\n      )}\n    </EM.ModalBody>\n    <EM.ModalFooter flexDirection=\"row\" gap={16}>\n      <Button size=\"full\" onClick={onClose}>\n        Cancel\n      </Button>\n      <Button\n        onClick={onConfirmAndSave}\n        disabled={disable}\n        size=\"full\"\n        leftIcon={<Icon name=\"tick_m\" size={24} />}\n        primary\n        intent=\"positive\"\n      >\n        Confirm & Save\n      </Button>\n    </EM.ModalFooter>\n  </EM.Modal>\n);\n","import axios from 'axios';\nimport * as Sentry from '@sentry/react';\nimport parseAxiosError from './utils';\n\nexport type FileUploadProcessEventType = {\n  loaded: number;\n  total: number;\n};\n\nexport class ApplicationReviewFileServices {\n  private controller = {} as AbortController;\n\n  async uploadFileWithSignedUrl(signedUrl: string, file: File) {\n    try {\n      this.controller = new AbortController();\n      const headers = { 'Content-Type': file.type };\n      const response = await axios.put(signedUrl, file, {\n        headers,\n        signal: this.controller?.signal,\n      });\n      return response.status;\n    } catch (error: unknown) {\n      if (axios.isCancel(error)) {\n        return parseAxiosError(error);\n      }\n      Sentry.captureException(error, {\n        tags: {\n          section: 'uploadFileWithSignedUrl',\n        },\n      });\n      return parseAxiosError(error);\n    }\n  }\n\n  cancelUpload() {\n    if (this.controller?.abort) {\n      this.controller?.abort();\n    }\n  }\n}\n","import { type UploadDcoumentInput, type Exact } from '@/apollo/generated/types';\nimport { type UploadDocumentQuery } from '@/apollo/graphql';\nimport { type QueryResult } from '@apollo/client';\n\nconst mergeImages = (files: File[]): Promise<File> => {\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext('2d');\n\n  // Load all files as images asynchronously\n  const images = files.map(\n    (file) =>\n      new Promise<HTMLImageElement>((resolve) => {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          const image = new Image();\n          image.onload = () => resolve(image);\n          image.src = event?.target?.result as string;\n        };\n        reader.readAsDataURL(file);\n      }),\n  );\n\n  // Wait for all images to load\n  return Promise.all(images).then((loadedImages) => {\n    // Calculate the total height required for all images\n    let totalHeight = 0;\n    loadedImages.forEach((image) => {\n      totalHeight += image.height;\n    });\n\n    // Set the canvas dimensions to accommodate all images\n    canvas.width = loadedImages[0].width;\n    canvas.height = totalHeight;\n\n    // Position each image below the previous one\n    let currentY = 0;\n    loadedImages.forEach((image) => {\n      context?.drawImage(image, 0, currentY);\n      currentY += image.height;\n    });\n\n    // Return the merged image as a data URL\n    // return canvas.toDataURL();\n    return new Promise<File>((resolve) => {\n      canvas.toBlob((blob) => {\n        if (blob !== null) {\n          const mergedFile = new File([blob], 'merged.png', {\n            type: 'image/png',\n          });\n          resolve(mergedFile);\n        } else {\n          throw new Error('Error converting canvas to blob.');\n        }\n      }, 'image/png');\n    });\n  });\n};\nconst generateURL = (file: File) => URL.createObjectURL(file);\n\nconst getFileDetails = (\n  file: QueryResult<\n    UploadDocumentQuery,\n    Exact<{\n      input: UploadDcoumentInput;\n    }>\n  >,\n) => {\n  const { documentName, url } = file?.data?.uploadCustomerDocuments || {};\n  return { name: documentName, url };\n};\n\nexport const Utils = { mergeImages, generateURL, getFileDetails };\n","import { useCallback, useMemo, useState } from 'react';\n\nimport {\n  useUpdateCustomerDocumentMutation,\n  useUploadDocumentLazyQuery,\n} from '@/apollo/graphql';\n\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { ApplicationReviewFileServices } from '@/services/rest/ApplicationReviewfile';\nimport { useError, useToast } from '@/hooks';\n\nimport {\n  type DocumentInput,\n  DocumentType,\n  UploadFor,\n} from '@/apollo/generated/types';\n\nimport {\n  type State,\n  type ModalType,\n  type Files,\n} from '../components/DwollaDocumentUploader/types';\nimport { Utils } from '../utils/utils';\n\ntype UseApplicationReviewProps = {\n  onSuccessfulUpload: () => void;\n};\n\nexport const useApplicationReview = ({\n  onSuccessfulUpload,\n}: UseApplicationReviewProps) => {\n  const [state, setState] = useState<State>({ updatingIsInProgress: false });\n  const services = useMemo(() => new ApplicationReviewFileServices(), []);\n  const logger = useError();\n  const toast = useToast();\n  const allowedFileSizeInMB = 10;\n\n  const { openModal, closeModal, contextData, modalType } = useModalManager<\n    ModalType,\n    DropdownValueType<string, string>\n  >();\n\n  const [uploadDocumentMutation] = useUploadDocumentLazyQuery({\n    fetchPolicy: 'network-only',\n    onError: (error) => {\n      logger.logError(error, 'upload-document-v2');\n    },\n  });\n\n  const [updateDocument] = useUpdateCustomerDocumentMutation({\n    fetchPolicy: 'network-only',\n    onCompleted: onSuccessfulUpload,\n    onError: (error) => {\n      logger.logError(error, 'update-document-v2');\n    },\n  });\n\n  const documentOptions: DropdownValueType<DocumentType>[] = [\n    {\n      key: 'passport',\n      value: DocumentType.Passport,\n      type: 'value',\n      label: 'U.S. Passport',\n    },\n    {\n      key: 'license',\n      value: DocumentType.License,\n      type: 'value',\n      label: 'Driving License',\n    },\n    {\n      key: 'idcard',\n      value: DocumentType.IdCard,\n      type: 'value',\n      label: 'U.S. Government-issued Identification Card',\n    },\n  ];\n\n  const clearDocuments = () => {\n    setState({\n      frontSideFile: undefined,\n      backSideFile: undefined,\n      documentName: null,\n      documentUrl: '',\n      updatingIsInProgress: false,\n    });\n  };\n\n  const handleOpen = useCallback(\n    (option: DropdownValueType<DocumentType, string>) => {\n      if (state.documentType !== option.value) {\n        clearDocuments();\n      }\n      setState((previousState) => ({\n        ...previousState,\n        documentType: option.value,\n      }));\n      openModal('upload-document', option);\n    },\n    [openModal, state.documentType],\n  );\n\n  const updateFront = useCallback(\n    (frontSideFile?: File) => {\n      if (!frontSideFile) {\n        setState((s) => ({ ...s, frontSideFile }));\n        return;\n      }\n      const uploadFileSizeInMB = frontSideFile.size / 1024 / 1024;\n      if (uploadFileSizeInMB > allowedFileSizeInMB) {\n        toast.addErrorToast(\n          `file should be less than ${allowedFileSizeInMB} Mb`,\n        );\n        return;\n      }\n      setState((s) => ({ ...s, frontSideFile }));\n    },\n    [toast],\n  );\n  const updateBack = useCallback(\n    (backSideFile?: File) => {\n      if (!backSideFile) {\n        setState((s) => ({ ...s, backSideFile }));\n        return;\n      }\n      const uploadFileSizeInMB = backSideFile.size / 1024 / 1024;\n      if (uploadFileSizeInMB > allowedFileSizeInMB) {\n        toast.addErrorToast(\n          `file should be less than ${allowedFileSizeInMB} Mb`,\n        );\n        return;\n      }\n      setState((s) => ({ ...s, backSideFile }));\n    },\n    [toast],\n  );\n\n  const getNameAndUrl = useCallback(\n    (documentName: string, contentType: string) =>\n      uploadDocumentMutation({\n        variables: {\n          input: {\n            documentName,\n            contentType,\n          },\n        },\n      }),\n    [uploadDocumentMutation],\n  );\n\n  const handleClose = useCallback(() => {\n    clearDocuments();\n    closeModal();\n  }, [closeModal]);\n\n  const confirmAndSave = useCallback(async () => {\n    const { frontSideFile, backSideFile } = state;\n\n    if (frontSideFile && backSideFile) {\n      const mergedFile = await Utils.mergeImages([frontSideFile, backSideFile]);\n      setState((previousState) => ({ ...previousState, mergedFile }));\n    }\n\n    closeModal();\n  }, [closeModal, state]);\n\n  const generateDocumentInputForAllFiles = useCallback(\n    async (files: Files): Promise<DocumentInput[]> => {\n      let documents: DocumentInput[] = [];\n      const { frontSideFile, backSideFile, mergedFile } = files;\n      const front = await getNameAndUrl(frontSideFile.name, frontSideFile.type);\n      const back = await getNameAndUrl(backSideFile.name, backSideFile.type);\n      const merged = await getNameAndUrl(mergedFile.name, mergedFile.type);\n\n      const { name: frontFileName, url: frontFileUrl } =\n        Utils.getFileDetails(front);\n\n      const { name: backFileName, url: backFileUrl } =\n        Utils.getFileDetails(back);\n\n      const { name: mergedFileName, url: mergedFileUrl } =\n        Utils.getFileDetails(merged);\n\n      const isAllDataAvailable =\n        !!frontFileName &&\n        !!frontFileUrl &&\n        !!backFileName &&\n        !!backFileUrl &&\n        !!mergedFileName &&\n        !!mergedFileUrl;\n\n      if (isAllDataAvailable) {\n        const frontFileResponse = await services.uploadFileWithSignedUrl(\n          frontFileUrl,\n          frontSideFile,\n        );\n\n        const backFileResponse = await services.uploadFileWithSignedUrl(\n          backFileUrl,\n          backSideFile,\n        );\n\n        const mergedFileResponse = await services.uploadFileWithSignedUrl(\n          mergedFileUrl,\n          mergedFile,\n        );\n\n        const isResponseSuccessful =\n          frontFileResponse === 200 &&\n          backFileResponse === 200 &&\n          mergedFileResponse === 200;\n\n        if (isResponseSuccessful) {\n          documents = [\n            { name: frontFileName, uploadFor: UploadFor.Front },\n            { name: backFileName, uploadFor: UploadFor.Back },\n            { name: mergedFileName, uploadFor: UploadFor.Merged },\n          ];\n        }\n      }\n\n      return documents;\n    },\n    [getNameAndUrl, services],\n  );\n\n  const generateDocumentInputForFrontFile = useCallback(\n    async (frontSideFile: File): Promise<DocumentInput[]> => {\n      let documents: DocumentInput[] = [];\n      const front = await getNameAndUrl(frontSideFile.name, frontSideFile.type);\n      const { name: frontFileName, url: frontFileUrl } =\n        Utils.getFileDetails(front);\n      if (frontFileName && frontFileUrl) {\n        const frontFileResponse = await services.uploadFileWithSignedUrl(\n          frontFileUrl,\n          frontSideFile,\n        );\n\n        if (frontFileResponse === 200) {\n          documents = [{ name: frontFileName, uploadFor: UploadFor.Front }];\n        }\n      }\n\n      return documents;\n    },\n    [getNameAndUrl, services],\n  );\n\n  const handleContinue = useCallback(async () => {\n    let documents: DocumentInput[] = [];\n    setState((previousState) => ({\n      ...previousState,\n      updatingIsInProgress: true,\n    }));\n    const { frontSideFile, backSideFile, mergedFile, documentType } = state;\n\n    const allFilesAreAvailable =\n      !!frontSideFile && !!backSideFile && !!mergedFile;\n    const onlyFrontFileIsAvailable =\n      !!frontSideFile && !backSideFile && !mergedFile;\n\n    try {\n      if (allFilesAreAvailable) {\n        documents = await generateDocumentInputForAllFiles({\n          frontSideFile,\n          backSideFile,\n          mergedFile,\n        });\n      }\n      if (onlyFrontFileIsAvailable) {\n        documents = await generateDocumentInputForFrontFile(frontSideFile);\n      }\n\n      if (documents.length && documentType) {\n        await updateDocument({\n          variables: {\n            input: {\n              documents,\n              type: documentType,\n            },\n          },\n        });\n      }\n    } catch (error) {\n      logger.logError(error, 'upload-document-mutation', true);\n    } finally {\n      setState((previousState) => ({\n        ...previousState,\n        updatingIsInProgress: false,\n      }));\n    }\n  }, [\n    generateDocumentInputForAllFiles,\n    generateDocumentInputForFrontFile,\n    logger,\n    state,\n    updateDocument,\n  ]);\n\n  const isOpen = modalType === 'upload-document';\n\n  const disable = !state.frontSideFile;\n\n  const isSingleSideUpload = contextData?.value === DocumentType.IdCard;\n\n  return {\n    documentOptions,\n    services,\n    button: {\n      disable,\n    },\n    file: {\n      updateFront,\n      updateBack,\n      confirmAndSave,\n      isSingleSideUpload,\n      handleContinue,\n      updatingIsInProgress: state.updatingIsInProgress,\n      frontSide: state.frontSideFile,\n      backSide: state.backSideFile,\n    },\n    modal: {\n      isOpen,\n      handleOpen,\n      contextData,\n      handleClose,\n    },\n  };\n};\n"],"names":["DisplayFileContainer","styled","div","isSingleFileDownload","css","sizes","TABLET_L","MOBILE_MAX","FileDetails","Stack","ClearFile","Icon","DocumentContainer","Image","img","UploadInputContainer","isSingleSideUpload","isDraggingOver","TextWrapper","IConTextWrapper","IDPickerContainer","attrs","gap","align","IDPickerLeft","IDPickerIcon","span","isSuccess","IDPickerContent","vertical","Chevrolet","isOpen","Index","justify","Picker","variant","onToggle","isMobile","jsxs","undefined","jsx","TSpan","DwollaDocumentDropDown","documentOptions","onSelect","open","setOpen","useState","Dropdown","option","inputRef","toggle","width","DocumentHeading","heading","index","Input","isUploadComplete","isUploadStarted","onClick","defaultPlaceHolder","defaultSubPlaceHolder","linkPlaceHolder","onDragOverText","isTablet","isUploading","useMemo","event","preventDefault","Fragment","UploadInput","memo","url","maximumFileSize","onContentChange","onUploadFile","Upload","applicationreviewTypes","triggerElRef","rest","onClickHandler","FileDisplay","uploadedFileBlob","fileName","fileSize","isSingleFileUpload","clearFile","Math","ceil","UploadComponent","uploadedFile","URL","createObjectURL","name","size","DwollaDocumentModal","contextData","uploadedBackSideFile","uploadedFrontSideFile","onClose","disable","isXLSize","onFrontSideUpload","onBackSideUpload","clearBackSideFile","clearFrontSideFile","onConfirmAndSave","maxUploadSize","EM.Modal","EM","XL","XXL","EM.ModalHeader","label","EM.ModalBody","Spacer","t","String","EM.ModalFooter","Button","ApplicationReviewFileServices","controller","uploadFileWithSignedUrl","signedUrl","file","AbortController","headers","type","axios","put","signal","_a","status","error","isCancel","parseAxiosError","Sentry","tags","section","cancelUpload","abort","_b","mergeImages","files","canvas","document","createElement","context","getContext","images","map","Promise","resolve","reader","FileReader","onload","image","src","target","result","readAsDataURL","all","then","loadedImages","totalHeight","forEach","height","currentY","drawImage","toBlob","blob","mergedFile","File","Error","generateURL","getFileDetails","documentName","data","uploadCustomerDocuments","Utils","useApplicationReview","onSuccessfulUpload","state","setState","updatingIsInProgress","services","logger","useError","toast","useToast","allowedFileSizeInMB","openModal","closeModal","modalType","useModalManager","uploadDocumentMutation","useUploadDocumentLazyQuery","fetchPolicy","onError","logError","updateDocument","useUpdateCustomerDocumentMutation","onCompleted","key","value","DocumentType","Passport","License","IdCard","clearDocuments","frontSideFile","backSideFile","documentUrl","handleOpen","useCallback","documentType","previousState","updateFront","s","addErrorToast","updateBack","getNameAndUrl","contentType","variables","input","handleClose","confirmAndSave","generateDocumentInputForAllFiles","documents","front","back","merged","frontFileName","frontFileUrl","backFileName","backFileUrl","mergedFileName","mergedFileUrl","frontFileResponse","backFileResponse","mergedFileResponse","uploadFor","UploadFor","Front","Back","Merged","generateDocumentInputForFrontFile","handleContinue","allFilesAreAvailable","onlyFrontFileIsAvailable","length","button","frontSide","backSide","modal"],"mappings":"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"}