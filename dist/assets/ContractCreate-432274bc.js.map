{"version":3,"file":"ContractCreate-432274bc.js","sources":["../../src/components/IncrementalNumberField/IncrementalNumberField.tsx","../../src/features/contracts/hooks/contractForm.ts","../../src/features/contracts/components/ContractForm/styles.ts","../../src/features/contracts/components/ContractLegalSelectors/ContractCountrySelector.tsx","../../src/features/contracts/components/ContractLegalSelectors/ContractRegionSelector.tsx","../../src/features/contracts/components/ContractLegalSelectors/ContractLegalRegionSelector.tsx","../../src/features/contracts/components/ContractForm/ContractForm.tsx","../../src/features/contracts/components/ContractForm/ContractFormHeader.tsx","../../src/features/contracts/components/LinkedStatementsOfWork/LinkedStatementsOfWorkWizard/EditMode.tsx","../../src/features/contracts/components/LinkedStatementsOfWork/LinkedStatementsOfWorkWizard/LinkedStatementsOfWorkWizard.tsx","../../src/features/contracts/components/LinkedStatementsOfWork/LinkedStatementsOfWorkForm.tsx","../../src/features/contracts/hooks/linkedStatementsOfWork.ts","../../src/screens/Contracts/ContractForm/useContractFormScreen.ts","../../src/screens/Contracts/ContractForm/styles.ts","../../src/screens/Contracts/ContractForm/index.tsx"],"sourcesContent":["import React, { type ComponentProps } from 'react';\nimport { TextField } from '../TextField';\n\ntype IncrementalNumberFieldProps = ComponentProps<typeof TextField> & {\n  step?: number;\n  min?: number;\n  max?: number;\n};\n\nexport const IncrementalNumberField = React.forwardRef<\n  HTMLInputElement,\n  IncrementalNumberFieldProps\n>(({ step = 1, min, max, ...textFieldProps }, ref) => (\n  <TextField\n    ref={ref}\n    type=\"number\"\n    step={step}\n    min={min}\n    max={max}\n    {...textFieldProps}\n  />\n));\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm, useFormContext } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { type PickRequiredRestDeepPartial } from '@/utils/types';\n\nexport const contractFormSchema = yup.object({\n  title: yup\n    .string()\n    .required('The title of the Contract cannot be empty.')\n    .trim()\n    .ensure()\n    .label('Title'),\n  noumId: yup.string().required().ensure().label('Noum Assignment'),\n  buyerId: yup.string().required().label('Buyer'),\n  serviceProviderId: yup.string().required().label('Service Provider'),\n  buyerDetailsComplete: yup.boolean().is([true]),\n  serviceProviderDetailsComplete: yup.boolean().is([true]),\n  effectiveDate: yup.date().required().label('Effective Date'),\n  terminationNotice: yup\n    .string()\n    .ensure()\n    .optional()\n    .label('Termination Notice')\n    .typeError(({ label, type }) => `${label} must be a ${type}.`),\n  governingLaw: yup\n    .object({\n      country: yup.string().required().label('Country'),\n      region: yup.string().required().label('Region'),\n    })\n    .required()\n    .label('Governing Law'),\n  arbitration: yup\n    .object({\n      country: yup.string().required().label('Country'),\n      region: yup.string().required().label('Region'),\n    })\n    .required()\n    .label('Arbitration'),\n  linkedStatementsOfWork: yup\n    .array(\n      yup\n        .object({\n          statementOfWorkId: yup.string().required().ensure(),\n        })\n        .required(),\n    )\n    .required(),\n});\n\nexport type ContractFormValues = yup.InferType<typeof contractFormSchema>;\nexport type DraftContractFormValues = PickRequiredRestDeepPartial<\n  ContractFormValues,\n  'noumId'\n>;\n\ninterface UseContractFormOptions {\n  defaultValues?: DefaultValues<ContractFormValues>;\n}\n\nexport function useContractForm({\n  defaultValues,\n}: UseContractFormOptions = {}) {\n  return useForm<ContractFormValues>({\n    defaultValues,\n    resolver: yupResolver(contractFormSchema),\n    mode: 'onSubmit',\n  });\n}\n\nexport function useContractFormContext() {\n  return useFormContext<ContractFormValues>();\n}\n","import styled from 'styled-components';\nimport { Card as OriginalCard } from '@/components/Card';\nimport { Separator as OriginalSeparator } from '@/components/Separator/Separator';\nimport { mediaSizes } from '@/constants/devices';\n\nconst Card = styled(OriginalCard)`\n  padding: 24px;\n  // Don't clip dropdown popover layer\n  overflow: visible;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    border-radius: 0;\n  }\n`;\n\nconst Separator = styled(OriginalSeparator)`\n  width: 100%;\n`;\n\nexport default {\n  Card,\n  Separator,\n};\n","import {\n  ApiEntityPickerFieldWithLocalSearch,\n  type ApiEntityPickerFieldWithLocalSearchProps,\n} from '@/components/ApiEntityPickerField';\nimport { ApiEntitySelectionPreviewComponent } from '@/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { Flag } from '@/components/Flag';\nimport { type FlagProps } from '@/components/Flag/Flag';\nimport { LegalRegionService } from '../../services/LegalRegionService';\n\nexport const countryOptions: DropdownValueType<string>[] =\n  LegalRegionService.getAllCountries().map((country) => ({\n    type: 'value',\n    key: country.code,\n    label: country.label,\n    value: country.code,\n    icon: <Flag flag={`flag_${country.code}` as FlagProps['flag']} size={24} />,\n  }));\n\ntype ContractCountrySelectorProps = Omit<\n  ApiEntityPickerFieldWithLocalSearchProps<string>,\n  'onChange' | 'options'\n> & {\n  onChange: (value: string | undefined) => void;\n};\n\nexport function ContractCountrySelector({\n  onChange,\n  ...apiEntityPickerProps\n}: ContractCountrySelectorProps) {\n  return (\n    <ApiEntityPickerFieldWithLocalSearch\n      {...apiEntityPickerProps}\n      hideIcons={false}\n      inputSize=\"small\"\n      onChange={(option) => onChange(option?.key)}\n      options={countryOptions}\n      renderSelectionPreviewComponent={(props) => (\n        <ApiEntitySelectionPreviewComponent\n          {...props}\n          onChange={() => onChange('')}\n          bold={false}\n        />\n      )}\n    />\n  );\n}\n","import { useMemo } from 'react';\nimport {\n  ApiEntityPickerFieldWithLocalSearch,\n  type ApiEntityPickerFieldWithLocalSearchProps,\n} from '@/components/ApiEntityPickerField';\nimport { ApiEntitySelectionPreviewComponent } from '@/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { LegalRegionService } from '../../services/LegalRegionService';\n\ntype ContractCountryRegionSelectorProps = Omit<\n  ApiEntityPickerFieldWithLocalSearchProps<string>,\n  'onChange' | 'options'\n> & {\n  onChange: (value: string | undefined) => void;\n  country: string | undefined;\n};\n\nexport function ContractCountryRegionSelector({\n  onChange,\n  country,\n  ...apiEntityPickerProps\n}: ContractCountryRegionSelectorProps) {\n  const options = useMemo<DropdownValueType<string>[]>(() => {\n    if (!country || !LegalRegionService.hasPresetRegions(country)) {\n      return [];\n    }\n\n    return LegalRegionService.getAllRegionsForCountryCode(country).map(\n      (region) => ({\n        type: 'value',\n        key: region.code,\n        label: region.label,\n        value: region.code,\n      }),\n    );\n  }, [country]);\n\n  return (\n    <ApiEntityPickerFieldWithLocalSearch\n      {...apiEntityPickerProps}\n      inputSize=\"small\"\n      onChange={(option) => onChange(option?.key)}\n      options={options}\n      renderSelectionPreviewComponent={(props) => (\n        <ApiEntitySelectionPreviewComponent\n          {...props}\n          bold={false}\n          onChange={() => onChange('')}\n        />\n      )}\n    />\n  );\n}\n","import { Controller, type Path } from 'react-hook-form';\nimport { Stack, StackItem } from '@/layout';\nimport { getTouchedErrorProps } from '@/utils/forms';\nimport { TextField } from '@/components/TextField';\nimport {\n  type ContractFormValues,\n  useContractFormContext,\n} from '../../hooks/contractForm';\nimport { ContractCountrySelector } from './ContractCountrySelector';\nimport { ContractCountryRegionSelector } from './ContractRegionSelector';\n\nimport { LegalRegionService } from '../../services/LegalRegionService';\n\ntype LegalSections = Extract<\n  Path<ContractFormValues>,\n  'governingLaw' | 'arbitration'\n>;\n\ninterface ContractLegalRegionSelectorProps {\n  name: LegalSections;\n}\n\nexport function ContractLegalRegionSelector({\n  name,\n}: ContractLegalRegionSelectorProps) {\n  const { control, watch, setValue } = useContractFormContext();\n\n  const country = watch(`${name}.country` as const);\n\n  return (\n    <Stack gap={16} fullWidth>\n      <StackItem grow={1} basis=\"50%\">\n        <Controller<ContractFormValues>\n          name={`${name}.country` as const}\n          control={control}\n          render={({ field: { onChange, value }, fieldState }) => (\n            <ContractCountrySelector\n              disabled\n              placeholderText=\"Country\"\n              maxContainerHeight=\"300px\"\n              value={value}\n              onChange={(newValue) => {\n                onChange(newValue);\n                setValue(`${name}.region` as const, '');\n              }}\n              {...getTouchedErrorProps(fieldState)}\n            />\n          )}\n        />\n      </StackItem>\n\n      {country && !LegalRegionService.hasNoRegions(country) && (\n        <StackItem grow={1} basis=\"50%\">\n          <Controller<ContractFormValues>\n            name={`${name}.region` as const}\n            control={control}\n            render={({ field: { onChange, value }, fieldState }) => {\n              if (LegalRegionService.hasPresetRegions(country)) {\n                return (\n                  <ContractCountryRegionSelector\n                    placeholderText={\n                      LegalRegionService.hasState(country) ? 'State' : 'Region'\n                    }\n                    maxContainerHeight=\"300px\"\n                    hideIcons={true}\n                    hideLeftIconPlace={false}\n                    country={country}\n                    value={value}\n                    onChange={onChange}\n                    {...getTouchedErrorProps(fieldState)}\n                  />\n                );\n              }\n\n              if (LegalRegionService.hasCustomRegion(country)) {\n                return (\n                  <TextField\n                    value={value}\n                    onChange={onChange}\n                    placeholder=\"Region\"\n                    inputSize=\"small\"\n                  />\n                );\n              }\n\n              return <></>;\n            }}\n          />\n        </StackItem>\n      )}\n    </Stack>\n  );\n}\n","import { Controller } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { useMemo } from 'react';\nimport { DatePicker } from '@/components/DatePicker';\nimport { FormControl } from '@/components/FormControl';\nimport { IncrementalNumberField } from '@/components/IncrementalNumberField';\nimport { TextField } from '@/components/TextField';\nimport { TSpan } from '@/components/Typography';\nimport { ContactSelector } from '@/features/noumContacts/components/ContactSelector';\nimport { Stack, StackItem } from '@/layout';\nimport { getErrorProps } from '@/utils/forms';\nimport Tooltip, { TooltipMessage } from '@/components/Tooltip';\nimport { type ContractFragment } from '@/apollo/graphql';\nimport { type Maybe } from '@/common/types';\nimport { mapNoumContactToSearchableNoumContact } from '@/features/noumContacts/utils/contactMapper';\nimport {\n  type ContractFormValues,\n  useContractFormContext,\n} from '../../hooks/contractForm';\nimport { type ContractStatus } from '../../types';\nimport { DocumentStatusTag } from '../DocumentStatusTag/DocumentStatusTag';\nimport { ProjectNoumSelector } from '../ProjectNoumSelector/ProjectNoumSelector';\nimport S from './styles';\nimport { ContractLegalRegionSelector } from '../ContractLegalSelectors/ContractLegalRegionSelector';\n\ninterface ContractFormProps {\n  documentStatus: ContractStatus;\n  isPreDraft: boolean;\n  disableNoum?: boolean;\n  contract?: Maybe<ContractFragment>;\n  onContactDetailsUpdated?(): void;\n}\n\nexport function ContractForm({\n  documentStatus,\n  isPreDraft,\n  disableNoum = false,\n  contract,\n  onContactDetailsUpdated,\n}: ContractFormProps) {\n  const { t } = useTranslation();\n  const { control, setValue, watch } = useContractFormContext();\n\n  const [noumId, buyerId, serviceProviderId] = watch([\n    'noumId',\n    'buyerId',\n    'serviceProviderId',\n  ]);\n\n  const preselectedBuyer = useMemo(\n    () => mapNoumContactToSearchableNoumContact(contract?.buyer),\n    [contract?.buyer],\n  );\n  const preselectedServiceProvider = useMemo(\n    () => mapNoumContactToSearchableNoumContact(contract?.seller),\n    [contract?.seller],\n  );\n\n  return (\n    <>\n      <S.Card>\n        <Stack gap={16} justify=\"stretch\" align=\"center\">\n          <TSpan font=\"heading-xs-bold\">\n            {t('noumena.contract_form.fields.title')}\n          </TSpan>\n          <StackItem grow>\n            <Controller<ContractFormValues, 'title'>\n              name=\"title\"\n              control={control}\n              render={({ field, fieldState }) => (\n                <TextField\n                  inputSize=\"small\"\n                  rightIcon={\n                    <Tooltip top={30} left={20}>\n                      <TooltipMessage>\n                        {t('noumena.contract_form.title.tooltip')}\n                      </TooltipMessage>\n                    </Tooltip>\n                  }\n                  {...field}\n                  {...getErrorProps(fieldState)}\n                />\n              )}\n            />\n          </StackItem>\n          <DocumentStatusTag status={documentStatus} size=\"medium\" />\n        </Stack>\n      </S.Card>\n      <S.Card>\n        <Stack vertical gap={16}>\n          <FormControl\n            label={t('noumena.contract_form.fields.noum_assignment')}\n            description={\n              disableNoum\n                ? undefined\n                : t('noumena.contract_form.fields.noum_assignment.description')\n            }\n          >\n            <Controller<ContractFormValues, 'noumId'>\n              name=\"noumId\"\n              render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                <ProjectNoumSelector\n                  {...fieldProps}\n                  {...getErrorProps(fieldState)}\n                  disabled={disableNoum}\n                  label=\"\"\n                  preselectedItem={contract?.linkedNoum}\n                  inputSize=\"small\"\n                  placeholderText={t(\n                    'noumena.contract_form.fields.noum_assignment.placeholder',\n                  )}\n                />\n              )}\n            />\n          </FormControl>\n          <FormControl label={t('noumena.contract_form.fields.buyer')}>\n            <Controller<ContractFormValues, 'buyerId'>\n              name=\"buyerId\"\n              render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                <ContactSelector\n                  {...fieldProps}\n                  {...getErrorProps(fieldState)}\n                  noumId={noumId}\n                  inputSize=\"small\"\n                  fullWidth\n                  label=\"\"\n                  excludedIds={[serviceProviderId]}\n                  placeholderText={t(\n                    'noumena.contract_form.fields.buyer.placeholder',\n                  )}\n                  onContactInfoValidation={(isValid) => {\n                    setValue('buyerDetailsComplete', isValid, {\n                      shouldValidate: true,\n                      shouldDirty: true,\n                    });\n                  }}\n                  disabled={isPreDraft}\n                  preselectedContact={preselectedBuyer}\n                  onContactDetailsUpdate={onContactDetailsUpdated}\n                />\n              )}\n            />\n          </FormControl>\n          <S.Separator />\n\n          <FormControl\n            label={t('noumena.contract_form.fields.service_provider')}\n          >\n            <Controller<ContractFormValues, 'serviceProviderId'>\n              name=\"serviceProviderId\"\n              render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                <ContactSelector\n                  {...fieldProps}\n                  {...getErrorProps(fieldState)}\n                  noumId={noumId}\n                  inputSize=\"small\"\n                  label=\"\"\n                  fullWidth\n                  excludedIds={[buyerId]}\n                  placeholderText={t(\n                    'noumena.contract_form.fields.buyer.placeholder',\n                  )}\n                  disabled={isPreDraft}\n                  preselectedContact={preselectedServiceProvider}\n                  onContactInfoValidation={(isValid) => {\n                    setValue('serviceProviderDetailsComplete', isValid, {\n                      shouldValidate: true,\n                      shouldDirty: true,\n                    });\n                  }}\n                  onContactDetailsUpdate={onContactDetailsUpdated}\n                />\n              )}\n            />\n          </FormControl>\n          <S.Separator />\n\n          <Stack gap={16} justify=\"stretch\" fullWidth>\n            <FormControl\n              label={t('noumena.contract_form.fields.effective_date')}\n            >\n              <Controller<ContractFormValues, 'effectiveDate'>\n                name=\"effectiveDate\"\n                control={control}\n                render={({ field: { ref, ...fieldProps }, fieldState }) => (\n                  <DatePicker\n                    {...fieldProps}\n                    fullSize\n                    size=\"small\"\n                    disabled={isPreDraft}\n                    {...getErrorProps(fieldState)}\n                    required\n                  />\n                )}\n              />\n            </FormControl>\n            <FormControl\n              label={t('noumena.contract_form.fields.termination_notice')}\n              optional\n            >\n              <Stack gap={12} align=\"center\">\n                <Controller<ContractFormValues, 'terminationNotice'>\n                  name=\"terminationNotice\"\n                  control={control}\n                  render={({ field, fieldState }) => (\n                    <IncrementalNumberField\n                      step={1}\n                      min={0}\n                      max={90}\n                      inputSize=\"small\"\n                      disabled={isPreDraft}\n                      {...field}\n                      {...getErrorProps(fieldState)}\n                    />\n                  )}\n                />\n                <TSpan font=\"body-l\" colorToken=\"--text-card-neutral-default\">\n                  {t('noumena.contract_form.fields.termination_notice.unit')}\n                </TSpan>\n              </Stack>\n            </FormControl>\n          </Stack>\n          <S.Separator />\n\n          <Stack gap={16} justify=\"stretch\" fullWidth>\n            <FormControl\n              label={t('noumena.contract_form.fields.governing_law')}\n            >\n              <ContractLegalRegionSelector name=\"governingLaw\" />\n            </FormControl>\n            <FormControl label={t('noumena.contract_form.fields.arbitration')}>\n              <ContractLegalRegionSelector name=\"arbitration\" />\n            </FormControl>\n          </Stack>\n        </Stack>\n      </S.Card>\n    </>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { generatePath } from 'react-router';\nimport routes from '@/constants/routes';\nimport { useError, useToast } from '@/hooks';\nimport { useFormLocalDraft } from '@/hooks/formLocalDraft';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { StickyFormHeader } from '@/components/FormHeader/StickyFormHeader/StickyFormHeader';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport {\n  contractFormSchema,\n  type ContractFormValues,\n  type DraftContractFormValues,\n} from '../../hooks/contractForm';\nimport { type Contract, type ContractBasic, DocumentType } from '../../types';\nimport { DeleteDocumentConfirmationModal } from '../DeleteDocumentConfirmationModal/DeleteDocumentConfirmationModal';\nimport * as DocumentHeader from '../DocumentHeader/DocumentHeader';\nimport { ContractUtils } from '../../utils/contract';\nimport { useContractPermissions } from '../../hooks/contractPermissions';\n\ntype ModalType = 'delete';\n\ntype ContractFormHeaderProps = {\n  contract: ContractBasic | null;\n  isEditMode: boolean;\n  onSaveDraft(values: DraftContractFormValues): Promise<Contract | null>;\n  onSaveDraftSuccess?(contract: Contract): void;\n  onDeleteDraft(): Promise<void>;\n  onGoBackToList(): void;\n};\n\nexport const ContractFormHeader = ({\n  contract,\n  isEditMode,\n  onSaveDraft,\n  onSaveDraftSuccess,\n  onDeleteDraft,\n  onGoBackToList,\n}: ContractFormHeaderProps) => {\n  const { navigateAndPassOrigin } = useNavigateWithOrigin();\n  const { t } = useTranslation();\n  const { addPrimaryIconToast, addSuccessIconToast, addErrorToast } =\n    useToast();\n  const { logError } = useError();\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const ContractPermissions = useContractPermissions();\n\n  const form = useFormContext<ContractFormValues>();\n  const {\n    watch,\n    formState: { isDirty },\n  } = form;\n\n  const { lastSavedAt, markLocalChangesAsSaved } = useFormLocalDraft({ form });\n\n  const documentTitle = watch('title');\n\n  const handlePreview = async () => {\n    if (!contract?._id) {\n      return;\n    }\n\n    if (!ContractPermissions.canSeeSummary(contract)) {\n      await form.trigger();\n      addErrorToast(t('noumena.contract_form.toast.not_completed'));\n      return;\n    }\n\n    if (isDirty) {\n      await handleSaveDraft();\n    }\n    navigateAndPassOrigin(\n      generatePath(routes.CONTRACT_PREVIEW, { id: contract._id }),\n    );\n  };\n\n  const handleSaveDraft = async () => {\n    const values = contractFormSchema.cast(form.getValues());\n\n    if (!values.noumId) {\n      addPrimaryIconToast(t('noumena.contract_form.toast.no_noum_selected'));\n      return;\n    }\n\n    try {\n      const updatedDraft = await onSaveDraft(values);\n      if (!updatedDraft) {\n        return;\n      }\n\n      onSaveDraftSuccess?.(updatedDraft);\n      markLocalChangesAsSaved();\n      addSuccessIconToast(t('noumena.contract_form.toast.draft_saved'));\n    } catch (err) {\n      logError(err, 'contract-save-draft');\n    }\n  };\n\n  const handleDeleteDraft = () => {\n    if (isEditMode) {\n      openModal('delete');\n    } else {\n      onGoBackToList();\n    }\n  };\n\n  const confirmDraftDelete = async () => {\n    try {\n      await onDeleteDraft();\n      addSuccessIconToast(t('noumena.contract_form.toast.draft_deleted'));\n      closeModal();\n      onGoBackToList();\n    } catch (err) {\n      closeModal();\n      logError(err, 'contract-delete-draft');\n    }\n  };\n\n  return (\n    <>\n      <StickyFormHeader\n        title={\n          isEditMode\n            ? t('noumena.contract_form.title.edit')\n            : t('noumena.contract_form.title.create')\n        }\n        hasUnsavedChanges={isDirty}\n        updatedAt={lastSavedAt?.toISOString()}\n        buttons={\n          <>\n            <DocumentHeader.DeleteButton\n              onClick={handleDeleteDraft}\n              isDraft={ContractUtils.isDraft(contract)}\n            />\n            <DocumentHeader.SaveButton\n              isDraft={ContractUtils.isDraft(contract)}\n              onClick={handleSaveDraft}\n              disabled={!isEditMode || !isDirty}\n            />\n            <DocumentHeader.SummaryButton\n              onClick={handlePreview}\n              softDisabled={\n                !isEditMode || !ContractPermissions.canSeeSummary(contract)\n              }\n            />\n          </>\n        }\n      />\n      <DeleteDocumentConfirmationModal\n        isOpen={modalType === 'delete'}\n        isDraft={ContractUtils.isDraft(contract)}\n        documentName={documentTitle}\n        documentType={DocumentType.Contract}\n        onCancel={closeModal}\n        onDelete={confirmDraftDelete}\n      />\n    </>\n  );\n};\n","import { Controller, useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { ApiEntityPickerFieldWithLocalSearch } from '@/components/ApiEntityPickerField';\nimport { ApiEntitySelectionPreviewComponent } from '@/components/ApiEntityPickerField/ApiEntitySelectionPreviewComponent';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { useFieldArrayWizardFormContext } from '@/components/FieldArrayWizard/shared';\nimport { type CreateEditOptions } from '@/components/FieldArrayWizard/shared/types';\nimport { type ContractFormValues } from '@/features/contracts/hooks/contractForm';\nimport { StackItem } from '@/layout';\nimport { DocumentStatusTag } from '../../DocumentStatusTag/DocumentStatusTag';\nimport { type LinkedStatementOfWorkItem } from '../types';\n\ntype EditModeProps = CreateEditOptions<\n  ContractFormValues,\n  'linkedStatementsOfWork'\n> & {\n  options: DropdownValueType<LinkedStatementOfWorkItem, string>[];\n};\n\nexport function EditMode({ index, fieldNamePrefix, options }: EditModeProps) {\n  const { t } = useTranslation();\n\n  const { watch } = useFormContext<ContractFormValues>();\n  const { deleteItem } = useFieldArrayWizardFormContext<\n    ContractFormValues,\n    'linkedStatementsOfWork'\n  >();\n\n  const fields = watch('linkedStatementsOfWork');\n\n  // Need to keep the options list for each field to show the selected value correctly,\n  // but also need to remove already used IDs from the list for new fields.\n  const selectedIds = fields.map((field) => field.statementOfWorkId);\n  const possibleOptionsLeft = options.filter(\n    (option) => !selectedIds.includes(option.key),\n  );\n\n  return (\n    <InlineEdit.EditMode<ContractFormValues>>\n      {({ control }) => (\n        <StackItem grow>\n          <Controller\n            control={control}\n            name={`${fieldNamePrefix}statementOfWorkId`}\n            render={({ field: { value, onChange } }) => (\n              <ApiEntityPickerFieldWithLocalSearch<\n                string,\n                LinkedStatementOfWorkItem\n              >\n                autoFocus\n                inputSize=\"small\"\n                options={value ? options : possibleOptionsLeft}\n                value={value}\n                placeholderText={t(\n                  'noumena.contract_form.linked_statements_of_work.id.placeholder',\n                )}\n                onChange={(option) => {\n                  onChange(option?.key);\n                }}\n                renderSelectionPreviewComponent={(props) => {\n                  const optionValue = props.selectedOption?.value;\n                  const shouldSoftDisable = !optionValue?.canEdit;\n\n                  return (\n                    <ApiEntitySelectionPreviewComponent\n                      {...props}\n                      inputSize=\"small\"\n                      softDisabled={shouldSoftDisable}\n                      softDisabledReason={\n                        shouldSoftDisable\n                          ? t(\n                              'noumena.contract_form.linked_statements_of_work.tooltip.editing_disabled',\n                            )\n                          : undefined\n                      }\n                      onChange={() => {\n                        deleteItem(index);\n                      }}\n                      selectedRightSideOption={\n                        optionValue && (\n                          <DocumentStatusTag\n                            status={optionValue.status}\n                            size=\"small\"\n                          />\n                        )\n                      }\n                    />\n                  );\n                }}\n              />\n            )}\n          />\n        </StackItem>\n      )}\n    </InlineEdit.EditMode>\n  );\n}\n","import { type FieldArrayWithId } from 'react-hook-form';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { InlineEdit } from '@/components/FieldArrayWizard/InlineEdit';\nimport { useFieldArrayWizard } from '@/hooks/fieldArrayWizard/useFieldArrayWizard';\nimport { type ContractFormValues } from '@/features/contracts/hooks/contractForm';\nimport { EditMode } from './EditMode';\nimport { type LinkedStatementOfWorkItem } from '../types';\n\nconst newItemValues: FieldArrayWithId<\n  ContractFormValues,\n  'linkedStatementsOfWork'\n> = {\n  id: '',\n  statementOfWorkId: '',\n};\n\ninterface LinkedStatementsOfWorkWizardProps {\n  options: DropdownValueType<LinkedStatementOfWorkItem, string>[];\n  canAdd: boolean;\n}\n\nexport function LinkedStatementsOfWorkWizard({\n  options,\n  canAdd,\n}: LinkedStatementsOfWorkWizardProps) {\n  const wizardApi = useFieldArrayWizard<\n    ContractFormValues,\n    'linkedStatementsOfWork'\n  >({\n    name: 'linkedStatementsOfWork',\n    initialMode: 'preview',\n  });\n\n  return (\n    <InlineEdit.Wizard<ContractFormValues, 'linkedStatementsOfWork'>\n      name=\"linkedStatementsOfWork\"\n      canAdd={canAdd}\n      {...wizardApi}\n      newItemValues={newItemValues}\n      EditModeComponent={(editModeProps) => (\n        <EditMode {...editModeProps} options={options} />\n      )}\n    />\n  );\n}\n","import { orderBy } from 'lodash';\nimport { useMemo } from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { Icon } from '@/components/Icon';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { type StatementOfWorkBasic } from '../../types';\nimport { DocumentStatusTag } from '../DocumentStatusTag/DocumentStatusTag';\nimport { LinkedStatementsOfWorkWizard } from './LinkedStatementsOfWorkWizard/LinkedStatementsOfWorkWizard';\nimport { useContractFormContext } from '../../hooks/contractForm';\nimport { StatementOfWorkUtils } from '../../utils/statementOfWork';\nimport { type LinkedStatementOfWorkItem } from './types';\n\nfunction mapStatementOfWorkToOption(\n  statementOfWork: StatementOfWorkBasic,\n): DropdownValueType<LinkedStatementOfWorkItem, string> {\n  return {\n    type: 'value',\n    key: statementOfWork._id,\n    label: statementOfWork.title,\n    value: {\n      ...statementOfWork,\n      canEdit: StatementOfWorkUtils.isDraft(statementOfWork),\n    },\n    icon: <Icon name=\"file_m\" size={24} />,\n    rightIcon: (\n      <DocumentStatusTag status={statementOfWork.status} size=\"small\" />\n    ),\n  };\n}\n\ninterface LinkedStatementsOfWorkFormProps {\n  linkedSows: StatementOfWorkBasic[];\n  unlinkedSows: StatementOfWorkBasic[];\n}\n\nexport function LinkedStatementsOfWorkForm({\n  linkedSows,\n  unlinkedSows,\n}: LinkedStatementsOfWorkFormProps) {\n  const form = useContractFormContext();\n\n  const options = useMemo(\n    () =>\n      orderBy(\n        [...linkedSows, ...unlinkedSows].map(mapStatementOfWorkToOption),\n        'label',\n        'asc',\n      ),\n    [linkedSows, unlinkedSows],\n  );\n\n  const formValues = form.watch('linkedStatementsOfWork');\n\n  const hasAvailableUnlinkedSows = options.length - formValues.length > 0;\n  const hasEmptyInputs =\n    formValues.filter((value) => value.statementOfWorkId === '').length > 0;\n\n  return (\n    <FormProvider {...form}>\n      <LinkedStatementsOfWorkWizard\n        options={options}\n        canAdd={hasAvailableUnlinkedSows && !hasEmptyInputs}\n      />\n    </FormProvider>\n  );\n}\n","import { useApolloClient } from '@apollo/client';\nimport { difference } from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport {\n  GetLinkedSoWsDocument,\n  GetUnlinkedSoWsDocument,\n  useGetLinkedSoWsQuery,\n  useGetUnlinkedSoWsQuery,\n  useHandleSowLinkingMutation,\n} from '@/apollo/graphql';\nimport { type DraftContractFormValues } from '@/features/contracts/hooks/contractForm';\nimport { cleanList } from '@/utils/list';\n\ninterface UseLinkedStatementsOfWorkOptions {\n  contractId: string | undefined;\n  noumId: string | undefined;\n}\n\nexport function useLinkedStatementsOfWork({\n  contractId,\n  noumId,\n}: UseLinkedStatementsOfWorkOptions) {\n  const apolloClient = useApolloClient();\n\n  const [handleSowLinking] = useHandleSowLinkingMutation();\n\n  const linkedSowsQuery = useGetLinkedSoWsQuery({\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      contractId: contractId!,\n    },\n    skip: !contractId,\n  });\n\n  const unlinkedSowsQuery = useGetUnlinkedSoWsQuery({\n    notifyOnNetworkStatusChange: true,\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      noumId: noumId!,\n    },\n    skip: !contractId || !noumId,\n  });\n\n  const linkedSows = useMemo(\n    () => cleanList(linkedSowsQuery.data?.getLinkedSOWs.data),\n    [linkedSowsQuery.data?.getLinkedSOWs.data],\n  );\n\n  const unlinkedSows = useMemo(\n    () => cleanList(unlinkedSowsQuery.data?.getAllSOW.data),\n    [unlinkedSowsQuery.data?.getAllSOW.data],\n  );\n\n  const linkSow = useCallback(\n    async (statementOfWorkId: string) => {\n      if (!contractId) {\n        return;\n      }\n      await handleSowLinking({\n        variables: {\n          contractId,\n          sowId: statementOfWorkId,\n          link: true,\n        },\n      });\n    },\n    [handleSowLinking, contractId],\n  );\n\n  const unlinkSow = useCallback(\n    async (statementOfWorkId: string) => {\n      if (!contractId) {\n        return;\n      }\n      await handleSowLinking({\n        variables: {\n          contractId,\n          sowId: statementOfWorkId,\n          link: false,\n        },\n      });\n    },\n    [handleSowLinking, contractId],\n  );\n\n  const synchronizeLinkedSows = async (values: DraftContractFormValues) => {\n    const existingLinkedSowIds = linkedSows.map((item) => item._id);\n    const formLinkedSowIds = cleanList(\n      values.linkedStatementsOfWork?.map((item) => item?.statementOfWorkId),\n    );\n\n    const addedSowIds = difference(formLinkedSowIds, existingLinkedSowIds);\n    const removedSowIds = difference(existingLinkedSowIds, formLinkedSowIds);\n\n    await Promise.all([\n      ...addedSowIds.map(linkSow),\n      ...removedSowIds.map(unlinkSow),\n    ]);\n\n    if (addedSowIds.length > 0 || removedSowIds.length > 0) {\n      apolloClient.refetchQueries({\n        include: [GetLinkedSoWsDocument, GetUnlinkedSoWsDocument],\n      });\n    }\n  };\n\n  return {\n    linkedSows: {\n      data: linkedSows,\n      loading: linkedSowsQuery.loading,\n    },\n    unlinkedSows: {\n      data: unlinkedSows,\n      loading: unlinkedSowsQuery.loading,\n    },\n    synchronizeLinkedSows,\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { useContract } from '@/features/contracts/hooks/contract';\nimport {\n  contractFormSchema,\n  type DraftContractFormValues,\n  useContractForm,\n} from '@/features/contracts/hooks/contractForm';\nimport { useLinkedStatementsOfWork } from '@/features/contracts/hooks/linkedStatementsOfWork';\nimport { ContractFormMapper } from '@/features/contracts/utils/contractFormMapper';\nimport { useError } from '@/hooks';\n\ninterface UseContractFormScreenOptions {\n  id?: string;\n  noumId?: string;\n  onCreate(id: string): void;\n}\n\nexport function useContractFormScreen({\n  id,\n  noumId,\n  onCreate,\n}: UseContractFormScreenOptions) {\n  const { logError } = useError();\n\n  const [isCreating, setIsCreating] = useState(false);\n  const [isSynchronizingSows, setIsSynchronizingSows] = useState(false);\n\n  const form = useContractForm({\n    defaultValues: ContractFormMapper.getDefaultValues({\n      noumId,\n    }),\n  });\n  const { reset, getValues, watch } = form;\n\n  const {\n    isLoading,\n    contract,\n    createContract,\n    updateContract,\n    deleteContract,\n  } = useContract({\n    id,\n  });\n\n  const selectedNoumId = watch('noumId') ?? noumId;\n  const isEditMode = !!id;\n\n  const { linkedSows, unlinkedSows, synchronizeLinkedSows } =\n    useLinkedStatementsOfWork({ contractId: id, noumId: selectedNoumId });\n\n  const { loading: isLoadingLinkedSows, data: linkedSowsData } = linkedSows;\n  const { loading: isLoadingUnlinkedSows } = unlinkedSows;\n\n  const saveDraft = async (values: DraftContractFormValues) => {\n    try {\n      const updatedContract = await updateContract(values);\n      if (updatedContract) {\n        setIsSynchronizingSows(true);\n        await synchronizeLinkedSows(values);\n      }\n      return updatedContract;\n    } catch (err) {\n      return null;\n    } finally {\n      setIsSynchronizingSows(false);\n    }\n  };\n\n  useEffect(() => {\n    if (contract) {\n      reset({\n        ...getValues(),\n        ...ContractFormMapper.fromContract(contract),\n      });\n    }\n  }, [contract, getValues, reset]);\n\n  useEffect(() => {\n    if (\n      !isLoadingLinkedSows &&\n      !isLoadingUnlinkedSows &&\n      !isSynchronizingSows\n    ) {\n      reset(\n        {\n          ...getValues(),\n          ...ContractFormMapper.fromLinkedSows(linkedSowsData),\n        },\n        {\n          keepDirty: true,\n        },\n      );\n    }\n  }, [\n    getValues,\n    isLoadingLinkedSows,\n    isLoadingUnlinkedSows,\n    isSynchronizingSows,\n    linkedSowsData,\n    reset,\n  ]);\n\n  useEffect(() => {\n    async function createAndGoToEdit() {\n      const values = contractFormSchema.cast(getValues());\n\n      try {\n        setIsCreating(true);\n        const newContract = await createContract({\n          ...values,\n          noumId: selectedNoumId,\n        });\n        onCreate(newContract._id);\n      } catch (err) {\n        logError(err, 'contract-create-draft');\n      } finally {\n        setIsCreating(false);\n      }\n    }\n\n    if (!isEditMode && selectedNoumId) {\n      createAndGoToEdit();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getValues, isEditMode, selectedNoumId]);\n\n  return {\n    form,\n    isLoading,\n    isCreating,\n    isEditMode,\n    contract,\n    sowLinking: {\n      linkedSows,\n      unlinkedSows,\n    },\n    saveDraft,\n    deleteDraft: deleteContract,\n  };\n}\n","import styled, { css } from 'styled-components';\nimport { Card as OriginalCard } from '@/components/Card';\nimport { mediaSizes } from '@/constants/devices';\nimport { bodyTypography } from '@/components/Typography';\n\nconst Card = styled(OriginalCard)`\n  padding: 24px;\n  overflow: visible;\n\n  @media (max-width: ${mediaSizes.TABLET_MAX}) {\n    border-radius: 0;\n  }\n`;\n\nconst PdfPreview = styled.div`\n  width: 390px;\n  height: 550px;\n  border: 1px solid var(--border-card-neutral-default);\n`;\n\nconst statementOfWorkDescriptionFont = css`\n  color: var(--text-card-neutral-default);\n  font: ${bodyTypography.bodyMedium};\n`;\n\nconst StatementOfWorkDescription = styled.div`\n  ${statementOfWorkDescriptionFont}\n`;\n\nexport default {\n  Card,\n  PdfPreview,\n  StatementOfWorkDescription,\n};\n","import { useCallback } from 'react';\nimport { FormProvider } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { Navigate, useParams, useSearchParams } from 'react-router-dom';\nimport Skeleton from 'react-loading-skeleton';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { Spinner } from '@/components/Spinner';\nimport { TSpan } from '@/components/Typography';\nimport routes from '@/constants/routes';\nimport {\n  ContractForm,\n  ContractFormHeader,\n} from '@/features/contracts/components/ContractForm';\nimport DocumentPdfThumbnail from '@/features/contracts/components/DocumentPdfThumbnail/DocumentPdfThumbnail';\nimport { Section } from '@/features/contracts/components/Section/Section';\nimport { ContractStatus } from '@/features/contracts/types';\nimport { ContractUtils } from '@/features/contracts/utils/contract';\nimport { useBreakpoints } from '@/hooks/useBreakpoints';\nimport { Stack, StackItem } from '@/layout';\nimport SinglePageLayout, { ResponsiveMain } from '@/layout/SinglePageLayout';\nimport { downloadFileFromUrl } from '@/utils/file';\nimport { useContractPdf } from '@/features/contracts/hooks/contractPdf';\nimport { ContractToolRoutes } from '@/features/contracts/utils/routes';\nimport { LinkedStatementsOfWorkForm } from '@/features/contracts/components/LinkedStatementsOfWork';\nimport { useNavigateWithOrigin } from '@/hooks/navigation';\nimport { useContractFormScreen } from './useContractFormScreen';\nimport S from './styles';\n\ntype Params = { id?: string };\n\nexport default function ContractCreateEdit() {\n  const { id } = useParams<Params>();\n  const [searchParams] = useSearchParams();\n  const { t } = useTranslation();\n  const { isDesktop } = useBreakpoints();\n  const { navigateAndPassOrigin, goBackToOrigin } = useNavigateWithOrigin();\n\n  const predefinedNoumId = searchParams.get('noumId') ?? undefined;\n\n  const onCreate = useCallback(\n    (newId: string) => {\n      navigateAndPassOrigin(\n        ContractToolRoutes.editContract({\n          id: newId,\n          noumId: predefinedNoumId,\n        }),\n        { replace: true },\n      );\n    },\n    [navigateAndPassOrigin, predefinedNoumId],\n  );\n\n  const {\n    form,\n    isLoading,\n    isEditMode,\n    isCreating,\n    contract,\n    sowLinking,\n    deleteDraft,\n    saveDraft,\n  } = useContractFormScreen({ id, noumId: predefinedNoumId, onCreate });\n\n  const pdfQuery = useContractPdf({ id: contract?._id });\n\n  const goBackToList = () => {\n    goBackToOrigin({ fallbackUrl: ContractToolRoutes.contractManager() });\n  };\n\n  if (id && !contract && !isLoading) {\n    return <Navigate to={routes.NOT_FOUND} replace />;\n  }\n\n  const pdfDownloadFileName = ContractUtils.formatPdfFileName({\n    title: form.watch('title'),\n    contractNumber: contract?.contractNumber,\n  });\n\n  return (\n    <SinglePageLayout>\n      <FormProvider {...form}>\n        <ContractFormHeader\n          contract={contract}\n          isEditMode={isEditMode}\n          onSaveDraft={saveDraft}\n          onSaveDraftSuccess={() => pdfQuery.refetch()}\n          onDeleteDraft={deleteDraft}\n          onGoBackToList={goBackToList}\n        />\n\n        <ResponsiveMain>\n          {isLoading ? (\n            <Spinner />\n          ) : (\n            <Stack gap={24}>\n              <StackItem grow>\n                <Stack gap={isDesktop ? 24 : 8} vertical align=\"stretch\">\n                  <ContractForm\n                    documentStatus={contract?.status ?? ContractStatus.Draft}\n                    disableNoum={!!predefinedNoumId}\n                    isPreDraft={isCreating || !isEditMode}\n                    contract={contract}\n                    onContactDetailsUpdated={() => pdfQuery.refetch()}\n                  />\n                  {!!contract && (\n                    <S.Card>\n                      <Section\n                        title={t(\n                          'noumena.contract_form.fields.sow_attachment.title',\n                        )}\n                        optional\n                        hasSeparator\n                      >\n                        <Stack gap={16} vertical align=\"stretch\">\n                          {sowLinking.linkedSows.loading ? (\n                            <>\n                              <Skeleton height={32} />\n                              <Skeleton height={32} />\n                              <Skeleton height={32} />\n                            </>\n                          ) : sowLinking.linkedSows.data.length > 0 ||\n                            sowLinking.unlinkedSows.data.length > 0 ? (\n                            <>\n                              <S.StatementOfWorkDescription>\n                                {t(\n                                  'noumena.contract_form.statement_of_work_attachment.description',\n                                )}\n                              </S.StatementOfWorkDescription>\n\n                              <LinkedStatementsOfWorkForm\n                                linkedSows={sowLinking.linkedSows.data}\n                                unlinkedSows={sowLinking.unlinkedSows.data}\n                              />\n                            </>\n                          ) : (\n                            <S.StatementOfWorkDescription>\n                              {t(\n                                'noumena.contract_form.statement_of_work_attachment.none_available.description',\n                              )}\n                            </S.StatementOfWorkDescription>\n                          )}\n                        </Stack>\n                      </Section>\n                    </S.Card>\n                  )}\n                </Stack>\n              </StackItem>\n              <StackItem basis=\"390px\">\n                <Stack vertical gap={24} grow={false} align=\"stretch\">\n                  {isDesktop && (\n                    <S.Card>\n                      <Section\n                        title={t(\n                          'noumena.contract_form.contract_preview.title',\n                        )}\n                        variant=\"sub-section\"\n                      >\n                        <Stack gap={16} vertical align=\"stretch\">\n                          <DocumentPdfThumbnail\n                            data={pdfQuery.pdfData}\n                            downloadFileName={pdfDownloadFileName}\n                            isLoading={pdfQuery.loading}\n                          />\n                          <Button\n                            tertiary\n                            icon={<Icon name=\"download_m\" size={24} />}\n                            disabled={!pdfQuery.pdfData}\n                            onClick={() => {\n                              if (pdfQuery.pdfData) {\n                                downloadFileFromUrl(\n                                  pdfQuery.pdfData,\n                                  'application/pdf',\n                                  pdfDownloadFileName,\n                                );\n                              }\n                            }}\n                          >\n                            {t(\n                              'noumena.contract_form.contract_preview.download',\n                            )}\n                          </Button>\n                        </Stack>\n                      </Section>\n                    </S.Card>\n                  )}\n\n                  <StackItem grow={false} shrink>\n                    <S.Card>\n                      <Section\n                        title={t('noumena.contract_form.disclaimer.title')}\n                        variant=\"sub-section\"\n                      >\n                        <TSpan\n                          font=\"body-m\"\n                          colorToken=\"--text-card-neutral-default\"\n                        >\n                          {t('noumena.contract_form.disclaimer.description')}\n                        </TSpan>\n                      </Section>\n                    </S.Card>\n                  </StackItem>\n                </Stack>\n              </StackItem>\n            </Stack>\n          )}\n        </ResponsiveMain>\n      </FormProvider>\n    </SinglePageLayout>\n  );\n}\n"],"names":["IncrementalNumberField","React","forwardRef","step","min","max","textFieldProps","ref","jsx","TextField","contractFormSchema","yup","title","required","trim","ensure","label","noumId","buyerId","serviceProviderId","buyerDetailsComplete","is","serviceProviderDetailsComplete","effectiveDate","terminationNotice","optional","typeError","type","governingLaw","country","region","arbitration","linkedStatementsOfWork","statementOfWorkId","string","useContractForm","defaultValues","useForm","resolver","yupResolver","mode","useContractFormContext","useFormContext","Card","styled","OriginalCard","mediaSizes","TABLET_MAX","Separator","OriginalSeparator","S$1","countryOptions","LegalRegionService","map","key","code","value","icon","Flag","ContractCountrySelector","onChange","apiEntityPickerProps","ApiEntityPickerFieldWithLocalSearch","option","props","ApiEntitySelectionPreviewComponent","ContractCountryRegionSelector","options","useMemo","ContractLegalRegionSelector","name","control","watch","setValue","Stack","StackItem","Controller","field","fieldState","newValue","getTouchedErrorProps","Fragment","ContractForm","documentStatus","isPreDraft","disableNoum","contract","onContactDetailsUpdated","t","useTranslation","preselectedBuyer","mapNoumContactToSearchableNoumContact","buyer","preselectedServiceProvider","seller","jsxs","S","TSpan","Tooltip","TooltipMessage","getErrorProps","DocumentStatusTag","FormControl","undefined","fieldProps","ProjectNoumSelector","linkedNoum","ContactSelector","isValid","shouldValidate","shouldDirty","DatePicker","ContractFormHeader","isEditMode","onSaveDraft","onSaveDraftSuccess","onDeleteDraft","onGoBackToList","navigateAndPassOrigin","useNavigateWithOrigin","addPrimaryIconToast","addSuccessIconToast","addErrorToast","useToast","logError","useError","modalType","openModal","closeModal","useModalManager","ContractPermissions","useContractPermissions","form","formState","isDirty","lastSavedAt","markLocalChangesAsSaved","useFormLocalDraft","documentTitle","handlePreview","_id","canSeeSummary","trigger","handleSaveDraft","generatePath","routes","CONTRACT_PREVIEW","id","values","cast","getValues","updatedDraft","err","handleDeleteDraft","confirmDraftDelete","StickyFormHeader","toISOString","DocumentHeader.DeleteButton","ContractUtils","isDraft","DocumentHeader.SaveButton","DocumentHeader.SummaryButton","DeleteDocumentConfirmationModal","DocumentType","Contract","EditMode","index","fieldNamePrefix","deleteItem","useFieldArrayWizardFormContext","selectedIds","possibleOptionsLeft","filter","includes","InlineEdit","optionValue","selectedOption","shouldSoftDisable","canEdit","status","newItemValues","LinkedStatementsOfWorkWizard","canAdd","wizardApi","useFieldArrayWizard","initialMode","editModeProps","mapStatementOfWorkToOption","statementOfWork","StatementOfWorkUtils","Icon","rightIcon","LinkedStatementsOfWorkForm","linkedSows","unlinkedSows","orderBy","formValues","hasAvailableUnlinkedSows","length","hasEmptyInputs","FormProvider","useLinkedStatementsOfWork","contractId","apolloClient","useApolloClient","handleSowLinking","useHandleSowLinkingMutation","linkedSowsQuery","useGetLinkedSoWsQuery","notifyOnNetworkStatusChange","fetchPolicy","variables","skip","unlinkedSowsQuery","useGetUnlinkedSoWsQuery","cleanList","data","getLinkedSOWs","getAllSOW","linkSow","useCallback","sowId","link","unlinkSow","synchronizeLinkedSows","existingLinkedSowIds","item","formLinkedSowIds","addedSowIds","difference","removedSowIds","Promise","all","refetchQueries","include","GetLinkedSoWsDocument","GetUnlinkedSoWsDocument","loading","useContractFormScreen","onCreate","isCreating","setIsCreating","useState","isSynchronizingSows","setIsSynchronizingSows","ContractFormMapper","getDefaultValues","reset","isLoading","createContract","updateContract","deleteContract","useContract","selectedNoumId","isLoadingLinkedSows","linkedSowsData","isLoadingUnlinkedSows","saveDraft","updatedContract","useEffect","fromContract","fromLinkedSows","keepDirty","createAndGoToEdit","newContract","sowLinking","deleteDraft","PdfPreview","div","statementOfWorkDescriptionFont","css","bodyTypography","bodyMedium","StatementOfWorkDescription","ContractCreateEdit","useParams","searchParams","useSearchParams","isDesktop","useBreakpoints","goBackToOrigin","predefinedNoumId","get","newId","ContractToolRoutes","editContract","replace","pdfQuery","useContractPdf","goBackToList","fallbackUrl","contractManager","Navigate","NOT_FOUND","pdfDownloadFileName","formatPdfFileName","contractNumber","SinglePageLayout","refetch","ResponsiveMain","Spinner","ContractStatus","Draft","Section","Skeleton","DocumentPdfThumbnail","pdfData","Button"],"mappings":"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"}