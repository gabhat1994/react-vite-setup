{"version":3,"file":"MemberStatusTag-69ed5aaa.js","sources":["../../src/features/noums/hooks/noums/useConnections.tsx","../../src/features/noums/hooks/spaceQuery/useSetInviteInactiveHelper.tsx","../../src/features/noums/hooks/spaceQuery/useSendNonMemberConnectionInviteHelper.tsx","../../src/features/noums/hooks/spaceQuery/useListBlockedCountriesHelper.ts","../../src/features/noums/hooks/noums/useNonNoumMembers.tsx","../../src/features/noums/hooks/noums/projectNoum/useUpdateNoumVisibilitySettingsHelper.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/styles.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/ChamberVisibilityLinkModal/styles.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/ChamberVisibilityLinkModal/index.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/data.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/ChamberVisibilityPicker.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/schema.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/utils.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/VisibilitySettings/VisibilitySettings.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/types.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/constants.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/ChamberInvitedUser.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteUserPicker/styles.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteUserPicker/InviteUserSearch.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteUserPicker/InviteUserOptionRenderer.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteUserPicker/InviteSelectedUser.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/useInviteUsersList.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteUserPicker/InviteUserPicker.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/Tabs/InviteMemberTab.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/BlockedCountriesList/BlockedCountriesListModal.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteNonUserPicker.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/Tabs/InviteNonMemberTab.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaConnections/InviteMembers.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/ChamberVisibilityInviteModal.tsx","../../src/features/noums/components/NoumRolePicker/mappers.ts","../../src/features/noums/components/NoumRolePicker/NoumRolePicker.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/schema.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteUserPicker/styles.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteUserPicker/InviteSelectedUser.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteUserPicker/InviteUserOptionRenderer.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteUserPicker/InviteUserSearch.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteUserPicker/InviteUserPicker.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/InviteMemberForm.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteNonMember/schema.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteNonMember/InviteNonMemberForm.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/ChamberInviteModal.tsx","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/mappers.ts","../../src/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteNonMember/mappers.ts","../../src/features/noums/utils/membersManager.ts","../../src/features/noums/components/MembersDisconnectModal/MembersDisconnectModal.tsx","../../src/features/noums/components/MembersEditRoleModal/mappers.ts","../../src/features/noums/components/MembersEditRoleModal/schema.ts","../../src/features/noums/components/MembersEditRoleModal/MembersEditRoleModal.tsx","../../src/features/noums/hooks/manageMembers/useMembersManagerActions.tsx","../../src/features/noums/components/MemberRoleTag/styles.ts","../../src/features/noums/components/MemberRoleTag/MemberRoleTransition.tsx","../../src/features/noums/components/MemberRoleTag/MemberRoleTag.tsx","../../src/features/noums/components/MemberStatusTag/styles.ts","../../src/features/noums/components/MemberStatusTag/MemberStatusTag.tsx"],"sourcesContent":["import { useCallback, useState, useEffect, useMemo } from 'react';\nimport { useGetSpaceConnectionsV2Query } from '@/apollo/graphql';\nimport {\n  ConnectionPermissionTypeEnum,\n  ConnectionRequestTypeEnum,\n  type SpaceConnection,\n} from '@/apollo/generated/types';\nimport { cleanList } from '@/utils/list';\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nexport const useConnections = (\n  spaceId: string,\n  isInfinite?: boolean,\n  pageSize = DEFAULT_PAGE_SIZE,\n) => {\n  const [infiniteState, setInfiniteState] = useState<\n    'loading' | 'hasNextPage' | 'end' | 'end-with-force'\n  >('hasNextPage');\n\n  const [approvedInfiniteState, setApprovedInfiniteState] = useState<\n    'loading' | 'hasNextPage' | 'end' | 'end-with-force'\n  >('hasNextPage');\n\n  const [invitedInfiniteState, setInvitedInfiniteState] = useState<\n    'loading' | 'hasNextPage' | 'end' | 'end-with-force'\n  >('hasNextPage');\n\n  const [connectionsData, setConnectionsData] = useState<\n    SpaceConnection[] | undefined\n  >([]);\n\n  const [appConnectionsData, setAppConnectionsData] = useState<\n    SpaceConnection[] | undefined\n  >([]);\n\n  const [invitedConnections, setInvitedConnections] = useState<\n    SpaceConnection[] | undefined\n  >([]);\n\n  const [totalCount, setTotalCount] = useState(0);\n  const [approvedTotalCount, setApprovedTotalCount] = useState(0);\n  const [invitedTotalCount, setInvitedTotalCount] = useState(0);\n\n  const { data, loading, error, fetchMore, refetch } =\n    useGetSpaceConnectionsV2Query({\n      variables: {\n        limit: isInfinite ? pageSize : DEFAULT_PAGE_SIZE,\n        offset: 0,\n        spaceId,\n      },\n    });\n\n  const {\n    data: approvedConnectionsData,\n    loading: approvedConnectionsLoading,\n    error: approvedConnectionsError,\n    fetchMore: approvedConnectionFetchMore,\n    refetch: approvedConnectionFetchRefetch,\n  } = useGetSpaceConnectionsV2Query({\n    variables: {\n      limit: isInfinite ? pageSize : DEFAULT_PAGE_SIZE,\n      offset: 0,\n      spaceId,\n      status: ConnectionRequestTypeEnum.Approved,\n    },\n  });\n\n  const {\n    data: invitesData,\n    loading: invitedConnectionsLoading,\n    error: invitedConnectionsError,\n    fetchMore: invitesFetchMore,\n    refetch: refetchInvitedConnections,\n  } = useGetSpaceConnectionsV2Query({\n    variables: {\n      limit: isInfinite ? pageSize : DEFAULT_PAGE_SIZE,\n      offset: 0,\n      spaceId,\n      status: [\n        ConnectionRequestTypeEnum.Approved,\n        ConnectionRequestTypeEnum.Invited,\n        ConnectionRequestTypeEnum.Declined,\n      ],\n    },\n  });\n\n  useEffect(() => {\n    setConnectionsData(\n      (data?.getSpaceConnectionsV2?.data as SpaceConnection[]) || [],\n    );\n    setTotalCount(data?.getSpaceConnectionsV2?.count || 0);\n  }, [data]);\n\n  useEffect(() => {\n    setAppConnectionsData(\n      (approvedConnectionsData?.getSpaceConnectionsV2\n        ?.data as SpaceConnection[]) || [],\n    );\n    setApprovedTotalCount(\n      approvedConnectionsData?.getSpaceConnectionsV2?.count || 0,\n    );\n  }, [approvedConnectionsData]);\n\n  useEffect(() => {\n    setInvitedConnections(\n      (invitesData?.getSpaceConnectionsV2?.data as SpaceConnection[]) || [],\n    );\n    setInvitedTotalCount(invitesData?.getSpaceConnectionsV2?.count || 0);\n  }, [invitesData]);\n\n  const fetchMoreConnections = useCallback(async () => {\n    const result = await fetchMore({\n      variables: {\n        limit: pageSize,\n        offset: connectionsData?.length || 0,\n      },\n    });\n\n    const currentFetchedConnections =\n      (result?.data?.getSpaceConnectionsV2?.data as SpaceConnection[]) || [];\n    const udpatedConnections = [\n      ...(connectionsData || []),\n      ...currentFetchedConnections,\n    ];\n    setConnectionsData(udpatedConnections);\n\n    if ((currentFetchedConnections.length || 0) < pageSize)\n      setInfiniteState('end');\n  }, [fetchMore, connectionsData, pageSize]);\n\n  const fetchMoreApprovedConnections = useCallback(async () => {\n    const result = await approvedConnectionFetchMore({\n      variables: {\n        limit: pageSize,\n        offset: appConnectionsData?.length || 0,\n      },\n    });\n\n    const currentFetchedApprovedConnections =\n      (result?.data?.getSpaceConnectionsV2?.data as SpaceConnection[]) || [];\n    const udpatedApprovedConnections = [\n      ...(appConnectionsData || []),\n      ...currentFetchedApprovedConnections,\n    ];\n    setAppConnectionsData(udpatedApprovedConnections);\n    if ((currentFetchedApprovedConnections.length || 0) < pageSize)\n      setApprovedInfiniteState('end');\n  }, [approvedConnectionFetchMore, appConnectionsData, pageSize]);\n\n  const fetchMoreInvitedConnections = useCallback(async () => {\n    const result = await invitesFetchMore({\n      variables: {\n        limit: pageSize,\n        offset: invitedConnections?.length || 0,\n      },\n    });\n\n    const currentFetchedInvitedConnections =\n      (result?.data?.getSpaceConnectionsV2?.data as SpaceConnection[]) || [];\n    const udpatedInvitedConnections = [\n      ...(invitedConnections || []),\n      ...currentFetchedInvitedConnections,\n    ];\n    setInvitedConnections(udpatedInvitedConnections);\n    if ((currentFetchedInvitedConnections.length || 0) < pageSize)\n      setInvitedInfiniteState('end');\n  }, [invitesFetchMore, pageSize, invitedConnections]);\n\n  const connections: SpaceConnection[] = useMemo(\n    () =>\n      cleanList(\n        connectionsData?.filter(\n          (item) =>\n            item?.permission !== ConnectionPermissionTypeEnum.Disconnect,\n        ),\n      ),\n    [connectionsData],\n  );\n\n  useEffect(() => {\n    setInfiniteState(\n      connectionsData && connectionsData?.length >= totalCount\n        ? 'end'\n        : 'hasNextPage',\n    );\n  }, [connectionsData, totalCount]);\n\n  useEffect(() => {\n    setApprovedInfiniteState(\n      appConnectionsData && appConnectionsData?.length >= approvedTotalCount\n        ? 'end'\n        : 'hasNextPage',\n    );\n  }, [appConnectionsData, approvedTotalCount]);\n\n  useEffect(() => {\n    setInvitedInfiniteState(\n      invitedConnections && invitedConnections?.length >= invitedTotalCount\n        ? 'end'\n        : 'hasNextPage',\n    );\n  }, [invitedConnections, invitedTotalCount]);\n\n  useEffect(() => {\n    refetch();\n  }, [refetch]);\n\n  useEffect(() => {\n    approvedConnectionFetchRefetch();\n  }, [approvedConnectionFetchRefetch]);\n\n  useEffect(() => {\n    refetchInvitedConnections();\n  }, [refetchInvitedConnections]);\n\n  return {\n    connectionsData,\n    loading,\n    error,\n    infiniteState,\n    fetchMoreConnections,\n    refetchConnections: refetch,\n    connections,\n    appConnectionsData,\n    approvedConnectionsLoading,\n    approvedConnectionsError,\n    approvedInfiniteState,\n    fetchMoreApprovedConnections,\n    approvedConnectionsRefetch: approvedConnectionFetchRefetch,\n\n    invitedConnections,\n    invitedConnectionsLoading,\n    invitedConnectionsError,\n    invitedInfiniteState,\n    fetchMoreInvitedConnections,\n    refetchInvitedConnections,\n  };\n};\n\nexport default useConnections;\n","import { useCallback } from 'react';\nimport * as Sentry from '@sentry/react';\nimport {\n  GetInviteNonNoumenaMemberDocument,\n  type GetInviteNonNoumenaMemberQuery,\n  useSetInviteInactiveMutation,\n} from '@/apollo/graphql';\nimport { type Maybe } from '@/apollo/generated/types';\nimport { useToast } from '@/hooks/toast';\n\nexport function useSetInviteInactiveHelper() {\n  const { addToast } = useToast();\n\n  const [setInviteInactive, { loading }] = useSetInviteInactiveMutation();\n\n  const setInvitedMemberInactive = useCallback(\n    async (\n      token: Maybe<string> | undefined,\n      spaceId: Maybe<string> | undefined,\n    ) => {\n      if (!token) return false;\n\n      let isSuccess;\n      try {\n        await setInviteInactive({\n          variables: { token },\n          update: (cache, { data }) => {\n            if (!data || !data.setInviteInactive) return;\n            const { getinviteNonNoumenaMember: nonMemberData } =\n              cache.readQuery({\n                query: GetInviteNonNoumenaMemberDocument,\n                variables: { noumId: spaceId },\n              }) as GetInviteNonNoumenaMemberQuery;\n            if (!nonMemberData || !nonMemberData?.count) return;\n            const cloneConnections = nonMemberData?.data || [];\n            const mergedArray = cloneConnections.filter(\n              (item) => item?._id !== token,\n            );\n            cache.writeQuery({\n              query: GetInviteNonNoumenaMemberDocument,\n              variables: { noumId: spaceId },\n              data: {\n                getinviteNonNoumenaMember: mergedArray,\n              },\n            });\n          },\n        });\n\n        isSuccess = true;\n      } catch (error) {\n        let message = 'Unknown';\n        if (error instanceof Error) {\n          message = error.message;\n        }\n        addToast('error', 'none', message);\n        Sentry.captureException(new Error(message), {\n          tags: {\n            section: 'updateConnectionStatus',\n          },\n        });\n\n        isSuccess = false;\n      }\n\n      return isSuccess;\n    },\n    [addToast, setInviteInactive],\n  );\n\n  return {\n    loading,\n    setInvitedMemberInactive,\n  };\n}\n\nexport default useSetInviteInactiveHelper;\n","import {\n  GetInviteNonNoumenaMemberDocument,\n  type SpaceOutputFragment,\n  useInviteNonNoumenaMemberMutation,\n  type GetInviteNonNoumenaMemberQuery,\n} from '@/apollo/graphql';\nimport { useCallback } from 'react';\n\nexport function useSendNonMemberConnectionInviteHelper() {\n  const [inviteNonNoumenaMemberMutation, { loading }] =\n    useInviteNonNoumenaMemberMutation();\n\n  const sendNonMemberInvite = useCallback(\n    async (\n      requestedForNoumId: string,\n      email: string,\n      firstName: string,\n      lastName: string,\n      noum: SpaceOutputFragment,\n      message: string = '',\n    ) =>\n      inviteNonNoumenaMemberMutation({\n        variables: {\n          input: {\n            requestedForNoumId,\n            email,\n            firstName,\n            lastName,\n            noumDetails: {\n              title: noum.name || '',\n              profileUrl: noum?.profileImage || '',\n              owner: `${noum.uid?.firstName || ''} ${\n                noum.uid?.middleName || ''\n              } ${noum.uid?.lastName || ''}`.trim(),\n              type: noum?.category?.name || '',\n            },\n            message: message || '',\n          },\n        },\n        update: (cache, { data }) => {\n          if (!data || !data.inviteNonNoumenaMember) return;\n          const { getinviteNonNoumenaMember: nonMemberData } = cache.readQuery({\n            query: GetInviteNonNoumenaMemberDocument,\n            variables: { noumId: requestedForNoumId },\n          }) as GetInviteNonNoumenaMemberQuery;\n          const cloneConnections = nonMemberData?.data || [];\n          const mergedArray = [\n            {\n              _id: data.inviteNonNoumenaMember?.id,\n              __typename: data.inviteNonNoumenaMember?.__typename,\n              token: null,\n              isActive: true,\n              requestedForNoumId,\n              uid: {\n                email,\n                firstName,\n                lastName,\n              },\n            },\n            ...cloneConnections,\n          ];\n          cache.writeQuery({\n            query: GetInviteNonNoumenaMemberDocument,\n            variables: { noumId: requestedForNoumId },\n            data: {\n              getinviteNonNoumenaMember: mergedArray,\n            },\n          });\n        },\n      }),\n    [inviteNonNoumenaMemberMutation],\n  );\n\n  return {\n    sendNonMemberInvite,\n    loading,\n  };\n}\n","import { useEffect } from 'react';\nimport {\n  type ListBlockedCountriesQueryVariables,\n  useListBlockedCountriesLazyQuery,\n} from '@/apollo/graphql';\nimport { useAuth } from '@/features/auth/contexts';\n\nexport const useListBlockedCountriesHelper = (\n  variables?: ListBlockedCountriesQueryVariables,\n) => {\n  const { user } = useAuth();\n\n  const [getListBlockedCountries, { data, loading, refetch, fetchMore }] =\n    useListBlockedCountriesLazyQuery({\n      variables,\n    });\n\n  useEffect(() => {\n    if (user?._id) {\n      getListBlockedCountries();\n    }\n  }, [user, getListBlockedCountries]);\n\n  return {\n    data,\n    loading,\n    refetch,\n    fetchMore,\n    getListBlockedCountries,\n  };\n};\n","import { useMemo } from 'react';\nimport { type InviteNonNoumUserOutput } from '@/apollo/generated/types';\nimport { useGetInviteNonNoumenaMemberQuery } from '@/apollo/graphql';\nimport { cleanList } from '@/utils/list';\n\nexport const useNonNoumMembers = (id: string) => {\n  const {\n    data: nonMembersData,\n    loading: loadingNonMembers,\n    refetch: refetchNonMembers,\n  } = useGetInviteNonNoumenaMemberQuery({\n    skip: !id,\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      noumId: id,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n  const nonMembers: InviteNonNoumUserOutput[] = useMemo(\n    () =>\n      cleanList(\n        nonMembersData?.getinviteNonNoumenaMember?.data?.filter(\n          (item) => item?.isActive || item?.isVerified,\n        ),\n      ),\n    [nonMembersData?.getinviteNonNoumenaMember?.data],\n  );\n  return {\n    refetchNonMembers,\n    nonMembers,\n    loadingNonMembers,\n  };\n};\n\nexport default useNonNoumMembers;\n","import { useCallback } from 'react';\nimport { t } from 'i18next';\nimport * as Sentry from '@sentry/react';\nimport { useToast } from '@/hooks/toast';\nimport { type ProjectChamberType } from '@/apollo/generated/types';\nimport { useUpdateNoumVisibilitySettingsMutation } from '@/apollo/graphql';\n\nexport function useUpdateNoumVisibilitySettingsHelper() {\n  const { addToast } = useToast();\n\n  const handleError = useCallback(\n    (networkError: String | Error | null) => {\n      addToast(\n        'error',\n        'none',\n        `${t('noumena.toast_error.text')}: ${networkError}`,\n      );\n    },\n    [addToast],\n  );\n\n  const handleSuccess = useCallback(() => {\n    addToast(\n      'success',\n      'icon',\n      t('noumena.chamber_edit.visibility.success_message'),\n    );\n  }, [addToast]);\n\n  const [updateNoumVisibilitySettings, { loading }] =\n    useUpdateNoumVisibilitySettingsMutation();\n\n  const updateNoumVisibilitySettingsHelper = useCallback(\n    async (spaceId: string, visibility: ProjectChamberType) => {\n      await updateNoumVisibilitySettings({\n        variables: { spaceId, visibility },\n        onError: ({ networkError = null, graphQLErrors = [] }) => {\n          const [err] = graphQLErrors;\n          handleError(err?.message ?? networkError);\n          Sentry.captureException(new Error(err?.message ?? networkError), {\n            tags: {\n              section: 'updateNoumVisibilitySettingsMutation',\n            },\n          });\n        },\n        onCompleted: () => {\n          handleSuccess();\n        },\n      });\n    },\n    [handleError, handleSuccess, updateNoumVisibilitySettings],\n  );\n\n  return { loading, updateNoumVisibilitySettingsHelper };\n}\n\nexport default useUpdateNoumVisibilitySettingsHelper;\n","import styled from 'styled-components';\nimport { Button } from '@/components/Button';\nimport { bodyTypography, TSpan } from '@/components/Typography';\nimport { mediaSizes, sizes } from '@/constants/devices';\nimport { singleLineEllipisText } from '@/common/globalStyles';\nimport { ButtonText } from '@/components/Button/styles';\n\nexport const UserFormHeader = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n  align-items: center;\n  justify-content: space-between;\n  min-height: 40px;\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    display: block;\n    min-height: unset;\n  }\n  gap: 10px;\n`;\n\nexport const ModalDescription = styled(TSpan)`\n  line-height: 160%;\n`;\n\nexport const SettingWrapper = styled.div<{ justifyCenter?: boolean }>`\n  display: flex;\n  flex-direction: row;\n  justify-content: ${(props) =>\n    props.justifyCenter ? 'center' : 'space-between'};\n  gap: 12px;\n  width: 100%;\n  padding-top: 16px;\n  box-sizing: border-box;\n`;\n\nexport const DropdownContainer = styled.div`\n  flex: 1;\n`;\n\nexport const DropdownWrapper = styled.div<{ fullWidth?: boolean }>`\n  display: flex;\n  flex-direction: column;\n  ${(props) => props.fullWidth && 'width: 100%'};\n`;\n\nexport const DescriptionWrapper = styled.div`\n  padding-top: 5px;\n  margin-left: 12px;\n`;\n\nexport const NonMemberDescriptionWrapper = styled.div<{ isMobile?: boolean }>`\n  padding-top: 0px;\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    padding-top: 6px;\n  }\n`;\n\nexport const Description = styled(TSpan)`\n  width: 100%;\n  line-height: 160%;\n`;\n\nexport const TextUnderLine = styled(TSpan)`\n  width: 100%;\n  line-height: 160%;\n  font-weight: 600;\n  border-bottom: 1px solid var(--bg-separator-neutral-default);\n`;\n\nexport const Divider = styled.div`\n  width: 100%;\n  border-top: 1px solid var(--bg-separator-neutral-default);\n  margin-top: 16px;\n  margin-bottom: 16px;\n`;\n\nexport const InviteTitle = styled.div`\n  width: 100%;\n`;\n\nexport const SaveButton = styled(Button)`\n  width: 100px;\n`;\n\nexport const InvitedUsersWrapper = styled.div`\n  width: 100%;\n  padding-bottom: 12px;\n  box-sizing: border-box;\n  height: 296px;\n  overflow-y: auto;\n  @media (max-width: ${sizes.TABLET_L}) {\n    height: calc(100vh - 453px);\n    overflow-y: auto;\n  }\n`;\n\nexport const NoUser = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ModalButton = styled(Button)`\n  flex: 1;\n`;\n\nexport const UserWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  align-items: center;\n  min-height: 86px;\n  border-bottom: 1px solid var(--bg-separator-neutral-default);\n  padding-left: 16px;\n  box-sizing: border-box;\n`;\n\nexport const UserBody = styled.div<{ isPadding?: boolean }>`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  justify-content: space-between;\n  align-items: center;\n  padding-left: ${(props) => (props.isPadding ? '16px' : 0)};\n`;\n\nexport const UserName = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding-right: 10px;\n  span {\n    ${singleLineEllipisText}\n  }\n`;\n\nexport const DropdownPicker = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  cursor: pointer;\n`;\n\nexport const PickedInviteStatus = styled(TSpan)`\n  margin-right: 12px;\n`;\n\nexport const SpinnerContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  height: 296px;\n  width: 100%;\n  @media (max-width: ${sizes.TABLET_L}) {\n    height: calc(100vh - 452px);\n  }\n`;\n\nexport const TabSection = styled.div`\n  ${bodyTypography.bodyMedium};\n  width: 100%;\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    justify-content: flex-start;\n  }\n`;\n\nexport const CountryName = styled.div`\n  min-width: 240px;\n`;\n\nexport const CountryDescription = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    justify-content: flex-start;\n    width: 100%;\n  }\n`;\n\nexport const BodyContainer = styled.div`\n  display: block;\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    height: calc(100vh - 200px);\n    overflow-y: auto;\n  }\n`;\n\nexport const TabContent = styled.div`\n  display: flex;\n  position: relative;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 100%;\n  height: unset;\n`;\n\nexport const FieldContent = styled.div<{ width?: string }>`\n  padding: 12px 0px;\n  width: ${(props) => props.width};\n  @media (max-width: ${mediaSizes.MOBILE_L_MAX}) {\n    padding: 6px 0px;\n    width: 100%;\n  }\n`;\n\nexport const ViewCountriesButton = styled(Button)`\n  display: inline;\n  height: auto;\n  width: auto;\n  min-height: unset;\n  max-height: unset;\n  min-width: unset;\n  vertical-align: baseline;\n  padding: 0;\n  margin: 0;\n\n  & > ${ButtonText} {\n    text-decoration: underline;\n    font: inherit;\n    color: var(--text-input-neutral-default);\n  }\n`;\n","import styled from 'styled-components';\nimport { defaultScrollBar } from '@/common/globalStyles';\n\nexport const ExistingLinkContainer = styled.div`\n  max-height: 152px;\n  width: 100%;\n  overflow-y: auto;\n  margin-top: 17px;\n  ${defaultScrollBar};\n`;\n","import React, { useMemo } from 'react';\nimport { t } from 'i18next';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Button } from '@/components/Button';\nimport { useWindowDimensions } from '@/hooks';\nimport { breakpoints } from '@/constants/devices';\nimport LinkNoumOption from '@/screens/LinkNoum/components/LinkNoumOption';\nimport { type LinkedNoumOptionType } from '@/screens/LinkNoum/components/types';\nimport { type OptionType } from '@/screens/LinkNoum/types';\nimport { ExistingLinkContainer } from './styles';\n\nexport const ChamberVisibilityLinkModal: React.FC<{\n  isOpen: boolean;\n  selectedOption?: OptionType;\n  linkedNoums: LinkedNoumOptionType[];\n  handleClose: () => void;\n  handleAccept: () => void;\n}> = ({ isOpen, handleClose, linkedNoums, selectedOption, handleAccept }) => {\n  const { width } = useWindowDimensions();\n  const isMobile = useMemo(() => width <= breakpoints.MOBILE_MAX, [width]);\n  return (\n    <Modal\n      isFullScreen={false}\n      testId=\"link-visibility-modal\"\n      open={isOpen}\n      onClose={handleClose}\n      style={{\n        width: !isMobile ? '450px' : 'auto',\n      }}\n      enableCloseButton\n      disableBackdropClick\n    >\n      <ModalHeader isFullScreen={false}>\n        {t('noumena.container.chamber_publish_visibility_link.title')}\n      </ModalHeader>\n      <ModalBody\n        isFullScreen={false}\n        style={{\n          alignItems: 'center',\n        }}\n        hasScrollBar\n      >\n        {selectedOption && (\n          <LinkNoumOption\n            iconSize={40}\n            item={selectedOption}\n            showBorder={false}\n            showChips\n            showDetail\n            style={{ alignSelf: 'stretch' }}\n          />\n        )}\n        <TSpan\n          colorToken=\"--text-modal-neutral-default\"\n          textAlign=\"center\"\n          font=\"body-m\"\n        >\n          {t('noumena.container.chamber_publish_visibility_link.description', {\n            linkCount: linkedNoums.length,\n          })}\n        </TSpan>\n        {linkedNoums.length && (\n          <ExistingLinkContainer>\n            {linkedNoums.map((item, idx) => (\n              <LinkNoumOption\n                key={item._id}\n                item={item}\n                showDetail={false}\n                showBorder={idx < linkedNoums.length - 1}\n              />\n            ))}\n          </ExistingLinkContainer>\n        )}\n      </ModalBody>\n      <ModalFooter\n        isFullScreen={false}\n        marginTop={24}\n        gap={16}\n        flexDirection={isMobile ? 'column' : 'row-reverse'}\n      >\n        <Button size=\"full\" primary onClick={handleAccept}>\n          {t('noumena.continue')}\n        </Button>\n        <Button tertiary size=\"full\" onClick={handleClose}>\n          {t('noumena.cancel')}\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n};\n","import generate from 'uniqid';\nimport { t } from 'i18next';\nimport { ProjectChamberType } from '@/apollo/generated/types';\nimport { type InviteStatusProps, type VisibilityProps } from './types';\n\nexport const visibilityOptions: VisibilityProps[] = [\n  {\n    key: generate(),\n    label: 'Public',\n    type: 'value',\n    value: ProjectChamberType.Public,\n    description: t('noumena.chamber_edit.visibility.public_description'),\n    labelColor: '--text-tablecell-header-neutral-highlighted',\n  },\n  {\n    key: generate(),\n    label: 'Private',\n    type: 'value',\n    value: ProjectChamberType.Private,\n    description: t('noumena.chamber_edit.visibility.private_description'),\n    labelColor: '--text-tablecell-header-neutral-highlighted',\n  },\n  {\n    key: generate(),\n    label: 'Secret',\n    type: 'value',\n    value: ProjectChamberType.Secret,\n    description: t('noumena.chamber_edit.visibility.secret_description'),\n    labelColor: '--text-tablecell-header-neutral-highlighted',\n  },\n];\n\nexport const inviteOptions: InviteStatusProps[] = [\n  {\n    key: 'invite-cancel',\n    label: 'Cancel Invite',\n    type: 'value',\n    value: 'Cancel',\n    description: '',\n  },\n  {\n    key: 'invite-resend',\n    label: 'Resend the Invite',\n    type: 'value',\n    value: 'Resend',\n    description: '',\n  },\n];\n","import { ProjectChamberType } from '@/apollo/generated/types';\nimport { Dropdown } from '@/components/Dropdown';\nimport { Icon } from '@/components/Icon';\nimport { TextField } from '@/components/TextField';\nimport { useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { visibilityOptions } from '../data';\nimport * as S from '../styles';\nimport { type VisibilityDropdownProps } from '../types';\n\nconst mapOptionIcon = (option: ProjectChamberType) => {\n  switch (option) {\n    case ProjectChamberType.Public:\n      return <Icon name=\"public_XL\" size={40} />;\n    case ProjectChamberType.Private:\n      return <Icon name=\"lock_xl\" size={40} />;\n    case ProjectChamberType.Secret:\n      return <Icon name=\"private_XL\" size={40} />;\n    default:\n      return null;\n  }\n};\n\ninterface ChamberVisibilityPickerProps {\n  value: ProjectChamberType | undefined;\n  onChange(option: VisibilityDropdownProps): void;\n}\n\nexport function ChamberVisibilityPicker({\n  value,\n  onChange,\n}: ChamberVisibilityPickerProps) {\n  const { t } = useTranslation();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const selectableOptions: VisibilityDropdownProps[] = useMemo(\n    () =>\n      visibilityOptions.map((o) => ({\n        ...o,\n        icon: mapOptionIcon(o.value),\n        selected: o.value === value,\n      })),\n    [value],\n  );\n\n  const selectedOption = selectableOptions.find(\n    (option) => option.value === value,\n  );\n\n  return (\n    <S.DropdownContainer>\n      <S.DropdownWrapper fullWidth>\n        <Dropdown\n          hideIcons={false}\n          closeOnSelect\n          placement=\"bottom-end\"\n          options={selectableOptions}\n          onSelectOption={onChange}\n          onOpen={() => setIsOpen(true)}\n          onClose={() => setIsOpen(false)}\n          usePortal={false}\n          calRefTop={false}\n          isAnimation={false}\n          usePopStyle\n          iconColumnWidth={40}\n        >\n          {({ inputProps, inputRef, toggle }) => (\n            <TextField\n              readOnly\n              ref={inputRef}\n              {...inputProps}\n              value={\n                typeof selectedOption?.label === 'string'\n                  ? selectedOption.label\n                  : ''\n              }\n              label={t('noumena.chamber_edit.visibility.visibility_setting')}\n              helperText={\n                value &&\n                t(\n                  `noumena.chamber_edit.visibility.${value.toLowerCase()}_description`,\n                )\n              }\n              spellCheck=\"false\"\n              rightIcon={\n                isOpen ? (\n                  <Icon\n                    color=\"--icon-input-neutral-default\"\n                    name=\"chevron_up_m\"\n                    size={16}\n                    onClick={toggle}\n                  />\n                ) : (\n                  <Icon\n                    color=\"--icon-input-neutral-default\"\n                    name=\"chevron_down_m\"\n                    size={16}\n                    onClick={toggle}\n                  />\n                )\n              }\n            />\n          )}\n        </Dropdown>\n      </S.DropdownWrapper>\n    </S.DropdownContainer>\n  );\n}\n","import { ProjectChamberType } from '@/apollo/generated/types';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nexport const visibilitySettingsSchema = yup.object({\n  visibility: yup\n    .mixed<ProjectChamberType>()\n    .oneOf(Object.values(ProjectChamberType)),\n});\n\nexport type VisibilitySettingsValues = yup.InferType<\n  typeof visibilitySettingsSchema\n>;\n\ninterface UseVisibilitySettingsFormOptions {\n  defaultValues: DefaultValues<VisibilitySettingsValues>;\n}\n\nexport function useVisibilitySettingsForm({\n  defaultValues,\n}: UseVisibilitySettingsFormOptions) {\n  return useForm<VisibilitySettingsValues>({\n    defaultValues,\n    resolver: yupResolver(visibilitySettingsSchema),\n  });\n}\n","import { ProjectChamberType } from '@/apollo/generated/types';\n\nexport function mapStringToProjectChamberType(\n  value: string | undefined,\n): ProjectChamberType {\n  switch (value) {\n    case 'PRIVATE':\n      return ProjectChamberType.Private;\n    case 'PUBLIC':\n      return ProjectChamberType.Public;\n    case 'SECRET':\n      return ProjectChamberType.Secret;\n    default:\n      return ProjectChamberType.Public;\n  }\n}\n","import { ProjectChamberType } from '@/apollo/generated/types';\nimport { useUpdateNoumVisibilitySettingsHelper } from '@/features/noums/hooks/noums';\nimport { useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { Spacer } from '@/layout';\nimport { type LinkedNoumOptionType } from '@/screens/LinkNoum/components/types';\nimport { useCallback } from 'react';\nimport { Controller } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { ChamberActionModal } from '../../ChamberActionModal/ActionModal';\nimport * as S from '../styles';\nimport { ChamberVisibilityLinkModal } from './ChamberVisibilityLinkModal';\nimport { ChamberVisibilityPicker } from './ChamberVisibilityPicker';\nimport {\n  type VisibilitySettingsValues,\n  useVisibilitySettingsForm,\n} from './schema';\nimport { mapStringToProjectChamberType } from './utils';\n\ntype ModalType = 'linked-noums-visibility' | 'auto-accept-pending';\n\ninterface VisibilitySettingsProps {\n  noumId: string;\n  defaultVisibility: string | undefined;\n  linkedNoums: LinkedNoumOptionType[];\n  isSEOEnabled: boolean;\n  onClose: () => void;\n}\n\nexport function VisibilitySettings({\n  noumId,\n  defaultVisibility,\n  linkedNoums,\n  isSEOEnabled,\n  onClose,\n}: VisibilitySettingsProps) {\n  const { addErrorToast } = useToast();\n  const { t } = useTranslation();\n\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const {\n    handleSubmit,\n    control,\n    getValues,\n    formState: { isDirty },\n  } = useVisibilitySettingsForm({\n    defaultValues: {\n      visibility: mapStringToProjectChamberType(defaultVisibility),\n    },\n  });\n\n  const { updateNoumVisibilitySettingsHelper, loading } =\n    useUpdateNoumVisibilitySettingsHelper();\n\n  const handleNewVisibilitySave = useCallback(async () => {\n    const newVisibility = getValues('visibility');\n    if (newVisibility) {\n      await updateNoumVisibilitySettingsHelper(noumId, newVisibility);\n      onClose();\n    }\n  }, [getValues, updateNoumVisibilitySettingsHelper, noumId, onClose]);\n\n  const handleConfirmAutoAcceptPendingRequests = useCallback(() => {\n    if (linkedNoums?.length) {\n      openModal('linked-noums-visibility');\n    } else {\n      handleNewVisibilitySave();\n    }\n  }, [handleNewVisibilitySave, linkedNoums?.length, openModal]);\n\n  const handleSave = useCallback(\n    async (values: VisibilitySettingsValues) => {\n      const newVisibility = values.visibility;\n\n      // Visibility of SEO enabled noums can not be change to private or secret. the noum should always accessible by public\n      if (isSEOEnabled && newVisibility !== ProjectChamberType.Public) {\n        addErrorToast('SEO enabled noums can only be public');\n        return;\n      }\n\n      if (newVisibility === ProjectChamberType.Public) {\n        openModal('auto-accept-pending');\n      } else {\n        handleConfirmAutoAcceptPendingRequests();\n      }\n    },\n    [\n      addErrorToast,\n      handleConfirmAutoAcceptPendingRequests,\n      isSEOEnabled,\n      openModal,\n    ],\n  );\n\n  const handleChangeLinkedNoumsVisibility = useCallback(() => {\n    handleNewVisibilitySave();\n    closeModal();\n  }, [closeModal, handleNewVisibilitySave]);\n\n  return (\n    <>\n      <S.ModalDescription\n        colorToken=\"--text-modal-neutral-default\"\n        font=\"body-m\"\n      >\n        {t(`noumena.chamber_edit.visibility.description`)}\n      </S.ModalDescription>\n      <Spacer height=\"16px\" />\n      <S.SettingWrapper>\n        <Controller\n          control={control}\n          name=\"visibility\"\n          render={({ field: { value, onChange } }) => (\n            <ChamberVisibilityPicker\n              value={value}\n              onChange={(option) => onChange(option.value)}\n            />\n          )}\n        />\n        <S.SaveButton\n          primary\n          size=\"large\"\n          disabled={!isDirty}\n          loading={loading}\n          onClick={handleSubmit(handleSave)}\n        >\n          {t(`noumena.chamber_edit.visibility.save`)}\n        </S.SaveButton>\n      </S.SettingWrapper>\n\n      <ChamberVisibilityLinkModal\n        isOpen={modalType === 'linked-noums-visibility'}\n        handleAccept={handleChangeLinkedNoumsVisibility}\n        handleClose={closeModal}\n        linkedNoums={linkedNoums || []}\n      />\n      <ChamberActionModal\n        positiveBtnLabel={t(`noumena.continue`)}\n        confirmCallback={handleConfirmAutoAcceptPendingRequests}\n        cancelCallback={closeModal}\n        isOpen={modalType === 'auto-accept-pending'}\n        title={t('noumena.container.chamber_publish_visibility_link.title')}\n        description={t(\n          `noumena.noum.visibility.public.pending_request_auto_accept`,\n        )}\n        negativeBtnLabel={t(`noumena.cancel`)}\n      />\n    </>\n  );\n}\n","import {\n  type GlobalSearchEntity,\n  type ProjectChamberType,\n  type SpaceConnection,\n  type UserOutput,\n} from '@/apollo/generated/types';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { type LinkedNoumOptionType } from '@/screens/LinkNoum/components/types';\n\ninterface ChamberVisibilityBase {\n  spaceId: string;\n  visibility?: string;\n  handleClose: () => void;\n}\n\nexport type ChamberVisibilityInviteModalProps = {\n  isOpen: boolean;\n  connections?: SpaceConnection[];\n  linkedNoums?: LinkedNoumOptionType[];\n  isOnlyInvite?: boolean;\n  isSEOEnabled?: boolean;\n} & ChamberVisibilityBase;\n\nexport type VisibilityProps = {\n  key: string;\n  label: string;\n  type: 'value';\n  value: ProjectChamberType;\n  description?: string;\n  selected?: boolean;\n  labelColor?: string;\n  icon?: JSX.Element;\n};\n\nexport type InviteStatusProps = {\n  key: string;\n  label: string;\n  type: 'value';\n  value: TInviteStatus;\n  description?: string;\n  selected?: boolean;\n  labelColor?: string;\n  icon?: JSX.Element;\n};\n\nexport type VisibilityDropdownProps = DropdownValueType<ProjectChamberType>;\n\nexport type InvitedUser = {\n  connectionId?: string;\n  connectionStatus?: string;\n  isMember?: boolean;\n  avatar?: string;\n  isVerified?: boolean;\n} & UserOutput;\n\nexport type TInviteStatus =\n  | 'Pending'\n  | 'Accepted'\n  | 'Declined'\n  | 'Cancel'\n  | 'Resend';\n\nexport type InviteStatusDropdownProps = DropdownValueType<TInviteStatus>;\n\nexport type ChamberInvitedUserProps = {\n  user: InvitedUser;\n  onSelect: (user: InvitedUser, value: TInviteStatus) => void;\n  isNonNoumTab?: boolean;\n};\n\nexport type InviteUserTabProps = {\n  spaceId: string;\n};\n\nexport type InviteNonUserPickerProps = {\n  connectedUsers: InvitedUser[];\n  spaceId: string;\n};\n\nexport type CheckNewInviteResult = {\n  isNew: boolean;\n  isUnregistered: boolean;\n  user?: GlobalSearchEntity;\n};\n\nexport enum InviteMemberTabId {\n  NoumenaMembers = 'NOUMENA_MEMBERS',\n  NonNoumenaMembers = 'NON_NOUMENA_MEMBERS',\n}\n","import { t } from 'i18next';\n\nimport { type InputListTypes } from '@/components/Tabs/types';\nimport { InviteMemberTabId } from '../types';\n\nexport const inviteMembersTabInputList: InputListTypes<InviteMemberTabId>[] = [\n  {\n    id: InviteMemberTabId.NoumenaMembers,\n    name: 'Noumena Members',\n    image: 'terms_m',\n    text: t('noumena.chamber_edit.modal.members'),\n    labelSize: 'auto',\n  },\n  {\n    id: InviteMemberTabId.NonNoumenaMembers,\n    name: 'Non-Noumena Members',\n    image: 'terms_m',\n    text: t('noumena.chamber_edit.modal.non_members'),\n    labelSize: 'auto',\n  },\n];\n","import { useCallback, useMemo, useState } from 'react';\nimport { capitalize } from 'lodash';\nimport { TSpan } from '@/components/Typography';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { Icon } from '@/components/Icon';\nimport { Dropdown, type DropdownTargetProps } from '@/components/Dropdown';\nimport { getFullName } from '@/utils/fullName';\nimport { ConnectionRequestTypeEnum } from '@/apollo/generated/types';\nimport { inviteOptions } from '../../data';\nimport {\n  type InviteStatusDropdownProps,\n  type ChamberInvitedUserProps,\n} from '../../types';\nimport {\n  DropdownPicker,\n  DropdownWrapper,\n  UserBody,\n  UserName,\n  UserWrapper,\n  PickedInviteStatus,\n} from '../../styles';\n\nexport const ChamberInvitedUser: React.FC<ChamberInvitedUserProps> = ({\n  user,\n  onSelect,\n  isNonNoumTab = false,\n}) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const invitedStatus = useMemo(() => user.connectionStatus, [user]);\n  const invitedStatusText = useMemo(() => {\n    if (isNonNoumTab && !user.isVerified) return 'Pending';\n    if (isNonNoumTab && user.isVerified) return 'Accepted';\n    switch (user.connectionStatus) {\n      case ConnectionRequestTypeEnum.Invited:\n        return 'Pending';\n      default:\n        return capitalize(user.connectionStatus);\n    }\n  }, [user, isNonNoumTab]);\n  const selectableOptions = useMemo(() => {\n    if (isNonNoumTab && user.isVerified) {\n      return inviteOptions.filter((o) => o.value !== 'Resend');\n    }\n    switch (user.connectionStatus) {\n      case ConnectionRequestTypeEnum.Invited:\n        return inviteOptions.filter((o) => o.value !== 'Resend');\n      case ConnectionRequestTypeEnum.Declined:\n      case ConnectionRequestTypeEnum.Cancelled:\n      case ConnectionRequestTypeEnum.Removed:\n        return inviteOptions.filter((o) => o.value !== 'Cancel');\n    }\n    return inviteOptions;\n  }, [isNonNoumTab, user.connectionStatus, user.isVerified]);\n  const onHandleSelect = useCallback(\n    (option: InviteStatusDropdownProps) => {\n      onSelect(user, option.value);\n    },\n    [user, onSelect],\n  );\n  return (\n    <UserWrapper>\n      {user.isMember && (\n        <Avatar url={user.profile?.profilePictureThumbnail || ''} />\n      )}\n      <UserBody isPadding={user.isMember}>\n        <UserName>\n          <TSpan\n            colorToken=\"--text-tablecell-header-neutral-highlighted\"\n            font={user.isMember ? 'body-l-bold' : 'body-l'}\n          >\n            {getFullName(user.firstName, '', user.lastName)}\n          </TSpan>\n          <TSpan\n            colorToken=\"--text-tablecell-body-neutral-default\"\n            font=\"body-m\"\n            title={user?.title ?? ''}\n          >\n            {user.isMember ? user.title : user.email}\n          </TSpan>\n        </UserName>\n        <DropdownWrapper>\n          <Dropdown\n            hideIcons\n            closeOnSelect\n            placement=\"bottom-end\"\n            options={selectableOptions}\n            containerWidth=\"238px\"\n            onSelectOption={onHandleSelect}\n            onOpen={() => setIsOpen(true)}\n            onClose={() => setIsOpen(false)}\n            usePortal\n            calRefTop={true}\n            isAnimation={false}\n            usePopStyle\n            minHeight=\"fit-content\"\n            observerMinHeight=\"0px\"\n          >\n            {({\n              targetProps,\n              targetRef,\n              toggle,\n            }: DropdownTargetProps<HTMLDivElement>) => (\n              <DropdownPicker\n                ref={targetRef}\n                {...targetProps}\n                onClick={\n                  invitedStatus === ConnectionRequestTypeEnum.Approved ||\n                  (isNonNoumTab && user.isVerified)\n                    ? () => {}\n                    : toggle\n                }\n              >\n                <PickedInviteStatus\n                  colorToken=\"--text-tablecell-body-neutral-default\"\n                  font=\"body-m\"\n                >\n                  {invitedStatusText}\n                </PickedInviteStatus>\n                {!(\n                  invitedStatus === ConnectionRequestTypeEnum.Approved ||\n                  (isNonNoumTab && user.isVerified)\n                ) && (\n                  <Icon\n                    name={`chevron_small_${isOpen ? 'up' : 'down'}_m`}\n                    size={24}\n                    color=\"--icon-tablecell-neutral-highlighted\"\n                  />\n                )}\n              </DropdownPicker>\n            )}\n          </Dropdown>\n        </DropdownWrapper>\n      </UserBody>\n    </UserWrapper>\n  );\n};\n","import styled from 'styled-components';\nimport { Button } from '@/components/Button';\nimport { mediaSizes } from '@/constants/devices';\n\nexport const Container = styled.div`\n  width: 100%;\n`;\n\nexport const SearchWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nexport const SearchContainer = styled.div<{ focused?: boolean }>`\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 56px;\n  box-sizing: border-box;\n  padding-left: 12px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-radius: 8px;\n  border-width: 2px;\n  border-style: solid;\n  transition: border 0.2s linear;\n  background-color: var(--bg-input-neutral-default);\n  border-color: ${({ focused }) =>\n    focused ? `var(--border-input-brand-primary-default);` : `transparent`};\n`;\n\nexport const InputWrapper = styled.div`\n  flex: 1;\n  min-width: 50px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const InputField = styled.input`\n  font-size: var(--font-input-medium-size);\n  font-family: var(--font-family);\n  color: var(--text-input-neutral-default);\n  border: none;\n  outline: none;\n  width: 100%;\n  background-color: transparent;\n  padding: 0 !important;\n  -webkit-text-fill-color: var(--text-input-neutral-filled);\n  ::placeholder {\n    font-family: var(--font-input-medium-regular-font);\n    color: var(--text-input-neutral-default);\n    -webkit-text-fill-color: var(--text-input-neutral-default);\n    opacity: 1; /* Firefox */\n  }\n`;\n\nexport const SelectedUser = styled.div`\n  padding: 2px;\n  align-items: center;\n  display: flex;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 10px;\n\n  @media (max-width: 767px) {\n    display: none;\n  }\n`;\n\nexport const InviteButton = styled(Button)`\n  min-width: unset;\n  @media (min-width: ${mediaSizes.TABLET_MIN}) {\n    width: 100px;\n  }\n`;\n\nexport const ViewCountryButton = styled(Button)`\n  min-width: unset;\n  padding-left: 3px;\n  margin-bottom: 3px;\n`;\n\nexport const AvatarWrapper = styled.div``;\n","import { useCallback, useState, forwardRef, type FocusEvent } from 'react';\nimport {\n  SearchWrapper,\n  SearchContainer,\n  InputWrapper,\n  InputField,\n} from './styles';\nimport { type InviteUserSearchProps } from './types';\n\nexport const InviteUserSearch = forwardRef<\n  HTMLDivElement,\n  InviteUserSearchProps\n>(({ inputProps, children }, ref) => {\n  const [focused, setFocused] = useState<boolean>(false);\n\n  const onFocus = useCallback(\n    (e: FocusEvent<HTMLInputElement>) => {\n      if (inputProps.onFocus) inputProps.onFocus(e);\n      setFocused(true);\n    },\n    [inputProps],\n  );\n\n  const onBlur = useCallback(\n    (e: FocusEvent<HTMLInputElement>) => {\n      if (inputProps.onBlur) inputProps.onBlur(e);\n      setFocused(false);\n    },\n    [inputProps],\n  );\n\n  return (\n    <SearchWrapper data-testid=\"invite-user-search\" ref={ref}>\n      <SearchContainer focused={focused}>\n        {children}\n        <InputWrapper>\n          <InputField {...inputProps} onFocus={onFocus} onBlur={onBlur} />\n        </InputWrapper>\n      </SearchContainer>\n    </SearchWrapper>\n  );\n});\n","import React from 'react';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { Infinite } from '@/components/Infinite';\nimport {\n  DropdownItemLayout,\n  DropDownLabel,\n  DropdownValueWrapper,\n  DropdownValueLabel,\n  DropdownValueDescription,\n} from '@/components/Dropdown/styles';\nimport { AvatarWrapper } from './styles';\nimport { type UserOptionItemProps } from './types';\n\nexport const InviteUserOptionRenderer: React.FC<UserOptionItemProps> = ({\n  options,\n  activeItem,\n  loading,\n  hasMore,\n  onSelect,\n  onFetchMore,\n}) => (\n  <Infinite\n    data-testid=\"invite-users-list\"\n    status={loading ? 'loading' : hasMore ? 'end-with-force' : 'end'}\n    onFetchMore={onFetchMore}\n  >\n    {options.map((option) =>\n      option.type === 'value' ? (\n        <DropdownItemLayout\n          key={option.key}\n          active={activeItem?.key === option.key}\n          tabIndex={0}\n          onClick={() => onSelect(option)}\n        >\n          <DropDownLabel selected={activeItem?.key === option.key}>\n            <AvatarWrapper>\n              <Avatar url={option.value.user.thumbnailUrl ?? ''} size=\"M\" />\n            </AvatarWrapper>\n            <DropdownValueWrapper>\n              <DropdownValueLabel>{option.label}</DropdownValueLabel>\n              {option.description && (\n                <DropdownValueDescription>\n                  {option.description}\n                </DropdownValueDescription>\n              )}\n            </DropdownValueWrapper>\n          </DropDownLabel>\n        </DropdownItemLayout>\n      ) : null,\n    )}\n  </Infinite>\n);\n","import React from 'react';\nimport { Icon } from '@/components/Icon';\nimport { Tag } from '@/components/Tag';\nimport { TSpan } from '@/components/Typography';\n\nimport { SelectedUser } from './styles';\nimport { type InviteSelectedUserProps } from './types';\n\nexport const InviteSelectedUser: React.FC<InviteSelectedUserProps> = ({\n  data,\n  multiselect,\n  onRemove,\n}) => (\n  <SelectedUser data-testid=\"invite-selected-user\">\n    <Tag\n      secondary\n      icon={\n        multiselect ? (\n          <Icon\n            data-testid=\"remove-button\"\n            name=\"close_m\"\n            size={24}\n            color=\"--icon-tab-basic-brand-primary-default\"\n            onClick={() => onRemove(data.key)}\n          />\n        ) : undefined\n      }\n    >\n      <TSpan\n        data-testid=\"text-message\"\n        flex={1}\n        font=\"body-m\"\n        colorToken=\"--text-tab-chips-brand-primary-selected\"\n      >\n        {data.label}\n      </TSpan>\n    </Tag>\n  </SelectedUser>\n);\n","import { useCallback, useMemo } from 'react';\nimport {\n  useAllUsersWithoutEventQuery,\n  useGlobalSearchQuery,\n} from '@/apollo/graphql';\nimport {\n  EntityType,\n  GlobalSearchUserEntityStatus,\n  UserStatus,\n} from '@/apollo/generated/types';\nimport { cleanList } from '@/utils/list';\n\nconst PAGE_SIZE = 15;\n\nfunction useInviteUsersList(search: string) {\n  const { data: allUserData, loading: loadingAll } =\n    useAllUsersWithoutEventQuery({\n      variables: {\n        search,\n        limit: 1,\n        filter: {\n          excludeUsersByStatus: [UserStatus.Unregistered],\n        },\n      },\n    });\n\n  const {\n    data: searchedUsers,\n    fetchMore: searchMoreUsers,\n    loading: searchingUsers,\n  } = useGlobalSearchQuery({\n    variables: {\n      query: search,\n      limit: PAGE_SIZE,\n      entityType: EntityType.HomeNoum,\n    },\n    fetchPolicy: 'cache-and-network',\n  });\n\n  const fetchMore = useCallback(\n    (length) =>\n      searchMoreUsers({\n        variables: {\n          query: search,\n          limit: PAGE_SIZE,\n          offset: length || 0,\n          entityType: EntityType.HomeNoum,\n        },\n      }),\n    [searchMoreUsers, search],\n  );\n\n  const users = useMemo(\n    () =>\n      cleanList(searchedUsers?.globalSearch.data).filter(\n        (user) =>\n          user.entityType === EntityType.HomeNoum &&\n          user.user.status === GlobalSearchUserEntityStatus.NoumenaMember,\n      ),\n    [searchedUsers],\n  );\n\n  return {\n    allCount: allUserData?.allUsers.count || 0,\n    users,\n    fetchMore,\n    loading: loadingAll || searchingUsers,\n  };\n}\nexport default useInviteUsersList;\n","import { useTranslation } from 'react-i18next';\nimport {\n  useCallback,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport useDebounce from '@/hooks/useDebounce';\nimport { Dropdown } from '@/components/Dropdown';\nimport { EditChamberContext } from '@/screens/Chamber/EditChamber/provider';\nimport { type GlobalSearchEntity } from '@/apollo/generated/types';\nimport { useBreakpoints, useToast } from '@/hooks';\nimport { Spacer } from '@/layout';\nimport { TextArea } from '@/components/TextArea';\nimport { useNoumContext } from '@/screens/Chamber/ViewChamber/ChamberProvider';\nimport { useSendMultipleConnectionInviteMutation } from '@/apollo/graphql';\nimport { InviteUserSearch } from './InviteUserSearch';\nimport { type INoumUserDropdown, type InviteUserPickerProps } from './types';\nimport { InviteUserOptionRenderer } from './InviteUserOptionRenderer';\nimport { InviteSelectedUser } from './InviteSelectedUser';\nimport { Container, InviteButton } from './styles';\nimport useInviteUsersList from '../../useInviteUsersList';\nimport * as S from '../../../styles';\n\nexport const buildDropDownData = (\n  data: GlobalSearchEntity[],\n): INoumUserDropdown[] =>\n  data.map((datum: GlobalSearchEntity) => ({\n    key: datum.id,\n    label: datum.user.name || '',\n    type: 'value',\n    description: datum.user.title || '',\n    value: datum,\n  }));\n\nexport const InviteUserPicker: React.FC<InviteUserPickerProps> = ({\n  handleInvite,\n}) => {\n  const { t } = useTranslation();\n  const { addToast } = useToast();\n  const {\n    isMobile,\n    windowDimensions: { width: windowWidth },\n  } = useBreakpoints();\n\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { id } = useContext(EditChamberContext);\n  const { space } = useNoumContext();\n  const spaceId = id || space?._id || '';\n\n  const [nonMembers, setNonMembers] = useState<INoumUserDropdown[]>([]);\n  const [selected, setSelected] = useState<string[] | undefined>();\n  const [search, setSearch] = useState<string>('');\n  const [width, setWidth] = useState<number>(0);\n  const [multiselect] = useState<boolean>(true);\n  const [connectionMsg, setConnectionMsg] = useState<string>('');\n\n  const debouncedSearch = useDebounce<string>(search, 500);\n  const {\n    allCount,\n    users: searchedUsers,\n    loading: loadingUsersList,\n    fetchMore,\n  } = useInviteUsersList(debouncedSearch);\n  const [sendMultipleConnectionInviteMutation, { loading: loadingInvite }] =\n    useSendMultipleConnectionInviteMutation();\n  const [selectedOptions, setSelectedOptions] = useState<INoumUserDropdown[]>(\n    [],\n  );\n  const [displayedNoumUsers, setDisplayedNoumUsers] = useState(\n    searchedUsers || [],\n  );\n\n  const loading = loadingUsersList || loadingInvite;\n\n  useEffect(() => {\n    setDisplayedNoumUsers(searchedUsers || []);\n  }, [searchedUsers]);\n\n  const isSelected = useMemo(\n    () => selected?.length || nonMembers.length,\n    [selected, nonMembers],\n  );\n\n  const allOptions: INoumUserDropdown[] = useMemo(\n    () => buildDropDownData(displayedNoumUsers || []),\n    [displayedNoumUsers],\n  );\n\n  const selectableOptions: INoumUserDropdown[] = useMemo(() => {\n    const availableOptions: INoumUserDropdown[] = [];\n\n    allOptions.forEach((option) => {\n      if (!(selected || []).includes(String(option.key))) {\n        availableOptions.push({\n          ...option,\n          selected: false,\n        });\n      }\n    });\n\n    return availableOptions;\n  }, [allOptions, selected]);\n\n  const fetchOtherUsers = useCallback(async () => {\n    if (displayedNoumUsers.length < allCount) {\n      const otherUsers = await fetchMore(displayedNoumUsers.length);\n      const allUsers = displayedNoumUsers.concat(\n        otherUsers.data.globalSearch.data,\n      );\n      setDisplayedNoumUsers(allUsers);\n    }\n  }, [displayedNoumUsers, allCount, fetchMore]);\n\n  const onChange = useCallback((e: { target: { value: string } }) => {\n    const { value } = e.target;\n    setSearch(value);\n  }, []);\n\n  const onSelect = useCallback(\n    (option: INoumUserDropdown) => {\n      const selectedIds: string[] = selected || [];\n\n      if (multiselect) {\n        if (selectedIds.includes(option.key)) {\n          setSelected(selectedIds.filter((s) => s !== option.key));\n          setSelectedOptions(\n            selectedOptions.filter((s) => s.key !== option.key),\n          );\n        } else {\n          setSelected([...selectedIds, option.key]);\n          setSelectedOptions([...selectedOptions, option]);\n        }\n      } else {\n        setSelected([option.key]);\n        setSelectedOptions([option]);\n      }\n      setSearch('');\n    },\n    [multiselect, selected, selectedOptions],\n  );\n\n  const onUnSelect = useCallback((k: string) => {\n    setSelected((s) => (s || []).filter((_s) => _s !== k));\n    setSelectedOptions((s) => (s || []).filter((_s) => _s.key !== k));\n    setNonMembers((m) => (m || []).filter((_m) => _m.key !== k));\n  }, []);\n\n  const onHandleInvite = useCallback(async () => {\n    const idArray = selectedOptions.map((option) => option.value.id);\n    try {\n      await sendMultipleConnectionInviteMutation({\n        variables: {\n          message: connectionMsg.trim(),\n          ownSpaceId: spaceId,\n          invitedSpaceIds: idArray,\n        },\n      });\n      handleInvite();\n      addToast(\n        'success',\n        'icon',\n        `${t('noumena.chamber_invite_sent.success_messages')}`,\n      );\n      setConnectionMsg('');\n    } catch (e) {\n      let message = 'Unknown';\n      if (e instanceof Error) {\n        message = e.message;\n      }\n      const toastErrorMessage = message.includes('not published')\n        ? `${t('noumena.chamber_invite_sent.error_message.not_published')}`\n        : `${t('noumena.toast_error.text')}: ${message}`;\n      addToast('error', 'none', toastErrorMessage);\n    }\n    setSelectedOptions([]);\n    setSelected([]);\n  }, [\n    selectedOptions,\n    sendMultipleConnectionInviteMutation,\n    connectionMsg,\n    spaceId,\n    handleInvite,\n    addToast,\n    t,\n  ]);\n\n  useLayoutEffect(() => {\n    if (containerRef.current) {\n      setWidth(containerRef.current.clientWidth);\n    }\n  }, [containerRef, windowWidth]);\n\n  const handleClose = useCallback(() => {\n    if (isMobile) setSearch('');\n  }, [isMobile]);\n\n  return (\n    <>\n      <S.SettingWrapper>\n        <S.DropdownWrapper fullWidth>\n          <Container data-testid=\"invite-users-picker\" ref={containerRef}>\n            <Dropdown\n              hideIcons\n              closeOnSelect\n              multiselect={multiselect}\n              placement=\"bottom-start\"\n              options={selectableOptions}\n              onInputChange={(val) => setSearch(val)}\n              onSelectOption={onSelect}\n              onClose={handleClose}\n              usePortal\n              calRefTop={false}\n              isAnimation={false}\n              containerWidth={`${width}px`}\n              containerHeight={isMobile ? '100vh' : '250px'}\n              isLoading={loading}\n              showInternalSearch={isMobile}\n              forceHideCloseButton={false}\n              optionsRenderer={(options, handleSelectOption, activeItem) => (\n                <InviteUserOptionRenderer\n                  loading={loading}\n                  hasMore={displayedNoumUsers.length < allCount}\n                  options={options}\n                  multiselect={multiselect}\n                  activeItem={activeItem}\n                  onSelect={handleSelectOption}\n                  onFetchMore={fetchOtherUsers}\n                />\n              )}\n            >\n              {({ inputProps, inputRef }) => (\n                <InviteUserSearch\n                  ref={inputRef}\n                  inputProps={{\n                    ...inputProps,\n                    placeholder: isSelected\n                      ? ''\n                      : t('noumena.chamber_edit.visibility.invite_placeholder'),\n                    value: search,\n                    onChange,\n                    onKeyDown: () => {},\n                  }}\n                >\n                  {[...selectedOptions, ...nonMembers].map((user) => (\n                    <InviteSelectedUser\n                      key={user.key}\n                      multiselect={multiselect}\n                      data={user}\n                      onRemove={onUnSelect}\n                    />\n                  ))}\n                </InviteUserSearch>\n              )}\n            </Dropdown>\n          </Container>\n          <S.DescriptionWrapper>\n            <S.Description\n              colorToken=\"--text-input-neutral-default\"\n              font=\"body-s\"\n            >\n              {t(`noumena.chamber_edit.visibility.invite_description`)}\n            </S.Description>\n          </S.DescriptionWrapper>\n        </S.DropdownWrapper>\n        <InviteButton\n          primary\n          size=\"large\"\n          disabled={!isSelected}\n          onClick={onHandleInvite}\n          loading={loadingInvite}\n        >\n          {t(`noumena.chamber_edit.visibility.invite`)}\n        </InviteButton>\n      </S.SettingWrapper>\n      {isSelected > 0 && (\n        <>\n          <Spacer height={16} />\n          <TextArea\n            label={t(\n              'noumena.chamber_edit.visibility.invite_message.input_placeholder',\n            )}\n            maxLength={200}\n            value={connectionMsg}\n            onChange={(e) =>\n              setConnectionMsg(e.target.value.trimStart().slice(0, 200))\n            }\n            autoResize\n          />\n        </>\n      )}\n    </>\n  );\n};\n","import {\n  ActionType,\n  ConnectionRequestTypeEnum,\n} from '@/apollo/generated/types';\nimport { Infinite } from '@/components/Infinite';\nimport { Spinner } from '@/components/Spinner';\nimport { useConnections, useNoumDetails } from '@/features/noums/hooks/noums';\nimport { useUpdateConnectionStatusHelper } from '@/features/noums/hooks/spaceQuery';\nimport { useToast } from '@/hooks';\nimport { UserUtil } from '@/utils/user';\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { useSendMultipleConnectionInviteMutation } from '@/apollo/graphql';\nimport * as S from '../../../styles';\nimport { type InviteUserTabProps, type InvitedUser } from '../../../types';\nimport { ChamberInvitedUser } from '../ChamberInvitedUser';\nimport { InviteUserPicker } from '../InviteUserPicker/InviteUserPicker';\n\nconst InviteMemberTab: React.FC<InviteUserTabProps> = ({ spaceId }) => {\n  const {\n    invitedConnectionsLoading: loadingConnections,\n    invitedConnections: connections,\n    refetchInvitedConnections: onRefetchConnections,\n    fetchMoreInvitedConnections: fetchMoreConnections,\n    invitedInfiniteState: connectionsInfiniteState,\n  } = useConnections(spaceId, true, 10);\n\n  const { linkedNoumIds } = useNoumDetails(spaceId);\n\n  const { addToast } = useToast();\n  const { t } = useTranslation();\n  const isUsers = useMemo(() => !!connections?.length, [connections]);\n  const invitesScrollRef = useRef<HTMLDivElement>(null);\n  const { updateConnectionStatusHelper } = useUpdateConnectionStatusHelper();\n  const [sendMultipleConnectionInviteMutation] =\n    useSendMultipleConnectionInviteMutation();\n  const connectedUsers = useMemo(() => {\n    const result: InvitedUser[] = [];\n    connections?.map((connection) => {\n      if (\n        (!UserUtil.isInactive(connection.requestTo?.uid) ||\n          !UserUtil.isInactive(connection.requestFrom?.uid)) &&\n        connection.status !== ConnectionRequestTypeEnum.Cancelled &&\n        connection.status !== ConnectionRequestTypeEnum.Removed &&\n        connection.requestTo?.uid?.userStatus !== ActionType.Unregistered &&\n        !UserUtil.isInactive(connection.requestTo?.uid)\n      ) {\n        const requestedUser =\n          connection.requestFrom?._id === spaceId ||\n          linkedNoumIds.includes(connection?.requestFrom?._id!)\n            ? connection?.requestTo?.uid\n            : connection?.requestFrom?.uid;\n        result.push({\n          isMember: true,\n          connectionStatus: connection.status!,\n          connectionId: connection._id!,\n          ...requestedUser!,\n        } as InvitedUser);\n      }\n      return undefined;\n    });\n    return result;\n  }, [connections, spaceId, linkedNoumIds]);\n  const onResendInvite = useCallback(\n    async (user: InvitedUser) => {\n      try {\n        await sendMultipleConnectionInviteMutation({\n          variables: {\n            ownSpaceId: spaceId,\n            invitedSpaceIds: [user.chamber?._id || ''],\n          },\n        });\n        addToast(\n          'success',\n          'icon',\n          `${t('noumena.chamber_invite_sent.success_message')}`,\n        );\n        onRefetchConnections();\n      } catch (e) {\n        let message = 'Unknown';\n        if (e instanceof Error) {\n          message = e.message;\n        }\n        addToast(\n          'error',\n          'none',\n          `${t('noumena.toast_error.text')}: ${message}`,\n        );\n      }\n    },\n    [\n      sendMultipleConnectionInviteMutation,\n      spaceId,\n      addToast,\n      t,\n      onRefetchConnections,\n    ],\n  );\n  const onHandleInvite = useCallback(\n    (user: InvitedUser, value) => {\n      switch (value) {\n        case 'Cancel':\n          updateConnectionStatusHelper(\n            spaceId,\n            user.connectionId,\n            ConnectionRequestTypeEnum.Cancelled,\n          );\n          break;\n        case 'Resend':\n          onResendInvite(user);\n          break;\n      }\n    },\n    [updateConnectionStatusHelper, spaceId, onResendInvite],\n  );\n\n  const handleRefetchConnection = useCallback(() => {\n    onRefetchConnections();\n    if (invitesScrollRef.current) {\n      invitesScrollRef.current.scrollTo({\n        top: invitesScrollRef.current.offsetTop,\n        behavior: 'smooth',\n      });\n    }\n  }, [onRefetchConnections]);\n\n  return (\n    <>\n      <InviteUserPicker handleInvite={handleRefetchConnection} />\n      {loadingConnections ? (\n        <S.SpinnerContainer>\n          <Spinner />\n        </S.SpinnerContainer>\n      ) : (\n        <S.InvitedUsersWrapper>\n          <Infinite\n            ref={invitesScrollRef}\n            onFetchMore={fetchMoreConnections}\n            status={connectionsInfiniteState}\n            scrollbarWidth={0}\n            isSpinnerRelative\n          >\n            {Boolean(isUsers) &&\n              connectedUsers?.map((user: InvitedUser) => (\n                <ChamberInvitedUser\n                  key={user._id}\n                  user={user}\n                  onSelect={onHandleInvite}\n                />\n              ))}\n          </Infinite>\n        </S.InvitedUsersWrapper>\n      )}\n    </>\n  );\n};\n\nexport default InviteMemberTab;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Modal, ModalHeader, ModalSize } from '@/components/ExtendedModal';\nimport { useWindowDimensions } from '@/hooks';\nimport { TSpan } from '@/components/Typography';\nimport { Infinite } from '@/components/Infinite';\nimport { useListBlockedCountriesHelper } from '@/features/noums/hooks/spaceQuery';\nimport { type BlockedCountry } from '@/apollo/generated/types';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport * as S from '../../styles';\n\nexport type TModalProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nexport const BlockedCountriesListModal = ({ isOpen, onClose }: TModalProps) => {\n  const [countries, setCountries] = useState<BlockedCountry[]>([]);\n  const { t } = useTranslation();\n  const windowSize = useWindowDimensions();\n  const isMobile = useMemo(() => windowSize.width < 768, [windowSize]);\n  const pageSize = isMobile ? 30 : 20;\n  const { data, fetchMore } = useListBlockedCountriesHelper({\n    limit: pageSize,\n  });\n\n  useEffect(\n    () => setCountries(data?.listBlockedCountries?.data as BlockedCountry[]),\n    [data?.listBlockedCountries?.data],\n  );\n\n  const onFetchMore = useCallback(async () => {\n    const { data: moreCountries } = await fetchMore({\n      variables: {\n        limit: pageSize,\n        offset: countries.length || 0,\n      },\n    });\n    setCountries([\n      ...countries,\n      ...(moreCountries.listBlockedCountries?.data as BlockedCountry[]),\n    ]);\n  }, [countries, fetchMore, pageSize]);\n\n  return (\n    <Modal\n      testId=\"chamber-blocked-countries-modal\"\n      open={isOpen}\n      onClose={onClose}\n      enableAnimation\n      size={ModalSize.M}\n      customCloseButton={\n        <Button\n          testId=\"close_reference_modal\"\n          textOnly\n          size=\"small\"\n          icon={\n            <Icon\n              color=\"icon-button-brand-primary-default\"\n              name=\"arrow_left_m\"\n              size={24}\n            />\n          }\n          onClick={onClose}\n        />\n      }\n    >\n      <ModalHeader>\n        {t(`noumena.chamber_edit.visibility.global_availability`)}\n      </ModalHeader>\n      <S.CountryDescription>\n        <TSpan colorToken=\"--text-modal-neutral-default\" font=\"body-m\">\n          {t(`noumena.chamber_edit.visibility.except_countries`)}\n        </TSpan>\n      </S.CountryDescription>\n      {countries?.length ? (\n        <Infinite\n          onFetchMore={onFetchMore}\n          status=\"end-with-force\"\n          paddingBottom=\"15px\"\n          paddingTop=\"15px\"\n          width=\"100%\"\n        >\n          {countries?.map((country) => (\n            <S.Container key={country.code}>\n              <S.CountryName>\n                <TSpan colorToken=\"--text-modal-neutral-default\" font=\"body-m\">\n                  • {country?.name || ''}\n                </TSpan>\n              </S.CountryName>\n            </S.Container>\n          ))}\n        </Infinite>\n      ) : (\n        <TSpan colorToken=\"--text-modal-neutral-default\">\n          no blocked countries\n        </TSpan>\n      )}\n    </Modal>\n  );\n};\n\nexport default BlockedCountriesListModal;\n","import {\n  ActionType,\n  ConnectionRequestTypeEnum,\n  EntityType,\n  GlobalSearchUserEntityStatus,\n  UserStatus,\n} from '@/apollo/generated/types';\nimport {\n  useGlobalSearchLazyQuery,\n  useSendMultipleConnectionInviteMutation,\n} from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport { TextArea } from '@/components/TextArea';\nimport { TextField } from '@/components/TextField';\nimport { breakpoints } from '@/constants/devices';\nimport { useToast } from '@/hooks';\nimport { useWindowDimensions } from '@/hooks/dimensions';\nimport { useConnections, useNoumDetails } from '@/features/noums/hooks/noums';\nimport { useSendNonMemberConnectionInviteHelper } from '@/features/noums/hooks/spaceQuery';\nimport { Spacer } from '@/layout';\nimport { UserUtil } from '@/utils/user';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useCallback, useMemo, useState, type ChangeEvent } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport * as yup from 'yup';\nimport { BlockedCountriesListModal } from '../BlockedCountriesList';\nimport { ViewCountryButton } from './InviteUserPicker/styles';\nimport * as S from '../../styles';\nimport {\n  type CheckNewInviteResult,\n  type InvitedUser,\n  type InviteNonUserPickerProps,\n} from '../../types';\n\nconst InviteNonUserPicker = ({\n  connectedUsers,\n  spaceId: id,\n}: InviteNonUserPickerProps) => {\n  const [searchUsers, { loading: searchingUsers }] = useGlobalSearchLazyQuery();\n  const [inviteNoumUser, { loading: sendingInvite }] =\n    useSendMultipleConnectionInviteMutation({\n      onCompleted: (response) => {\n        if (response.sendMultipleConnectionInvite?.length) {\n          addToast(\n            'success',\n            'icon',\n            `${t(\n              'noumena.chamber_edit.visibility.invite_non_member.invited_noum_user',\n            )}`,\n          );\n          reset();\n          setConnectionMsg('');\n        } else if (\n          response.sendMultipleConnectionInvite &&\n          response.sendMultipleConnectionInvite.length === 0\n        ) {\n          addToast(\n            'primary',\n            'icon',\n            `${t(\n              'noumena.chamber_edit.visibility.invite_non_member.already_invited',\n            )}`,\n          );\n          reset();\n        }\n      },\n    });\n  const [isOpenCountryModal, setIsOpenCountryModal] = useState(false);\n  const [connectionMsg, setConnectionMsg] = useState('');\n  const { t } = useTranslation();\n  const { addToast } = useToast();\n  const { width } = useWindowDimensions();\n  const { sendNonMemberInvite, loading } =\n    useSendNonMemberConnectionInviteHelper();\n\n  const { connections } = useConnections(id);\n  const { space: noumInfo } = useNoumDetails(id);\n\n  const noumUsers = useMemo(() => {\n    const result: InvitedUser[] = [];\n    connections?.map((connection) => {\n      if (\n        ((connection.requestFrom?._id === id &&\n          !UserUtil.isInactive(connection.requestTo?.uid)) ||\n          (connection.requestTo?._id === id &&\n            !UserUtil.isInactive(connection.requestFrom?.uid))) &&\n        connection.status !== ConnectionRequestTypeEnum.Cancelled &&\n        connection.status !== ConnectionRequestTypeEnum.Removed &&\n        connection.requestTo?.uid?.userStatus !== ActionType.Unregistered &&\n        !UserUtil.isInactive(connection.requestTo?.uid)\n      ) {\n        const requestedUser =\n          connection.requestFrom?._id === id\n            ? connection?.requestTo?.uid\n            : connection?.requestFrom?.uid;\n        result.push({\n          isMember: true,\n          connectionStatus: connection.status!,\n          connectionId: connection._id!,\n          ...requestedUser!,\n        } as InvitedUser);\n      }\n      return undefined;\n    });\n    return result;\n  }, [connections, id]);\n\n  const isMobile = width < breakpoints.TABLET;\n  const isLaptop = width > breakpoints.TABLET_L;\n  const validationSchema = yup\n    .object()\n    .shape({\n      email: yup\n        .string()\n        .email(\n          t(\n            'noumena.chamber_edit.visibility.invite_non_member_email.invalid_error',\n          ),\n        )\n        .required(t('noumena.signup.error.field_cannot_be_empty')),\n      firstName: yup\n        .string()\n        .max(20, t(`noumena.signup.first_name.too_long`))\n        .required(t('noumena.signup.error.field_cannot_be_empty')),\n      lastName: yup\n        .string()\n        .max(20, t(`noumena.signup.last_name.too_long`))\n        .required(t('noumena.signup.error.field_cannot_be_empty')),\n    })\n    .required();\n\n  const {\n    register,\n    reset,\n    getValues,\n    handleSubmit,\n    formState: { isValid, errors },\n    trigger,\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: {\n      email: '',\n      firstName: '',\n      lastName: '',\n    },\n  });\n\n  const checkNewInvite = useCallback(\n    async (email: string): Promise<CheckNewInviteResult> => {\n      const result: CheckNewInviteResult = {\n        isNew: true,\n        isUnregistered: true,\n      };\n\n      const invitedUsers = connectedUsers?.filter(\n        (user) =>\n          user.email === email &&\n          user.isVerified &&\n          user.userStatus === UserStatus.Unregistered,\n      );\n\n      if (invitedUsers.length) {\n        result.isNew = false;\n        return result;\n      }\n      const searchResult = await searchUsers({\n        variables: {\n          query: email,\n          limit: 1,\n          entityType: EntityType.HomeNoum,\n        },\n      });\n\n      const user = searchResult?.data?.globalSearch?.data[0];\n\n      if (\n        !user ||\n        user.entityType !== EntityType.HomeNoum ||\n        user.user.status !== GlobalSearchUserEntityStatus.NoumenaMember\n      ) {\n        return result;\n      }\n\n      if (\n        user &&\n        user.entityType === EntityType.HomeNoum &&\n        user.user.status === GlobalSearchUserEntityStatus.NoumenaMember\n      ) {\n        const invitedNMUser = noumUsers.find(\n          (noumUser) => noumUser._id === user.user.id,\n        );\n        if (invitedNMUser) {\n          result.isNew = false;\n          result.isUnregistered = false;\n          return result;\n        }\n      }\n\n      if (!connections.length) {\n        result.isUnregistered = false;\n        result.user = user;\n        return result;\n      }\n\n      const existingConnections = connections?.filter(\n        (connection) =>\n          connection.requestFrom?._id === id &&\n          connection.status !== ConnectionRequestTypeEnum.Cancelled &&\n          connection.status !== ConnectionRequestTypeEnum.Removed &&\n          connection.requestTo?.uid?._id === user.id,\n      );\n\n      if (existingConnections.length) {\n        result.isNew = false;\n      } else {\n        result.isUnregistered = false;\n        result.user = user;\n      }\n\n      return result;\n    },\n    [id, connectedUsers, noumUsers, connections, searchUsers],\n  );\n\n  const onHandleInvite = useCallback(async () => {\n    try {\n      const email = getValues('email');\n      const isNewInvite = await checkNewInvite(email);\n      if (!isNewInvite.isNew) {\n        addToast(\n          'primary',\n          'icon',\n          `${t(\n            'noumena.chamber_edit.visibility.invite_non_member.already_invited',\n          )}`,\n        );\n        return;\n      }\n\n      if (isNewInvite.isUnregistered && noumInfo) {\n        await sendNonMemberInvite(\n          id,\n          getValues('email'),\n          getValues('firstName'),\n          getValues('lastName'),\n          noumInfo,\n          connectionMsg.trim(),\n        );\n        reset();\n        setConnectionMsg('');\n        addToast(\n          'success',\n          'icon',\n          `${t('noumena.chamber_invite_sent.success_messages')}`,\n        );\n      } else if (id && isNewInvite.user?.id) {\n        await inviteNoumUser({\n          variables: {\n            ownSpaceId: id,\n            invitedSpaceIds: [isNewInvite.user.id],\n            message: connectionMsg,\n          },\n        });\n      }\n      return;\n    } catch (e) {\n      let message = 'Unknown';\n      if (e instanceof Error) {\n        message = e.message;\n      }\n      addToast('error', 'none', message);\n    }\n  }, [\n    addToast,\n    getValues,\n    id,\n    noumInfo,\n    reset,\n    sendNonMemberInvite,\n    t,\n    checkNewInvite,\n    inviteNoumUser,\n    connectionMsg,\n  ]);\n\n  const onSubmit = useCallback(async () => {\n    onHandleInvite();\n  }, [onHandleInvite]);\n\n  const handleChange = useCallback(() => {\n    trigger();\n  }, [trigger]);\n\n  const handleChangeMessage = useCallback(\n    (event: ChangeEvent<HTMLTextAreaElement>) => {\n      setConnectionMsg(event.target.value.trimStart().slice(0, 200));\n    },\n    [setConnectionMsg],\n  );\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)} style={{ width: '100%' }}>\n        <S.UserFormHeader>\n          <S.FieldContent width={isLaptop ? '293px' : '40%'}>\n            <TextField\n              label={t(`noumena.email`)}\n              {...register('email', {\n                onChange: handleChange,\n              })}\n              value={getValues('email')}\n              fullWidth\n              error={!!errors.email}\n              helperText={errors.email?.message}\n            />\n          </S.FieldContent>\n          <S.FieldContent width={isLaptop ? '150px' : '20%'}>\n            <TextField\n              label={t(`noumena.first_name`)}\n              {...register('firstName', {\n                onChange: handleChange,\n              })}\n              value={getValues('firstName')}\n              fullWidth\n            />\n          </S.FieldContent>\n          <S.FieldContent width={isLaptop ? '150px' : '20%'}>\n            <TextField\n              label={t(`noumena.last_name`)}\n              {...register('lastName', {\n                onChange: handleChange,\n              })}\n              value={getValues('lastName')}\n              fullWidth\n            />\n          </S.FieldContent>\n          <S.FieldContent width={isLaptop ? 'auto' : '12%'}>\n            <Button\n              primary\n              size=\"full\"\n              disabled={!isValid}\n              loading={loading || searchingUsers || sendingInvite}\n              type=\"submit\"\n            >\n              {t(`noumena.chamber_edit.visibility.invite`)}\n            </Button>\n          </S.FieldContent>\n        </S.UserFormHeader>\n        <S.NonMemberDescriptionWrapper isMobile={isMobile}>\n          <S.Description\n            colorToken=\"--text-input-neutral-default\"\n            font=\"body-s\"\n          >\n            {t(`noumena.chamber_edit.visibility.invite_non_member_description`)}\n          </S.Description>\n          <ViewCountryButton\n            textOnly\n            onClick={() => setIsOpenCountryModal(true)}\n          >\n            <S.TextUnderLine\n              colorToken=\"--text-input-neutral-default\"\n              font=\"body-s\"\n            >\n              {t(`noumena.chamber_edit.visibility.invite_non_member_button`)}\n            </S.TextUnderLine>\n          </ViewCountryButton>\n        </S.NonMemberDescriptionWrapper>\n        {isValid && (\n          <>\n            <Spacer height={16} />\n            <TextArea\n              label={t(\n                'noumena.chamber_edit.visibility.invite_message.input_placeholder',\n              )}\n              maxLength={200}\n              value={connectionMsg}\n              onChange={handleChangeMessage}\n              autoResize\n            />\n          </>\n        )}\n      </form>\n      <BlockedCountriesListModal\n        isOpen={isOpenCountryModal}\n        onClose={() => setIsOpenCountryModal(false)}\n      />\n    </>\n  );\n};\n\nexport default InviteNonUserPicker;\n","import { Spinner } from '@/components/Spinner';\nimport { useToast } from '@/hooks';\nimport {\n  useNonNoumMembers,\n  useNoumDetails,\n} from '@/features/noums/hooks/noums';\nimport {\n  useSendNonMemberConnectionInviteHelper,\n  useSetInviteInactiveHelper,\n} from '@/features/noums/hooks/spaceQuery';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ChamberInvitedUser } from '../ChamberInvitedUser';\nimport InviteNonUserPicker from '../InviteNonUserPicker';\nimport * as S from '../../../styles';\nimport { type InvitedUser, type InviteUserTabProps } from '../../../types';\n\nconst InviteNonMemberTab: React.FC<InviteUserTabProps> = ({ spaceId }) => {\n  const [connectedUsers, setConnectedUsers] = useState<InvitedUser[]>([]);\n  const { loadingNonMembers, nonMembers } = useNonNoumMembers(spaceId);\n  const { addToast } = useToast();\n  const { t } = useTranslation();\n  const isUsers = useMemo(() => !!nonMembers?.length, [nonMembers]);\n  const { setInvitedMemberInactive } = useSetInviteInactiveHelper();\n  const { sendNonMemberInvite } = useSendNonMemberConnectionInviteHelper();\n  const { space: noumInfo } = useNoumDetails(spaceId);\n\n  const checkMembersEmail = useCallback(() => {\n    let checkEmailflag = nonMembers.length > 0;\n    nonMembers?.forEach((connection) => {\n      if (!connection.uid?.email) checkEmailflag = false;\n    });\n    return checkEmailflag;\n  }, [nonMembers]);\n\n  useEffect(() => {\n    if (nonMembers && nonMembers.length !== 0 && checkMembersEmail()) {\n      const result: InvitedUser[] = [];\n      nonMembers?.forEach((connection) => {\n        result.push({\n          email: connection.uid?.email,\n          connectionStatus: connection.uid?.userStatus!,\n          connectionId: connection._id!,\n          isVerified: connection.isVerified,\n          ...connection.uid,\n        } as InvitedUser);\n      });\n      setConnectedUsers(result);\n    }\n    if (!isUsers) setConnectedUsers([]);\n  }, [checkMembersEmail, nonMembers, isUsers]);\n\n  const onResendInvite = useCallback(\n    async (user: InvitedUser) => {\n      try {\n        if (!noumInfo) return;\n        await sendNonMemberInvite(\n          spaceId,\n          user.email || '',\n          user.firstName || '',\n          user.lastName || '',\n          noumInfo,\n        );\n        addToast(\n          'success',\n          'icon',\n          `${t('noumena.chamber_invite_sent.success_message')}`,\n        );\n      } catch (e) {\n        let message = 'Unknown';\n        if (e instanceof Error) {\n          message = e.message;\n        }\n        addToast('error', 'none', message);\n      }\n    },\n    [sendNonMemberInvite, spaceId, addToast, t, noumInfo],\n  );\n  const onHandleInvite = useCallback(\n    async (user: InvitedUser, value) => {\n      switch (value) {\n        case 'Cancel':\n          setInvitedMemberInactive(user.connectionId, spaceId);\n          break;\n        case 'Resend':\n          onResendInvite(user);\n          break;\n      }\n    },\n    [setInvitedMemberInactive, spaceId, onResendInvite],\n  );\n\n  return (\n    <>\n      <InviteNonUserPicker connectedUsers={connectedUsers} spaceId={spaceId} />\n      {loadingNonMembers ? (\n        <S.SpinnerContainer>\n          <Spinner />\n        </S.SpinnerContainer>\n      ) : (\n        <S.InvitedUsersWrapper>\n          {Boolean(isUsers) &&\n            connectedUsers.map((user: InvitedUser) => (\n              <ChamberInvitedUser\n                key={user._id}\n                user={user}\n                onSelect={onHandleInvite}\n                isNonNoumTab\n              />\n            ))}\n        </S.InvitedUsersWrapper>\n      )}\n    </>\n  );\n};\n\nexport default InviteNonMemberTab;\n","import BasicChipsTabsForm from '@/components/Tabs/TabsForm';\nimport { useBreakpoints, useLaunchDarkly } from '@/hooks';\nimport { useState } from 'react';\nimport * as S from '../../styles';\nimport { InviteMemberTabId } from '../../types';\nimport { inviteMembersTabInputList } from '../constants';\nimport InviteMemberTab from './Tabs/InviteMemberTab';\nimport InviteNonMemberTab from './Tabs/InviteNonMemberTab';\n\ninterface InviteMembersProps {\n  noumId: string;\n}\n\nexport function InviteMembers({ noumId }: InviteMembersProps) {\n  const { flags } = useLaunchDarkly();\n  const [activeTabId, setActiveTabId] = useState<InviteMemberTabId>(\n    InviteMemberTabId.NoumenaMembers,\n  );\n\n  const { isMobile, windowDimensions } = useBreakpoints();\n\n  return flags.nonNmUsers ? (\n    <>\n      <S.TabSection>\n        <BasicChipsTabsForm<InviteMemberTabId>\n          inputList={inviteMembersTabInputList}\n          onChange={setActiveTabId}\n          selectedId={activeTabId}\n          mode=\"isUnderline\"\n          isWithoutImage\n          fontSize={\n            isMobile ? '--font-input-small-size' : '--font-button-small-size'\n          }\n          tabWidth={isMobile ? `${windowDimensions.width / 2 - 32}px` : '100%'}\n          isMobile={isMobile}\n          windowSize={windowDimensions.width}\n          textFont=\"--font-body-medium-regular-font\"\n        />\n      </S.TabSection>\n      <S.TabContent>\n        {activeTabId === InviteMemberTabId.NoumenaMembers && (\n          <InviteMemberTab spaceId={noumId} />\n        )}\n        {activeTabId === InviteMemberTabId.NonNoumenaMembers && (\n          <InviteNonMemberTab spaceId={noumId} />\n        )}\n      </S.TabContent>\n    </>\n  ) : (\n    <InviteMemberTab spaceId={noumId} />\n  );\n}\n","import {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { useBreakpoints } from '@/hooks';\nimport { memo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TSpan } from '@/components/Typography';\nimport { VisibilitySettings } from './VisibilitySettings/VisibilitySettings';\nimport { type ChamberVisibilityInviteModalProps } from './types';\nimport * as S from './styles';\nimport { InviteMembers } from './InviteMembers/ViaConnections/InviteMembers';\n\nexport const ChamberVisibilityInviteModal = memo(\n  ({\n    visibility,\n    isOpen,\n    spaceId,\n    handleClose,\n    linkedNoums,\n    isSEOEnabled = false,\n    isOnlyInvite = false,\n  }: ChamberVisibilityInviteModalProps) => {\n    const { t } = useTranslation();\n    const { isMobile, isDesktop } = useBreakpoints();\n\n    return (\n      <Modal\n        testId=\"chamber-visibility-invite-modal\"\n        open={isOpen}\n        onClose={handleClose}\n        enableCloseButton\n        size={ModalSize.XL}\n        isFullScreen={!isDesktop}\n        disableBackdropClick\n      >\n        <ModalHeader\n          justifyContent={isMobile ? 'flex-start' : 'center'}\n          isFullScreen={!isDesktop}\n        >\n          {isOnlyInvite\n            ? t(`noumena.noum.invite_users`)\n            : t(`noumena.chamber_edit.visibility.title`)}\n        </ModalHeader>\n        <ModalBody isFullScreen={!isDesktop} noFooter>\n          {!isOnlyInvite && (\n            <>\n              <VisibilitySettings\n                noumId={spaceId}\n                defaultVisibility={visibility}\n                linkedNoums={linkedNoums ?? []}\n                isSEOEnabled={isSEOEnabled}\n                onClose={handleClose}\n              />\n              <S.Divider />\n              <S.InviteTitle>\n                <TSpan\n                  colorToken=\"--text-modal-header-neutral-default\"\n                  font=\"body-l-bold\"\n                >\n                  {t(`noumena.chamber_edit.visibility.invites`)}\n                </TSpan>\n              </S.InviteTitle>\n            </>\n          )}\n\n          <InviteMembers noumId={spaceId} />\n        </ModalBody>\n      </Modal>\n    );\n  },\n);\n","import { type NoumRoleForDropdownFragment } from '@/apollo/graphql';\nimport { type DropdownValueType } from '@/components/Dropdown';\n\nexport function mapRoleOptionsFromList(\n  noumRoles: NoumRoleForDropdownFragment[],\n): DropdownValueType<string>[] {\n  return noumRoles.map((role) => ({\n    type: 'value',\n    key: role._id,\n    value: role._id,\n    label: role.name,\n  }));\n}\n","import { useGetNoumRolesQuery } from '@/apollo/graphql';\nimport { SelectField, type SelectFieldProps } from '@/components/SelectField';\nimport { cleanList } from '@/utils/list';\nimport { useMemo } from 'react';\nimport { type DropdownValueType } from '@/components/Dropdown';\nimport { mapRoleOptionsFromList } from './mappers';\n\ninterface NoumRolePickerProps\n  extends Omit<SelectFieldProps<string>, 'value' | 'onChange' | 'options'> {\n  value: string;\n  onChange(option: DropdownValueType<string>): void;\n}\n\nexport function NoumRolePicker({\n  value,\n  onChange,\n  ...selectFieldProps\n}: NoumRolePickerProps) {\n  const { data, loading } = useGetNoumRolesQuery({\n    fetchPolicy: 'cache-and-network',\n    variables: {\n      limit: 50,\n      offset: 0,\n    },\n  });\n\n  const noumRoleOptions = useMemo(\n    () => mapRoleOptionsFromList(cleanList(data?.noumRoles.data)),\n    [data?.noumRoles.data],\n  );\n\n  return (\n    <SelectField\n      isLoading={loading}\n      hideIcons\n      options={noumRoleOptions}\n      searchable={false}\n      searchPlaceholder={value ? undefined : 'Role'}\n      value={value}\n      onChange={onChange}\n      maxContainerHeight=\"400px\"\n      {...selectFieldProps}\n    />\n  );\n}\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nexport const inviteMembersSchema = yup.object({\n  userIds: yup.array(yup.string().required()).required().ensure().min(1),\n  roleId: yup.string().required(),\n  message: yup.string().max(100),\n});\n\nexport type InviteMembersValues = yup.InferType<typeof inviteMembersSchema>;\n\ninterface UseInviteMembersFormOptions {\n  defaultValues: DefaultValues<InviteMembersValues>;\n}\n\nexport function useInviteMembersForm({\n  defaultValues,\n}: UseInviteMembersFormOptions) {\n  return useForm<InviteMembersValues>({\n    defaultValues,\n    resolver: yupResolver(inviteMembersSchema),\n  });\n}\n","import styled from 'styled-components';\nimport { Button } from '@/components/Button';\nimport { mediaSizes } from '@/constants/devices';\n\nexport const Container = styled.div`\n  width: 100%;\n`;\n\nexport const SearchWrapper = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n`;\n\nexport const SearchContainer = styled.div<{ focused?: boolean }>`\n  flex: 1;\n  display: flex;\n  flex-wrap: wrap;\n  min-height: 56px;\n  box-sizing: border-box;\n  padding-left: 12px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  border-radius: 8px;\n  border-width: 2px;\n  border-style: solid;\n  transition: border 0.2s linear;\n  background-color: var(--bg-input-neutral-default);\n  border-color: ${({ focused }) =>\n    focused ? `var(--border-input-brand-primary-default);` : `transparent`};\n`;\n\nexport const InputWrapper = styled.div`\n  flex: 1;\n  min-width: 50px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const InputField = styled.input`\n  font-size: var(--font-input-medium-size);\n  font-family: var(--font-family);\n  color: var(--text-input-neutral-default);\n  border: none;\n  outline: none;\n  width: 100%;\n  background-color: transparent;\n  padding: 0 !important;\n  -webkit-text-fill-color: var(--text-input-neutral-filled);\n  ::placeholder {\n    font-family: var(--font-input-medium-regular-font);\n    color: var(--text-input-neutral-default);\n    -webkit-text-fill-color: var(--text-input-neutral-default);\n    opacity: 1; /* Firefox */\n  }\n`;\n\nexport const SelectedUser = styled.div`\n  padding: 2px;\n  align-items: center;\n  display: flex;\n`;\n\nexport const ButtonWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 10px;\n\n  @media (max-width: 767px) {\n    display: none;\n  }\n`;\n\nexport const InviteButton = styled(Button)`\n  min-width: unset;\n  @media (min-width: ${mediaSizes.TABLET_MIN}) {\n    width: 100px;\n  }\n`;\n\nexport const ViewCountryButton = styled(Button)`\n  min-width: unset;\n  padding-left: 3px;\n  margin-bottom: 3px;\n`;\n\nexport const AvatarWrapper = styled.div``;\n","import React from 'react';\nimport { Icon } from '@/components/Icon';\nimport { Tag } from '@/components/Tag';\nimport { TSpan } from '@/components/Typography';\n\nimport { SelectedUser } from './styles';\nimport { type InviteSelectedUserProps } from './types';\n\nexport const InviteSelectedUser: React.FC<InviteSelectedUserProps> = ({\n  data,\n  multiselect,\n  onRemove,\n}) => (\n  <SelectedUser data-testid=\"invite-selected-user\">\n    <Tag\n      secondary\n      icon={\n        multiselect ? (\n          <Icon\n            data-testid=\"remove-button\"\n            name=\"close_m\"\n            size={24}\n            color=\"--icon-tab-basic-brand-primary-default\"\n            onClick={() => onRemove(data)}\n          />\n        ) : undefined\n      }\n    >\n      <TSpan\n        data-testid=\"text-message\"\n        flex={1}\n        font=\"body-m\"\n        colorToken=\"--text-tab-chips-brand-primary-selected\"\n      >\n        {data.label}\n      </TSpan>\n    </Tag>\n  </SelectedUser>\n);\n","import React from 'react';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { Infinite } from '@/components/Infinite';\nimport {\n  DropdownItemLayout,\n  DropDownLabel,\n  DropdownValueWrapper,\n  DropdownValueLabel,\n  DropdownValueDescription,\n} from '@/components/Dropdown/styles';\nimport { AvatarWrapper } from './styles';\nimport { type UserOptionItemProps } from './types';\n\nexport const InviteUserOptionRenderer: React.FC<UserOptionItemProps> = ({\n  options,\n  activeItem,\n  loading,\n  hasMore,\n  onSelect,\n  onFetchMore,\n}) => (\n  <Infinite\n    data-testid=\"invite-users-list\"\n    status={loading ? 'loading' : hasMore ? 'end-with-force' : 'end'}\n    onFetchMore={onFetchMore}\n  >\n    {options.map((option) =>\n      option.type === 'value' ? (\n        <DropdownItemLayout\n          key={option.key}\n          active={activeItem?.key === option.key}\n          tabIndex={0}\n          onClick={() => onSelect(option)}\n        >\n          <DropDownLabel selected={activeItem?.key === option.key}>\n            <AvatarWrapper>\n              <Avatar url={option.value.user.thumbnailUrl ?? ''} size=\"M\" />\n            </AvatarWrapper>\n            <DropdownValueWrapper>\n              <DropdownValueLabel>{option.label}</DropdownValueLabel>\n              {option.description && (\n                <DropdownValueDescription>\n                  {option.description}\n                </DropdownValueDescription>\n              )}\n            </DropdownValueWrapper>\n          </DropDownLabel>\n        </DropdownItemLayout>\n      ) : null,\n    )}\n  </Infinite>\n);\n","import { useCallback, useState, forwardRef, type FocusEvent } from 'react';\nimport {\n  SearchWrapper,\n  SearchContainer,\n  InputWrapper,\n  InputField,\n} from './styles';\nimport { type InviteUserSearchProps } from './types';\n\nexport const InviteUserSearch = forwardRef<\n  HTMLDivElement,\n  InviteUserSearchProps\n>(({ inputProps, children }, ref) => {\n  const [focused, setFocused] = useState<boolean>(false);\n\n  const onFocus = useCallback(\n    (e: FocusEvent<HTMLInputElement>) => {\n      if (inputProps.onFocus) inputProps.onFocus(e);\n      setFocused(true);\n    },\n    [inputProps],\n  );\n\n  const onBlur = useCallback(\n    (e: FocusEvent<HTMLInputElement>) => {\n      if (inputProps.onBlur) inputProps.onBlur(e);\n      setFocused(false);\n    },\n    [inputProps],\n  );\n\n  return (\n    <SearchWrapper data-testid=\"invite-user-search\" ref={ref}>\n      <SearchContainer focused={focused}>\n        {children}\n        <InputWrapper>\n          <InputField {...inputProps} onFocus={onFocus} onBlur={onBlur} />\n        </InputWrapper>\n      </SearchContainer>\n    </SearchWrapper>\n  );\n});\n","import { type GlobalSearchEntity } from '@/apollo/generated/types';\nimport { Dropdown } from '@/components/Dropdown';\nimport { useBreakpoints } from '@/hooks';\nimport useDebounce from '@/hooks/useDebounce';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport useInviteUsersList from '../../../useInviteUsersList';\nimport { InviteSelectedUser } from './InviteSelectedUser';\nimport { InviteUserOptionRenderer } from './InviteUserOptionRenderer';\nimport { InviteUserSearch } from './InviteUserSearch';\nimport { Container } from './styles';\nimport { type INoumUserDropdown } from './types';\nimport * as S from '../../../../styles';\n\nexport const buildDropdownOptions = (\n  searchResults: GlobalSearchEntity[],\n): INoumUserDropdown[] =>\n  searchResults.map((entity: GlobalSearchEntity) => ({\n    key: entity.user.id || '',\n    label: entity.user.name || '',\n    type: 'value',\n    description: entity.user.title || '',\n    value: entity,\n    selected: false,\n  }));\n\ninterface InviteUserPickerProps {\n  value: string[];\n  onChange(value: string[]): void;\n  helperText?: string;\n  placeholder?: string;\n}\n\nexport const InviteUserPicker: React.FC<InviteUserPickerProps> = ({\n  value,\n  onChange,\n  helperText,\n  placeholder,\n}) => {\n  const { t } = useTranslation();\n  const { isMobile } = useBreakpoints();\n\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [search, setSearch] = useState<string>('');\n  const debouncedSearch = useDebounce<string>(search, 500);\n\n  const {\n    allCount,\n    users: searchResults,\n    loading,\n    fetchMore,\n  } = useInviteUsersList(debouncedSearch);\n\n  const [selectedOptions, setSelectedOptions] = useState<INoumUserDropdown[]>(\n    [],\n  );\n\n  const selectableOptions: INoumUserDropdown[] = useMemo(\n    () =>\n      buildDropdownOptions(searchResults || []).filter(\n        (option) => !value.includes(option.key),\n      ),\n    [searchResults, value],\n  );\n\n  const fetchOtherUsers = async () => {\n    if (searchResults.length < allCount) {\n      fetchMore(searchResults.length);\n    }\n  };\n\n  const onSelectItem = useCallback(\n    (option: INoumUserDropdown) => {\n      if (value.includes(option.key)) {\n        onChange(value.filter((s) => s !== option.key));\n        setSelectedOptions(selectedOptions.filter((s) => s.key !== option.key));\n      } else {\n        onChange([...value, option.key]);\n        setSelectedOptions([...selectedOptions, option]);\n      }\n      setSearch('');\n    },\n    [value, onChange, selectedOptions],\n  );\n\n  const onRemoveItem = (option: INoumUserDropdown) => {\n    onChange(value.filter((v) => v !== option.key));\n    setSelectedOptions((s) => s.filter((_s) => _s.key !== option.key));\n  };\n\n  const inputWidth = containerRef.current?.clientWidth ?? 0;\n\n  return (\n    <Container data-testid=\"invite-users-picker\" ref={containerRef}>\n      <Dropdown\n        hideIcons\n        closeOnSelect\n        multiselect\n        placement=\"bottom-start\"\n        options={selectableOptions}\n        onInputChange={setSearch}\n        onSelectOption={onSelectItem}\n        onClose={() => {\n          if (isMobile) setSearch('');\n        }}\n        usePortal\n        calRefTop={false}\n        isAnimation={false}\n        containerWidth={`${inputWidth}px`}\n        containerHeight={isMobile ? '100vh' : '250px'}\n        isLoading={loading}\n        showInternalSearch={isMobile}\n        forceHideCloseButton={false}\n        optionsRenderer={(options, handleSelectOption, activeItem) => (\n          <InviteUserOptionRenderer\n            loading={loading}\n            hasMore={searchResults.length < allCount}\n            options={options}\n            multiselect\n            activeItem={activeItem}\n            onSelect={handleSelectOption}\n            onFetchMore={fetchOtherUsers}\n          />\n        )}\n      >\n        {({ inputProps, inputRef }) => (\n          <InviteUserSearch\n            ref={inputRef}\n            inputProps={{\n              ...inputProps,\n              placeholder: value.length > 0 ? '' : placeholder,\n              value: search,\n              onChange: (e) => setSearch(e.currentTarget.value),\n              onKeyDown: () => {},\n            }}\n          >\n            {selectedOptions.map((user) => (\n              <InviteSelectedUser\n                key={user.key}\n                multiselect\n                data={user}\n                onRemove={onRemoveItem}\n              />\n            ))}\n          </InviteUserSearch>\n        )}\n      </Dropdown>\n      {helperText && (\n        <S.DescriptionWrapper>\n          <S.Description\n            colorToken=\"--text-input-neutral-default\"\n            font=\"body-s\"\n          >\n            {t(`noumena.chamber_edit.visibility.invite_description`)}\n          </S.Description>\n        </S.DescriptionWrapper>\n      )}\n    </Container>\n  );\n};\n","import { Controller } from 'react-hook-form';\nimport { Button } from '@/components/Button';\nimport { useTranslation } from 'react-i18next';\nimport { TextArea } from '@/components/TextArea';\nimport { Stack, StackItem } from '@/layout';\nimport { NoumRolePicker } from '@/features/noums/components/NoumRolePicker';\nimport { useInviteMembersForm, type InviteMembersValues } from './schema';\nimport { InviteUserPicker } from './InviteUserPicker/InviteUserPicker';\n\ninterface InviteMemberFormProps {\n  // @TODO: Use this to fetch members list and cross-check for existing members in the dropdown.\n  noumId: string;\n  onCancel(): void;\n  onSubmit(values: InviteMembersValues): Promise<void>;\n}\n\nexport function InviteMemberForm({\n  onCancel,\n  onSubmit,\n}: InviteMemberFormProps) {\n  const { t } = useTranslation();\n\n  const {\n    handleSubmit,\n    control,\n    formState: { isValid, isSubmitting },\n  } = useInviteMembersForm({\n    defaultValues: {\n      userIds: [],\n      roleId: '',\n      message: '',\n    },\n  });\n\n  return (\n    <Stack vertical align=\"stretch\" fullWidth gap={16}>\n      <Stack align=\"start\" fullWidth gap={16}>\n        <StackItem grow>\n          <Controller\n            control={control}\n            name=\"userIds\"\n            render={({ field }) => (\n              <InviteUserPicker\n                value={field.value}\n                onChange={field.onChange}\n                helperText={t(\n                  `noumena.chamber_edit.visibility.invite_description`,\n                )}\n                placeholder={t(\n                  'noumena.chamber_edit.visibility.invite_placeholder',\n                )}\n              />\n            )}\n          />\n        </StackItem>\n        <StackItem basis=\"220px\">\n          <Controller\n            control={control}\n            name=\"roleId\"\n            render={({ field }) => (\n              <NoumRolePicker\n                value={field.value}\n                onChange={(option) => field.onChange(option.value)}\n                label=\"Role\"\n              />\n            )}\n          />\n        </StackItem>\n      </Stack>\n\n      <Controller\n        control={control}\n        name=\"message\"\n        render={({ field: { onChange, ...fieldProps } }) => (\n          <TextArea\n            {...fieldProps}\n            autoResize\n            label={t(\n              'noumena.chamber_edit.visibility.invite_message.input_placeholder',\n            )}\n            maxLength={100}\n            onChange={(e) => onChange(e.target.value.trimStart().slice(0, 100))}\n          />\n        )}\n      />\n\n      <Stack gap={16} fullWidth>\n        <Button tertiary size=\"large\" onClick={onCancel} grow>\n          Cancel\n        </Button>\n\n        <Button\n          primary\n          size=\"large\"\n          disabled={!isValid}\n          loading={isSubmitting}\n          onClick={handleSubmit(onSubmit)}\n          grow\n        >\n          {t(`noumena.noums.member_management.invite_members.submit`)}\n        </Button>\n      </Stack>\n    </Stack>\n  );\n}\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nexport const inviteNonMemberSchema = yup.object({\n  email: yup.string().email().required().label('Email'),\n  firstName: yup.string().required().label('First Name'),\n  lastName: yup.string().required().label('Last Name'),\n  message: yup.string().max(100).label('Message'),\n});\n\nexport type InviteNonMemberValues = yup.InferType<typeof inviteNonMemberSchema>;\n\ninterface UseInviteNonMemberFormOptions {\n  defaultValues: DefaultValues<InviteNonMemberValues>;\n}\n\nexport function useInviteNonMemberForm({\n  defaultValues,\n}: UseInviteNonMemberFormOptions) {\n  return useForm<InviteNonMemberValues>({\n    defaultValues,\n    resolver: yupResolver(inviteNonMemberSchema),\n    mode: 'all',\n  });\n}\n","import { Stack, StackItem } from '@/layout';\nimport { TextField } from '@/components/TextField';\nimport { Controller } from 'react-hook-form';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { TextArea } from '@/components/TextArea';\nimport { Button } from '@/components/Button';\nimport { useBreakpoints } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { getErrorProps } from '@/utils/forms';\nimport { useInviteNonMemberForm, type InviteNonMemberValues } from './schema';\nimport * as S from '../../../styles';\nimport { BlockedCountriesListModal } from '../../BlockedCountriesList';\n\ntype ModalType = 'blocked-countries';\n\ninterface InviteNonMemberFormProps {\n  onSubmit(values: InviteNonMemberValues): void;\n  onCancel(): void;\n}\n\nexport function InviteNonMemberForm({\n  onSubmit,\n  onCancel,\n}: InviteNonMemberFormProps) {\n  const { t } = useTranslation();\n  const { isMobile } = useBreakpoints();\n  const { modalType, openModal, closeModal } = useModalManager<ModalType>();\n\n  const {\n    handleSubmit,\n    control,\n    formState: { isValid, isSubmitting },\n  } = useInviteNonMemberForm({\n    defaultValues: {\n      email: '',\n      firstName: '',\n      lastName: '',\n      message: '',\n    },\n  });\n\n  return (\n    <>\n      <Stack vertical align=\"stretch\" fullWidth gap={16}>\n        <Stack align=\"start\" fullWidth gap={16}>\n          <StackItem grow basis=\"50%\">\n            <Controller\n              control={control}\n              name=\"email\"\n              render={({ field, fieldState }) => (\n                <TextField\n                  {...field}\n                  label={t(\n                    'noumena.noums.member_management.invite_non_members.email.label',\n                  )}\n                  {...getErrorProps(fieldState)}\n                />\n              )}\n            />\n          </StackItem>\n          <StackItem basis=\"25%\">\n            <Controller\n              control={control}\n              name=\"firstName\"\n              render={({ field, fieldState }) => (\n                <TextField\n                  {...field}\n                  label={t(\n                    'noumena.noums.member_management.invite_non_members.first_name.label',\n                  )}\n                  {...getErrorProps(fieldState)}\n                />\n              )}\n            />\n          </StackItem>\n          <StackItem basis=\"25%\">\n            <Controller\n              control={control}\n              name=\"lastName\"\n              render={({ field, fieldState }) => (\n                <TextField\n                  {...field}\n                  label={t(\n                    'noumena.noums.member_management.invite_non_members.last_name.label',\n                  )}\n                  {...getErrorProps(fieldState)}\n                />\n              )}\n            />\n          </StackItem>\n        </Stack>\n\n        <S.NonMemberDescriptionWrapper isMobile={isMobile}>\n          <S.Description\n            colorToken=\"--text-input-neutral-default\"\n            font=\"body-s\"\n          >\n            <Trans\n              i18nKey=\"noumena.noums.member_management.invite_non_members.blocked_countries.description\"\n              components={{\n                link_button: (\n                  <S.ViewCountriesButton\n                    textOnly\n                    onClick={() => openModal('blocked-countries')}\n                  />\n                ),\n              }}\n            />\n          </S.Description>\n        </S.NonMemberDescriptionWrapper>\n\n        <Controller\n          control={control}\n          name=\"message\"\n          render={({ field: { onChange, ...fieldProps } }) => (\n            <TextArea\n              {...fieldProps}\n              autoResize\n              label={t(\n                'noumena.chamber_edit.visibility.invite_message.input_placeholder',\n              )}\n              maxLength={100}\n              onChange={(e) =>\n                onChange(e.target.value.trimStart().slice(0, 100))\n              }\n            />\n          )}\n        />\n\n        <Stack gap={16} fullWidth>\n          <Button tertiary size=\"large\" onClick={onCancel} grow>\n            {t('noumena.cancel')}\n          </Button>\n\n          <Button\n            primary\n            size=\"large\"\n            softDisabled={!isValid}\n            loading={isSubmitting}\n            onClick={handleSubmit(onSubmit)}\n            grow\n          >\n            {t('noumena.noums.member_management.invite_non_members.submit')}\n          </Button>\n        </Stack>\n      </Stack>\n      <BlockedCountriesListModal\n        isOpen={modalType === 'blocked-countries'}\n        onClose={closeModal}\n      />\n    </>\n  );\n}\n","import {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport BasicChipsTabsForm from '@/components/Tabs/TabsForm';\nimport { useBreakpoints } from '@/hooks';\nimport { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport * as S from './styles';\nimport { InviteMemberTabId } from './types';\nimport { type InviteMembersValues } from './InviteMembers/ViaNoumMembers/InviteMember/schema';\nimport { type InviteNonMemberValues } from './InviteMembers/ViaNoumMembers/InviteNonMember/schema';\nimport { InviteMemberForm } from './InviteMembers/ViaNoumMembers/InviteMember';\nimport { InviteNonMemberForm } from './InviteMembers/ViaNoumMembers/InviteNonMember';\nimport { inviteMembersTabInputList } from './InviteMembers/constants';\n\ninterface ChamberInviteModalProps {\n  isOpen: boolean;\n  noumId: string;\n  onClose(): void;\n  onInviteMembers: (values: InviteMembersValues) => Promise<void>;\n  onInviteNonMembers: (values: InviteNonMemberValues) => Promise<void>;\n}\n\nexport function ChamberInviteModal({\n  isOpen,\n  onClose,\n  noumId,\n  onInviteMembers,\n  onInviteNonMembers,\n}: ChamberInviteModalProps) {\n  const { t } = useTranslation();\n  const { isMobile, isDesktop, windowDimensions } = useBreakpoints();\n\n  const [activeTabId, setActiveTabId] = useState<InviteMemberTabId>(\n    InviteMemberTabId.NoumenaMembers,\n  );\n\n  return (\n    <Modal\n      testId=\"chamber-invite-modal\"\n      open={isOpen}\n      onClose={onClose}\n      enableCloseButton\n      size={ModalSize.XL}\n      isFullScreen={!isDesktop}\n      disableBackdropClick\n    >\n      <ModalHeader\n        justifyContent={isMobile ? 'flex-start' : 'center'}\n        isFullScreen={!isDesktop}\n      >\n        {t(`noumena.noums.member_management.invite_members.modal.title`)}\n      </ModalHeader>\n\n      <ModalBody isFullScreen={!isDesktop} noFooter overflow=\"visible\">\n        <Stack vertical align=\"stretch\" gap={16} fullWidth>\n          <TSpan font=\"body-l\" colorToken=\"--text-modal-neutral-default\">\n            {t(\n              'noumena.noums.member_management.invite_members.modal.description',\n            )}\n          </TSpan>\n\n          <S.TabSection>\n            <BasicChipsTabsForm<InviteMemberTabId>\n              inputList={inviteMembersTabInputList}\n              onChange={setActiveTabId}\n              selectedId={activeTabId}\n              mode=\"isUnderline\"\n              isWithoutImage\n              fontSize={\n                isMobile\n                  ? '--font-input-small-size'\n                  : '--font-button-medium-size'\n              }\n              tabWidth={\n                isMobile ? `${windowDimensions.width / 2 - 32}px` : '100%'\n              }\n              isMobile={isMobile}\n              windowSize={windowDimensions.width}\n            />\n          </S.TabSection>\n          <S.TabContent>\n            {activeTabId === InviteMemberTabId.NoumenaMembers && (\n              <InviteMemberForm\n                noumId={noumId}\n                onSubmit={onInviteMembers}\n                onCancel={onClose}\n              />\n            )}\n            {activeTabId === InviteMemberTabId.NonNoumenaMembers && (\n              <InviteNonMemberForm\n                onSubmit={onInviteNonMembers}\n                onCancel={onClose}\n              />\n            )}\n          </S.TabContent>\n        </Stack>\n      </ModalBody>\n    </Modal>\n  );\n}\n","import { type InviteNoumMembers } from '@/apollo/generated/types';\nimport { type InviteMembersValues } from './schema';\n\nfunction toInviteMembersInput(\n  noumId: string,\n  values: InviteMembersValues,\n): InviteNoumMembers {\n  return {\n    noumId,\n    members: values.userIds.map((userId) => ({\n      roleId: values.roleId,\n      userId,\n    })),\n    invitationMessage: values.message,\n  };\n}\n\nexport const InviteMembersFormMapper = {\n  toInviteMembersInput,\n};\n","import { type InviteNonNoumenaMemberInput } from '@/apollo/generated/types';\nimport { type InviteNonMemberValues } from './schema';\n\nfunction toInviteNonNoumenaMemberInput(\n  noumId: string,\n  values: InviteNonMemberValues,\n): InviteNonNoumenaMemberInput {\n  return {\n    noumId,\n    email: values.email,\n    firstName: values.firstName,\n    lastName: values.lastName,\n    invitationMessage: values.message,\n  };\n}\n\nexport const InviteNonMemberFormMapper = {\n  toInviteNonNoumenaMemberInput,\n};\n","import { NoumMemberStatus } from '@/apollo/generated/types';\nimport { type NoumMemberBasicFragment } from '@/apollo/graphql';\nimport { UserUtil } from '@/utils/user';\n\nfunction isManager(member: NoumMemberBasicFragment): boolean {\n  return !!member.role.isManager;\n}\n\nexport function getBulkMembersActionMeta(members: NoumMemberBasicFragment[]) {\n  const isBulkSelection = members.length > 1;\n\n  const managers = members.filter(isManager);\n  const managersCount = managers.length;\n  const membersCount = members.length - managersCount;\n  const hasManagersOnly = managersCount > 0 && managersCount === members.length;\n  const hasMixedRoles = managersCount > 0 && managersCount < members.length;\n\n  return {\n    hasManagersOnly,\n    hasMixedRoles,\n    isBulkSelection,\n    managersCount,\n    membersCount,\n  };\n}\n\nexport function getBulkMembersActionTranslationSuffix(\n  members: NoumMemberBasicFragment[],\n) {\n  const { isBulkSelection, hasMixedRoles, hasManagersOnly } =\n    getBulkMembersActionMeta(members);\n\n  const countSuffix = isBulkSelection ? 'bulk' : 'single';\n  const typeSuffix = hasManagersOnly\n    ? 'manager'\n    : hasMixedRoles\n    ? 'mixed'\n    : 'member';\n\n  return `${countSuffix}.${typeSuffix}` as const;\n}\n\nexport function getBulkMembersActionTranslationMeta(\n  members: NoumMemberBasicFragment[],\n) {\n  const { managersCount, membersCount } = getBulkMembersActionMeta(members);\n  const translationSuffix = getBulkMembersActionTranslationSuffix(members);\n\n  return {\n    translationSuffix,\n    userName: members.length > 0 ? UserUtil.renderName(members[0].user) : '',\n    managersCount,\n    membersCount,\n  };\n}\n\nexport const MembersManagerActionPermissions = {\n  canViewManagerDetails: (member: NoumMemberBasicFragment) =>\n    member.role.isManager,\n  canViewHomeNoum: (member: NoumMemberBasicFragment) =>\n    member.user?.chamber?._id && UserUtil.isActive(member.user),\n  canEditRole: (member: NoumMemberBasicFragment) =>\n    !UserUtil.isUnregistered(member.user),\n  canDisconnect: (member: NoumMemberBasicFragment) => member.role._id,\n};\n\nexport const MemberUtils = {\n  isConnected: (member: NoumMemberBasicFragment) =>\n    member.status === NoumMemberStatus.Connected,\n  hasPendingInvitation: (member: NoumMemberBasicFragment) =>\n    [NoumMemberStatus.Invited, NoumMemberStatus.Requested].includes(\n      member.status,\n    ),\n};\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { Button } from '@/components/Button';\nimport { TSpan } from '@/components/Typography';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { getBulkMembersActionTranslationMeta } from '../../utils';\n\ninterface MembersDisconnectModalProps {\n  isOpen: boolean;\n  onConfirm: () => void;\n  onClose: () => void;\n  members: NoumMemberBasicFragment[];\n  isLoading?: boolean;\n}\n\nexport function MembersDisconnectModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  members,\n  isLoading,\n}: MembersDisconnectModalProps) {\n  const { t } = useTranslation();\n  const { translationSuffix, managersCount, membersCount, userName } =\n    getBulkMembersActionTranslationMeta(members);\n\n  if (members.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal open={isOpen} onClose={onClose} size={ModalSize.S}>\n      <ModalHeader>\n        {t(\n          `noumena.chamber.disconnect_member_modal.title.${translationSuffix}`,\n        )}\n      </ModalHeader>\n      <ModalBody>\n        <TSpan\n          font=\"body-l\"\n          colorToken=\"--text-modal-neutral-default\"\n          textAlign=\"center\"\n        >\n          <Trans\n            i18nKey={`noumena.chamber.disconnect_member_modal.body.${translationSuffix}`}\n            values={{ userName, membersCount, managersCount }}\n            components={{\n              b: (\n                <TSpan\n                  font=\"body-l\"\n                  colorToken=\"--text-modal-neutral-highlighted\"\n                />\n              ),\n            }}\n          />\n        </TSpan>\n      </ModalBody>\n      <ModalFooter flexDirection=\"column\" gap={16}>\n        <Button\n          intent=\"negative\"\n          size=\"full\"\n          onClick={onConfirm}\n          loading={isLoading}\n        >\n          <Trans\n            i18nKey={`noumena.chamber.disconnect_member_modal.submit.${translationSuffix}`}\n            values={{ membersCount, managersCount }}\n          />\n        </Button>\n        <Button tertiary size=\"full\" onClick={onClose}>\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql';\nimport { uniq } from 'lodash';\nimport { type MemberEditRoleFormValues } from './schema';\n\nexport function mapDefaultValuesFromMembers(\n  members: NoumMemberBasicFragment[],\n): MemberEditRoleFormValues {\n  const distinctRoles = uniq(members.map((member) => member.role._id));\n\n  return {\n    // Business Rule: Set predefined role only if all members have the same one. Otherwise, start with empty.\n    roleId: distinctRoles.length === 1 ? distinctRoles[0] : '',\n  };\n}\n","import { yupResolver } from '@hookform/resolvers/yup';\nimport { type DefaultValues, useForm } from 'react-hook-form';\nimport * as yup from 'yup';\n\nconst memberEditRoleFormSchema = yup.object({\n  roleId: yup.string().required(),\n});\n\nexport type MemberEditRoleFormValues = yup.InferType<\n  typeof memberEditRoleFormSchema\n>;\n\ninterface UseMemberEditRoleFormOptions {\n  defaultValues: DefaultValues<MemberEditRoleFormValues>;\n}\n\nexport function useMemberEditRoleForm({\n  defaultValues,\n}: UseMemberEditRoleFormOptions) {\n  return useForm<MemberEditRoleFormValues>({\n    defaultValues,\n    resolver: yupResolver(memberEditRoleFormSchema),\n  });\n}\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql';\nimport { Button } from '@/components/Button';\nimport {\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  ModalSize,\n} from '@/components/ExtendedModal';\nimport { TSpan } from '@/components/Typography';\nimport { Stack } from '@/layout';\nimport { Controller } from 'react-hook-form';\nimport { Trans, useTranslation } from 'react-i18next';\nimport { getBulkMembersActionTranslationMeta } from '../../utils';\nimport { NoumRolePicker } from '../NoumRolePicker';\nimport { mapDefaultValuesFromMembers } from './mappers';\nimport { useMemberEditRoleForm, type MemberEditRoleFormValues } from './schema';\n\ninterface MembersEditRoleModalProps {\n  isOpen: boolean;\n  onConfirm: (values: MemberEditRoleFormValues) => void;\n  onClose: () => void;\n  members: NoumMemberBasicFragment[];\n  isLoading?: boolean;\n}\n\nexport function MembersEditRoleModal({\n  isOpen,\n  onClose,\n  onConfirm,\n  members,\n  isLoading,\n}: MembersEditRoleModalProps) {\n  const { t } = useTranslation();\n  const { translationSuffix, managersCount, membersCount } =\n    getBulkMembersActionTranslationMeta(members);\n\n  const { handleSubmit, control } = useMemberEditRoleForm({\n    defaultValues: mapDefaultValuesFromMembers(members),\n  });\n\n  if (members.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      open={isOpen}\n      onClose={onClose}\n      size={ModalSize.L}\n      isScrollableContent={true}\n    >\n      <form onSubmit={handleSubmit(onConfirm)}>\n        <ModalHeader>\n          {t(`noumena.chamber.edit_member_role_modal.title`, {\n            count: members.length,\n          })}\n        </ModalHeader>\n        <ModalBody overflow=\"visible\">\n          <Stack vertical fullWidth align=\"stretch\" gap={16}>\n            <TSpan font=\"body-l\" colorToken=\"--text-modal-neutral-default\">\n              {t('noumena.chamber.edit_member_role_modal.body')}\n            </TSpan>\n\n            <Controller\n              control={control}\n              name=\"roleId\"\n              render={({ field }) => (\n                <NoumRolePicker\n                  value={field.value}\n                  onChange={({ value }) => {\n                    field.onChange(value);\n                  }}\n                />\n              )}\n            />\n          </Stack>\n        </ModalBody>\n        <ModalFooter gap={16}>\n          <Button tertiary size=\"full\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button type=\"submit\" primary size=\"full\" loading={isLoading}>\n            <Trans\n              i18nKey={`noumena.chamber.edit_member_role_modal.submit.${translationSuffix}`}\n              values={{ membersCount, managersCount }}\n            />\n          </Button>\n        </ModalFooter>\n      </form>\n    </Modal>\n  );\n}\n","import {\n  useCancelNoumInvitationMutation,\n  useChangeNoumMembersRoleMutation,\n  useInviteNewNonNoumenaMemberMutation,\n  useInviteNoumMembersMutation,\n  useKickNoumMembersMutation,\n  type NoumMemberBasicFragment,\n} from '@/apollo/graphql';\nimport { useToast } from '@/hooks';\nimport { useModalManager } from '@/hooks/modal/useModalManager';\nimport { ChamberInviteModal } from '@/screens/Chamber/components/modals/ChamberVisibilityInvite';\nimport { InviteMembersFormMapper } from '@/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/mappers';\nimport { type InviteMembersValues } from '@/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteMember/schema';\nimport { InviteNonMemberFormMapper } from '@/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteNonMember/mappers';\nimport { type InviteNonMemberValues } from '@/screens/Chamber/components/modals/ChamberVisibilityInvite/InviteMembers/ViaNoumMembers/InviteNonMember/schema';\nimport { useTranslation } from 'react-i18next';\nimport { MembersDisconnectModal } from '../../components/MembersDisconnectModal';\nimport { MembersEditRoleModal } from '../../components/MembersEditRoleModal';\nimport { type MemberEditRoleFormValues } from '../../components/MembersEditRoleModal/schema';\nimport { MemberUtils, getBulkMembersActionTranslationMeta } from '../../utils';\n\ntype ModalType = 'invite-members' | 'edit-role' | 'disconnect';\n\ninterface UseMembersManagerActionsOptions {\n  noumId?: string;\n  onInvite?: () => void;\n  onDisconnect?: () => void;\n  onEditRoles?: () => void;\n}\n\nexport function useMembersManagerActions({\n  noumId,\n  onInvite,\n  onDisconnect,\n  onEditRoles,\n}: UseMembersManagerActionsOptions) {\n  const { getModalKey, modalType, contextData, openModal, closeModal } =\n    useModalManager<ModalType, NoumMemberBasicFragment[]>({\n      resetModalKey: true,\n    });\n  const { addSuccessIconToast, addErrorToast } = useToast();\n  const { t } = useTranslation();\n\n  const [kickNoumMembers, { loading: isKickMembersLoading }] =\n    useKickNoumMembersMutation();\n  const [changeMembersRole, { loading: isChangeRolesLoading }] =\n    useChangeNoumMembersRoleMutation();\n  const [cancelNoumInvitation] = useCancelNoumInvitationMutation();\n  const [inviteMembers] = useInviteNoumMembersMutation();\n  const [inviteNonNoumenaMember] = useInviteNewNonNoumenaMemberMutation();\n\n  const handleDisconnectMembers = async () => {\n    const members = contextData;\n    if (!members || members.length === 0) {\n      return;\n    }\n\n    try {\n      const membersToKick = members.filter(MemberUtils.isConnected);\n      const membersToCancelInvitationFor = members.filter(\n        MemberUtils.hasPendingInvitation,\n      );\n\n      // TODO: Refactor once we get a bulk-cancel mutation in GQL schema.\n      await Promise.all(\n        membersToCancelInvitationFor.map((member) =>\n          cancelNoumInvitation({\n            variables: {\n              memberId: member._id,\n            },\n          }),\n        ),\n      );\n      await kickNoumMembers({\n        variables: {\n          memberIDs: membersToKick.map((member) => member._id),\n        },\n      });\n\n      const { translationSuffix, membersCount, managersCount } =\n        getBulkMembersActionTranslationMeta(members);\n      addSuccessIconToast(\n        t(\n          `noumena.chamber.disconnect_member_modal.success_toast.${translationSuffix}`,\n          { membersCount, managersCount },\n        ),\n      );\n\n      onDisconnect?.();\n    } catch (error) {\n      if (error instanceof Error) {\n        addErrorToast(error.message);\n      }\n    } finally {\n      closeModal();\n    }\n  };\n\n  const disconnectModalElement = (\n    <MembersDisconnectModal\n      key={getModalKey('disconnect')}\n      isOpen={modalType === 'disconnect'}\n      onClose={closeModal}\n      onConfirm={handleDisconnectMembers}\n      members={contextData ?? []}\n      isLoading={isKickMembersLoading}\n    />\n  );\n\n  const handleEditRoles = async (values: MemberEditRoleFormValues) => {\n    const members = contextData;\n    if (!members || members.length === 0) {\n      return;\n    }\n\n    try {\n      await changeMembersRole({\n        variables: {\n          input: {\n            memberIDs: members.map((member) => member._id),\n            roleId: values.roleId,\n          },\n        },\n      });\n\n      onEditRoles?.();\n    } catch (error) {\n      if (error instanceof Error) {\n        addErrorToast(error.message);\n      }\n    } finally {\n      closeModal();\n    }\n  };\n\n  const editRoleModalElement = (\n    <MembersEditRoleModal\n      key={getModalKey('edit-role')}\n      isOpen={modalType === 'edit-role'}\n      onClose={closeModal}\n      onConfirm={handleEditRoles}\n      members={contextData ?? []}\n      isLoading={isChangeRolesLoading}\n    />\n  );\n\n  const handleInviteMembers = async (values: InviteMembersValues) => {\n    if (!noumId) return;\n\n    try {\n      await inviteMembers({\n        variables: {\n          input: InviteMembersFormMapper.toInviteMembersInput(noumId, values),\n        },\n      });\n\n      onInvite?.();\n      closeModal();\n    } catch (error) {\n      if (error instanceof Error) {\n        addErrorToast(error.message);\n      }\n    }\n  };\n  const handleInviteNonMembers = async (values: InviteNonMemberValues) => {\n    if (!noumId) return;\n\n    try {\n      await inviteNonNoumenaMember({\n        variables: {\n          input: InviteNonMemberFormMapper.toInviteNonNoumenaMemberInput(\n            noumId,\n            values,\n          ),\n        },\n      });\n      onInvite?.();\n      closeModal();\n    } catch (error) {\n      if (error instanceof Error) {\n        addErrorToast(error.message);\n      }\n    }\n  };\n\n  const inviteMemberModalElement = (\n    <ChamberInviteModal\n      key={getModalKey('invite-members')}\n      isOpen={modalType === 'invite-members'}\n      onClose={closeModal}\n      noumId={noumId ?? ''}\n      onInviteMembers={handleInviteMembers}\n      onInviteNonMembers={handleInviteNonMembers}\n    />\n  );\n\n  return {\n    openModal,\n    closeModal,\n    disconnectModalElement,\n    editRoleModalElement,\n    inviteMemberModalElement,\n  };\n}\n","import { Tag } from '@/components/Tag';\nimport styled from 'styled-components';\n\nexport const StyledTag = styled(Tag).attrs(() => ({\n  size: 'small',\n  contentFont: 'footnote-bold',\n}))``;\n\nexport const ManagerTag = styled(StyledTag).attrs(() => ({\n  tertiary: true,\n}))`\n  background-color: var(--color-base-pastel-pink);\n  color: var(--color-base-solid-orange);\n`;\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql/fragments';\nimport { Icon } from '@/components/Icon';\nimport { Stack } from '@/layout';\nimport { ManagerTag, StyledTag } from './styles';\n\ninterface MemberRoleTransitionProps {\n  member: NoumMemberBasicFragment;\n}\n\nexport function MemberRoleTransition({ member }: MemberRoleTransitionProps) {\n  return member.previousRole?._id ? (\n    <Stack gap={8} align=\"center\">\n      <StyledTag tertiary>{member.previousRole.name}</StyledTag>\n      <Icon\n        color=\"--icon-tablecell-neutral-default\"\n        name=\"arrow_right_m\"\n        size={16}\n      />\n\n      {member.role.isManager ? (\n        <ManagerTag\n          icon={\n            <Icon\n              name=\"star_filled_m\"\n              size={16}\n              color=\"--color-base-solid-orange\"\n            />\n          }\n        >\n          Manager\n        </ManagerTag>\n      ) : (\n        <StyledTag tertiary>{member.role.name}</StyledTag>\n      )}\n    </Stack>\n  ) : null;\n}\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql/fragments';\nimport { Icon } from '@/components/Icon';\nimport { MemberRoleTransition } from './MemberRoleTransition';\nimport { ManagerTag, StyledTag } from './styles';\n\ninterface MemberRoleTagProps {\n  member: NoumMemberBasicFragment;\n}\n\nexport function MemberRoleTag({ member }: MemberRoleTagProps) {\n  if (member.previousRole?._id) {\n    return <MemberRoleTransition member={member} />;\n  }\n\n  if (member.role.isManager) {\n    return (\n      <ManagerTag\n        icon={\n          <Icon\n            name=\"star_filled_m\"\n            size={16}\n            color=\"--color-base-solid-orange\"\n          />\n        }\n      >\n        Manager\n      </ManagerTag>\n    );\n  }\n\n  return <StyledTag tertiary>{member.role.name}</StyledTag>;\n}\n","import { Tag } from '@/components/Tag';\nimport styled from 'styled-components';\n\nexport const StyledTag = styled(Tag).attrs(() => ({\n  size: 'small',\n  contentFont: 'footnote-bold',\n}))``;\n","import { type NoumMemberBasicFragment } from '@/apollo/graphql/fragments';\nimport { useTranslation } from 'react-i18next';\nimport { StyledTag } from './styles';\n\ninterface MemberStatusTagProps {\n  member: NoumMemberBasicFragment;\n}\n\nexport function MemberStatusTag({ member }: MemberStatusTagProps) {\n  const { t } = useTranslation();\n\n  switch (member.status) {\n    case 'CONNECTED':\n      return (\n        <StyledTag success>\n          {t('noumena.chamber.members.status.connected')}\n        </StyledTag>\n      );\n    case 'INVITED':\n      return (\n        <StyledTag tertiary>\n          {t('noumena.chamber.members.status.invited')}\n        </StyledTag>\n      );\n    case 'REQUESTED':\n      return (\n        <StyledTag secondary>\n          {t('noumena.chamber.members.status.requested')}\n        </StyledTag>\n      );\n    default:\n      return <StyledTag>{member.status}</StyledTag>;\n  }\n}\n"],"names":["DEFAULT_PAGE_SIZE","useConnections","spaceId","isInfinite","pageSize","infiniteState","setInfiniteState","useState","approvedInfiniteState","setApprovedInfiniteState","invitedInfiniteState","setInvitedInfiniteState","connectionsData","setConnectionsData","appConnectionsData","setAppConnectionsData","invitedConnections","setInvitedConnections","totalCount","setTotalCount","approvedTotalCount","setApprovedTotalCount","invitedTotalCount","setInvitedTotalCount","data","loading","error","fetchMore","refetch","useGetSpaceConnectionsV2Query","variables","limit","offset","approvedConnectionsData","approvedConnectionsLoading","approvedConnectionsError","approvedConnectionFetchMore","approvedConnectionFetchRefetch","status","ConnectionRequestTypeEnum","Approved","invitesData","invitedConnectionsLoading","invitedConnectionsError","invitesFetchMore","refetchInvitedConnections","Invited","Declined","useEffect","getSpaceConnectionsV2","count","fetchMoreConnections","useCallback","result","length","currentFetchedConnections","udpatedConnections","fetchMoreApprovedConnections","currentFetchedApprovedConnections","udpatedApprovedConnections","fetchMoreInvitedConnections","currentFetchedInvitedConnections","udpatedInvitedConnections","connections","useMemo","cleanList","filter","item","permission","ConnectionPermissionTypeEnum","Disconnect","refetchConnections","approvedConnectionsRefetch","useSetInviteInactiveHelper","addToast","useToast","setInviteInactive","useSetInviteInactiveMutation","setInvitedMemberInactive","token","isSuccess","update","cache","getinviteNonNoumenaMember","nonMemberData","readQuery","query","GetInviteNonNoumenaMemberDocument","noumId","mergedArray","_id","writeQuery","message","Error","Sentry","tags","section","useSendNonMemberConnectionInviteHelper","inviteNonNoumenaMemberMutation","useInviteNonNoumenaMemberMutation","sendNonMemberInvite","requestedForNoumId","email","firstName","lastName","noum","input","noumDetails","title","name","profileUrl","profileImage","owner","uid","middleName","trim","type","category","inviteNonNoumenaMember","cloneConnections","id","__typename","isActive","useListBlockedCountriesHelper","user","useAuth","getListBlockedCountries","useListBlockedCountriesLazyQuery","useNonNoumMembers","nonMembersData","loadingNonMembers","refetchNonMembers","useGetInviteNonNoumenaMemberQuery","skip","fetchPolicy","notifyOnNetworkStatusChange","nonMembers","isVerified","useUpdateNoumVisibilitySettingsHelper","handleError","networkError","t","handleSuccess","updateNoumVisibilitySettings","useUpdateNoumVisibilitySettingsMutation","updateNoumVisibilitySettingsHelper","visibility","onError","graphQLErrors","err","onCompleted","UserFormHeader","styled","div","mediaSizes","MOBILE_L_MAX","ModalDescription","TSpan","SettingWrapper","props","justifyCenter","DropdownContainer","DropdownWrapper","fullWidth","DescriptionWrapper","NonMemberDescriptionWrapper","Description","TextUnderLine","Divider","InviteTitle","SaveButton","Button","InvitedUsersWrapper","sizes","TABLET_L","UserWrapper","UserBody","isPadding","UserName","singleLineEllipisText","DropdownPicker","PickedInviteStatus","SpinnerContainer","TabSection","bodyTypography","bodyMedium","Container","CountryName","CountryDescription","TabContent","FieldContent","width","ViewCountriesButton","ButtonText","ExistingLinkContainer","defaultScrollBar","ChamberVisibilityLinkModal","isOpen","handleClose","linkedNoums","selectedOption","handleAccept","useWindowDimensions","isMobile","breakpoints","MOBILE_MAX","jsxs","Modal","jsx","ModalHeader","ModalBody","alignItems","LinkNoumOption","alignSelf","linkCount","map","idx","ModalFooter","visibilityOptions","key","generate","label","value","ProjectChamberType","Public","description","labelColor","Private","Secret","inviteOptions","mapOptionIcon","option","Icon","ChamberVisibilityPicker","onChange","useTranslation","setIsOpen","selectableOptions","o","icon","selected","find","S.DropdownContainer","S.DropdownWrapper","Dropdown","inputProps","inputRef","toggle","TextField","toLowerCase","visibilitySettingsSchema","yup","oneOf","Object","values","useVisibilitySettingsForm","defaultValues","useForm","resolver","yupResolver","mapStringToProjectChamberType","VisibilitySettings","defaultVisibility","isSEOEnabled","onClose","addErrorToast","modalType","openModal","closeModal","useModalManager","handleSubmit","control","getValues","formState","isDirty","handleNewVisibilitySave","newVisibility","handleConfirmAutoAcceptPendingRequests","handleSave","handleChangeLinkedNoumsVisibility","Fragment","S.ModalDescription","Spacer","S.SettingWrapper","Controller","field","S.SaveButton","ChamberActionModal","InviteMemberTabId","NoumenaMembers","NonNoumenaMembers","inviteMembersTabInputList","image","text","labelSize","ChamberInvitedUser","onSelect","isNonNoumTab","invitedStatus","connectionStatus","invitedStatusText","capitalize","Cancelled","Removed","onHandleSelect","isMember","Avatar","profile","profilePictureThumbnail","getFullName","targetProps","targetRef","SearchWrapper","SearchContainer","focused","InputWrapper","InputField","SelectedUser","InviteButton","TABLET_MIN","ViewCountryButton","AvatarWrapper","InviteUserSearch","forwardRef","children","ref","setFocused","onFocus","e","onBlur","InviteUserOptionRenderer","options","activeItem","hasMore","onFetchMore","Infinite","DropdownItemLayout","DropDownLabel","thumbnailUrl","DropdownValueWrapper","DropdownValueLabel","DropdownValueDescription","InviteSelectedUser","multiselect","onRemove","Tag","undefined","PAGE_SIZE","useInviteUsersList","search","allUserData","loadingAll","useAllUsersWithoutEventQuery","excludeUsersByStatus","UserStatus","Unregistered","searchedUsers","searchMoreUsers","searchingUsers","useGlobalSearchQuery","entityType","EntityType","HomeNoum","users","globalSearch","GlobalSearchUserEntityStatus","NoumenaMember","allCount","allUsers","buildDropDownData","datum","InviteUserPicker","handleInvite","windowDimensions","windowWidth","useBreakpoints","containerRef","useRef","useContext","EditChamberContext","space","useNoumContext","setNonMembers","setSelected","setSearch","setWidth","connectionMsg","setConnectionMsg","debouncedSearch","useDebounce","loadingUsersList","sendMultipleConnectionInviteMutation","loadingInvite","useSendMultipleConnectionInviteMutation","selectedOptions","setSelectedOptions","displayedNoumUsers","setDisplayedNoumUsers","isSelected","allOptions","availableOptions","forEach","includes","String","push","fetchOtherUsers","otherUsers","concat","target","selectedIds","s","onUnSelect","k","_s","m","_m","onHandleInvite","idArray","ownSpaceId","invitedSpaceIds","toastErrorMessage","useLayoutEffect","current","clientWidth","val","handleSelectOption","placeholder","onKeyDown","S.DescriptionWrapper","S.Description","TextArea","trimStart","slice","InviteMemberTab","loadingConnections","onRefetchConnections","connectionsInfiniteState","linkedNoumIds","useNoumDetails","isUsers","invitesScrollRef","updateConnectionStatusHelper","useUpdateConnectionStatusHelper","connectedUsers","connection","UserUtil","isInactive","requestTo","requestFrom","userStatus","ActionType","requestedUser","connectionId","onResendInvite","chamber","handleRefetchConnection","scrollTo","top","offsetTop","behavior","S.SpinnerContainer","Spinner","S.InvitedUsersWrapper","Boolean","BlockedCountriesListModal","countries","setCountries","windowSize","listBlockedCountries","moreCountries","ModalSize","M","S.CountryDescription","country","S.Container","S.CountryName","code","InviteNonUserPicker","searchUsers","useGlobalSearchLazyQuery","inviteNoumUser","sendingInvite","response","sendMultipleConnectionInvite","reset","isOpenCountryModal","setIsOpenCountryModal","noumInfo","noumUsers","TABLET","isLaptop","validationSchema","shape","required","max","register","isValid","errors","trigger","checkNewInvite","isNew","isUnregistered","searchResult","noumUser","isNewInvite","onSubmit","handleChange","handleChangeMessage","event","S.UserFormHeader","S.FieldContent","S.NonMemberDescriptionWrapper","S.TextUnderLine","InviteNonMemberTab","setConnectedUsers","checkMembersEmail","checkEmailflag","InviteMembers","flags","useLaunchDarkly","activeTabId","setActiveTabId","nonNmUsers","S.TabSection","BasicChipsTabsForm","S.TabContent","ChamberVisibilityInviteModal","memo","isOnlyInvite","isDesktop","XL","S.Divider","S.InviteTitle","mapRoleOptionsFromList","noumRoles","role","NoumRolePicker","selectFieldProps","useGetNoumRolesQuery","noumRoleOptions","SelectField","inviteMembersSchema","userIds","ensure","min","roleId","useInviteMembersForm","buildDropdownOptions","searchResults","entity","helperText","onSelectItem","onRemoveItem","v","inputWidth","currentTarget","InviteMemberForm","onCancel","isSubmitting","Stack","StackItem","fieldProps","inviteNonMemberSchema","useInviteNonMemberForm","mode","InviteNonMemberForm","fieldState","getErrorProps","Trans","link_button","S.ViewCountriesButton","ChamberInviteModal","onInviteMembers","onInviteNonMembers","toInviteMembersInput","members","userId","invitationMessage","InviteMembersFormMapper","toInviteNonNoumenaMemberInput","InviteNonMemberFormMapper","isManager","member","getBulkMembersActionMeta","isBulkSelection","managersCount","membersCount","hasManagersOnly","hasMixedRoles","getBulkMembersActionTranslationSuffix","getBulkMembersActionTranslationMeta","translationSuffix","userName","renderName","MembersManagerActionPermissions","canViewManagerDetails","canViewHomeNoum","canEditRole","canDisconnect","MemberUtils","isConnected","NoumMemberStatus","Connected","hasPendingInvitation","Requested","MembersDisconnectModal","onConfirm","isLoading","S","b","mapDefaultValuesFromMembers","distinctRoles","uniq","memberEditRoleFormSchema","useMemberEditRoleForm","MembersEditRoleModal","L","useMembersManagerActions","onInvite","onDisconnect","onEditRoles","getModalKey","contextData","resetModalKey","addSuccessIconToast","kickNoumMembers","isKickMembersLoading","useKickNoumMembersMutation","changeMembersRole","isChangeRolesLoading","useChangeNoumMembersRoleMutation","cancelNoumInvitation","useCancelNoumInvitationMutation","inviteMembers","useInviteNoumMembersMutation","useInviteNewNonNoumenaMemberMutation","disconnectModalElement","membersToKick","membersToCancelInvitationFor","Promise","all","memberId","memberIDs","editRoleModalElement","inviteMemberModalElement","StyledTag","attrs","size","contentFont","ManagerTag","tertiary","MemberRoleTransition","previousRole","MemberRoleTag","MemberStatusTag"],"mappings":"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"}