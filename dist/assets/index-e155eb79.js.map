{"version":3,"file":"index-e155eb79.js","sources":["../../src/layout/GlobalMessageLayout/data.ts","../../src/screens/GlobalMessages/EmptyScreen/styles.ts","../../src/screens/GlobalMessages/EmptyScreen/EmptyScreen.tsx","../../src/screens/GlobalMessages/SideBar/styles.ts","../../src/screens/GlobalMessages/SideBar/ExpandableChatItem.tsx","../../src/screens/GlobalMessages/contexts/GlobalMessageContext.tsx","../../src/screens/GlobalMessages/contexts/GlobalMessageProvider.tsx","../../src/screens/GlobalMessages/SideBar/GlobalChatList.tsx","../../src/screens/GlobalMessages/SideBar/SideBar.tsx","../../src/layout/GlobalMessageLayout/styles.ts","../../src/layout/GlobalMessageLayout/index.tsx","../../src/screens/GlobalMessages/MessageContent/GlobalConversationHeader/styles.ts","../../src/screens/GlobalMessages/MessageContent/GlobalConversationHeader/GlobalConversationHeader.tsx","../../src/screens/GlobalMessages/MessageContent/GlobalConversationBody/styles.ts","../../src/screens/GlobalMessages/MessageContent/GlobalConversationBody/GlobalConversationBody.tsx","../../src/screens/GlobalMessages/MessageContent/MessageContent.tsx","../../src/screens/GlobalMessages/GlobalMessagesRedirect.tsx","../../src/screens/GlobalMessages/index.tsx"],"sourcesContent":["import { t } from 'i18next';\nimport { type InputListTypes } from '@/components/Tabs/types';\n\nexport const sideBarTabs: InputListTypes[] = [\n  {\n    name: 'all',\n    text: t('noumena.chambers.toolbox.element.all'),\n    labelSize: 'auto',\n  },\n  {\n    name: 'direct_conversation',\n    text: t('noumena.chambers.toolbox.element.message.direct_conversation'),\n    labelSize: 'auto',\n  },\n  {\n    name: 'noums',\n    text: t('noumena.search.filter_noums'),\n    labelSize: 'auto',\n  },\n];\n","import styled from 'styled-components';\n\nexport const EmptyScreenWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: auto;\n`;\n","import { t } from 'i18next';\nimport { TSpan } from '@/components/Typography';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport { Spacer } from '@/layout';\nimport { EmptyScreenWrapper } from './styles';\n\nconst EmptyScreen = ({ onCreateNew }: { onCreateNew: () => void }) => (\n  <EmptyScreenWrapper data-testid=\"empty_screen_wrapper\">\n    <Icon\n      name=\"message_outline_m\"\n      size={96}\n      color=\"--icon-card-placeholder-neutral-default\"\n    />\n    <Spacer height={8} />\n    <TSpan colorToken=\"--text-body-neutral-default\" font=\"body-xl\">\n      {t('noumena.global_messages.no_conversation_note')}\n    </TSpan>\n    <Spacer height={24} />\n    <Button secondary size=\"small\" onClick={onCreateNew}>\n      {t('noumena.global_messages.create_new_conv')}\n    </Button>\n  </EmptyScreenWrapper>\n);\n\nexport default EmptyScreen;\n","import styled from 'styled-components';\nimport { noScrollBar, SpinnerContainer } from '@/common/globalStyles';\nimport { sizes } from '@/constants/devices';\nimport { TSpan } from '@/components/Typography';\n\nexport const ListWrapper = styled.div<{\n  justifyContent?: 'left' | 'normal' | 'right' | 'center' | 'space-between';\n  flexDirection?: 'column' | 'column-reverse' | 'row' | 'row-reverse';\n  flex?: boolean;\n  padding?: number;\n}>`\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n  ${({ padding }) => padding && `padding: ${padding}px;`}\n  box-sizing: border-box;\n  overflow-y: scroll;\n  ${({ flex }) => flex && `flex: 1;`}\n  ${({ justifyContent }) =>\n    justifyContent && `justify-content: ${justifyContent};`}\n    ${({ flexDirection }) =>\n    flexDirection && `flex-direction: ${flexDirection};`}\n    ${noScrollBar}\n`;\n\nexport const SideBarWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 404px;\n\n  @media (max-width: ${sizes.LAPTOP}) {\n    width: 383px;\n  }\n\n  @media (max-width: ${sizes.MOBILE_MAX}) {\n    width: 100%;\n  }\n`;\n\nexport const TabsWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  padding-left: 16px;\n  box-sizing: border-box;\n`;\n\nexport const Options = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const StyledNoNoumConvoNote = styled(TSpan)`\n  width: 231px;\n  margin: 32px auto;\n  text-align: center;\n`;\n\nexport const StyledSubtitle = styled(TSpan).attrs({\n  font: 'body-m',\n  colorToken: '--text-tablecell-body-neutral-default',\n})`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  white-space: break-spaces;\n`;\n\nexport const UnreadMessageSign = styled.div`\n  display: inline-block;\n  width: 8px;\n  height: 8px;\n  background: var(--bg-badge-danger-primary-default);\n  border-radius: 1000px;\n  margin-right: 8px;\n`;\n\nexport const StyledLoadMore = styled(TSpan)`\n  margin: 16px auto;\n  cursor: pointer;\n`;\n\nexport const NoumGroupLoading = styled(SpinnerContainer)`\n  margin: 16px auto;\n`;\n\nexport const Divider = styled.div`\n  width: 100%;\n  min-height: 1px;\n  background-color: var(--bg-separator-neutral-default);\n`;\n","import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { Trans } from 'react-i18next';\nimport { useLazyQuery } from '@apollo/client';\nimport { t } from 'i18next';\nimport {\n  type ConversationOutput,\n  type ConversationsOutput,\n  type NoumGroupConversationItem,\n} from '@/apollo/generated/types';\nimport { Accordion } from '@/components/Accordion';\nimport { Avatar } from '@/components/Avatar/Avatar';\nimport { cleanList } from '@/utils/list';\nimport { TSpan } from '@/components/Typography';\nimport { Spinner } from '@/components/Spinner';\nimport { useAuth } from '@/features/auth/contexts';\nimport {\n  GetSpaceConversationsAsAdminQueryDocument,\n  GetSpaceConversationsDocument,\n} from '@/apollo/graphql';\nimport ChatItem from '@/features/conversation/components/ChatItem';\nimport { useConversationListQueryOptions } from '@/features/conversation/hooks/globalMessages/useConversationListQueryOptions';\nimport { ConversationType } from '@/features/conversation/types';\nimport {\n  NoumGroupLoading,\n  StyledLoadMore,\n  StyledSubtitle,\n  UnreadMessageSign,\n  Divider,\n} from './styles';\n\nexport const ExpandableChatItem = ({\n  conversationItem,\n  activeConversationSid,\n  isNewConversation,\n  handleClickItem,\n}: {\n  conversationItem: NoumGroupConversationItem;\n  activeConversationSid: string;\n  isNewConversation: boolean;\n  handleClickItem: (sid: string) => void;\n}) => {\n  const { user } = useAuth();\n\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n  const [showLoadingSection, setShowLoadingSection] = useState<boolean>(false);\n  const [unreadConversations, setUnreadConversations] = useState<number>(0);\n  const [conversations, setConversations] = useState<ConversationOutput[]>(\n    cleanList(\n      conversationItem.conversations?.map((item) => item?.conversation),\n    ),\n  );\n  const conversationType =\n    conversationItem.noum?.uid?._id === user?._id\n      ? ConversationType.PROJECT_OWNER\n      : ConversationType.PROJECT_USER;\n  const { variables } = useConversationListQueryOptions(conversationType);\n  const [, { fetchMore }] = useLazyQuery(\n    conversationType === ConversationType.PROJECT_OWNER\n      ? GetSpaceConversationsAsAdminQueryDocument\n      : GetSpaceConversationsDocument,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        ...variables,\n        offset: 0,\n        limit: 10,\n        spaceId: conversationItem.noum?._id,\n      },\n    },\n  );\n\n  const handleLoadMore = useCallback(async () => {\n    setIsLoadingMore(true);\n    const result = await fetchMore({\n      variables: {\n        offset: conversations.length,\n        limit: 10,\n      },\n    });\n\n    const spaceConversationsData = (\n      (result.data.getSpaceConversations ||\n        result.data.getSpaceConversationsAsAdminQuery) as ConversationsOutput\n    ).data;\n    const cleaned = cleanList(spaceConversationsData);\n    if (cleaned?.length) {\n      setConversations((prev) => [\n        ...prev,\n        ...cleaned.filter((newItem) =>\n          prev.every((item) => newItem._id !== item._id),\n        ),\n      ]);\n    }\n    setIsLoadingMore(false);\n  }, [conversations.length, fetchMore]);\n\n  const unreadConversationsMap = useMemo(\n    () =>\n      conversationItem.conversations?.reduce(\n        (prev: { [cid: string]: number }, item) => ({\n          ...prev,\n          [item?.conversation?.cid!]: item?.unread || 0,\n        }),\n        {},\n      ) || {},\n    [conversationItem],\n  );\n\n  const handleClick = useCallback(\n    (sid: string) => {\n      handleClickItem(sid);\n      if (unreadConversationsMap[sid]) {\n        unreadConversationsMap[sid] = 0;\n      }\n    },\n    [handleClickItem, unreadConversationsMap],\n  );\n\n  const handleReadChatItem = useCallback(\n    (sid: string) => {\n      if (unreadConversationsMap[sid]) {\n        unreadConversationsMap[sid] = 0;\n      }\n    },\n    [unreadConversationsMap],\n  );\n\n  useEffect(\n    () => setUnreadConversations(conversationItem.unreadConversation || 0),\n    [conversationItem],\n  );\n\n  useLayoutEffect(\n    () =>\n      setUnreadConversations(\n        Object.values(unreadConversationsMap).reduce(\n          (prev, curr) => (curr ? prev + 1 : prev),\n          0,\n        ),\n      ),\n    [unreadConversationsMap],\n  );\n\n  useEffect(() => {\n    setConversations(\n      cleanList(\n        conversationItem.conversations?.map((item) => item?.conversation),\n      ),\n    );\n  }, [conversationItem.conversations]);\n\n  useLayoutEffect(() => {\n    const showLoadMore =\n      (conversationItem.conversationsCount || 0) > conversations.length;\n    setShowLoadingSection(showLoadMore);\n  }, [conversationItem.conversationsCount, conversations.length]);\n\n  useLayoutEffect(() => {\n    const cids = cleanList(\n      conversationItem.conversations?.map((item) => item?.conversation?.cid),\n    );\n    setIsOpen(cids.includes(activeConversationSid));\n  }, [activeConversationSid, conversationItem.conversations]);\n\n  return (\n    <div>\n      <Accordion\n        key={`accord-${conversationItem.noum?._id}`}\n        expanded={isOpen}\n        onToggle={setIsOpen}\n        headerGap={16}\n        left={<Avatar url={conversationItem.noum?.profileImage} />}\n        title={conversationItem.noum?.name || ''}\n        isBoldTitle\n        contentHeightKey={String(conversations.length)}\n        subtitle={\n          <StyledSubtitle>\n            {unreadConversations ? <UnreadMessageSign /> : null}\n            <Trans\n              i18nKey={\n                conversationItem.conversationsCount! > 1\n                  ? 'noumena.message.conversations_number_note'\n                  : 'noumena.message.conversation_number_note'\n              }\n              values={{\n                numConversations: conversationItem.conversationsCount,\n              }}\n              components={{\n                primary: (\n                  <TSpan\n                    font=\"body-m-bold\"\n                    colorToken=\"--text-tablecell-brand-primary-default\"\n                  />\n                ),\n              }}\n            />\n          </StyledSubtitle>\n        }\n      >\n        <>\n          <Divider />\n          {conversations.map((item, index) => (\n            <ChatItem\n              key={item._id}\n              index={index}\n              sid={item.cid!}\n              size=\"M\"\n              isActive={\n                !isNewConversation && item.cid === activeConversationSid\n              }\n              onClick={handleClick}\n              onRead={() => handleReadChatItem(item.cid!)}\n            />\n          ))}\n          {showLoadingSection &&\n            (isLoadingMore ? (\n              <NoumGroupLoading>\n                <Spinner />\n              </NoumGroupLoading>\n            ) : (\n              <StyledLoadMore\n                onClick={handleLoadMore}\n                font=\"button-m\"\n                colorToken=\"--text-button-brand-primary-default\"\n              >\n                {t('noumena.load.more')}\n              </StyledLoadMore>\n            ))}\n        </>\n      </Accordion>\n    </div>\n  );\n};\n","export type GlobalMessageContextProps = {\n  notExistsConversation: boolean;\n  setNotExistsConversation: (value: boolean) => void;\n  selectedTabId: number;\n  setSelectedTabId: (value: number) => void;\n};\n\nexport const GlobalMessageContextInitialValue: GlobalMessageContextProps = {\n  notExistsConversation: true,\n  setNotExistsConversation: () => {},\n  selectedTabId: 0,\n  setSelectedTabId: () => {},\n};\n","import {\n  createContext,\n  type FC,\n  type ReactNode,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { ConversationType } from '@/features/conversation/types';\nimport {\n  GlobalMessageContextInitialValue,\n  type GlobalMessageContextProps,\n} from './GlobalMessageContext';\n\nexport const GlobalMessageContext = createContext<GlobalMessageContextProps>(\n  GlobalMessageContextInitialValue,\n);\n\nexport const GlobalMessageProvider: FC<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const {\n    conversationType,\n    setConversationType,\n    isNewConversation,\n    setIsNewConversation,\n  } = useContext(ConversationViewContext);\n  const [notExistsConversation, setNotExistsConversation] =\n    useState<boolean>(true);\n\n  const prevTab = useMemo(() => {\n    if (conversationType === ConversationType.GLOBAL_DIRECT) return 1;\n    if (conversationType === ConversationType.GLOBAL_NOUM) return 2;\n    return 0;\n  }, [conversationType]);\n\n  const [selectedTabId, setSelectedTabId] = useState<number>(prevTab);\n\n  const handleSelectTab = useCallback(\n    (tab: number) => {\n      setSelectedTabId(tab);\n      if (tab === 1) setConversationType(ConversationType.GLOBAL_DIRECT);\n      else if (tab === 2) setConversationType(ConversationType.GLOBAL_NOUM);\n      else setConversationType(ConversationType.GLOBAL_ALL);\n\n      if (isNewConversation) setIsNewConversation(false);\n    },\n    [isNewConversation, setConversationType, setIsNewConversation],\n  );\n\n  const value = useMemo(\n    () => ({\n      notExistsConversation,\n      setNotExistsConversation,\n      selectedTabId,\n      setSelectedTabId: handleSelectTab,\n    }),\n    [\n      notExistsConversation,\n      setNotExistsConversation,\n      selectedTabId,\n      handleSelectTab,\n    ],\n  );\n\n  return (\n    <GlobalMessageContext.Provider value={value}>\n      {children}\n    </GlobalMessageContext.Provider>\n  );\n};\n","import { NetworkStatus } from '@apollo/client';\nimport { useCallback, useContext, useEffect, useLayoutEffect } from 'react';\nimport { t } from 'i18next';\nimport { useNavigate } from 'react-router';\nimport { Infinite } from '@/components/Infinite';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { ConversationType, ViewMode } from '@/features/conversation/types';\nimport ChatItem from '@/features/conversation/components/ChatItem';\nimport NewChatItem from '@/features/conversation/components/ChatItem/NewChatItem';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { SpinnerContainer } from '@/common/globalStyles';\nimport { Spinner } from '@/components/Spinner';\nimport { useWindowDimensions } from '@/hooks';\nimport { breakpoints } from '@/constants/devices';\nimport routes from '@/constants/routes';\nimport EmptyScreen from '../EmptyScreen/EmptyScreen';\nimport { ExpandableChatItem } from './ExpandableChatItem';\nimport { GlobalMessageContext } from '../contexts/GlobalMessageProvider';\nimport { ListWrapper, StyledNoNoumConvoNote } from './styles';\n\nexport const GlobalChatList = ({\n  selectedTabId,\n  handleCreateNewConv,\n}: {\n  selectedTabId: number;\n  handleCreateNewConv: () => void;\n}) => {\n  const { width } = useWindowDimensions();\n  const isMobile = width <= breakpoints.MOBILE_MAX;\n  const navigate = useNavigate();\n  const {\n    setViewMode,\n    isNewConversation,\n    setIsNewConversation,\n    conversationType,\n  } = useContext(ConversationViewContext);\n  const { setNotExistsConversation } = useContext(GlobalMessageContext);\n  const { activeConversationSid, setActiveConversationSid } = useContext(\n    ActiveConversationContext,\n  );\n\n  const { conversations, networkStatus, count, totalCount, onFetchMore } =\n    ConversationHooks.useConversationsList(conversationType);\n\n  useEffect(() => {\n    setNotExistsConversation(\n      conversationType === ConversationType.GLOBAL_ALL && !totalCount,\n    );\n  }, [conversationType, setNotExistsConversation, totalCount]);\n\n  useLayoutEffect(() => {\n    if (\n      !isNewConversation &&\n      !activeConversationSid &&\n      conversations.length > 0\n    ) {\n      const firstConversationItem = conversations[0];\n      const cid =\n        firstConversationItem.__typename === 'BasicConversationItem'\n          ? firstConversationItem.conversation?.cid || ''\n          : firstConversationItem.__typename === 'NoumGroupConversationItem'\n          ? firstConversationItem.conversations?.[0]?.conversation?.cid || ''\n          : '';\n      setActiveConversationSid(cid);\n    }\n  }, [\n    activeConversationSid,\n    conversations,\n    isNewConversation,\n    setActiveConversationSid,\n  ]);\n\n  const handleClickItem = useCallback(\n    (sid: string) => {\n      setIsNewConversation(false);\n      setViewMode(ViewMode.FULLCONVERSATION);\n      navigate(`${routes.MESSAGES}/${sid}`);\n    },\n    [navigate, setIsNewConversation, setViewMode],\n  );\n\n  const showNewConversationItem =\n    !activeConversationSid &&\n    isNewConversation &&\n    [0, 1].includes(selectedTabId);\n  const paginating = networkStatus === NetworkStatus.fetchMore;\n  const hasMore = count < totalCount;\n  const infiniteStatus = paginating\n    ? 'loading'\n    : hasMore\n    ? 'hasNextPage'\n    : 'end';\n  const loading = networkStatus === NetworkStatus.loading;\n\n  if (\n    (loading || networkStatus === NetworkStatus.setVariables) &&\n    conversations.length === 0\n  ) {\n    return (\n      <ListWrapper flex data-testid=\"chatlist-wrapper\" justifyContent=\"center\">\n        <SpinnerContainer>\n          <Spinner />\n        </SpinnerContainer>\n      </ListWrapper>\n    );\n  }\n\n  if (!totalCount) {\n    if (showNewConversationItem) {\n      return (\n        <ListWrapper flex flexDirection=\"column\" data-testid=\"list_wrapper\">\n          <NewChatItem size=\"L\" />\n        </ListWrapper>\n      );\n    }\n    return selectedTabId === 2 ? (\n      <StyledNoNoumConvoNote\n        colorToken=\"--text-placeholder-neutral-default\"\n        font=\"body-m\"\n      >\n        {t('noumena.global_messages.no_noum_conversation_note')}\n      </StyledNoNoumConvoNote>\n    ) : isMobile ? (\n      <EmptyScreen onCreateNew={handleCreateNewConv} />\n    ) : selectedTabId === 1 ? (\n      <StyledNoNoumConvoNote\n        colorToken=\"--text-placeholder-neutral-default\"\n        font=\"body-m\"\n      >\n        {t('noumena.global_messages.no_direct_conversation_note')}\n      </StyledNoNoumConvoNote>\n    ) : null;\n  }\n  return (\n    <ListWrapper flex flexDirection=\"column\" data-testid=\"list_wrapper\">\n      <Infinite\n        onFetchMore={onFetchMore}\n        status={infiniteStatus}\n        width=\"100%\"\n        isSpinnerRelative\n      >\n        {showNewConversationItem && <NewChatItem size=\"L\" />}\n        {conversations.map((conversationItem, index) =>\n          conversationItem.__typename === 'ConversationOutput' ? (\n            <ChatItem\n              key={conversationItem._id}\n              index={index}\n              sid={conversationItem.cid!}\n              size=\"L\"\n              isActive={conversationItem.cid === activeConversationSid}\n              onClick={handleClickItem}\n            />\n          ) : conversationItem.__typename === 'BasicConversationItem' ? (\n            <ChatItem\n              key={conversationItem.conversation?._id}\n              index={index}\n              sid={conversationItem.conversation?.cid!}\n              size=\"L\"\n              isActive={\n                conversationItem.conversation?.cid === activeConversationSid\n              }\n              onClick={handleClickItem}\n            />\n          ) : (\n            conversationItem.__typename === 'NoumGroupConversationItem' && (\n              <ExpandableChatItem\n                key={conversationItem.noum?._id}\n                conversationItem={conversationItem}\n                activeConversationSid={activeConversationSid}\n                isNewConversation={isNewConversation}\n                handleClickItem={handleClickItem}\n              />\n            )\n          ),\n        )}\n      </Infinite>\n    </ListWrapper>\n  );\n};\n","import { useCallback, useContext } from 'react';\nimport { t } from 'i18next';\nimport BasicChipsTabsForm from '@/components/Tabs/TabsForm';\nimport { TSpan } from '@/components/Typography';\nimport { Icon } from '@/components/Icon';\nimport { Button } from '@/components/Button';\nimport { sideBarTabs } from '@/layout/GlobalMessageLayout/data';\nimport { Spacer } from '@/layout';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport { ViewMode } from '@/features/conversation/types';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { GlobalChatList } from './GlobalChatList';\nimport { GlobalMessageContext } from '../contexts/GlobalMessageProvider';\nimport { ListWrapper, SideBarWrapper, TabsWrapper, Options } from './styles';\n\nconst SideBar = () => {\n  const { notExistsConversation, selectedTabId, setSelectedTabId } =\n    useContext(GlobalMessageContext);\n  const { setViewMode, setIsNewConversation } = useContext(\n    ConversationViewContext,\n  );\n  const { setActiveConversationSid } = useContext(ActiveConversationContext);\n\n  const handleTab = useCallback(\n    (val: string) => {\n      if (!val) return;\n      setSelectedTabId(Number(val));\n    },\n    [setSelectedTabId],\n  );\n\n  const handleCreateNewConv = useCallback(() => {\n    setIsNewConversation(true);\n    setViewMode(ViewMode.FULLCONVERSATION);\n    setActiveConversationSid('');\n    if (selectedTabId === 2) {\n      setSelectedTabId(1);\n    }\n  }, [\n    selectedTabId,\n    setActiveConversationSid,\n    setIsNewConversation,\n    setSelectedTabId,\n    setViewMode,\n  ]);\n\n  return (\n    <SideBarWrapper data-testid=\"side_bar_wrapper\">\n      <ListWrapper padding={16} justifyContent=\"space-between\">\n        <TSpan\n          font=\"heading-xs-bold\"\n          colorToken=\"--text-body-header-neutral-default\"\n        >\n          {t('noumena.chambers.toolbox.element.messages')}\n        </TSpan>\n        <Options>\n          {/* // TODO Not implemented yet */}\n          {false && (\n            <Button\n              size=\"small\"\n              secondary\n              icon={\n                <Icon\n                  name=\"search_m\"\n                  size={24}\n                  color=\"--icon-button-brand-secondary-default\"\n                />\n              }\n            />\n          )}\n          <Button\n            size=\"small\"\n            primary\n            icon={\n              <Icon\n                name=\"plus_m\"\n                size={24}\n                color=\"--icon-button-neutral-alt-default\"\n              />\n            }\n            onClick={handleCreateNewConv}\n          />\n        </Options>\n      </ListWrapper>\n      {!notExistsConversation && (\n        <TabsWrapper data-testid=\"tabs_wrapper\">\n          <BasicChipsTabsForm\n            onChange={handleTab}\n            inputList={sideBarTabs}\n            selectedId={selectedTabId.toString()}\n            mode=\"isBackground\"\n            isWithoutImage\n            fontSize=\"--font-input-small-size\"\n          />\n        </TabsWrapper>\n      )}\n      <Spacer height={16} />\n      <GlobalChatList\n        selectedTabId={selectedTabId}\n        handleCreateNewConv={handleCreateNewConv}\n      />\n    </SideBarWrapper>\n  );\n};\n\nexport default SideBar;\n","import { cssVar, rgba } from 'polished';\nimport styled from 'styled-components';\n\nexport const Layout = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  #main-header {\n    width: 100%;\n  }\n`;\n\nexport const LoadingWrapper = styled.div`\n  z-index: 999;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: ${rgba(cssVar('--bg-overlay-neutral-light'), 0.1)};\n`;\n\nexport const Container = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow-y: auto;\n  z-index: 1;\n  height: 100%;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex: 1;\n  overflow-y: auto;\n  position: relative;\n  height: 100%;\n`;\n\nexport const Children = styled.div`\n  flex: 1;\n  overflow: hidden;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Divider = styled.div`\n  height: 100%;\n  border-left: 1px solid var(--bg-separator-neutral-default);\n`;\n","import { type FC, useContext } from 'react';\nimport { Header } from '@/components/Header';\nimport { MainHeader } from '@/layout/MainHeader';\nimport { Spinner } from '@/components/Spinner';\nimport { useAuth } from '@/features/auth/contexts';\nimport { useLaunchDarkly, useWindowDimensions } from '@/hooks';\nimport { UserUtil } from '@/utils/user';\nimport SideBar from '@/screens/GlobalMessages/SideBar/SideBar';\nimport { breakpoints } from '@/constants/devices';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { NewConversationContext } from '@/features/conversation/contexts/NewConversationContext';\nimport { ViewMode } from '@/features/conversation/types';\nimport { useNavigate } from 'react-router';\nimport * as S from './styles';\nimport { AppLayout } from '../AppLayout';\n\nexport const GlobalMessageLayout: FC<{\n  children?: React.ReactNode;\n}> = (props) => {\n  const { children } = props;\n\n  const { user } = useAuth();\n  const { width } = useWindowDimensions();\n  const { flags } = useLaunchDarkly();\n  const navigate = useNavigate();\n\n  const { viewMode } = useContext(ConversationViewContext);\n  const { loading: isCreatingNewConversation } = useContext(\n    NewConversationContext,\n  );\n\n  const isMobile = width <= breakpoints.MOBILE_MAX;\n\n  const mainContent = (\n    <S.Container>\n      <S.Content>\n        {(viewMode !== ViewMode.FULLCONVERSATION || !isMobile) && <SideBar />}\n        {!isMobile && <S.Divider />}\n        <S.Children>{children}</S.Children>\n      </S.Content>\n    </S.Container>\n  );\n\n  if (flags.newAppNavigation) {\n    return (\n      <AppLayout.Layout\n        onGoBack={() => navigate(-1)}\n        background=\"neutral-alt\"\n        topNavbar={<AppLayout.TopBar />}\n        sideNav={<AppLayout.SideNavigation />}\n      >\n        {mainContent}\n      </AppLayout.Layout>\n    );\n  }\n\n  return (\n    <S.Layout>\n      {isCreatingNewConversation && (\n        <S.LoadingWrapper>\n          <Spinner />\n        </S.LoadingWrapper>\n      )}\n\n      <Header isBorderRadius={false}>\n        <MainHeader\n          avatar={UserUtil.getProfilePicture(user) || undefined}\n          userName={user?.firstName || undefined}\n        />\n      </Header>\n      {mainContent}\n    </S.Layout>\n  );\n};\n","import styled from 'styled-components';\n\nexport const GlobalConversationHeaderWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  padding: 16px;\n  box-sizing: border-box;\n  * {\n    box-sizing: border-box;\n  }\n`;\n","import { useCallback, useContext, useRef } from 'react';\nimport { Button } from '@/components/Button';\nimport { Icon } from '@/components/Icon';\nimport { breakpoints } from '@/constants/devices';\nimport { useWindowDimensions } from '@/hooks';\nimport { NewHomeConversationUserSelector } from '@/features/conversation/components/NewConversationUserSelector/NewHomeConversationUserSelector';\nimport ConversationProfile from '@/features/conversation/components/ConversationProfile';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { ViewMode } from '@/features/conversation/types';\nimport { GlobalConversationHeaderWrapper } from './styles';\n\nconst GlobalConversationHeader = () => {\n  const { width } = useWindowDimensions();\n  const isMobile = width <= breakpoints.MOBILE_MAX;\n  const { setViewMode, isNewConversation, setIsNewConversation } = useContext(\n    ConversationViewContext,\n  );\n  const newConversationRef =\n    useRef<React.ElementRef<typeof NewHomeConversationUserSelector>>(null);\n\n  const handleBack = useCallback(() => {\n    setIsNewConversation(false);\n    setViewMode(ViewMode.FULLCHAT);\n    newConversationRef?.current?.cancel?.();\n  }, [setIsNewConversation, setViewMode]);\n\n  return (\n    <GlobalConversationHeaderWrapper data-testid=\"conversionheader-wrapper\">\n      {isMobile && (\n        <Button\n          data-testid=\"back-button\"\n          neutral\n          size=\"small\"\n          icon={\n            <Icon\n              name=\"arrow_left_m\"\n              size={24}\n              color=\"--icon-button-neutral-default\"\n            />\n          }\n          onClick={handleBack}\n        />\n      )}\n      {isNewConversation ? (\n        <NewHomeConversationUserSelector ref={newConversationRef} />\n      ) : (\n        <ConversationProfile />\n      )}\n    </GlobalConversationHeaderWrapper>\n  );\n};\nexport default GlobalConversationHeader;\n","import styled from 'styled-components';\nimport { noScrollBar } from '@/common/globalStyles';\n\nexport const Wrapper = styled.div`\n  flex: 1;\n  width: 100%;\n  height: calc(100% - 72px);\n  box-sizing: border-box;\n  padding: 0 16px 16px;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nexport const MessageListWrapper = styled.div`\n  padding-right: 16px;\n  flex: 1;\n  overflow: auto;\n  ${noScrollBar}\n`;\n\nexport const StartConversationMessage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 12px 0;\n`;\n\nexport const MessageInputWrapper = styled.div`\n  padding-top: 8px;\n`;\n","import { type FC, useContext, useEffect, useMemo, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { TSpan } from '@/components/Typography';\nimport { UserUtil } from '@/utils/user';\nimport { useAuth } from '@/features/auth/contexts';\nimport ConversationHooks from '@/features/conversation/hooks/globalMessages';\nimport { NewConversationContext } from '@/features/conversation/contexts/NewConversationContext';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { MessageList } from '@/features/conversation/components/MessageList/MessageList';\nimport { MessageInput } from '@/features/conversation/components/MessageInput';\nimport { chunkStringWithoutWordBreaking } from '@/utils/strings';\nimport {\n  MessageInputWrapper,\n  MessageListWrapper,\n  StartConversationMessage,\n  Wrapper,\n} from './styles';\n\nexport const GlobalConversationBody: FC<{}> = () => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const { activeConversationSid } = useContext(ActiveConversationContext);\n  const { setConversationWrapperWidth } = useContext(ConversationViewContext);\n  const {\n    ecLoading,\n    selectedUsers,\n    isConversationCreatable,\n    createHomeNoumNewConversation,\n  } = useContext(NewConversationContext);\n  const { conversation } = ConversationHooks.useConversation({\n    sid: activeConversationSid,\n  });\n  const { setIsNewConversation } = useContext(ConversationViewContext);\n  const { sendMessage, sendFile } = ConversationHooks.useConversationMessages({\n    sid: activeConversationSid,\n  });\n\n  const { users } = ConversationHooks.useConversationDetails({\n    sid: activeConversationSid!,\n  });\n\n  const isShowMessageList = !ecLoading;\n\n  const isShowMessageStartLabel =\n    !ecLoading && !activeConversationSid && isConversationCreatable;\n\n  const isShownMessageInput = useMemo(\n    () =>\n      (activeConversationSid || isConversationCreatable) &&\n      !UserUtil.isInactive(user) &&\n      (users.length === 1 ? users[0].source !== null : true),\n    [activeConversationSid, isConversationCreatable, user, users],\n  );\n\n  useEffect(() => {\n    setConversationWrapperWidth(ref.current?.scrollWidth || 0);\n  }, [ref.current?.scrollWidth, setConversationWrapperWidth]);\n\n  const handleSendMessage = async (message: string, files: File[]) => {\n    let convo = conversation;\n    if (isConversationCreatable) {\n      if (convo) {\n        setIsNewConversation(false);\n      } else {\n        convo = await createHomeNoumNewConversation();\n      }\n    }\n\n    const splittedMessages = chunkStringWithoutWordBreaking(message, 4000);\n    splittedMessages.forEach((msg) => sendMessage(msg, convo));\n\n    // sending each media file as a separate message.\n    files.forEach((file) => sendFile(file, convo));\n  };\n\n  return (\n    <Wrapper ref={ref} data-testid=\"conversionbody-wrapper\">\n      <MessageListWrapper>\n        {isShowMessageList && <MessageList />}\n      </MessageListWrapper>\n      <MessageInputWrapper>\n        {isShowMessageStartLabel && (\n          <StartConversationMessage>\n            <TSpan\n              font=\"footnote\"\n              colorToken=\"--text-message-status-neutral-default\"\n            >\n              {selectedUsers.length === 1\n                ? t('noumena.message.start_single_conversation', {\n                    name: `${selectedUsers[0].firstName} ${selectedUsers[0].lastName}`,\n                  })\n                : t('noumena.message.start_group_conversation')}\n            </TSpan>\n          </StartConversationMessage>\n        )}\n        {isShownMessageInput && (\n          <MessageInput onSendMessage={handleSendMessage} />\n        )}\n      </MessageInputWrapper>\n    </Wrapper>\n  );\n};\n","import { useCallback, useContext, useLayoutEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { breakpoints } from '@/constants/devices';\nimport { useWindowDimensions } from '@/hooks';\nimport { ConversationViewContext } from '@/features/conversation/contexts/ConversationViewContext';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport EmptyScreen from '../EmptyScreen/EmptyScreen';\nimport GlobalConversationHeader from './GlobalConversationHeader';\nimport GlobalConversationBody from './GlobalConversationBody';\n\ntype RouteParams = {\n  id: string;\n};\n\nconst MessageContent = () => {\n  const { width } = useWindowDimensions();\n  const isMobile = width <= breakpoints.MOBILE_MAX;\n  const { id } = useParams<RouteParams>();\n  const { isNewConversation, setIsNewConversation } = useContext(\n    ConversationViewContext,\n  );\n  const { activeConversationSid, setActiveConversationSid } = useContext(\n    ActiveConversationContext,\n  );\n\n  const handleCreateNewConv = useCallback(() => {\n    setIsNewConversation(true);\n    setActiveConversationSid('');\n  }, [setActiveConversationSid, setIsNewConversation]);\n\n  useLayoutEffect(() => {\n    if (id) {\n      setActiveConversationSid(id);\n    }\n  }, [id, setActiveConversationSid]);\n\n  if (!isMobile && !isNewConversation && !activeConversationSid)\n    return <EmptyScreen onCreateNew={handleCreateNewConv} />;\n  return (\n    <>\n      <GlobalConversationHeader />\n      <GlobalConversationBody />\n    </>\n  );\n};\nexport default MessageContent;\n","import { useContext } from 'react';\nimport { Navigate, useLocation, useParams } from 'react-router';\nimport routes from '@/constants/routes';\nimport { ActiveConversationContext } from '@/features/conversation/contexts/ActiveConversationContext';\nimport MessageContent from './MessageContent/MessageContent';\n\nconst GlobalMessagesRedirect = () => {\n  const location = useLocation();\n  const { id } = useParams();\n  const { activeConversationSid } = useContext(ActiveConversationContext);\n\n  if (\n    activeConversationSid &&\n    location.pathname.includes(routes.MESSAGES) &&\n    !id\n  )\n    return (\n      <Navigate replace to={`${routes.MESSAGES}/${activeConversationSid}`} />\n    );\n\n  return <MessageContent />;\n};\n\nexport default GlobalMessagesRedirect;\n","import { Route, Routes, useNavigate } from 'react-router';\nimport { useCallback } from 'react';\nimport { GlobalMessageLayout } from '@/layout/GlobalMessageLayout';\nimport { ActiveConversationProvider } from '@/features/conversation/contexts/ActiveConversationProvider';\nimport { ConversationViewProvider } from '@/features/conversation/contexts/ConversationViewProvider';\nimport { NewConversationProvider } from '@/features/conversation/contexts/NewConversationProvider';\nimport { TwilioClientProvider } from '@/features/conversation/contexts/TwilioClientProvider';\nimport routes from '@/constants/routes';\nimport { useMarkConversationsAsViewedMutation } from '@/apollo/graphql';\nimport MessageContent from './MessageContent/MessageContent';\nimport { GlobalMessageProvider } from './contexts/GlobalMessageProvider';\nimport GlobalMessagesRedirect from './GlobalMessagesRedirect';\n\nconst GlobalMessages = () => {\n  const navigate = useNavigate();\n  const [markConversationsAsViewed] = useMarkConversationsAsViewedMutation();\n\n  const onConversationCreated = useCallback(\n    (id: string) => {\n      navigate(`${routes.MESSAGES}/${id}`);\n    },\n    [navigate],\n  );\n\n  const onLoadConversations = useCallback(() => {\n    markConversationsAsViewed({\n      variables: {\n        date: new Date().toISOString(),\n      },\n    });\n  }, [markConversationsAsViewed]);\n\n  return (\n    <ConversationViewProvider>\n      <GlobalMessageProvider>\n        <TwilioClientProvider onLoadConversations={onLoadConversations}>\n          <ActiveConversationProvider>\n            <NewConversationProvider onCreated={onConversationCreated}>\n              <GlobalMessageLayout>\n                <Routes>\n                  <Route path=\":id\" element={<MessageContent />} />\n                  <Route element={<GlobalMessagesRedirect />} index />\n                </Routes>\n              </GlobalMessageLayout>\n            </NewConversationProvider>\n          </ActiveConversationProvider>\n        </TwilioClientProvider>\n      </GlobalMessageProvider>\n    </ConversationViewProvider>\n  );\n};\n\nexport default GlobalMessages;\n"],"names":["sideBarTabs","name","text","t","labelSize","EmptyScreenWrapper","styled","div","EmptyScreen","onCreateNew","jsxs","jsx","Icon","Spacer","TSpan","Button","ListWrapper","padding","flex","justifyContent","flexDirection","noScrollBar","SideBarWrapper","sizes","LAPTOP","MOBILE_MAX","TabsWrapper","Options","StyledNoNoumConvoNote","StyledSubtitle","attrs","font","colorToken","UnreadMessageSign","StyledLoadMore","NoumGroupLoading","SpinnerContainer","Divider","ExpandableChatItem","conversationItem","activeConversationSid","isNewConversation","handleClickItem","user","useAuth","isOpen","setIsOpen","useState","isLoadingMore","setIsLoadingMore","showLoadingSection","setShowLoadingSection","unreadConversations","setUnreadConversations","conversations","setConversations","cleanList","map","item","conversation","conversationType","noum","uid","_id","ConversationType","PROJECT_OWNER","PROJECT_USER","variables","useConversationListQueryOptions","fetchMore","useLazyQuery","GetSpaceConversationsAsAdminQueryDocument","GetSpaceConversationsDocument","fetchPolicy","offset","limit","spaceId","handleLoadMore","useCallback","result","length","spaceConversationsData","data","getSpaceConversations","getSpaceConversationsAsAdminQuery","cleaned","prev","filter","newItem","every","unreadConversationsMap","useMemo","reduce","cid","unread","handleClick","sid","handleReadChatItem","useEffect","unreadConversation","useLayoutEffect","Object","values","curr","showLoadMore","conversationsCount","cids","includes","Accordion","Avatar","profileImage","String","Trans","numConversations","primary","Fragment","index","ChatItem","Spinner","GlobalMessageContextInitialValue","notExistsConversation","setNotExistsConversation","selectedTabId","setSelectedTabId","GlobalMessageContext","createContext","GlobalMessageProvider","children","setConversationType","setIsNewConversation","useContext","ConversationViewContext","prevTab","GLOBAL_DIRECT","GLOBAL_NOUM","handleSelectTab","tab","GLOBAL_ALL","value","GlobalChatList","handleCreateNewConv","width","useWindowDimensions","isMobile","breakpoints","navigate","useNavigate","setViewMode","setActiveConversationSid","ActiveConversationContext","networkStatus","count","totalCount","onFetchMore","ConversationHooks","useConversationsList","firstConversationItem","__typename","ViewMode","FULLCONVERSATION","routes","MESSAGES","showNewConversationItem","paginating","NetworkStatus","hasMore","infiniteStatus","loading","setVariables","Infinite","NewChatItem","SideBar","handleTab","val","Number","BasicChipsTabsForm","toString","Layout","LoadingWrapper","rgba","cssVar","Container","Content","Children","GlobalMessageLayout","props","flags","useLaunchDarkly","viewMode","isCreatingNewConversation","NewConversationContext","mainContent","S.Container","S.Content","S.Divider","S.Children","newAppNavigation","AppLayout","S.Layout","S.LoadingWrapper","Header","MainHeader","UserUtil","getProfilePicture","undefined","firstName","GlobalConversationHeaderWrapper","GlobalConversationHeader","newConversationRef","useRef","handleBack","FULLCHAT","current","cancel","NewHomeConversationUserSelector","ConversationProfile","Wrapper","MessageListWrapper","StartConversationMessage","MessageInputWrapper","GlobalConversationBody","ref","useTranslation","setConversationWrapperWidth","ecLoading","selectedUsers","isConversationCreatable","createHomeNoumNewConversation","useConversation","sendMessage","sendFile","useConversationMessages","users","useConversationDetails","isShowMessageList","isShowMessageStartLabel","isShownMessageInput","isInactive","source","scrollWidth","handleSendMessage","message","files","convo","chunkStringWithoutWordBreaking","forEach","msg","file","MessageList","lastName","MessageInput","MessageContent","id","useParams","GlobalMessagesRedirect","location","useLocation","pathname","Navigate","GlobalMessages","markConversationsAsViewed","useMarkConversationsAsViewedMutation","onConversationCreated","onLoadConversations","date","Date","toISOString","ConversationViewProvider","TwilioClientProvider","ActiveConversationProvider","NewConversationProvider","Routes","Route"],"mappings":"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"}