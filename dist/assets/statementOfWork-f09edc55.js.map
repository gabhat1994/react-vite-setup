{"version":3,"file":"statementOfWork-f09edc55.js","sources":["../../src/features/contracts/utils/statementOfWorkFormMapper.ts","../../src/features/contracts/hooks/statementOfWork.ts"],"sourcesContent":["import { type DeepPartial } from 'react-hook-form';\nimport {\n  type CreateNewSowInput,\n  CurrencyEnum,\n  FeesCategoryTypes,\n  type FeesInfoInput,\n  type UpdateSowInput,\n} from '@/apollo/generated/types';\nimport { ApiPayloadParser } from '@/utils/api/payloadParser';\nimport { type PickRequiredRestDeepPartial } from '@/utils/types';\nimport { convertDateToUtcNoon } from '@/utils/date';\nimport {\n  type DraftStatementOfWorkFormValues,\n  type StatementOfWorkFormValues,\n} from '../hooks/statementOfWorkForm';\nimport { type StatementOfWork } from '../types';\n\nfunction toFeesData(\n  values: Pick<StatementOfWorkFormValues, 'fees' | 'milestones'>,\n): FeesInfoInput[] | undefined {\n  switch (values.fees.feeCategory) {\n    case FeesCategoryTypes.Inadvance:\n      return [\n        {\n          amount: values.fees.inAdvance.amount,\n          dueDate: convertDateToUtcNoon(\n            values.fees.inAdvance.dueDate,\n          ).toISOString(),\n        },\n      ];\n    case FeesCategoryTypes.Installments:\n      return values.fees.instalments?.map((instalment) => ({\n        amount: instalment.amount,\n        dueDate: convertDateToUtcNoon(instalment.dueDate).toISOString(),\n      }));\n    case FeesCategoryTypes.Milestones:\n      return values.fees.milestones?.map((milestone, index) => ({\n        description: values.milestones?.[index].name,\n        amount: milestone.amount,\n        dueDate: convertDateToUtcNoon(milestone.dueDate).toISOString(),\n      }));\n    case FeesCategoryTypes.Lumpsum:\n      return [\n        {\n          amount: values.fees.lumpSum.amount,\n          dueDate: convertDateToUtcNoon(\n            values.fees.lumpSum.dueDate,\n          ).toISOString(),\n        },\n      ];\n    default:\n      return undefined;\n  }\n}\n\nfunction toCreateNewSowInput(\n  values: DraftStatementOfWorkFormValues,\n): CreateNewSowInput {\n  return {\n    title: values.title,\n    linkedNoum: values.noumId,\n  };\n}\n\nfunction toUpdateSowInput(\n  values: PickRequiredRestDeepPartial<\n    StatementOfWorkFormValues,\n    | 'noumId'\n    | 'deliverables'\n    | 'milestones'\n    | 'expenseReimbursement'\n    | 'bonusCommission'\n    | 'fees'\n  >,\n): UpdateSowInput {\n  return {\n    title: values.title,\n    linkedNoum: values.noumId,\n    scopeOfWork: values.scopeOfWork,\n    effectiveDate: values.effectiveDate\n      ? convertDateToUtcNoon(values.effectiveDate).toISOString()\n      : null,\n    linkedContract: values.contractId || null,\n    deliverables: values.deliverables?.map((deliverable) => ({\n      title: deliverable.name,\n      description: deliverable.description,\n      dueDate: deliverable.dueDate\n        ? convertDateToUtcNoon(deliverable.dueDate).toISOString()\n        : null,\n    })),\n    milestones: values.milestones?.map((milestone) => ({\n      title: milestone.name,\n      description: milestone.description,\n      dueDate: convertDateToUtcNoon(milestone.dueDate).toISOString(),\n    })),\n    commission: values.bonusCommission?.map((commission) => ({\n      description: commission.name,\n      amount: commission.amount,\n    })),\n    expenseReimbursement: values.expenseReimbursement?.map((expense) => ({\n      description: expense.name,\n      amount: expense.amount,\n    })),\n    fees: {\n      type: values.fees.feeCategory,\n      feesData: toFeesData(values) ?? null,\n    },\n  };\n}\n\nfunction fromStatementOfWork(\n  statementOfWork: StatementOfWork,\n): DraftStatementOfWorkFormValues {\n  if (!statementOfWork.linkedNoum._id) {\n    throw new Error('Invalid linkedNoum for provided statement of work.');\n  }\n\n  return {\n    ...getDefaultValues({ noumId: statementOfWork.linkedNoum._id }),\n    noumId: statementOfWork.linkedNoum._id,\n    title: statementOfWork.title ?? '',\n    contractId: statementOfWork.linkedContract?._id ?? undefined,\n    scopeOfWork: statementOfWork.scopeOfWork ?? undefined,\n    effectiveDate: ApiPayloadParser.parseDateString(\n      statementOfWork.effectiveDate,\n    ),\n    deliverables:\n      statementOfWork.deliverables?.map((deliverable) => ({\n        name: deliverable?.title ?? '',\n        description: deliverable?.description ?? '',\n        dueDate: ApiPayloadParser.parseDateString(deliverable?.dueDate),\n      })) ?? undefined,\n    milestones:\n      statementOfWork.milestones?.map((milestone) => ({\n        name: milestone?.title ?? '',\n        description: milestone?.description ?? '',\n        dueDate: ApiPayloadParser.parseDateString(milestone?.dueDate),\n      })) ?? undefined,\n    bonusCommission: statementOfWork.commission?.map((commission) => ({\n      name: commission?.description ?? undefined,\n      amount: commission?.amount ?? undefined,\n    })),\n    expenseReimbursement: statementOfWork.expenseReimbursement?.map(\n      (expense) => ({\n        name: expense?.description ?? undefined,\n        amount: expense?.amount ?? undefined,\n      }),\n    ),\n    fees: {\n      feeCategory: statementOfWork.fees?.type ?? undefined,\n      inAdvance:\n        statementOfWork.fees?.type === FeesCategoryTypes.Inadvance\n          ? {\n              amount: statementOfWork.fees.feesData?.[0]?.amount ?? undefined,\n              dueDate: ApiPayloadParser.parseDateString(\n                statementOfWork.fees.feesData?.[0]?.dueDate,\n              ),\n            }\n          : undefined,\n      milestones:\n        statementOfWork.fees?.type === FeesCategoryTypes.Milestones\n          ? statementOfWork.fees?.feesData?.map((feeInfo) => ({\n              amount: feeInfo?.amount ?? undefined,\n              dueDate: ApiPayloadParser.parseDateString(feeInfo?.dueDate),\n            }))\n          : undefined,\n      instalments:\n        statementOfWork.fees?.type === FeesCategoryTypes.Installments\n          ? statementOfWork.fees?.feesData?.map((feeInfo) => ({\n              amount: feeInfo?.amount ?? undefined,\n              dueDate: ApiPayloadParser.parseDateString(feeInfo?.dueDate),\n            }))\n          : undefined,\n      lumpSum:\n        statementOfWork.fees?.type === FeesCategoryTypes.Lumpsum\n          ? {\n              amount: statementOfWork.fees.feesData?.[0]?.amount ?? 0,\n              dueDate: ApiPayloadParser.parseDateString(\n                statementOfWork.fees.feesData?.[0]?.dueDate,\n              ),\n            }\n          : undefined,\n    },\n    logo: statementOfWork.logo ?? undefined,\n  };\n}\n\ninterface GetDefaultValuesOptions {\n  noumId?: string;\n}\nfunction getDefaultValues({\n  noumId,\n}: GetDefaultValuesOptions): DeepPartial<StatementOfWorkFormValues> {\n  return {\n    title: 'Statement of Work',\n    noumId: noumId ?? '',\n    scopeOfWork: '',\n    payments: {\n      currency: CurrencyEnum.Usd,\n    },\n  };\n}\n\nexport const StatementOfWorkFormMapper = {\n  toCreateNewSowInput,\n  toUpdateSowInput,\n  fromStatementOfWork,\n  getDefaultValues,\n};\n","import {\n  GetSingleSowDocument,\n  type GetSingleSowQuery,\n  type GetSingleSowQueryVariables,\n  useCreateNewSowMutation,\n  useDeleteSowMutation,\n  useGetSingleSowQuery,\n  useUpdateSowMutation,\n} from '@/apollo/graphql';\nimport { StatementOfWorkFormMapper } from '../utils/statementOfWorkFormMapper';\nimport {\n  type DraftStatementOfWorkFormValues,\n  type StatementOfWorkFormValues,\n} from './statementOfWorkForm';\n\nexport function useStatementOfWork(id?: string) {\n  const [createNewSowMutation] = useCreateNewSowMutation();\n  const [updateSowMutation] = useUpdateSowMutation();\n  const [deleteSowMutation] = useDeleteSowMutation();\n\n  const { data, loading } = useGetSingleSowQuery({\n    variables: {\n      id: id!,\n    },\n    fetchPolicy: 'cache-and-network',\n    skip: !id,\n  });\n\n  const statementOfWork = data?.getSingleSOW ?? null;\n\n  async function createStatementOfWork(values: DraftStatementOfWorkFormValues) {\n    const result = await createNewSowMutation({\n      variables: {\n        input: StatementOfWorkFormMapper.toCreateNewSowInput(values),\n      },\n      update: (cache, res) => {\n        const resSow = res.data?.createNewSOW;\n        if (!resSow) {\n          return;\n        }\n\n        cache.writeQuery<GetSingleSowQuery, GetSingleSowQueryVariables>({\n          query: GetSingleSowDocument,\n          variables: {\n            id: resSow._id,\n          },\n          data: {\n            getSingleSOW: resSow,\n          },\n        });\n      },\n    });\n\n    const newStatementOfWork = result.data?.createNewSOW;\n    if (!newStatementOfWork) {\n      throw new Error(\n        'Unable to create a statement of work. Please try again later.',\n      );\n    }\n    return newStatementOfWork;\n  }\n\n  async function updateStatementOfWork(values: StatementOfWorkFormValues) {\n    if (!id) {\n      return null;\n    }\n\n    const result = await updateSowMutation({\n      variables: {\n        id,\n        input: StatementOfWorkFormMapper.toUpdateSowInput(values),\n      },\n    });\n\n    const updatedStatementOfWork = result.data?.updateSOW;\n    if (!updatedStatementOfWork) {\n      throw new Error(\n        'Unable to update the statement of work. Please try again later.',\n      );\n    }\n\n    return updatedStatementOfWork;\n  }\n\n  async function deleteStatementOfWork(deletedId: string | undefined = id) {\n    if (!deletedId) {\n      return;\n    }\n\n    const success = await deleteSowMutation({\n      variables: {\n        id: deletedId,\n      },\n    });\n\n    if (!success) {\n      throw new Error('Unable to delete the SOW. Please try again later.');\n    }\n  }\n\n  return {\n    statementOfWork,\n    isLoading: loading,\n    createStatementOfWork,\n    updateStatementOfWork,\n    deleteStatementOfWork,\n  };\n}\n"],"names":["toFeesData","values","fees","feeCategory","FeesCategoryTypes","Inadvance","amount","inAdvance","dueDate","convertDateToUtcNoon","toISOString","Installments","instalments","map","instalment","Milestones","milestones","milestone","index","description","name","Lumpsum","lumpSum","undefined","toCreateNewSowInput","title","linkedNoum","noumId","toUpdateSowInput","scopeOfWork","effectiveDate","linkedContract","contractId","deliverables","deliverable","commission","bonusCommission","expenseReimbursement","expense","type","feesData","fromStatementOfWork","statementOfWork","_id","Error","getDefaultValues","ApiPayloadParser","parseDateString","feeInfo","logo","payments","currency","CurrencyEnum","Usd","StatementOfWorkFormMapper","useStatementOfWork","id","createNewSowMutation","useCreateNewSowMutation","updateSowMutation","useUpdateSowMutation","deleteSowMutation","useDeleteSowMutation","data","loading","useGetSingleSowQuery","variables","fetchPolicy","skip","getSingleSOW","createStatementOfWork","newStatementOfWork","result","input","update","cache","res","resSow","createNewSOW","writeQuery","query","GetSingleSowDocument","updateStatementOfWork","updatedStatementOfWork","updateSOW","deleteStatementOfWork","deletedId","isLoading"],"mappings":"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"}