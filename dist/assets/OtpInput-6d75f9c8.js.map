{"version":3,"file":"OtpInput-6d75f9c8.js","sources":["../../src/components/Otp/SingleOtpInput/styles.ts","../../src/components/Otp/SingleOtpInput/SingleOtpInput.tsx","../../src/components/Otp/styles.ts","../../src/components/Otp/OtpInput.tsx"],"sourcesContent":["import styled, { css } from 'styled-components';\nimport { otpTypography } from '@/components/Typography/index';\n\nimport { type SingleOtpProps } from './types';\n\nexport const SingleOtpInputBaseCss = css`\n  display: 'inline-flex';\n  height: 66px;\n\n  border: none;\n  outline: none;\n  border-radius: 8px;\n  background-color: var(--bg-code-form-neutral-default);\n  text-align: center;\n  vertical-align: middle;\n  text-align: center;\n  color: var(--text-code-form-neutral-default);\n  border: 2px solid var(--border-input-neutral-default);\n  padding: 0px;\n\n  :disabled {\n    background-color: var(--bg-code-form-neutral-default);\n    border: 2px solid var(--border-input-neutral-disabled);\n    cursor: not-allowed;\n    color: var(--text-code-form-neutral-disabled);\n  }\n  :focus {\n    border: 2px solid var(--border-input-brand-primary-default);\n  }\n\n  ${otpTypography.otpXLarge};\n`;\n\nexport const SinleOtpInputStyled = styled.input<SingleOtpProps>`\n  ${SingleOtpInputBaseCss}\n  width: ${(props) => (props.width ? props.width : '70px')};\n  color: ${(props) =>\n    props.color ? props.color : 'var(--text-code-form-neutral-default)'};\n  -webkit-text-security: ${(props) =>\n    props.launchFrom === 'PaymentModal' ? `disc` : `none`};\n`;\n","import { useEffect, useRef } from 'react';\nimport { SinleOtpInputStyled } from './styles';\nimport { type SingleOtpProps } from './types';\n\nconst RenderInput = ({\n  isDisabled = false,\n  isInputNum = true,\n  launchFrom,\n  isInputPassword = false,\n  value = '',\n  focus = false,\n  color,\n  ...rest\n}: SingleOtpProps) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (inputRef.current && focus) {\n      inputRef.current.focus();\n    }\n  }, [focus]);\n\n  function getType(): string {\n    if (isInputPassword) {\n      return 'password';\n    }\n    if (isInputNum) {\n      return 'tel';\n    }\n    return 'text';\n  }\n\n  return (\n    <SinleOtpInputStyled\n      autoComplete=\"off\"\n      type={getType()}\n      maxLength={1}\n      disabled={isDisabled}\n      ref={inputRef}\n      value={value || ''}\n      color={color}\n      {...rest}\n      launchFrom={launchFrom}\n    />\n  );\n};\n\nexport const SingleOtpInput = (props: SingleOtpProps) => RenderInput(props);\n","import styled, { css } from 'styled-components';\n\nexport const OtpBaseCss = css`\n  border: none;\n  display: inline-flex;\n  justify-content: space-between;\n  width: 100%;\n\n  :hover > input:not(:disabled):not(:focus) {\n    background-color: var(--bg-input-brand-primary-hover);\n    border: 2px solid var(--border-input-neutral-default);\n  }\n\n  :focus-within > input {\n    transition: color 0.2s ease-in-out;\n    background-color: var(--bg-input-brand-primary-hover);\n  }\n\n  :focus-within > input:not(:focus) {\n    transition: color 0.2s ease-in-out;\n    border: 2px solid var(--border-input-neutral-default);\n  }\n`;\n\nexport const OtpStyled = styled.div`\n  ${OtpBaseCss}\n`;\n","import { useState, useEffect } from 'react';\nimport { SingleOtpInput } from './SingleOtpInput/SingleOtpInput';\nimport { OtpStyled } from './styles';\nimport { type CommonOtpProps } from './types';\n\nconst RenderInputs = ({\n  numInputs = 4,\n  isDisabled = false,\n  isInputNum = true,\n  isInputPassword = false,\n  launchFrom = '',\n  dataCy = 'OtpInput-cy',\n  dataTestId = 'OtpInputTestId',\n  onChange,\n  value,\n  width,\n  onEnter,\n  color,\n}: CommonOtpProps) => {\n  const [activeInput, setActiveInput] = useState<number>(0);\n  const inputs = [];\n  const getOtpValue = () => (value ? value.toString().split('') : []);\n\n  useEffect(() => {\n    if (!value?.length) {\n      setActiveInput(0);\n    }\n  }, [value]);\n\n  const otp = getOtpValue();\n  let isNormalFlow = true;\n\n  // calls parent onChange method to return OTP from input\n  function handleOtpChange(otpArr: string[]): void {\n    let otpValue = otpArr.join('');\n    // checking whether user hasn't entered input from first box\n    isNormalFlow = Object.values(otpArr).length === otpArr.length;\n    if (!isNormalFlow) {\n      otpValue = new Array(numInputs)\n        .fill('')\n        .map((_, i) => otpArr[i] || ' ')\n        .join('');\n    }\n    onChange(otpValue);\n  }\n\n  // Checks the input is valid or not based on the type given in isInputNum\n  function isInputValueValid(val: string): boolean {\n    const isTypeValid = isInputNum\n      ? !Number.isNaN(parseInt(val, 10))\n      : typeof value === 'string';\n\n    return isTypeValid && val.trim().length === 1;\n  }\n\n  // Focus on input by index\n  function focusInput(input: number) {\n    const updateInput = Math.max(Math.min(numInputs - 1, input), 0);\n\n    setActiveInput(updateInput);\n  }\n\n  // Focus on next input\n  function focusNextInput() {\n    focusInput(activeInput + 1);\n  }\n\n  // Focus on previous input\n  function focusPrevInput() {\n    focusInput(activeInput - 1);\n  }\n\n  // Change OTP value at focused input\n  const changeCodeAtFocus = (val: string) => {\n    const otpVal = getOtpValue();\n    const otpTemp = val[0];\n    otpVal[activeInput] = otpTemp;\n\n    handleOtpChange(otpVal);\n  };\n\n  // Change OTP value at focused input\n  const changeCodeAtIndex = (val: string[], index: number) => {\n    const otpVal = getOtpValue();\n    const otpTemp = val[0];\n    otpVal[index] = otpTemp;\n\n    handleOtpChange(otpVal);\n  };\n\n  // Handle pasted OTP\n  const handleOnPaste = (e: React.ClipboardEvent<HTMLInputElement>): void => {\n    e.preventDefault();\n\n    if (isDisabled) {\n      return;\n    }\n\n    const otpVal = getOtpValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = e.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; pos += 1) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otpVal[pos] = pastedData.shift() as string;\n        nextActiveInput += 1;\n      }\n    }\n\n    setActiveInput(nextActiveInput);\n    focusInput(nextActiveInput);\n    handleOtpChange(otpVal);\n  };\n\n  const handleOnChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const { value: val } = e.target;\n    if (isInputValueValid(val) && isNormalFlow) {\n      changeCodeAtFocus(val);\n    }\n  };\n\n  // Handle cases of backspace, delete, left arrow, right arrow, space\n  const handleOnKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === 'Backspace') {\n      e.preventDefault();\n      if (e.currentTarget.value === '' && activeInput > 0) {\n        changeCodeAtIndex([], activeInput - 1);\n        focusPrevInput();\n      } else {\n        changeCodeAtFocus('');\n      }\n    } else if (e.key === 'Delete') {\n      e.preventDefault();\n      changeCodeAtFocus('');\n    } else if (e.key === 'ArrowLeft') {\n      e.preventDefault();\n      focusPrevInput();\n    } else if (e.key === 'ArrowRight') {\n      e.preventDefault();\n      focusNextInput();\n    } else if (e.key === ' ' || e.key === 'Spacebar' || e.key === 'Space') {\n      e.preventDefault();\n    } else if (e.key === 'Enter') {\n      onEnter?.();\n    } else {\n      e.stopPropagation();\n      const isDigit = Number(e.key);\n      if (!Number.isNaN(isDigit) && isDigit >= 0 && isDigit <= 9) {\n        changeCodeAtIndex([e.key], activeInput);\n        focusNextInput();\n      }\n    }\n  };\n\n  for (let i = 0; i < numInputs; i += 1) {\n    inputs.push(\n      <SingleOtpInput\n        key={i}\n        focus={activeInput === i}\n        value={otp && otp[i]}\n        onChange={handleOnChange}\n        onKeyDown={handleOnKeyDown}\n        onPaste={handleOnPaste}\n        onFocus={() => {\n          setActiveInput(i);\n        }}\n        onBlur={() => setActiveInput(-1)}\n        isDisabled={isDisabled}\n        isInputPassword={isInputPassword}\n        isInputNum={isInputNum}\n        data-cy={dataCy && `${dataCy}-${i}`}\n        data-testid={dataTestId && `${dataTestId}-${i}`}\n        width={width}\n        color={color}\n        launchFrom={launchFrom}\n      />,\n    );\n  }\n\n  return inputs;\n};\n\nexport const OtpInput = ({ ...rest }: CommonOtpProps) => (\n  <OtpStyled>{RenderInputs(rest)}</OtpStyled>\n);\n"],"names":["SingleOtpInputBaseCss","css","otpTypography","otpXLarge","SinleOtpInputStyled","styled","input","props","width","color","launchFrom","RenderInput","isDisabled","isInputNum","isInputPassword","value","focus","rest","inputRef","useRef","useEffect","current","getType","jsx","SingleOtpInput","OtpBaseCss","OtpStyled","div","RenderInputs","numInputs","dataCy","dataTestId","onChange","onEnter","activeInput","setActiveInput","useState","inputs","getOtpValue","toString","split","length","otp","isNormalFlow","handleOtpChange","otpArr","otpValue","join","Object","values","Array","fill","map","_","i","isInputValueValid","val","Number","isNaN","parseInt","trim","focusInput","updateInput","Math","max","min","focusNextInput","focusPrevInput","changeCodeAtFocus","otpVal","otpTemp","changeCodeAtIndex","index","handleOnPaste","e","preventDefault","nextActiveInput","pastedData","clipboardData","getData","slice","pos","shift","handleOnChange","target","handleOnKeyDown","key","currentTarget","stopPropagation","isDigit","push","`RenderInputs-SingleOtpInput-${i}`","OtpInput"],"mappings":"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"}